// BugReplayEval:
{
	"id": "",
	"project_name": "",
	"project_url": "",
	"bugsinpy_id": "",
	"commit_id": "",
	"file_path": "",
	"is_single_hunk": "", // True or False
	"is_single_line": "", // True or False
	"buggy_line_location": "",
  	"diff": "",
	"before": "",
	"after": "",
	"in_function": "", // True or False
	"signature": "",
	"function_before": "",
	"function_after": "",
	"function_name": "",
	"file_before": "",
	"file_after": "",
	"test": [""],
	"is_standalone": "", // True or False
	"level": "", // self-contained, slib_runnable, plib_runnable, class_runnable, file_runnable, project_runnable
	"dependency": {
		"in_class":[], // location
		"in_file":[],
		"cross_file":[]
	},
    "file_history": "", // file-level history
	"commit_message": "",
	"commit_author": "",
	"commit_parent": "",
	"commit_date": "",
}





// CoderEval:
{
  "_id": "62e60f43d76274f8a4026e28",
  "all_context": "{ \"import\" : \"time datetime pytz datetime \", \"file\" : \"\", \"class\" : \"\" }",
  "code": "def hydrate_time(nanoseconds, tz=None):\n    \"\"\" Hydrator for `Time` and `LocalTime` values.\n\n    :param nanoseconds:\n    :param tz:\n    :return: Time\n    \"\"\"\n    from pytz import FixedOffset\n    seconds, nanoseconds = map(int, divmod(nanoseconds, 1000000000))\n    minutes, seconds = map(int, divmod(seconds, 60))\n    hours, minutes = map(int, divmod(minutes, 60))\n    t = Time(hours, minutes, seconds, nanoseconds)\n    if tz is None:\n        return t\n    tz_offset_minutes, tz_offset_seconds = divmod(tz, 60)\n    zone = FixedOffset(tz_offset_minutes)\n    return zone.localize(t)\n",
  "dependency": "",
  "docstring": "Hydrator for `Time` and `LocalTime` values.\n\n:param nanoseconds:\n:param tz:\n:return: Time",
  "end_lineno": "82",
  "file_content": "# Copyright (c) \"Neo4j\"\n# Neo4j Sweden AB [https://neo4j.com]\n#\n# This file is part of Neo4j.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\nfrom datetime import (\n    datetime,\n    time,\n    timedelta,\n)\n\nfrom ....time import (\n    Date,\n    DateTime,\n    Duration,\n    Time,\n)\nfrom ...packstream import Structure\n\n\ndef get_date_unix_epoch():\n    return Date(1970, 1, 1)\n\n\ndef get_date_unix_epoch_ordinal():\n    return get_date_unix_epoch().to_ordinal()\n\n\ndef get_datetime_unix_epoch_utc():\n    from pytz import utc\n    return DateTime(1970, 1, 1, 0, 0, 0, utc)\n\n\ndef hydrate_date(days):\n    \"\"\" Hydrator for `Date` values.\n\n    :param days:\n    :return: Date\n    \"\"\"\n    return Date.from_ordinal(get_date_unix_epoch_ordinal() + days)\n\n\ndef dehydrate_date(value):\n    \"\"\" Dehydrator for `date` values.\n\n    :param value:\n    :type value: Date\n    :return:\n    \"\"\"\n    return Structure(b\"D\", value.toordinal() - get_date_unix_epoch().toordinal())\n\n\ndef hydrate_time(nanoseconds, tz=None):\n    \"\"\" Hydrator for `Time` and `LocalTime` values.\n\n    :param nanoseconds:\n    :param tz:\n    :return: Time\n    \"\"\"\n    from pytz import FixedOffset\n    seconds, nanoseconds = map(int, divmod(nanoseconds, 1000000000))\n    minutes, seconds = map(int, divmod(seconds, 60))\n    hours, minutes = map(int, divmod(minutes, 60))\n    t = Time(hours, minutes, seconds, nanoseconds)\n    if tz is None:\n        return t\n    tz_offset_minutes, tz_offset_seconds = divmod(tz, 60)\n    zone = FixedOffset(tz_offset_minutes)\n    return zone.localize(t)\n\n\ndef dehydrate_time(value):\n    \"\"\" Dehydrator for `time` values.\n\n    :param value:\n    :type value: Time\n    :return:\n    \"\"\"\n    if isinstance(value, Time):\n        nanoseconds = value.ticks\n    elif isinstance(value, time):\n        nanoseconds = (3600000000000 * value.hour + 60000000000 * value.minute +\n                       1000000000 * value.second + 1000 * value.microsecond)\n    else:\n        raise TypeError(\"Value must be a neo4j.time.Time or a datetime.time\")\n    if value.tzinfo:\n        return Structure(b\"T\", nanoseconds,\n                         int(value.tzinfo.utcoffset(value).total_seconds()))\n    else:\n        return Structure(b\"t\", nanoseconds)\n\n\ndef hydrate_datetime(seconds, nanoseconds, tz=None):\n    \"\"\" Hydrator for `DateTime` and `LocalDateTime` values.\n\n    :param seconds:\n    :param nanoseconds:\n    :param tz:\n    :return: datetime\n    \"\"\"\n    from pytz import (\n        FixedOffset,\n        timezone,\n    )\n    minutes, seconds = map(int, divmod(seconds, 60))\n    hours, minutes = map(int, divmod(minutes, 60))\n    days, hours = map(int, divmod(hours, 24))\n    t = DateTime.combine(\n        Date.from_ordinal(get_date_unix_epoch_ordinal() + days),\n        Time(hours, minutes, seconds, nanoseconds)\n    )\n    if tz is None:\n        return t\n    if isinstance(tz, int):\n        tz_offset_minutes, tz_offset_seconds = divmod(tz, 60)\n        zone = FixedOffset(tz_offset_minutes)\n    else:\n        zone = timezone(tz)\n    return zone.localize(t)\n\n\ndef dehydrate_datetime(value):\n    \"\"\" Dehydrator for `datetime` values.\n\n    :param value:\n    :type value: datetime or DateTime\n    :return:\n    \"\"\"\n\n    def seconds_and_nanoseconds(dt):\n        if isinstance(dt, datetime):\n            dt = DateTime.from_native(dt)\n        zone_epoch = DateTime(1970, 1, 1, tzinfo=dt.tzinfo)\n        dt_clock_time = dt.to_clock_time()\n        zone_epoch_clock_time = zone_epoch.to_clock_time()\n        t = dt_clock_time - zone_epoch_clock_time\n        return t.seconds, t.nanoseconds\n\n    tz = value.tzinfo\n    if tz is None:\n        # without time zone\n        from pytz import utc\n        value = utc.localize(value)\n        seconds, nanoseconds = seconds_and_nanoseconds(value)\n        return Structure(b\"d\", seconds, nanoseconds)\n    elif hasattr(tz, \"zone\") and tz.zone and isinstance(tz.zone, str):\n        # with named pytz time zone\n        seconds, nanoseconds = seconds_and_nanoseconds(value)\n        return Structure(b\"f\", seconds, nanoseconds, tz.zone)\n    elif hasattr(tz, \"key\") and tz.key and isinstance(tz.key, str):\n        # with named zoneinfo (Python 3.9+) time zone\n        seconds, nanoseconds = seconds_and_nanoseconds(value)\n        return Structure(b\"f\", seconds, nanoseconds, tz.key)\n    else:\n        # with time offset\n        seconds, nanoseconds = seconds_and_nanoseconds(value)\n        return Structure(b\"F\", seconds, nanoseconds,\n                         int(tz.utcoffset(value).total_seconds()))\n\n\ndef hydrate_duration(months, days, seconds, nanoseconds):\n    \"\"\" Hydrator for `Duration` values.\n\n    :param months:\n    :param days:\n    :param seconds:\n    :param nanoseconds:\n    :return: `duration` namedtuple\n    \"\"\"\n    return Duration(months=months, days=days, seconds=seconds, nanoseconds=nanoseconds)\n\n\ndef dehydrate_duration(value):\n    \"\"\" Dehydrator for `duration` values.\n\n    :param value:\n    :type value: Duration\n    :return:\n    \"\"\"\n    return Structure(b\"E\", value.months, value.days, value.seconds, value.nanoseconds)\n\n\ndef dehydrate_timedelta(value):\n    \"\"\" Dehydrator for `timedelta` values.\n\n    :param value:\n    :type value: timedelta\n    :return:\n    \"\"\"\n    months = 0\n    days = value.days\n    seconds = value.seconds\n    nanoseconds = 1000 * value.microseconds\n    return Structure(b\"E\", months, days, seconds, nanoseconds)\n",
  "file_path": "neo4j/_codec/hydration/v1/temporal.py",
  "human_label": "Convert nanoseconds to a time in fixed format.",
  "level": "plib_runnable",
  "lineno": "66",
  "name": "hydrate_time",
  "oracle_context": "{ \"apis\" : \"['divmod', 'map', 'localize']\", \"classes\" : \"['FixedOffset', 'Time']\", \"vars\" : \"[]\" }",
  "package": "temporal",
  "project": "neo4j/neo4j-python-driver",
  "test_lineno": "",
  "test_name": ""
}

// DevEval:
{
   "namespace":"exodus_bundler.launchers.construct_bash_launcher",
   "type":"function",
   "project_path":"System/exodus-bundler",
   "completion_path":"System/exodus-bundler/src/exodus_bundler/launchers.py",
   "completion_position":[
      93,
      98
   ],
   "dependency":{
      "in_class":[

      ],
      "in_file":[

      ],
      "cross_file":[
         "exodus_bundler.templating.render_template_file"
      ]
   },
   "signature":"def construct_bash_launcher(linker, library_path, executable, full_linker=True):",
   "indent":4,
   "tests":[
      "tests/test_launchers.py::test_construct_bash_launcher"
   ],
   "requirement":{
      "What":"Construct a bash launcher script based on the given parameters. It creates a bash launcher script by rendering a template file with the provided parameters.",
      "IO Params":":param linker: String. The path to the linker executable.\n:param library_path: String. The path to the library.\n:param executable: String. The path to the executable.\n:param full_linker: Bool. Whether to use the full linker path. Defaults to True.\n:return: String. The constructed bash launcher script."
   },
   "imports":[

   ]
}

// TSSB3M:
{
   "project":"pyrollbar",
   "commit_sha":"6291e62f5ae21bc1dd9ca0755224a54b3b7d7dee",
   "parent_sha":"204979d608bf455e8f9fba9cc841ccabfcf6eea1",
   "file_path":"rollbar/contrib/bottle/__init__.py",
   "project_url":"https://github.com/uploadcare/pyrollbar",
   "likely_bug":true,
   "comodified":false,
   "in_function":true,
   "diff":"@@ -12,7 +12,7 @@ class RollbarBottleReporter(object):\n         if 'exception_level_filters' in kwargs:\n             kwargs['exception_level_filters'].append((bottle.BaseResponse, 'ignored'))\n         else:\n-            kwargs['exception_level_filters'] = [(bottle.baseResponse, 'ignored')]\n+            kwargs['exception_level_filters'] = [(bottle.BaseResponse, 'ignored')]\n \n         rollbar.init(*args, **kwargs)\n \n",
   "before":"kwargs [ 'exception_level_filters' ] = [ ( bottle . baseResponse , 'ignored' ) ]",
   "after":"kwargs [ 'exception_level_filters' ] = [ ( bottle . BaseResponse , 'ignored' ) ]",
   "sstub_pattern":"CHANGE_ATTRIBUTE_USED",
   "edit_script":"[[\"Update\", [\"identifier:baseResponse\", 3, 58, 3, 70], \"BaseResponse\"]]"
}

// PIE:
{
   "user_id":"u732870425",
   "problem_id":"p03371",
   "language":"python",
   "submission_id_v0":"s504204235",
   "submission_id_v1":"s825991485",
   "cpu_time_v0":104,
   "cpu_time_v1":26,
   "memory_v0":9176,
   "memory_v1":9180,
   "status_v0":"Accepted",
   "status_v1":"Accepted",
   "improvement_frac":75.0,
   "input":"A, B, C, X, Y = list(map(int, input().split()))\n\n\n\nans = 5000 * 2 * 10 ** 5\n\nfor i in range(10 ** 5 + 1):\n\n    s = i * 2 * C + max(0, X - i) * A + max(0, Y - i) * B\n\n    ans = min(ans, s)\n\n\n\nprint(ans)",
   "target":"A, B, C, X, Y = list(map(int, input().split()))\n\n\n\nif X > Y:\n\n    v = A\n\nelse:\n\n    v = B\n\n\n\nans = min(A*X+B*Y, C*max(X, Y)*2, C*min(X,Y)*2+(max(X,Y)-min(X,Y))*v)\n\n\n\nprint(ans)",
   "code_v0_loc":8,
   "code_v1_loc":10,
   "code_v0_num_chars":195,
   "code_v1_num_chars":170,
   "code_v0_no_empty_lines":"A, B, C, X, Y = list(map(int, input().split()))\nans = 5000 * 2 * 10**5\nfor i in range(10**5 + 1):\n    s = i * 2 * C + max(0, X - i) * A + max(0, Y - i) * B\n    ans = min(ans, s)\nprint(ans)\n",
   "code_v1_no_empty_lines":"A, B, C, X, Y = list(map(int, input().split()))\nif X > Y:\n    v = A\nelse:\n    v = B\nans = min(\n    A * X + B * Y, C * max(X, Y) * 2, C * min(X, Y) * 2 + (max(X, Y) - min(X, Y)) * v\n)\nprint(ans)\n",
   "code_same":false,
   "relative_loc_diff_percent":20.0,
   "diff":[
      "-ans = 5000 * 2 * 10**5",
      "-for i in range(10**5 + 1):",
      "-    s = i * 2 * C + max(0, X - i) * A + max(0, Y - i) * B",
      "-    ans = min(ans, s)",
      "+if X > Y:",
      "+    v = A",
      "+else:",
      "+    v = B",
      "+ans = min(",
      "+    A * X + B * Y, C * max(X, Y) * 2, C * min(X, Y) * 2 + (max(X, Y) - min(X, Y)) * v",
      "+)"
   ],
   "diff_only_import_comment":false,
   "measured_runtime_v0":1.5409223008,
   "measured_runtime_v1":0.2907806964,
   "runtime_lift":5.2992592696,
   "key":[
      "s504204235",
      "s825991485"
   ]
}


// CLM
{
  "config": "PLBART_SEQFORM_MASKFORM_NOCOMMENT",
  "data": {
    "HAS_CLOSE_ELEMENTS": {
      "loc": "9-10",
      "input": "<s> public static boolean has_close_elements(List<Double> numbers, double threshold){ for (int i = 0; i < numbers.size(); i += 1){ for (int j = i + 1; j < numbers.size(); j += 1){ <mask> if (distance < threshold) return true; } } return false; } </s> java",
      "function range": "6,5-15,5"
    },
    "SEPARATE_PAREN_GROUPS": {
      "loc": "16-17",
      "input": "<s> public static List<String> separate_paren_groups(String paren_string) { List<String> result = new ArrayList<String>(); String current_string = \"\"; int current_depth = 0; for (char c : paren_string.toCharArray()) { if (c == '('){ current_depth += 1; current_string += String.valueOf(c); <mask> current_depth -= 1; current_string += String.valueOf(c); if (current_depth == 0){ result.add(current_string); current_string = \"\"; } } } return result; } </s> java",
      "function range": "7,5-27,5"
    },
  }
}