{
  "id": "98",
  "blame_commit": {
    "commit": {
      "commit_id": "519e4d2e7f05b10eecf6e51c92a3f8cf8c619c67",
      "commit_message": "MATH-689\nMoved \"equals...\" and \"compareTo\" methods from \"MathUtils\" over to a new\n\"Precision\" class.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1181282 13f79535-47bb-0310-9956-ffa450edef68",
      "commit_author": "Gilles Sadowski",
      "commit_date": "2011-10-10 22:35:54",
      "commit_parent": "015f45e2fdd2e0281e0bb8ca6a17a828f6c4d15f"
    },
    "function": {
      "function_name": "dropPhase1Objective",
      "function_code_before": "protected void dropPhase1Objective() {\n    if (getNumObjectiveFunctions() == 1) {\n        return;\n    }\n\n    List<Integer> columnsToDrop = new ArrayList<Integer>();\n    columnsToDrop.add(0);\n\n    // positive cost non-artificial variables\n    for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n        final double entry = tableau.getEntry(0, i);\n        if (MathUtils.compareTo(entry, 0d, maxUlps) > 0) {\n            columnsToDrop.add(i);\n        }\n    }\n\n    // non-basic artificial variables\n    for (int i = 0; i < getNumArtificialVariables(); i++) {\n      int col = i + getArtificialVariableOffset();\n      if (getBasicRow(col) == null) {\n        columnsToDrop.add(col);\n      }\n    }\n\n    double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];\n    for (int i = 1; i < getHeight(); i++) {\n      int col = 0;\n      for (int j = 0; j < getWidth(); j++) {\n        if (!columnsToDrop.contains(j)) {\n          matrix[i - 1][col++] = tableau.getEntry(i, j);\n        }\n      }\n    }\n\n    for (int i = columnsToDrop.size() - 1; i >= 0; i--) {\n      columnLabels.remove((int) columnsToDrop.get(i));\n    }\n\n    this.tableau = new Array2DRowRealMatrix(matrix);\n    this.numArtificialVariables = 0;\n}",
      "function_code_after": "protected void dropPhase1Objective() {\n    if (getNumObjectiveFunctions() == 1) {\n        return;\n    }\n\n    List<Integer> columnsToDrop = new ArrayList<Integer>();\n    columnsToDrop.add(0);\n\n    // positive cost non-artificial variables\n    for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n        final double entry = tableau.getEntry(0, i);\n        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n            columnsToDrop.add(i);\n        }\n    }\n\n    // non-basic artificial variables\n    for (int i = 0; i < getNumArtificialVariables(); i++) {\n      int col = i + getArtificialVariableOffset();\n      if (getBasicRow(col) == null) {\n        columnsToDrop.add(col);\n      }\n    }\n\n    double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];\n    for (int i = 1; i < getHeight(); i++) {\n      int col = 0;\n      for (int j = 0; j < getWidth(); j++) {\n        if (!columnsToDrop.contains(j)) {\n          matrix[i - 1][col++] = tableau.getEntry(i, j);\n        }\n      }\n    }\n\n    for (int i = columnsToDrop.size() - 1; i >= 0; i--) {\n      columnLabels.remove((int) columnsToDrop.get(i));\n    }\n\n    this.tableau = new Array2DRowRealMatrix(matrix);\n    this.numArtificialVariables = 0;\n}",
      "function_before_start_line": 327,
      "function_before_end_line": 367,
      "function_after_start_line": 327,
      "function_after_end_line": 367,
      "function_before_token_count": 294,
      "function_after_token_count": 294,
      "functions_name_modified_file": [
        "normalize",
        "getData",
        "getSlackVariableOffset",
        "normalizeConstraints",
        "getHeight",
        "getArtificialVariableOffset",
        "initializeColumnLabels",
        "copyArray",
        "hashCode",
        "getNumArtificialVariables",
        "createTableau",
        "getConstraintTypeCounts",
        "getOriginalNumDecisionVariables",
        "getNumSlackVariables",
        "getInvertedCoefficientSum",
        "setEntry",
        "subtractRow",
        "getRhsOffset",
        "getNumObjectiveFunctions",
        "getEntry",
        "dropPhase1Objective",
        "SimplexTableau",
        "divideRow",
        "getBasicRow",
        "isOptimal",
        "equals",
        "writeObject",
        "getNumDecisionVariables",
        "readObject",
        "getWidth",
        "getSolution"
      ],
      "functions_name_all_files": [
        "getDimension",
        "testIndicatorInt",
        "checkFinite",
        "testIndicatorDouble",
        "getVarianceImpl",
        "setMaxImpl",
        "sumSquareDev",
        "getMeanImpl",
        "testAggregateSpecialValues",
        "getReal",
        "sqrt1z",
        "testMulAndCheck",
        "testArrayEqualsIncludingNaN",
        "testPercentileSetter",
        "dropPhase1Objective",
        "testConstant",
        "getN",
        "createDescriptiveStatistics",
        "addStepHandler",
        "testSignInt",
        "binomialCoefficientDouble",
        "testMulAndCheckLong",
        "distanceInf",
        "getHeight",
        "testMath434PivotRowSelection",
        "testLInfDistanceInt",
        "test20090720",
        "testConcurrentModification",
        "testPreconditions",
        "getDistributionQuartiles",
        "assertSame",
        "testInfeasibleSolution",
        "testEpsilon",
        "binomialCoefficient",
        "atan",
        "checkEmpty",
        "testJacobiOrthogonality",
        "testDegeneracy",
        "getMin",
        "log",
        "testSignDouble",
        "sinh",
        "getSumsq",
        "testLargeModel",
        "cos",
        "setGeoMeanImpl",
        "binomialCoefficientLog",
        "testCopyOfInt",
        "getArtificialVariableOffset",
        "Precision",
        "doSolve",
        "testMath288",
        "test0Choose0",
        "normalizeArray",
        "assertEquals",
        "getStepHandlers",
        "sin",
        "sanityChecks",
        "testBinomialCoefficient",
        "testProduct",
        "testSignShort",
        "roundUnscaled",
        "storeStep",
        "testDensity",
        "testCopyOfInt2",
        "hashCode",
        "testRemoval",
        "createTableau",
        "acceptStep",
        "Complex",
        "handleStep",
        "testBinomialCoefficientLarge",
        "testNormalizeArray",
        "makeCumulativeTestPoints",
        "gcd",
        "assertRelativelyEquals",
        "makeDistribution",
        "testSortInPlace",
        "testAggregateDegenerate",
        "testPutAndGet",
        "divideRow",
        "getGeoMeanImpl",
        "testCosh",
        "getBasicRow",
        "testCopyOfDouble",
        "MathUtils",
        "reset",
        "isMonotone",
        "testFirstHermitePolynomials",
        "testIsMonotoneComparable",
        "copy",
        "clear",
        "testFloatEqualsWithAllowedUlps",
        "AbstractIntegrator",
        "testSignByte",
        "getEvaluations",
        "testFirstLaguerrePolynomials",
        "testPutKeysWithCollisions",
        "testShift",
        "testPutKeysWithCollision2",
        "getOriginalNumDecisionVariables",
        "setUp",
        "testArrayIndexConditions",
        "clearStepHandlers",
        "testShuffledStatistics",
        "subtractRow",
        "testMath290LEQ",
        "checkremoval",
        "checkIntTransform",
        "testHash",
        "testToString",
        "multiply",
        "checkAllTransforms",
        "indicator",
        "testNormalize2",
        "testAddAndCheckLongFailure",
        "safeNorm",
        "clearEventHandlers",
        "testLegendreDifferentials",
        "testSubAndCheckLong",
        "testMomonts",
        "testNormalize1",
        "MultivariateSummaryStatistics",
        "testEqualsIncludingNaNWithAllowedUlps",
        "testSortInPlaceFaliures",
        "TestUtils",
        "normalizeAngle",
        "StatisticalSummaryValues",
        "testLcm",
        "testRemoveFromEmpty",
        "testRemove",
        "testSumLog",
        "testGetAbsent",
        "getMean",
        "makeDensityTestValues",
        "testCopy",
        "getImaginary",
        "getRhsOffset",
        "testEqualsIncludingNaNWithAllowedDelta",
        "testNormalizeAngle",
        "testLaguerreOrthogonality",
        "resetEvaluations",
        "checkInverseDoubleTransform",
        "test3Points",
        "getWidth",
        "testPercentile",
        "reduce",
        "normalize",
        "add",
        "getName",
        "testRoundFloat",
        "copyArray",
        "testFactorial",
        "testMin",
        "testCopyOfDouble3",
        "testCheckFinite",
        "testPutAndGetWith0ExpectedSize",
        "testCopyOfDouble2",
        "testSubAndCheckErrorMessage",
        "testEqualsWithAllowedDelta",
        "testMath475",
        "setSumImpl",
        "testFirstLegendrePolynomials",
        "setEntry",
        "testChebyshevOrthogonality",
        "testEqualsWithAllowedUlps",
        "testMath434PivotRowSelection2",
        "equationFromString",
        "testCoshNaN",
        "testLog",
        "setMinImpl",
        "testCompareToEpsilon",
        "isOptimal",
        "factorialDouble",
        "testCumulativeProbabilityExtremes",
        "reciprocal",
        "testReduceComparedWithNormalizeAngle",
        "getArgument",
        "testLinearCombination1",
        "factorial",
        "setQuantile",
        "testPutAbsentOnExisting",
        "testChebyshevBounds",
        "testModelWithNoArtificialVars",
        "testIndicatorByte",
        "testMath272",
        "makeCumulativeTestValues",
        "checkNotNull",
        "getStandardDeviation",
        "setSumLogImpl",
        "getSumsqImpl",
        "testInverseCumulativeProbabilityExtremes",
        "getMaximalOrder",
        "testMath290GEQ",
        "testMinimization",
        "testFirstChebyshevPolynomials",
        "getNumObjectiveFunctions",
        "testIndicatorLong",
        "getMaxImpl",
        "generateAbsent",
        "checkOrder",
        "writeObject",
        "testGcd",
        "testL1DistanceDouble",
        "getData",
        "testPow",
        "testSignFloat",
        "valueOf",
        "generate",
        "assertMatrixEquals",
        "testEqualsIncludingNaN",
        "isInfinite",
        "getEventHandlers",
        "testSolutionWithNegativeDecisionVariable",
        "guessX",
        "setMaxEvaluations",
        "testGetFromEmpty",
        "sign",
        "testAddAndCheckLong",
        "getNumSlackVariables",
        "setImpl",
        "incrementAll",
        "getInvertedCoefficientSum",
        "linearCombination",
        "testReduce",
        "SummaryStatistics",
        "testCheckOrder",
        "getPivotColumn",
        "getSumImpl",
        "negate",
        "testTrivialModel",
        "integrate",
        "setSumsqImpl",
        "solvePhase1",
        "testJacobiEvaluationAt1",
        "testHighDegreeLegendre",
        "testL2DistanceInt",
        "checkSerializedEquality",
        "testWindowSize",
        "testPermutedArrayHash",
        "normalizeConstraints",
        "copyOf",
        "testAggregationConsistency",
        "BrentOptimizer",
        "testIndicatorShort",
        "generatePartition",
        "createFromJavaMap",
        "testIterator",
        "divide",
        "testGcdConsistency",
        "testFactorialFail",
        "testSubAndCheckLongFailure",
        "abs",
        "testMeanAccessors",
        "testNoIntInverse",
        "checkDimension",
        "testMath293",
        "testGetValues",
        "testLegendreOrthogonality",
        "testGeometricMean",
        "testDifferenceStats",
        "setVarianceImpl",
        "distance",
        "getSumLogImpl",
        "getSummary",
        "getSlackVariableOffset",
        "testMath286",
        "updateCounts",
        "getSumOfLogs",
        "tan",
        "assertVectorEquals",
        "testN0andN1Conditions",
        "setMeanImpl",
        "testLinearCombinationInfinite",
        "testStats",
        "doIteration",
        "testRemoveAbsent",
        "tanh",
        "brent",
        "testRestrictVariablesToNonNegative",
        "testMulAndCheckLongFailure",
        "StepNormalizer",
        "getSumLog",
        "testL2DistanceDouble",
        "getSum",
        "pow",
        "getCurrentStepStart",
        "subtract",
        "testSimplexSolver",
        "checkDoubleTransform",
        "testSinhNaN",
        "getField",
        "solve",
        "getPivotRow",
        "getSolution",
        "testSignLong",
        "mulAndCheck",
        "testLInfDistanceDouble",
        "readResolve",
        "testMath434NegativeVariable",
        "sortInPlace",
        "testSortInPlaceExample",
        "addAndCheck",
        "testLaguerreDifferentials",
        "testArrayEquals",
        "computeDerivatives",
        "asin",
        "getSecondMoment",
        "testCheckNotNull1",
        "createComplex",
        "test8Points",
        "testGcdLong",
        "doOptimize",
        "SimplexSolver",
        "getCovariance",
        "testRoundDouble",
        "getMax",
        "testAggregate",
        "testCompareToMaxUlps",
        "generateSample",
        "testLinearCombination2",
        "exp",
        "hash",
        "acos",
        "toString",
        "getCurrentSignedStepsize",
        "testChebyshevDifferentials",
        "getNumArtificialVariables",
        "testLcmLong",
        "compareTo",
        "testUnboundedSolution",
        "getMinImpl",
        "lcm",
        "getConstraintTypeCounts",
        "checkBinomial",
        "testCheckNotNull2",
        "testSetterInjection",
        "distance1",
        "checkNullPolynomial",
        "testIndicatorFloat",
        "addValue",
        "assertPutAndGet",
        "getNumDecisionVariables",
        "readObject",
        "setStateInitialized",
        "testIsMonotone",
        "factorialLog",
        "testJacobiLegendre",
        "testL1DistanceInt",
        "doNormalizedStep",
        "testRemove2",
        "BracketingNthOrderBrentSolver",
        "testArrayHash",
        "testMean",
        "testSinh",
        "serializeAndRecover",
        "equals",
        "testAggregation",
        "testSubAndCheck",
        "testMath434UnfeasibleSolution",
        "testBinomialCoefficientFail",
        "append",
        "cosh",
        "isNaN",
        "equalsIncludingNaN",
        "sqrt",
        "testHermiteOrthogonality",
        "getVariance",
        "SimplexTableau",
        "test4Points",
        "subAndCheck",
        "testSingleVariableAndConstraint",
        "testCopyOfInt3",
        "nthRoot",
        "checkOrthogonality",
        "testMax",
        "isNextInStep",
        "getResults",
        "getSumSq",
        "testContainsKey",
        "BrentSolver",
        "initializeColumnLabels",
        "conjugate",
        "assertContains",
        "addEventHandler",
        "round",
        "setEquations",
        "testVariance",
        "testHermiteDifferentials",
        "getMaxEvaluations",
        "checkPolynomial",
        "testCumulativeProbability2",
        "testAddAndCheck",
        "eliminateZeroMassPoints",
        "testSumSq",
        "assertChiSquareAccept",
        "evaluate",
        "getEntry",
        "getGeometricMean",
        "testPutAndGetWithExpectedSize",
        "testPutOnExisting"
      ],
      "functions_name_co_evolved_modified_file": [
        "getBasicRow",
        "isOptimal",
        "dropPhase1Objective"
      ],
      "functions_name_co_evolved_all_files": [
        "testFloatEqualsWithAllowedUlps",
        "testLInfDistanceDouble",
        "Precision",
        "testMath434PivotRowSelection",
        "testL2DistanceInt",
        "testEqualsIncludingNaN",
        "assertContains",
        "testPutAbsentOnExisting",
        "compareTo",
        "testNormalize1",
        "testPutKeysWithCollisions",
        "acceptStep",
        "testEqualsIncludingNaNWithAllowedUlps",
        "testPutKeysWithCollision2",
        "equalsIncludingNaN",
        "doSolve",
        "handleStep",
        "brent",
        "testEqualsWithAllowedDelta",
        "assertEquals",
        "testMath475",
        "testCopy",
        "testL2DistanceDouble",
        "testEqualsWithAllowedUlps",
        "testMath434PivotRowSelection2",
        "getPivotColumn",
        "testEqualsIncludingNaNWithAllowedDelta",
        "doOptimize",
        "checkremoval",
        "dropPhase1Objective",
        "assertPutAndGet",
        "getBasicRow",
        "testConstant",
        "testCompareToEpsilon",
        "isOptimal",
        "equals",
        "testAggregation",
        "checkDoubleTransform",
        "testPutOnExisting",
        "solvePhase1",
        "checkInverseDoubleTransform",
        "testJacobiEvaluationAt1",
        "testCompareToMaxUlps",
        "testL1DistanceDouble",
        "getPivotRow",
        "testDensity"
      ]
    },
    "file": {
      "file_name": "SimplexTableau.java",
      "file_nloc": 324,
      "file_complexity": 90,
      "file_token_count": 2499,
      "file_before": "",
      "file_after": "",
      "file_patch": "@@ -33,7 +33,7 @@ import org.apache.commons.math.linear.RealMatrix;\n import org.apache.commons.math.linear.RealVector;\n import org.apache.commons.math.optimization.GoalType;\n import org.apache.commons.math.optimization.RealPointValuePair;\n-import org.apache.commons.math.util.MathUtils;\n+import org.apache.commons.math.util.Precision;\n \n /**\n  * A tableau for use in the Simplex method.\n@@ -311,9 +311,9 @@ class SimplexTableau implements Serializable {\n         Integer row = null;\n         for (int i = 0; i < getHeight(); i++) {\n             final double entry = getEntry(i, col);\n-            if (MathUtils.equals(entry, 1d, maxUlps) && (row == null)) {\n+            if (Precision.equals(entry, 1d, maxUlps) && (row == null)) {\n                 row = i;\n-            } else if (!MathUtils.equals(entry, 0d, maxUlps)) {\n+            } else if (!Precision.equals(entry, 0d, maxUlps)) {\n                 return null;\n             }\n         }\n@@ -335,7 +335,7 @@ class SimplexTableau implements Serializable {\n         // positive cost non-artificial variables\n         for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n             final double entry = tableau.getEntry(0, i);\n-            if (MathUtils.compareTo(entry, 0d, maxUlps) > 0) {\n+            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n                 columnsToDrop.add(i);\n             }\n         }\n@@ -381,7 +381,7 @@ class SimplexTableau implements Serializable {\n     boolean isOptimal() {\n         for (int i = getNumObjectiveFunctions(); i < getWidth() - 1; i++) {\n             final double entry = tableau.getEntry(0, i);\n-            if (MathUtils.compareTo(entry, 0d, epsilon) < 0) {\n+            if (Precision.compareTo(entry, 0d, epsilon) < 0) {\n                 return false;\n             }\n         }\n",
      "files_name_in_blame_commit": [
        "BrentOptimizer.java",
        "PrecisionTest.java",
        "KalmanFilterTest.java",
        "SimplexSolver.java",
        "AbstractIntegrator.java",
        "StatUtilsTest.java",
        "Precision.java",
        "SimplexSolverTest.java",
        "SummaryStatistics.java",
        "AbstractStorelessUnivariateStatistic.java",
        "TestUtils.java",
        "StatisticalSummaryValues.java",
        "StepNormalizer.java",
        "BrentSolver.java",
        "MathUtilsTest.java",
        "BracketingNthOrderBrentSolver.java",
        "OpenIntToDoubleHashMapTest.java",
        "MathUtils.java",
        "MultivariateSummaryStatistics.java",
        "PolynomialsUtilsTest.java",
        "Complex.java",
        "AggregateSummaryStatisticsTest.java",
        "ExponentialDistributionTest.java",
        "FastHadamardTransformerTest.java",
        "SimplexTableau.java",
        "DescriptiveStatisticsTest.java"
      ]
    }
  },
  "commits_modify_file_before_fix": {
    "size": 35
  }
}