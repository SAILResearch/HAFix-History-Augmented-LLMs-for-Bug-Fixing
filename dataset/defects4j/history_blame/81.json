{
  "id": "81",
  "blame_commit": {
    "commit": {
      "commit_id": "ea1fb65e9ff8eee82c4e379dc3236d09a5ab02e1",
      "commit_message": "Refactored Attributes to be an array pair vs LinkedHashSet\n\nAlso a couple perf (cpu / garbage) tweaks",
      "commit_author": "Jonathan Hedley",
      "commit_date": "2017-07-04 13:10:31",
      "commit_parent": "ea3225714c9e6e02ab17c4a79a88b71d1ea6eae3"
    },
    "function": {
      "function_name": "getValue",
      "function_code_before": "public String getValue() {\n    return value;\n}",
      "function_code_after": "public String getValue() {\n    return val;\n}",
      "function_before_start_line": 60,
      "function_before_end_line": 62,
      "function_after_start_line": 76,
      "function_after_end_line": 78,
      "function_before_token_count": 8,
      "function_after_token_count": 8,
      "functions_name_modified_file": [
        "getValue",
        "isBooleanAttribute",
        "html",
        "getKey",
        "setKey",
        "toString",
        "shouldCollapseAttribute",
        "createFromEncoded",
        "equals",
        "Attribute",
        "setValue",
        "hashCode",
        "clone",
        "isDataAttribute"
      ],
      "functions_name_all_files": [
        "Character",
        "indexOfKey",
        "getData",
        "toString",
        "testIteratorEmpty",
        "name",
        "normalise",
        "child",
        "getDeepChild",
        "asList",
        "asStartTag",
        "canEncode",
        "siblingNodes",
        "textNodes",
        "normaliseStructure",
        "val",
        "getAttributes",
        "getElementsByIndexLessThan",
        "hasAttr",
        "nodelistChanged",
        "tag",
        "hasNext",
        "BooleanAttribute",
        "nameAttr",
        "Dataset",
        "lastElementSibling",
        "replaceChild",
        "location",
        "Attribute",
        "nextElementSibling",
        "getPublicIdentifier",
        "getValue",
        "unwrap",
        "next",
        "isDoctype",
        "tokenType",
        "appendElement",
        "charset",
        "Element",
        "getElementsContainingText",
        "doClone",
        "normaliseWhiteSpaceHandlesHighSurrogates",
        "addSiblingHtml",
        "prettyPrint",
        "remove",
        "hasAttributes",
        "reset",
        "replaceWith",
        "syntax",
        "EscapeMode",
        "padding",
        "outputSettings",
        "escapeMode",
        "OuterHtmlVisitor",
        "isBlock",
        "getElementsByAttributeValueEnding",
        "getElementsByAttributeValueMatching",
        "appendNormalisedText",
        "isForceQuirks",
        "testIteratorUpdateable",
        "html",
        "setParentNode",
        "setKey",
        "appendChild",
        "createShell",
        "prepend",
        "quirksMode",
        "getElementsByTag",
        "dataNodes",
        "outerHtmlTail",
        "after",
        "ownerDocument",
        "normalizeTag",
        "get",
        "DocumentType",
        "hasKeyIgnoreCase",
        "is",
        "hasKey",
        "appendTagName",
        "getIgnoreCase",
        "isCharacter",
        "getElementsContainingOwnText",
        "getElementsMatchingText",
        "childNodesCopy",
        "parents",
        "getElementsByAttributeValueNot",
        "getElementsByAttributeValueContaining",
        "Doctype",
        "getPubSysKey",
        "prepareEncoder",
        "attr",
        "isActuallyWhitespace",
        "checkCapacity",
        "NodeList",
        "isBaseNamedEntity",
        "put",
        "dataKey",
        "cssSelector",
        "asDoctype",
        "isEndTag",
        "empty",
        "head",
        "preserveWhitespace",
        "getSystemIdentifier",
        "data",
        "addClass",
        "siblingElements",
        "normaliseTextNodes",
        "outerHtml",
        "nextSibling",
        "equals",
        "clearAttributes",
        "resolve",
        "Comment",
        "reparentChild",
        "testIteratorHasNext",
        "outline",
        "isEOF",
        "outerHtmlHead",
        "title",
        "attributes",
        "prependElement",
        "hasClass",
        "ensureChildNodes",
        "normalize",
        "escape",
        "removeCaseSensitive",
        "add",
        "putIgnoreCase",
        "indentAmount",
        "accumulateParents",
        "hasSameValue",
        "updateMetaCharsetElement",
        "getName",
        "asComment",
        "StartTag",
        "getElementsByAttributeValue",
        "childNodeSize",
        "ThreadLocal<StringBuilder>",
        "appendWhitespaceIfBr",
        "normalizeAttributes",
        "newAttribute",
        "getElementsByIndexGreaterThan",
        "isComment",
        "getElementsByIndexEquals",
        "getKey",
        "shouldCollapseAttribute",
        "entrySet",
        "select",
        "asCharacter",
        "append",
        "finaliseTag",
        "normaliseWhitespace",
        "siblingIndex",
        "setPubSysKey",
        "getElementById",
        "hasParent",
        "tail",
        "insertChildren",
        "getElementsMatchingOwnText",
        "setBaseUri",
        "wrap",
        "appendAttributeName",
        "traverse",
        "doSetBaseUri",
        "codepointForName",
        "Token",
        "baseUri",
        "codepointsForName",
        "isNamedEntity",
        "iterator",
        "Document",
        "text",
        "getOutputSettings",
        "isDataAttribute",
        "setEmptyAttributeValue",
        "OutputSettings",
        "testIterator",
        "tagName",
        "inSorted",
        "appendNormalisedWhitespace",
        "indent",
        "nodeName",
        "hasText",
        "ownText",
        "children",
        "childNode",
        "nameForCodepoint",
        "className",
        "onContentsChanged",
        "isBlank",
        "appendText",
        "normalName",
        "getCharacterByName",
        "ensureAttributeValue",
        "before",
        "elementSiblingIndex",
        "removeIgnoreCase",
        "id",
        "firstElementSibling",
        "removeClass",
        "isWhitespace",
        "Entities",
        "hashCode",
        "unescape",
        "clone",
        "addAll",
        "isNumeric",
        "childElementsList",
        "previousSibling",
        "getElementsByAttribute",
        "isBooleanAttribute",
        "getElementsByAttributeStarting",
        "isSelfClosing",
        "EndTag",
        "getElementsByAttributeValueStarting",
        "getAllElements",
        "getByName",
        "has",
        "absUrl",
        "parentNode",
        "childNodes",
        "asEndTag",
        "resolvesRelativeUrls",
        "toggleClass",
        "prependChild",
        "indexOfKeyIgnoreCase",
        "checkNotNull",
        "classNames",
        "stringBuilder",
        "size",
        "dataset",
        "createElement",
        "root",
        "parent",
        "previousElementSibling",
        "setValue",
        "setSiblingIndex",
        "byName",
        "normaliseWhiteSpace",
        "findFirstElementByTagName",
        "removeChild",
        "appendAttributeValue",
        "EOF",
        "reindexChildren",
        "load",
        "in",
        "prependText",
        "addChildren",
        "appendEncoded",
        "removeAttr",
        "normalizeAttribute",
        "paddingInACan",
        "getElementsByClass",
        "Node",
        "createFromEncoded",
        "indexInList",
        "testIteratorRemovable",
        "join",
        "ParseSettings",
        "body",
        "ensureMetaCharsetElement",
        "isStartTag",
        "childNodesAsArray",
        "appendTo"
      ],
      "functions_name_co_evolved_modified_file": [
        "getValue",
        "isBooleanAttribute",
        "html",
        "shouldCollapseAttribute",
        "setKey",
        "createFromEncoded",
        "equals",
        "Attribute",
        "setValue",
        "hashCode",
        "clone",
        "isDataAttribute"
      ],
      "functions_name_co_evolved_all_files": [
        "getAttributeIgnoreCase",
        "indexOfKey",
        "normalize",
        "escape",
        "add",
        "putIgnoreCase",
        "removeIgnoreCase",
        "padding",
        "hashCode",
        "clone",
        "asList",
        "addAll",
        "OuterHtmlVisitor",
        "testIteratorUpdateable",
        "normalizeAttributes",
        "newAttribute",
        "isBooleanAttribute",
        "html",
        "shouldCollapseAttribute",
        "setKey",
        "paddingInACan",
        "outerHtmlTail",
        "get",
        "BooleanAttribute",
        "hasKeyIgnoreCase",
        "indexOfKeyIgnoreCase",
        "hasKey",
        "DocumentType",
        "checkNotNull",
        "getIgnoreCase",
        "size",
        "Dataset",
        "prepareEncoder",
        "attr",
        "checkCapacity",
        "ThreadLocal<CharsetEncoder>",
        "put",
        "dataset",
        "Attribute",
        "setValue",
        "iterator",
        "text",
        "byName",
        "isDataAttribute",
        "encoder",
        "getValue",
        "indent",
        "createFromEncoded",
        "equals",
        "testIteratorHasNext",
        "testIteratorRemovable",
        "charset",
        "outerHtmlHead",
        "remove"
      ]
    },
    "file": {
      "file_name": "Attribute.java",
      "file_nloc": 123,
      "file_complexity": 41,
      "file_token_count": 926,
      "file_before": "",
      "file_after": "",
      "file_patch": "@@ -8,9 +8,8 @@ import java.util.Arrays;\n import java.util.Map;\n \n /**\n- A single key + value attribute. Keys are trimmed and normalised to lower-case.\n-\n- @author Jonathan Hedley, jonathan@hedley.net */\n+ A single key + value attribute. (Only used for presentation.)\n+ */\n public class Attribute implements Map.Entry<String, String>, Cloneable  {\n     private static final String[] booleanAttributes = {\n             \"allowfullscreen\", \"async\", \"autofocus\", \"checked\", \"compact\", \"declare\", \"default\", \"defer\", \"disabled\",\n@@ -20,7 +19,8 @@ public class Attribute implements Map.Entry<String, String>, Cloneable  {\n     };\n \n     private String key;\n-    private String value;\n+    private String val;\n+    Attributes parent; // used to update the holding Attributes when the key / value is changed via this interface\n \n     /**\n      * Create a new attribute from unencoded (raw) key and value.\n@@ -29,11 +29,21 @@ public class Attribute implements Map.Entry<String, String>, Cloneable  {\n      * @see #createFromEncoded\n      */\n     public Attribute(String key, String value) {\n+        this(key, value, null);\n+    }\n+\n+    /**\n+     * Create a new attribute from unencoded (raw) key and value.\n+     * @param key attribute key; case is preserved.\n+     * @param val attribute value\n+     * @param parent the containing Attributes (this Attribute is not automatically added to said Attributes)\n+     * @see #createFromEncoded*/\n+    public Attribute(String key, String val, Attributes parent) {\n         Validate.notNull(key);\n-        Validate.notNull(value);\n         this.key = key.trim();\n         Validate.notEmpty(key); // trimming could potentially make empty, so validate here\n-        this.value = value;\n+        this.val = val;\n+        this.parent = parent;\n     }\n \n     /**\n@@ -50,7 +60,13 @@ public class Attribute implements Map.Entry<String, String>, Cloneable  {\n      */\n     public void setKey(String key) {\n         Validate.notEmpty(key);\n-        this.key = key.trim();\n+        key = key.trim();\n+        if (parent != null) {\n+            int i = parent.indexOfKey(this.key);\n+            if (i != Attributes.NotFound)\n+                parent.keys[i] = key;\n+        }\n+        this.key = key;\n     }\n \n     /**\n@@ -58,18 +74,22 @@ public class Attribute implements Map.Entry<String, String>, Cloneable  {\n      @return the attribute value\n      */\n     public String getValue() {\n-        return value;\n+        return val;\n     }\n \n     /**\n      Set the attribute value.\n-     @param value the new attribute value; must not be null\n+     @param val the new attribute value; must not be null\n      */\n-    public String setValue(String value) {\n-        Validate.notNull(value);\n-        String old = this.value;\n-        this.value = value;\n-        return old;\n+    public String setValue(String val) {\n+        String oldVal = parent.get(this.key);\n+        if (parent != null) {\n+            int i = parent.indexOfKey(this.key);\n+            if (i != Attributes.NotFound)\n+                parent.vals[i] = val;\n+        }\n+        this.val = val;\n+        return oldVal;\n     }\n \n     /**\n@@ -86,15 +106,19 @@ public class Attribute implements Map.Entry<String, String>, Cloneable  {\n         }\n         return accum.toString();\n     }\n-    \n-    protected void html(Appendable accum, Document.OutputSettings out) throws IOException {\n+\n+    protected static void html(String key, String val, Appendable accum, Document.OutputSettings out) throws IOException {\n         accum.append(key);\n-        if (!shouldCollapseAttribute(out)) {\n+        if (!shouldCollapseAttribute(key, val, out)) {\n             accum.append(\"=\\\"\");\n-            Entities.escape(accum, value, out, true, false, false);\n+            Entities.escape(accum, Attributes.checkNotNull(val) , out, true, false, false);\n             accum.append('\"');\n         }\n     }\n+    \n+    protected void html(Appendable accum, Document.OutputSettings out) throws IOException {\n+        html(key, val, accum, out);\n+    }\n \n     /**\n      Get the string representation of this attribute, implemented as {@link #html()}.\n@@ -113,10 +137,14 @@ public class Attribute implements Map.Entry<String, String>, Cloneable  {\n      */\n     public static Attribute createFromEncoded(String unencodedKey, String encodedValue) {\n         String value = Entities.unescape(encodedValue, true);\n-        return new Attribute(unencodedKey, value);\n+        return new Attribute(unencodedKey, value, null); // parent will get set when Put\n     }\n \n     protected boolean isDataAttribute() {\n+        return isDataAttribute(key);\n+    }\n+\n+    protected static boolean isDataAttribute(String key) {\n         return key.startsWith(Attributes.dataPrefix) && key.length() > Attributes.dataPrefix.length();\n     }\n \n@@ -127,37 +155,50 @@ public class Attribute implements Map.Entry<String, String>, Cloneable  {\n      * @return  Returns whether collapsible or not\n      */\n     protected final boolean shouldCollapseAttribute(Document.OutputSettings out) {\n-        return (\"\".equals(value) || value.equalsIgnoreCase(key))\n-                && out.syntax() == Document.OutputSettings.Syntax.html\n-                && isBooleanAttribute();\n+        return shouldCollapseAttribute(key, val, out);\n     }\n \n+    protected static boolean shouldCollapseAttribute(String key, String val, Document.OutputSettings out) {\n+        // todo: optimize\n+        return (val == null || \"\".equals(val) || val.equalsIgnoreCase(key))\n+            && out.syntax() == Document.OutputSettings.Syntax.html\n+            && isBooleanAttribute(key);\n+    }\n+\n+    /**\n+     * @deprecated\n+     */\n     protected boolean isBooleanAttribute() {\n+        return Arrays.binarySearch(booleanAttributes, key) >= 0 || val == null;\n+    }\n+\n+    /**\n+     * Checks if this attribute name is defined as a boolean attribute in HTML5\n+     */\n+    protected static boolean isBooleanAttribute(final String key) {\n         return Arrays.binarySearch(booleanAttributes, key) >= 0;\n     }\n \n     @Override\n-    public boolean equals(Object o) {\n+    public boolean equals(Object o) { // note parent not considered\n         if (this == o) return true;\n-        if (!(o instanceof Attribute)) return false;\n-\n+        if (o == null || getClass() != o.getClass()) return false;\n         Attribute attribute = (Attribute) o;\n-\n         if (key != null ? !key.equals(attribute.key) : attribute.key != null) return false;\n-        return !(value != null ? !value.equals(attribute.value) : attribute.value != null);\n+        return val != null ? val.equals(attribute.val) : attribute.val == null;\n     }\n \n     @Override\n-    public int hashCode() {\n+    public int hashCode() { // note parent not considered\n         int result = key != null ? key.hashCode() : 0;\n-        result = 31 * result + (value != null ? value.hashCode() : 0);\n+        result = 31 * result + (val != null ? val.hashCode() : 0);\n         return result;\n     }\n \n     @Override\n     public Attribute clone() {\n         try {\n-            return (Attribute) super.clone(); // only fields are immutable strings key and value, so no more deep copy required\n+            return (Attribute) super.clone();\n         } catch (CloneNotSupportedException e) {\n             throw new RuntimeException(e);\n         }\n",
      "files_name_in_blame_commit": [
        "Document.java",
        "Attribute.java",
        "Attributes.java",
        "AttributesTest.java",
        "Element.java",
        "DocumentType.java",
        "Entities.java",
        "ParseSettings.java",
        "Node.java",
        "StringUtil.java",
        "BooleanAttribute.java",
        "Token.java",
        "StringUtilTest.java"
      ]
    }
  },
  "commits_modify_file_before_fix": {
    "size": 35
  }
}