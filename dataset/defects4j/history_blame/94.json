{
  "id": "94",
  "blame_commit": {
    "commit": {
      "commit_id": "13f4032d6c103bfaaabe89f2cd36dffaff5a10b6",
      "commit_message": "MATH-815\nInitial commit. Units test are yet to be added. This version also\ncontains a bug. Code contributed by Jared Becksfort, included with\nmodifications. [Cf. comments on JIRA.]\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1370782 13f79535-47bb-0310-9956-ffa450edef68",
      "commit_author": "Gilles Sadowski",
      "commit_date": "2012-08-08 14:18:16",
      "commit_parent": "5827a6faad6e0b102f9b1e387e0c31dbe6a732cf"
    },
    "function": {
      "function_name": "density",
      "function_code_before": "",
      "function_code_after": "public double density(final double[] vals) throws DimensionMismatchException {\n    final int dim = getDimensions();\n    if (vals.length != dim) {\n        throw new DimensionMismatchException(vals.length, dim);\n    }\n\n    final double kernel = getKernel(vals);\n\n    return FastMath.pow(2 * FastMath.PI, -dim / 2) *\n        FastMath.pow(covarianceMatrixDeterminant, -0.5) *\n        FastMath.exp(kernel);\n}",
      "function_before_start_line": "",
      "function_before_end_line": "",
      "function_after_start_line": 148,
      "function_after_end_line": 159,
      "function_before_token_count": 0,
      "function_after_token_count": 86,
      "functions_name_modified_file": [
        "getKernel",
        "getMeans",
        "sample",
        "getStandardDeviations",
        "MultivariateNormalDistribution",
        "getCovariances",
        "density"
      ],
      "functions_name_all_files": [
        "getKernel",
        "getDimensions",
        "getMeans",
        "isSupportUpperBoundInclusive",
        "sample",
        "getSupportUpperBound",
        "isSupportConnected",
        "getStandardDeviations",
        "AbstractMultivariateRealDistribution",
        "probability",
        "isSupportLowerBoundInclusive",
        "reseedRandomGenerator",
        "MultivariateNormalDistribution",
        "getSupportLowerBound",
        "getCovariances",
        "density"
      ],
      "functions_name_co_evolved_modified_file": [
        "getKernel",
        "getMeans",
        "sample",
        "getStandardDeviations",
        "MultivariateNormalDistribution",
        "getCovariances",
        "density"
      ],
      "functions_name_co_evolved_all_files": [
        "getKernel",
        "getDimensions",
        "getMeans",
        "isSupportUpperBoundInclusive",
        "sample",
        "isSupportConnected",
        "getSupportUpperBound",
        "getStandardDeviations",
        "AbstractMultivariateRealDistribution",
        "probability",
        "isSupportLowerBoundInclusive",
        "reseedRandomGenerator",
        "MultivariateNormalDistribution",
        "getSupportLowerBound",
        "getCovariances",
        "density"
      ]
    },
    "file": {
      "file_name": "MultivariateNormalDistribution.java",
      "file_nloc": 116,
      "file_complexity": 22,
      "file_token_count": 969,
      "file_before": "",
      "file_after": "",
      "file_patch": "@@ -0,0 +1,211 @@\n+package org.apache.commons.math3.distribution;\n+\n+import org.apache.commons.math3.exception.DimensionMismatchException;\n+import org.apache.commons.math3.exception.NotStrictlyPositiveException;\n+import org.apache.commons.math3.linear.Array2DRowRealMatrix;\n+import org.apache.commons.math3.linear.EigenDecomposition;\n+import org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException;\n+import org.apache.commons.math3.linear.RealMatrix;\n+import org.apache.commons.math3.linear.SingularMatrixException;\n+import org.apache.commons.math3.random.RandomGenerator;\n+import org.apache.commons.math3.random.Well19937c;\n+import org.apache.commons.math3.stat.correlation.Covariance;\n+import org.apache.commons.math3.util.FastMath;\n+import org.apache.commons.math3.util.MathArrays;\n+\n+/**\n+ * Implementation of the multivariate normal (Gaussian) distribution.\n+ * \n+ * @see <a href=\"http://en.wikipedia.org/wiki/Multivariate_normal_distribution\">\n+ * Multivariate normal distribution (Wikipedia)</a>\n+ * @see <a href=\"http://mathworld.wolfram.com/MultivariateNormalDistribution.html\">\n+ * Multivariate normal distribution (MathWorld)</a>\n+ */\n+public class MultivariateNormalDistribution\n+    extends AbstractMultivariateRealDistribution {\n+    /** Vector of means. */\n+    private final double[] means;\n+    /** Covariance matrix. */\n+    private final RealMatrix covarianceMatrix;\n+    /** The matrix inverse of the covariance matrix. */\n+    private final RealMatrix covarianceMatrixInverse;\n+    /** The determinant of the covariance matrix. */\n+    private final double covarianceMatrixDeterminant;\n+    /** Matrix used in computation of samples. */\n+    private final RealMatrix samplingMatrix;\n+\n+    /**\n+     * Creates a multivariate normal distribution with the given mean vector and\n+     * covariance matrix.\n+     * <br/>\n+     * The number of dimensions is equal to the length of the mean vector\n+     * and to the number of rows and columns of the covariance matrix.\n+     * It is frequently written as \"p\" in formulae.\n+     * \n+     * @param means Vector of means.\n+     * @param covariances Covariance matrix.\n+     */\n+    public MultivariateNormalDistribution(final double[] means,\n+                                          final double[][] covariances)\n+        throws SingularMatrixException,\n+               DimensionMismatchException,\n+               NonPositiveDefiniteMatrixException {\n+        this(new Well19937c(), means, covariances);\n+    }\n+\n+    /**\n+     * Creates a multivariate normal distribution with the given mean vector and\n+     * covariance matrix.\n+     * <br/>\n+     * The number of dimensions is equal to the length of the mean vector\n+     * and to the number of rows and columns of the covariance matrix.\n+     * It is frequently written as \"p\" in formulae.\n+     * \n+     * @param rng Random Number Generator.\n+     * @param means Vector of means.\n+     * @param covariances Covariance matrix.\n+     */\n+    public MultivariateNormalDistribution(RandomGenerator rng,\n+                                          final double[] means,\n+                                          final double[][] covariances)\n+            throws SingularMatrixException,\n+                   DimensionMismatchException,\n+                   NonPositiveDefiniteMatrixException {\n+        super(rng, means.length);\n+\n+        final int dim = means.length;\n+\n+        if (covariances.length != dim) {\n+            throw new DimensionMismatchException(covariances.length, dim);\n+        }\n+\n+        for (int i = 0; i < dim; i++) {\n+            if (dim != covariances[i].length) {\n+                throw new DimensionMismatchException(covariances[i].length, dim);\n+            }\n+        }\n+\n+        this.means = MathArrays.copyOf(means);\n+\n+        covarianceMatrix = new Array2DRowRealMatrix(covariances);\n+\n+        // Covariance matrix eigen decomposition.\n+        final EigenDecomposition covMatDec = new EigenDecomposition(covarianceMatrix);\n+\n+        // Compute and store the inverse.\n+        covarianceMatrixInverse = covMatDec.getSolver().getInverse();\n+        // Compute and store the determinant.\n+        covarianceMatrixDeterminant = covMatDec.getDeterminant();\n+\n+        // Eigenvalues of the covariance matrix.\n+        final double[] covMatEigenvalues = covMatDec.getRealEigenvalues();\n+\n+        for (int i = 0; i < covMatEigenvalues.length; i++) {\n+            if (covMatEigenvalues[i] < 0) {\n+                throw new NonPositiveDefiniteMatrixException(covMatEigenvalues[i], i, 0);\n+            }\n+        }\n+\n+        // Matrix where each column is an eigenvector of the covariance matrix.\n+        final Array2DRowRealMatrix covMatEigenvectors = new Array2DRowRealMatrix(dim, dim);\n+        for (int v = 0; v < dim; v++) {\n+            final double[] evec = covMatDec.getEigenvector(v).toArray();\n+            covMatEigenvectors.setColumn(v, evec);\n+        }\n+\n+        final RealMatrix tmpMatrix = covMatEigenvectors.transpose();\n+\n+        // Scale each eigenvector by the square root of its eigenvalue.\n+        for (int row = 0; row < dim; row++) {\n+            final double factor = FastMath.sqrt(covMatEigenvalues[row]);\n+            for (int col = 0; col < dim; col++) {\n+                tmpMatrix.multiplyEntry(row, col, factor);\n+            }\n+        }\n+\n+        samplingMatrix = covMatEigenvectors.multiply(tmpMatrix);\n+    }\n+\n+    /**\n+     * Gets the mean vector.\n+     * \n+     * @return the mean vector.\n+     */\n+    public double[] getMeans() {\n+        return MathArrays.copyOf(means);\n+    }\n+\n+    /**\n+     * Gets the covariance matrix.\n+     * \n+     * @return the covariance matrix.\n+     */\n+    public RealMatrix getCovariances() {\n+        return covarianceMatrix.copy();\n+    }\n+\n+    /** {@inheritDoc} */\n+    public double density(final double[] vals) throws DimensionMismatchException {\n+        final int dim = getDimensions();\n+        if (vals.length != dim) {\n+            throw new DimensionMismatchException(vals.length, dim);\n+        }\n+\n+        final double kernel = getKernel(vals);\n+\n+        return FastMath.pow(2 * FastMath.PI, -dim / 2) *\n+            FastMath.pow(covarianceMatrixDeterminant, -0.5) *\n+            FastMath.exp(kernel);\n+    }\n+\n+    /**\n+     * Gets the square root of each element on the diagonal of the covariance\n+     * matrix.\n+     * \n+     * @return the standard deviations.\n+     */\n+    public double[] getStandardDeviations() {\n+        final int dim = getDimensions();\n+        final double[] std = new double[dim];\n+        final double[][] s = covarianceMatrix.getData();\n+        for (int i = 0; i < dim; i++) {\n+            std[i] = FastMath.sqrt(s[i][i]);\n+        }\n+        return std;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public double[] sample() {\n+        final int dim = getDimensions();\n+        final double[] normalVals = new double[dim];\n+\n+        for (int i = 0; i < dim; i++) {\n+            normalVals[i] = random.nextGaussian();\n+        }\n+\n+        final double[] vals = samplingMatrix.operate(normalVals);\n+\n+        for (int i = 0; i < dim; i++) {\n+            vals[i] += means[i];\n+        }\n+\n+        return vals;\n+    }\n+\n+    /**\n+     * Precomputes some of the multiplications used for determining densities.\n+     * \n+     * @param values Values at which to compute density.\n+     * @return the multiplication factor of density calculations.\n+     */\n+    private double getKernel(final double[] values) {\n+        double k = 0;\n+        for (int col = 0; col < values.length; col++) {\n+            for (int v = 0; v < values.length; v++) {\n+                k += covarianceMatrixInverse.getEntry(v, col)\n+                    * FastMath.pow(values[v] - means[v], 2);\n+            }\n+        }\n+        return -0.5 * k;\n+    }\n+}\n",
      "files_name_in_blame_commit": [
        "MultivariateNormalDistribution.java",
        "AbstractMultivariateRealDistribution.java",
        "MultivariateRealDistribution.java"
      ]
    }
  },
  "commits_modify_file_before_fix": {
    "size": 5
  }
}