{
  "id": "6",
  "blame_commit": {
    "commit": {
      "commit_id": "b93cb4888d459e6f5f6043b42cabb8fd55af9f5c",
      "commit_message": "Source formatting.",
      "commit_author": "David Gilbert",
      "commit_date": "2007-12-19 15:50:07",
      "commit_parent": "60e2af21c9870869e37fc4382cf5d6769b886669"
    },
    "function": {
      "function_name": "arrangeFF",
      "function_code_before": "protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,\n                           RectangleConstraint constraint) {\n    double[] w = new double[5];\n    double[] h = new double[5];\n    w[0] = constraint.getWidth();\n    if (this.topBlock != null) {\n        RectangleConstraint c1 = new RectangleConstraint(\n            w[0], null, LengthConstraintType.FIXED,\n            0.0, new Range(0.0, constraint.getHeight()), \n            LengthConstraintType.RANGE\n        );\n        Size2D size = this.topBlock.arrange(g2, c1);\n        h[0] = size.height;\n    }\n    w[1] = w[0];\n    if (this.bottomBlock != null) {\n        RectangleConstraint c2 = new RectangleConstraint(\n            w[0], null, LengthConstraintType.FIXED,\n            0.0, new Range(0.0, constraint.getHeight() - h[0]), \n            LengthConstraintType.RANGE\n        );\n        Size2D size = this.bottomBlock.arrange(g2, c2);\n        h[1] = size.height;\n    }\n    h[2] = constraint.getHeight() - h[1] - h[0];\n    if (this.leftBlock != null) {\n        RectangleConstraint c3 = new RectangleConstraint(\n            0.0, new Range(0.0, constraint.getWidth()), \n            LengthConstraintType.RANGE,\n            h[2], null, LengthConstraintType.FIXED\n        );\n        Size2D size = this.leftBlock.arrange(g2, c3);\n        w[2] = size.width;            \n    }\n    h[3] = h[2];\n    if (this.rightBlock != null) {\n        RectangleConstraint c4 = new RectangleConstraint(\n            0.0, new Range(0.0, constraint.getWidth() - w[2]), \n            LengthConstraintType.RANGE,\n            h[2], null, LengthConstraintType.FIXED\n        );\n        Size2D size = this.rightBlock.arrange(g2, c4);\n        w[3] = size.width;            \n    }\n    h[4] = h[2];\n    w[4] = constraint.getWidth() - w[3] - w[2];\n    RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);\n    if (this.centerBlock != null) {\n        this.centerBlock.arrange(g2, c5);   \n    }\n\n    if (this.topBlock != null) {\n        this.topBlock.setBounds(\n            new Rectangle2D.Double(0.0, 0.0, w[0], h[0])\n        );\n    }\n    if (this.bottomBlock != null) {\n        this.bottomBlock.setBounds(\n            new Rectangle2D.Double(0.0, h[0] + h[2], w[1], h[1])\n        );\n    }\n    if (this.leftBlock != null) {\n        this.leftBlock.setBounds(\n            new Rectangle2D.Double(0.0, h[0], w[2], h[2])\n        );\n    }\n    if (this.rightBlock != null) {\n        this.rightBlock.setBounds(\n            new Rectangle2D.Double(w[2] + w[4], h[0], w[3], h[3])\n        );\n    }\n    if (this.centerBlock != null) {\n        this.centerBlock.setBounds(\n            new Rectangle2D.Double(w[2], h[0], w[4], h[4])\n        );\n    }\n    return new Size2D(constraint.getWidth(), constraint.getHeight());\n}",
      "function_code_after": "protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,\n                           RectangleConstraint constraint) {\n    double[] w = new double[5];\n    double[] h = new double[5];\n    w[0] = constraint.getWidth();\n    if (this.topBlock != null) {\n        RectangleConstraint c1 = new RectangleConstraint(w[0], null, \n        \t\tLengthConstraintType.FIXED, 0.0, \n        \t\tnew Range(0.0, constraint.getHeight()), \n        \t\tLengthConstraintType.RANGE);\n        Size2D size = this.topBlock.arrange(g2, c1);\n        h[0] = size.height;\n    }\n    w[1] = w[0];\n    if (this.bottomBlock != null) {\n        RectangleConstraint c2 = new RectangleConstraint(w[0], null, \n        \t\tLengthConstraintType.FIXED, 0.0, new Range(0.0, \n        \t\tconstraint.getHeight() - h[0]), LengthConstraintType.RANGE);\n        Size2D size = this.bottomBlock.arrange(g2, c2);\n        h[1] = size.height;\n    }\n    h[2] = constraint.getHeight() - h[1] - h[0];\n    if (this.leftBlock != null) {\n        RectangleConstraint c3 = new RectangleConstraint(0.0, \n        \t\tnew Range(0.0, constraint.getWidth()), \n        \t\tLengthConstraintType.RANGE, h[2], null, \n        \t\tLengthConstraintType.FIXED);\n        Size2D size = this.leftBlock.arrange(g2, c3);\n        w[2] = size.width;            \n    }\n    h[3] = h[2];\n    if (this.rightBlock != null) {\n        RectangleConstraint c4 = new RectangleConstraint(0.0, \n        \t\tnew Range(0.0, constraint.getWidth() - w[2]), \n        \t\tLengthConstraintType.RANGE, h[2], null, \n        \t\tLengthConstraintType.FIXED);\n        Size2D size = this.rightBlock.arrange(g2, c4);\n        w[3] = size.width;            \n    }\n    h[4] = h[2];\n    w[4] = constraint.getWidth() - w[3] - w[2];\n    RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);\n    if (this.centerBlock != null) {\n        this.centerBlock.arrange(g2, c5);   \n    }\n\n    if (this.topBlock != null) {\n        this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0], \n        \t\th[0]));\n    }\n    if (this.bottomBlock != null) {\n        this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],\n        \t\tw[1], h[1]));\n    }\n    if (this.leftBlock != null) {\n        this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2], \n        \t\th[2]));\n    }\n    if (this.rightBlock != null) {\n        this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],\n        \t\tw[3], h[3]));\n    }\n    if (this.centerBlock != null) {\n        this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],\n        \t\th[4]));\n    }\n    return new Size2D(constraint.getWidth(), constraint.getHeight());\n}",
      "function_before_start_line": 454,
      "function_before_end_line": 531,
      "function_after_start_line": 419,
      "function_after_end_line": 486,
      "function_before_token_count": 696,
      "function_after_token_count": 696,
      "functions_name_modified_file": [
        "arrangeFR",
        "add",
        "arrangeFN",
        "clear",
        "arrangeFF",
        "equals",
        "arrangeNN",
        "BorderArrangement",
        "arrange",
        "arrangeRR"
      ],
      "functions_name_all_files": [
        "arrangeFR",
        "add",
        "arrangeFN",
        "clear",
        "arrangeFF",
        "equals",
        "arrangeNN",
        "BorderArrangement",
        "arrange",
        "arrangeRR"
      ],
      "functions_name_co_evolved_modified_file": [
        "arrangeFN",
        "arrangeFF",
        "arrangeNN",
        "arrange",
        "arrangeRR"
      ],
      "functions_name_co_evolved_all_files": [
        "arrangeFN",
        "arrangeFF",
        "arrangeNN",
        "arrange",
        "arrangeRR"
      ]
    },
    "file": {
      "file_name": "BorderArrangement.java",
      "file_nloc": 369,
      "file_complexity": 70,
      "file_token_count": 3288,
      "file_before": "",
      "file_after": "",
      "file_patch": "@@ -126,7 +126,7 @@ public class BorderArrangement implements Arrangement, Serializable {\n                           Graphics2D g2, \r\n                           RectangleConstraint constraint) {\r\n         RectangleConstraint contentConstraint \r\n-            = container.toContentConstraint(constraint);\r\n+                = container.toContentConstraint(constraint);\r\n         Size2D contentSize = null;\r\n         LengthConstraintType w = contentConstraint.getWidthConstraintType();\r\n         LengthConstraintType h = contentConstraint.getHeightConstraintType();\r\n@@ -160,16 +160,12 @@ public class BorderArrangement implements Arrangement, Serializable {\n                 throw new RuntimeException(\"Not implemented.\");  \r\n             }\r\n             else if (h == LengthConstraintType.RANGE) {\r\n-                contentSize = arrangeRR(\r\n-                    container, constraint.getWidthRange(),\r\n-                    constraint.getHeightRange(), g2\r\n-                );  \r\n+                contentSize = arrangeRR(container, constraint.getWidthRange(),\r\n+                        constraint.getHeightRange(), g2);  \r\n             }\r\n         }\r\n-        return new Size2D(\r\n-            container.calculateTotalWidth(contentSize.getWidth()),\r\n-            container.calculateTotalHeight(contentSize.getHeight())\r\n-        );\r\n+        return new Size2D(container.calculateTotalWidth(contentSize.getWidth()),\r\n+                container.calculateTotalHeight(contentSize.getHeight()));\r\n     }\r\n     \r\n     /**\r\n@@ -184,30 +180,23 @@ public class BorderArrangement implements Arrangement, Serializable {\n         double[] w = new double[5];\r\n         double[] h = new double[5];\r\n         if (this.topBlock != null) {\r\n-            Size2D size = this.topBlock.arrange(\r\n-                g2, RectangleConstraint.NONE\r\n-            );\r\n+            Size2D size = this.topBlock.arrange(g2, RectangleConstraint.NONE);\r\n             w[0] = size.width;\r\n             h[0] = size.height;\r\n         }\r\n         if (this.bottomBlock != null) {\r\n-            Size2D size = this.bottomBlock.arrange(\r\n-                g2, RectangleConstraint.NONE\r\n-            );\r\n+            Size2D size = this.bottomBlock.arrange(g2, \r\n+            \t\tRectangleConstraint.NONE);\r\n             w[1] = size.width;\r\n             h[1] = size.height;\r\n         }\r\n         if (this.leftBlock != null) {\r\n-            Size2D size = this.leftBlock.arrange(\r\n-                g2, RectangleConstraint.NONE\r\n-            );\r\n+            Size2D size = this.leftBlock.arrange(g2, RectangleConstraint.NONE);\r\n             w[2] = size.width;\r\n             h[2] = size.height;\r\n        }\r\n         if (this.rightBlock != null) {\r\n-            Size2D size = this.rightBlock.arrange(\r\n-                g2, RectangleConstraint.NONE\r\n-            );\r\n+            Size2D size = this.rightBlock.arrange(g2, RectangleConstraint.NONE);\r\n             w[3] = size.width;\r\n             h[3] = size.height;\r\n         }\r\n@@ -216,9 +205,8 @@ public class BorderArrangement implements Arrangement, Serializable {\n         h[3] = h[2];\r\n         \r\n         if (this.centerBlock != null) {\r\n-            Size2D size = this.centerBlock.arrange(\r\n-                g2, RectangleConstraint.NONE\r\n-            );\r\n+            Size2D size = this.centerBlock.arrange(g2, \r\n+            \t\tRectangleConstraint.NONE);\r\n             w[4] = size.width;\r\n             h[4] = size.height;\r\n         }\r\n@@ -226,32 +214,25 @@ public class BorderArrangement implements Arrangement, Serializable {\n         double centerHeight = Math.max(h[2], Math.max(h[3], h[4]));\r\n         double height = h[0] + h[1] + centerHeight;\r\n         if (this.topBlock != null) {\r\n-            this.topBlock.setBounds(\r\n-                new Rectangle2D.Double(0.0, 0.0, width, h[0])\r\n-            );\r\n+            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, width, \r\n+            \t\th[0]));\r\n         }\r\n         if (this.bottomBlock != null) {\r\n-            this.bottomBlock.setBounds(\r\n-                new Rectangle2D.Double(0.0, height - h[1], width, h[1])\r\n-            );\r\n+            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, \r\n+            \t\theight - h[1], width, h[1]));\r\n         }\r\n         if (this.leftBlock != null) {\r\n-            this.leftBlock.setBounds(\r\n-                new Rectangle2D.Double(0.0, h[0], w[2], centerHeight)\r\n-            );\r\n+            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2], \r\n+            \t\tcenterHeight));\r\n         }\r\n         if (this.rightBlock != null) {\r\n-            this.rightBlock.setBounds(\r\n-                new Rectangle2D.Double(width - w[3], h[0], w[3], centerHeight)\r\n-            );\r\n+            this.rightBlock.setBounds(new Rectangle2D.Double(width - w[3], \r\n+            \t\th[0], w[3], centerHeight));\r\n         }\r\n         \r\n         if (this.centerBlock != null) {\r\n-            this.centerBlock.setBounds(\r\n-                new Rectangle2D.Double(\r\n-                    w[2], h[0], width - w[2] - w[3], centerHeight\r\n-                )\r\n-            );\r\n+            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], \r\n+            \t\twidth - w[2] - w[3], centerHeight));\r\n         }\r\n         return new Size2D(width, height);\r\n     }\r\n@@ -292,10 +273,9 @@ public class BorderArrangement implements Arrangement, Serializable {\n                                double width) {\r\n         double[] w = new double[5];\r\n         double[] h = new double[5];\r\n-        RectangleConstraint c1 = new RectangleConstraint(\r\n-            width, null, LengthConstraintType.FIXED,\r\n-            0.0, null, LengthConstraintType.NONE\r\n-        );\r\n+        RectangleConstraint c1 = new RectangleConstraint(width, null, \r\n+        \t\tLengthConstraintType.FIXED, 0.0, null, \r\n+        \t\tLengthConstraintType.NONE);\r\n         if (this.topBlock != null) {\r\n             Size2D size = this.topBlock.arrange(g2, c1);\r\n             w[0] = size.width;\r\n@@ -306,10 +286,9 @@ public class BorderArrangement implements Arrangement, Serializable {\n             w[1] = size.width;\r\n             h[1] = size.height;\r\n         }\r\n-        RectangleConstraint c2 = new RectangleConstraint(\r\n-            0.0, new Range(0.0, width), LengthConstraintType.RANGE,\r\n-            0.0, null, LengthConstraintType.NONE\r\n-        );\r\n+        RectangleConstraint c2 = new RectangleConstraint(0.0, \r\n+        \t\tnew Range(0.0, width), LengthConstraintType.RANGE, \r\n+        \t\t0.0, null, LengthConstraintType.NONE);\r\n         if (this.leftBlock != null) {\r\n             Size2D size = this.leftBlock.arrange(g2, c2);\r\n             w[2] = size.width;\r\n@@ -317,11 +296,10 @@ public class BorderArrangement implements Arrangement, Serializable {\n         }\r\n         if (this.rightBlock != null) {\r\n             double maxW = Math.max(width - w[2], 0.0);\r\n-            RectangleConstraint c3 = new RectangleConstraint(\r\n-                0.0, new Range(Math.min(w[2], maxW), maxW), \r\n-                LengthConstraintType.RANGE,\r\n-                0.0, null, LengthConstraintType.NONE\r\n-            );    \r\n+            RectangleConstraint c3 = new RectangleConstraint(0.0, \r\n+            \t\tnew Range(Math.min(w[2], maxW), maxW), \r\n+            \t\tLengthConstraintType.RANGE, 0.0, null, \r\n+            \t\tLengthConstraintType.NONE);    \r\n             Size2D size = this.rightBlock.arrange(g2, c3);\r\n             w[3] = size.width;\r\n             h[3] = size.height;\r\n@@ -331,10 +309,9 @@ public class BorderArrangement implements Arrangement, Serializable {\n         h[3] = h[2];\r\n         \r\n         if (this.centerBlock != null) {\r\n-            RectangleConstraint c4 = new RectangleConstraint(\r\n-                width - w[2] - w[3], null, LengthConstraintType.FIXED,\r\n-                0.0, null, LengthConstraintType.NONE\r\n-            );    \r\n+            RectangleConstraint c4 = new RectangleConstraint(width - w[2] \r\n+                    - w[3], null, LengthConstraintType.FIXED, 0.0, null, \r\n+                    LengthConstraintType.NONE);    \r\n             Size2D size = this.centerBlock.arrange(g2, c4);\r\n             w[4] = size.width;\r\n             h[4] = size.height;\r\n@@ -360,36 +337,32 @@ public class BorderArrangement implements Arrangement, Serializable {\n         double[] w = new double[5];\r\n         double[] h = new double[5];\r\n         if (this.topBlock != null) {\r\n-            RectangleConstraint c1 = new RectangleConstraint(\r\n-                widthRange, heightRange\r\n-            );\r\n+            RectangleConstraint c1 = new RectangleConstraint(widthRange, \r\n+            \t\theightRange);\r\n             Size2D size = this.topBlock.arrange(g2, c1);\r\n             w[0] = size.width;\r\n             h[0] = size.height;\r\n         }\r\n         if (this.bottomBlock != null) {\r\n             Range heightRange2 = Range.shift(heightRange, -h[0], false);\r\n-            RectangleConstraint c2 = new RectangleConstraint(\r\n-                widthRange, heightRange2\r\n-            );  \r\n+            RectangleConstraint c2 = new RectangleConstraint(widthRange, \r\n+            \t\theightRange2);  \r\n             Size2D size = this.bottomBlock.arrange(g2, c2);\r\n             w[1] = size.width;\r\n             h[1] = size.height;\r\n         }\r\n         Range heightRange3 = Range.shift(heightRange, -(h[0] + h[1]));\r\n         if (this.leftBlock != null) {\r\n-            RectangleConstraint c3 = new RectangleConstraint(\r\n-                widthRange, heightRange3\r\n-            );\r\n+            RectangleConstraint c3 = new RectangleConstraint(widthRange, \r\n+            \t\theightRange3);\r\n             Size2D size = this.leftBlock.arrange(g2, c3);\r\n             w[2] = size.width;\r\n             h[2] = size.height;\r\n         }\r\n         Range widthRange2 = Range.shift(widthRange, -w[2], false);\r\n         if (this.rightBlock != null) {\r\n-            RectangleConstraint c4 = new RectangleConstraint(\r\n-                widthRange2, heightRange3\r\n-            );\r\n+            RectangleConstraint c4 = new RectangleConstraint(widthRange2, \r\n+            \t\theightRange3);\r\n             Size2D size = this.rightBlock.arrange(g2, c4);\r\n             w[3] = size.width;\r\n             h[3] = size.height;\r\n@@ -399,9 +372,8 @@ public class BorderArrangement implements Arrangement, Serializable {\n         h[3] = h[2];\r\n         Range widthRange3 = Range.shift(widthRange, -(w[2] + w[3]), false);\r\n         if (this.centerBlock != null) {\r\n-            RectangleConstraint c5 = new RectangleConstraint(\r\n-                widthRange3, heightRange3\r\n-            );\r\n+            RectangleConstraint c5 = new RectangleConstraint(widthRange3, \r\n+            \t\theightRange3);\r\n             // TODO:  the width and height ranges should be reduced by the \r\n             // height required for the top and bottom, and the width required\r\n             // by the left and right \r\n@@ -412,32 +384,25 @@ public class BorderArrangement implements Arrangement, Serializable {\n         double width = Math.max(w[0], Math.max(w[1], w[2] + w[4] + w[3]));\r\n         double height = h[0] + h[1] + Math.max(h[2], Math.max(h[3], h[4]));\r\n         if (this.topBlock != null) {\r\n-            this.topBlock.setBounds(\r\n-                new Rectangle2D.Double(0.0, 0.0, width, h[0])\r\n-            );\r\n+            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, width, \r\n+            \t\th[0]));\r\n         }\r\n         if (this.bottomBlock != null) {\r\n-            this.bottomBlock.setBounds(\r\n-                new Rectangle2D.Double(0.0, height - h[1], width, h[1])\r\n-            );\r\n+            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, \r\n+            \t\theight - h[1], width, h[1]));\r\n         }\r\n         if (this.leftBlock != null) {\r\n-            this.leftBlock.setBounds(\r\n-                new Rectangle2D.Double(0.0, h[0], w[2], h[2])\r\n-            );\r\n+            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2], \r\n+            \t\th[2]));\r\n         }\r\n         if (this.rightBlock != null) {\r\n-            this.rightBlock.setBounds(\r\n-                new Rectangle2D.Double(width - w[3], h[0], w[3], h[3])\r\n-            );\r\n+            this.rightBlock.setBounds(new Rectangle2D.Double(width - w[3], \r\n+            \t\th[0], w[3], h[3]));\r\n         }\r\n         \r\n         if (this.centerBlock != null) {\r\n-            this.centerBlock.setBounds(\r\n-                new Rectangle2D.Double(\r\n-                    w[2], h[0], width - w[2] - w[3], height - h[0] - h[1]\r\n-                )\r\n-            );\r\n+            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], \r\n+            \t\twidth - w[2] - w[3], height - h[0] - h[1]));\r\n         }\r\n         return new Size2D(width, height);\r\n     }\r\n@@ -457,41 +422,36 @@ public class BorderArrangement implements Arrangement, Serializable {\n         double[] h = new double[5];\r\n         w[0] = constraint.getWidth();\r\n         if (this.topBlock != null) {\r\n-            RectangleConstraint c1 = new RectangleConstraint(\r\n-                w[0], null, LengthConstraintType.FIXED,\r\n-                0.0, new Range(0.0, constraint.getHeight()), \r\n-                LengthConstraintType.RANGE\r\n-            );\r\n+            RectangleConstraint c1 = new RectangleConstraint(w[0], null, \r\n+            \t\tLengthConstraintType.FIXED, 0.0, \r\n+            \t\tnew Range(0.0, constraint.getHeight()), \r\n+            \t\tLengthConstraintType.RANGE);\r\n             Size2D size = this.topBlock.arrange(g2, c1);\r\n             h[0] = size.height;\r\n         }\r\n         w[1] = w[0];\r\n         if (this.bottomBlock != null) {\r\n-            RectangleConstraint c2 = new RectangleConstraint(\r\n-                w[0], null, LengthConstraintType.FIXED,\r\n-                0.0, new Range(0.0, constraint.getHeight() - h[0]), \r\n-                LengthConstraintType.RANGE\r\n-            );\r\n+            RectangleConstraint c2 = new RectangleConstraint(w[0], null, \r\n+            \t\tLengthConstraintType.FIXED, 0.0, new Range(0.0, \r\n+            \t\tconstraint.getHeight() - h[0]), LengthConstraintType.RANGE);\r\n             Size2D size = this.bottomBlock.arrange(g2, c2);\r\n             h[1] = size.height;\r\n         }\r\n         h[2] = constraint.getHeight() - h[1] - h[0];\r\n         if (this.leftBlock != null) {\r\n-            RectangleConstraint c3 = new RectangleConstraint(\r\n-                0.0, new Range(0.0, constraint.getWidth()), \r\n-                LengthConstraintType.RANGE,\r\n-                h[2], null, LengthConstraintType.FIXED\r\n-            );\r\n+            RectangleConstraint c3 = new RectangleConstraint(0.0, \r\n+            \t\tnew Range(0.0, constraint.getWidth()), \r\n+            \t\tLengthConstraintType.RANGE, h[2], null, \r\n+            \t\tLengthConstraintType.FIXED);\r\n             Size2D size = this.leftBlock.arrange(g2, c3);\r\n             w[2] = size.width;            \r\n         }\r\n         h[3] = h[2];\r\n         if (this.rightBlock != null) {\r\n-            RectangleConstraint c4 = new RectangleConstraint(\r\n-                0.0, new Range(0.0, constraint.getWidth() - w[2]), \r\n-                LengthConstraintType.RANGE,\r\n-                h[2], null, LengthConstraintType.FIXED\r\n-            );\r\n+            RectangleConstraint c4 = new RectangleConstraint(0.0, \r\n+            \t\tnew Range(0.0, constraint.getWidth() - w[2]), \r\n+            \t\tLengthConstraintType.RANGE, h[2], null, \r\n+            \t\tLengthConstraintType.FIXED);\r\n             Size2D size = this.rightBlock.arrange(g2, c4);\r\n             w[3] = size.width;            \r\n         }\r\n@@ -503,29 +463,24 @@ public class BorderArrangement implements Arrangement, Serializable {\n         }\r\n        \r\n         if (this.topBlock != null) {\r\n-            this.topBlock.setBounds(\r\n-                new Rectangle2D.Double(0.0, 0.0, w[0], h[0])\r\n-            );\r\n+            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0], \r\n+            \t\th[0]));\r\n         }\r\n         if (this.bottomBlock != null) {\r\n-            this.bottomBlock.setBounds(\r\n-                new Rectangle2D.Double(0.0, h[0] + h[2], w[1], h[1])\r\n-            );\r\n+            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],\r\n+            \t\tw[1], h[1]));\r\n         }\r\n         if (this.leftBlock != null) {\r\n-            this.leftBlock.setBounds(\r\n-                new Rectangle2D.Double(0.0, h[0], w[2], h[2])\r\n-            );\r\n+            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2], \r\n+            \t\th[2]));\r\n         }\r\n         if (this.rightBlock != null) {\r\n-            this.rightBlock.setBounds(\r\n-                new Rectangle2D.Double(w[2] + w[4], h[0], w[3], h[3])\r\n-            );\r\n+            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],\r\n+            \t\tw[3], h[3]));\r\n         }\r\n         if (this.centerBlock != null) {\r\n-            this.centerBlock.setBounds(\r\n-                new Rectangle2D.Double(w[2], h[0], w[4], h[4])\r\n-            );\r\n+            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],\r\n+            \t\th[4]));\r\n         }\r\n         return new Size2D(constraint.getWidth(), constraint.getHeight());\r\n     }\r\n",
      "files_name_in_blame_commit": [
        "BorderArrangement.java"
      ]
    }
  },
  "commits_modify_file_before_fix": {
    "size": 4
  }
}