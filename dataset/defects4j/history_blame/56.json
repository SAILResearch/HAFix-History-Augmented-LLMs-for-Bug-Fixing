{
  "id": "56",
  "blame_commit": {
    "commit": {
      "commit_id": "0e1e87827326aa785da225aa980d7429a9d562f7",
      "commit_message": "Fix #88",
      "commit_author": "Tatu Saloranta",
      "commit_date": "2014-01-11 19:51:21",
      "commit_parent": "8221fe16c513eae3193ae7cfeaadecf3a179b7f9"
    },
    "function": {
      "function_name": "useForType",
      "function_code_before": "public boolean useForType(JavaType t)\n{\n    switch (_appliesFor) {\n    case NON_CONCRETE_AND_ARRAYS:\n        while (t.isArrayType()) {\n            t = t.getContentType();\n        }\n        // fall through\n    case OBJECT_AND_NON_CONCRETE:\n        return (t.getRawClass() == Object.class) || !t.isConcrete();\n    case NON_FINAL:\n        while (t.isArrayType()) {\n            t = t.getContentType();\n        }\n        return !t.isFinal(); // includes Object.class\n    default:\n    //case JAVA_LANG_OBJECT:\n        return (t.getRawClass() == Object.class);\n    }\n}",
      "function_code_after": "public boolean useForType(JavaType t)\n{\n    switch (_appliesFor) {\n    case NON_CONCRETE_AND_ARRAYS:\n        while (t.isArrayType()) {\n            t = t.getContentType();\n        }\n        // fall through\n    case OBJECT_AND_NON_CONCRETE:\n        return (t.getRawClass() == Object.class) || !t.isConcrete()\n                // [Issue#88] Should not apply to JSON tree models:\n                || TreeNode.class.isAssignableFrom(t.getRawClass());\n    case NON_FINAL:\n        while (t.isArrayType()) {\n            t = t.getContentType();\n        }\n        // [Issue#88] Should not apply to JSON tree models:\n        return !t.isFinal() && !TreeNode.class.isAssignableFrom(t.getRawClass());\n    default:\n    //case JAVA_LANG_OBJECT:\n        return (t.getRawClass() == Object.class);\n    }\n}",
      "function_before_start_line": 157,
      "function_before_end_line": 176,
      "function_after_start_line": 168,
      "function_after_end_line": 190,
      "function_before_token_count": 101,
      "function_after_token_count": 128,
      "functions_name_modified_file": [
        "copy",
        "addHandler",
        "generateJsonSchema",
        "readerWithView",
        "findModules",
        "setBase64Variant",
        "canDeserialize",
        "reader",
        "getSerializerFactory",
        "treeAsTokens",
        "readerForUpdating",
        "setInjectableValues",
        "setHandlerInstantiator",
        "setSerializationInclusion",
        "getJsonFactory",
        "getSerializerProvider",
        "writerWithDefaultPrettyPrinter",
        "writerWithView",
        "buildTypeDeserializer",
        "enable",
        "isEnabled",
        "useForType",
        "_serializerProvider",
        "setTimeZone",
        "_verifySchemaType",
        "DefaultTypeResolverBuilder",
        "treeToValue",
        "getFactory",
        "setSubtypeResolver",
        "getDeserializationContext",
        "setPropertyNamingStrategy",
        "_readMapAndClose",
        "_configAndWriteValue",
        "enableDefaultTyping",
        "writeValueAsBytes",
        "readTree",
        "buildTypeSerializer",
        "findAndRegisterModules",
        "version",
        "enableDefaultTypingAsProperty",
        "_convert",
        "setVisibility",
        "disable",
        "registerModules",
        "addMixInAnnotations",
        "createObjectNode",
        "setSerializerProvider",
        "_findRootDeserializer",
        "readValues",
        "writeValue",
        "disableDefaultTyping",
        "registerModule",
        "writeTree",
        "setDateFormat",
        "setNodeFactory",
        "getSubtypeResolver",
        "_initForReading",
        "setSerializerFactory",
        "getTypeFactory",
        "_unwrapAndDeserialize",
        "setDefaultTyping",
        "setAnnotationIntrospectors",
        "writer",
        "setAnnotationIntrospector",
        "_configAndWriteCloseable",
        "convertValue",
        "constructType",
        "readValue",
        "createDeserializationContext",
        "ObjectMapper",
        "setFilters",
        "getSerializationConfig",
        "mixInCount",
        "getNodeFactory",
        "canSerialize",
        "writerWithType",
        "writeValueAsString",
        "_defaultPrettyPrinter",
        "_readValue",
        "getDeserializationConfig",
        "setMixInAnnotations",
        "createArrayNode",
        "clearProblemHandlers",
        "acceptJsonFormatVisitor",
        "getVisibilityChecker",
        "setVisibilityChecker",
        "registerSubtypes",
        "_writeCloseableValue",
        "setTypeFactory",
        "findMixInClassFor",
        "valueToTree",
        "configure",
        "_checkInvalidCopy",
        "setLocale"
      ],
      "functions_name_all_files": [
        "isFinal",
        "copy",
        "addHandler",
        "generateJsonSchema",
        "addBeanProps",
        "getRawClass",
        "readerWithView",
        "findOptionalStdDeserializer",
        "materializeAbstractType",
        "isTypeIdVisible",
        "isInterface",
        "findModules",
        "setBase64Variant",
        "widenBy",
        "getValueHandler",
        "canDeserialize",
        "reader",
        "getSerializerFactory",
        "buildBeanDeserializer",
        "treeAsTokens",
        "readerForUpdating",
        "setInjectableValues",
        "setHandlerInstantiator",
        "addObjectIdReader",
        "setSerializationInclusion",
        "getJsonFactory",
        "getSerializerProvider",
        "writerWithDefaultPrettyPrinter",
        "writerWithView",
        "buildTypeDeserializer",
        "enable",
        "getDefaultImpl",
        "typeProperty",
        "constructBeanDeserializerBuilder",
        "containedTypeCount",
        "hasGenericTypes",
        "init",
        "isConcrete",
        "noTypeInfoBuilder",
        "isEnabled",
        "isEnumType",
        "useForType",
        "_serializerProvider",
        "idResolver",
        "setTimeZone",
        "inclusion",
        "_verifySchemaType",
        "DefaultTypeResolverBuilder",
        "treeToValue",
        "forcedNarrowBy",
        "getFactory",
        "containedTypeName",
        "isArrayType",
        "setSubtypeResolver",
        "getDeserializationContext",
        "setPropertyNamingStrategy",
        "_readMapAndClose",
        "_configAndWriteValue",
        "enableDefaultTyping",
        "buildBuilderBasedDeserializer",
        "addInjectables",
        "writeValueAsBytes",
        "isPotentialBeanType",
        "constructSetterlessProperty",
        "readTree",
        "buildTypeSerializer",
        "findAndRegisterModules",
        "_widen",
        "buildThrowableDeserializer",
        "getGenericSignature",
        "version",
        "createBuilderBasedDeserializer",
        "enableDefaultTypingAsProperty",
        "_convert",
        "getContentType",
        "narrowBy",
        "getKeyType",
        "setVisibility",
        "findStdDeserializer",
        "disable",
        "registerModules",
        "addMixInAnnotations",
        "createObjectNode",
        "setSerializerProvider",
        "typeIdVisibility",
        "_findRootDeserializer",
        "_assertSubclass",
        "readValues",
        "writeValue",
        "disableDefaultTyping",
        "registerModule",
        "writeTree",
        "setDateFormat",
        "addReferenceProperties",
        "useStaticType",
        "setNodeFactory",
        "getSubtypeResolver",
        "_initForReading",
        "setSerializerFactory",
        "getTypeFactory",
        "getTypeProperty",
        "_unwrapAndDeserialize",
        "StdTypeResolverBuilder",
        "isMapLikeType",
        "setDefaultTyping",
        "hasRawClass",
        "setAnnotationIntrospectors",
        "writer",
        "setAnnotationIntrospector",
        "isIgnorableType",
        "isCollectionLikeType",
        "isThrowable",
        "_configAndWriteCloseable",
        "convertValue",
        "getTypeHandler",
        "constructType",
        "readValue",
        "createDeserializationContext",
        "_findCustomBeanDeserializer",
        "isPrimitive",
        "JavaType",
        "filterBeanProps",
        "hashCode",
        "BeanDeserializerFactory",
        "ObjectMapper",
        "containedType",
        "getSerializationConfig",
        "setFilters",
        "isAbstract",
        "mixInCount",
        "getNodeFactory",
        "createBeanDeserializer",
        "canSerialize",
        "writeValueAsString",
        "writerWithType",
        "_defaultPrettyPrinter",
        "_readValue",
        "getDeserializationConfig",
        "defaultImpl",
        "setMixInAnnotations",
        "createArrayNode",
        "clearProblemHandlers",
        "acceptJsonFormatVisitor",
        "getVisibilityChecker",
        "setVisibilityChecker",
        "registerSubtypes",
        "_writeCloseableValue",
        "constructAnySetter",
        "setTypeFactory",
        "withConfig",
        "findMixInClassFor",
        "valueToTree",
        "constructSettableProperty",
        "configure",
        "getErasedSignature",
        "_checkInvalidCopy",
        "setLocale"
      ],
      "functions_name_co_evolved_modified_file": [
        "useForType"
      ],
      "functions_name_co_evolved_all_files": [
        "hasGenericTypes",
        "useForType",
        "buildTypeSerializer",
        "getDefaultImpl",
        "getTypeProperty",
        "isConcrete",
        "isThrowable",
        "_assertSubclass",
        "JavaType",
        "addObjectIdReader",
        "buildTypeDeserializer",
        "typeProperty",
        "hasRawClass",
        "hashCode",
        "defaultImpl",
        "idResolver",
        "useStaticType"
      ]
    },
    "file": {
      "file_name": "ObjectMapper.java",
      "file_nloc": 1408,
      "file_complexity": 291,
      "file_token_count": 9120,
      "file_before": "",
      "file_after": "",
      "file_patch": "@@ -72,6 +72,11 @@ public class ObjectMapper\n      * to specify what kind of types (classes) default typing should\n      * be used for. It will only be used if no explicit type information\n      * is found, but this enumeration further limits subset of those types.\n+     *<p>\n+     * Since 2.4 there are special exceptions for JSON Tree model\n+     * types (sub-types of {@link TreeNode}: default typing is never\n+     * applied to them\n+     * (see <a href=\"https://github.com/FasterXML/jackson-databind/issues/88\">Issue#88</a> for details)\n      */\n     public enum DefaultTyping {\n         /**\n@@ -87,6 +92,8 @@ public class ObjectMapper\n          * properties with declared type of {@link java.lang.Object}\n          * or an abstract type (abstract class or interface).\n          * Note that this does <b>not</b> include array types.\n+         *<p>\n+         * Since 2.4, this does NOT apply to {@link TreeNode} and its subtypes.\n          */\n         OBJECT_AND_NON_CONCRETE,\n \n@@ -94,6 +101,8 @@ public class ObjectMapper\n          * Value that means that default typing will be used for\n          * all types covered by {@link #OBJECT_AND_NON_CONCRETE}\n          * plus all array types for them.\n+         *<p>\n+         * Since 2.4, this does NOT apply to {@link TreeNode} and its subtypes.\n          */\n         NON_CONCRETE_AND_ARRAYS,\n         \n@@ -103,6 +112,8 @@ public class ObjectMapper\n          * \"natural\" types (String, Boolean, Integer, Double), which\n          * can be correctly inferred from JSON; as well as for\n          * all arrays of non-final types.\n+         *<p>\n+         * Since 2.4, this does NOT apply to {@link TreeNode} and its subtypes.\n          */\n         NON_FINAL\n     }\n@@ -163,12 +174,15 @@ public class ObjectMapper\n                 }\n                 // fall through\n             case OBJECT_AND_NON_CONCRETE:\n-                return (t.getRawClass() == Object.class) || !t.isConcrete();\n+                return (t.getRawClass() == Object.class) || !t.isConcrete()\n+                        // [Issue#88] Should not apply to JSON tree models:\n+                        || TreeNode.class.isAssignableFrom(t.getRawClass());\n             case NON_FINAL:\n                 while (t.isArrayType()) {\n                     t = t.getContentType();\n                 }\n-                return !t.isFinal(); // includes Object.class\n+                // [Issue#88] Should not apply to JSON tree models:\n+                return !t.isFinal() && !TreeNode.class.isAssignableFrom(t.getRawClass());\n             default:\n             //case JAVA_LANG_OBJECT:\n                 return (t.getRawClass() == Object.class);\n",
      "files_name_in_blame_commit": [
        "ObjectMapper.java",
        "BeanDeserializerFactory.java",
        "StdTypeResolverBuilder.java",
        "JavaType.java"
      ]
    }
  },
  "commits_modify_file_before_fix": {
    "size": 139
  }
}