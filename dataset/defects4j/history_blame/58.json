{
  "id": "58",
  "blame_commit": {
    "commit": {
      "commit_id": "fafbe3ddf58a805e877b6232f8cdcdfa2e1df636",
      "commit_message": "Fix #1024",
      "commit_author": "Tatu Saloranta",
      "commit_date": "2015-12-08 22:52:48",
      "commit_parent": "b74fb8d681347ebd166c80f3e429038c60f62646"
    },
    "function": {
      "function_name": "acceptJsonFormatVisitor",
      "function_code_before": "public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException\n{\n    if (_isInt) {\n        JsonIntegerFormatVisitor v2 = visitor.expectIntegerFormat(typeHint);\n        if (v2 != null) {\n            v2.numberType(JsonParser.NumberType.BIG_INTEGER);\n        }\n    } else {\n        JsonNumberFormatVisitor v2 = visitor.expectNumberFormat(typeHint);\n        if (v2 != null) {\n            Class<?> h = handledType();\n            if (h == BigDecimal.class) {\n                v2.numberType(JsonParser.NumberType.BIG_DECIMAL);\n            } // otherwise it's for Number... anything we could do there?\n        }\n    }\n}",
      "function_code_after": "public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException\n{\n    if (_isInt) {\n        visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);\n    } else {\n        Class<?> h = handledType();\n        if (h == BigDecimal.class) {\n            visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);\n        } else {\n            // otherwise bit unclear what to call... but let's try:\n            /*JsonNumberFormatVisitor v2 =*/ visitor.expectNumberFormat(typeHint);\n        }\n    }\n}",
      "function_before_start_line": 82,
      "function_before_end_line": 98,
      "function_after_start_line": 74,
      "function_after_end_line": 87,
      "function_before_token_count": 97,
      "function_after_token_count": 75,
      "functions_name_modified_file": [
        "NumberSerializer",
        "acceptJsonFormatVisitor",
        "getSchema",
        "serialize"
      ],
      "functions_name_all_files": [
        "visitArrayFormat",
        "getContentType",
        "_asTimestamp",
        "getEnumValues",
        "DoubleArraySerializer",
        "ByteArraySerializer",
        "IntLikeSerializer",
        "AtomicLongSerializer",
        "StdArraySerializers",
        "NumberSerializer",
        "getSchema",
        "addAll",
        "BooleanArraySerializer",
        "_withResolved",
        "LongArraySerializer",
        "createObjectNode",
        "wrapAndThrow",
        "LongSerializer",
        "ShortArraySerializer",
        "FileSerializer",
        "createContextual",
        "EnumSerializer",
        "StdSerializer",
        "_acceptJsonFormatVisitor",
        "Base",
        "visitFloatFormat",
        "_serializeAsIndex",
        "visitStringFormat",
        "NumberSerializers",
        "visitIntFormat",
        "getContentSerializer",
        "RawSerializer",
        "all",
        "construct",
        "TypedPrimitiveArraySerializer",
        "acceptJsonFormatVisitor",
        "IntArraySerializer",
        "StdKeySerializer",
        "IntegerSerializer",
        "serializeContents",
        "_findAndAddDynamic",
        "ClassSerializer",
        "StringArraySerializer",
        "DoubleSerializer",
        "StringSerializer",
        "withResolved",
        "isEmpty",
        "_writeArrayContents",
        "serializeContentsSlow",
        "serialize",
        "AtomicBooleanSerializer",
        "AtomicIntegerSerializer",
        "_withValueTypeSerializer",
        "findPropertyFilter",
        "ToStringSerializer",
        "findStandardImpl",
        "AsArraySerializerBase",
        "isDefaultSerializer",
        "FloatSerializer",
        "DateTimeSerializerBase",
        "_isShapeWrittenUsingIndex",
        "handledType",
        "CharArraySerializer",
        "hasSingleElement",
        "ShortSerializer",
        "StdScalarSerializer",
        "FloatArraySerializer",
        "createSchemaNode",
        "SqlTimeSerializer",
        "serializeWithType",
        "findConvertingContentSerializer"
      ],
      "functions_name_co_evolved_modified_file": [
        "NumberSerializer",
        "acceptJsonFormatVisitor",
        "serialize"
      ],
      "functions_name_co_evolved_all_files": [
        "visitArrayFormat",
        "wrapAndThrow",
        "ByteArraySerializer",
        "visitFloatFormat",
        "_acceptJsonFormatVisitor",
        "serialize",
        "visitStringFormat",
        "NumberSerializer",
        "visitIntFormat",
        "getSchema",
        "createSchemaNode",
        "all",
        "serializeWithType",
        "acceptJsonFormatVisitor"
      ]
    },
    "file": {
      "file_name": "NumberSerializer.java",
      "file_nloc": 61,
      "file_complexity": 15,
      "file_token_count": 447,
      "file_before": "",
      "file_after": "",
      "file_patch": "@@ -10,8 +10,6 @@ import com.fasterxml.jackson.core.JsonParser;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n-import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonIntegerFormatVisitor;\n-import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonNumberFormatVisitor;\n \n /**\n  * As a fallback, we may need to use this serializer for other\n@@ -30,12 +28,6 @@ public class NumberSerializer\n \n     protected final boolean _isInt;\n \n-    @Deprecated // since 2.5\n-    public NumberSerializer() {\n-        super(Number.class);\n-        _isInt = false;\n-    }\n-\n     /**\n      * @since 2.5\n      */\n@@ -46,30 +38,30 @@ public class NumberSerializer\n     }\n \n     @Override\n-    public void serialize(Number value, JsonGenerator jgen, SerializerProvider provider) throws IOException\n+    public void serialize(Number value, JsonGenerator g, SerializerProvider provider) throws IOException\n     {\n         // should mostly come in as one of these two:\n         if (value instanceof BigDecimal) {\n-            jgen.writeNumber((BigDecimal) value);\n+            g.writeNumber((BigDecimal) value);\n         } else if (value instanceof BigInteger) {\n-            jgen.writeNumber((BigInteger) value);\n+            g.writeNumber((BigInteger) value);\n             \n         /* These shouldn't match (as there are more specific ones),\n          * but just to be sure:\n          */\n         } else if (value instanceof Integer) {\n-            jgen.writeNumber(value.intValue());\n+            g.writeNumber(value.intValue());\n         } else if (value instanceof Long) {\n-            jgen.writeNumber(value.longValue());\n+            g.writeNumber(value.longValue());\n         } else if (value instanceof Double) {\n-            jgen.writeNumber(value.doubleValue());\n+            g.writeNumber(value.doubleValue());\n         } else if (value instanceof Float) {\n-            jgen.writeNumber(value.floatValue());\n+            g.writeNumber(value.floatValue());\n         } else if ((value instanceof Byte) || (value instanceof Short)) {\n-            jgen.writeNumber(value.intValue()); // doesn't need to be cast to smaller numbers\n+            g.writeNumber(value.intValue()); // doesn't need to be cast to smaller numbers\n         } else {\n             // We'll have to use fallback \"untyped\" number write method\n-            jgen.writeNumber(value.toString());\n+            g.writeNumber(value.toString());\n         }\n     }\n \n@@ -82,17 +74,14 @@ public class NumberSerializer\n     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException\n     {\n         if (_isInt) {\n-            JsonIntegerFormatVisitor v2 = visitor.expectIntegerFormat(typeHint);\n-            if (v2 != null) {\n-                v2.numberType(JsonParser.NumberType.BIG_INTEGER);\n-            }\n+            visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);\n         } else {\n-            JsonNumberFormatVisitor v2 = visitor.expectNumberFormat(typeHint);\n-            if (v2 != null) {\n-                Class<?> h = handledType();\n-                if (h == BigDecimal.class) {\n-                    v2.numberType(JsonParser.NumberType.BIG_DECIMAL);\n-                } // otherwise it's for Number... anything we could do there?\n+            Class<?> h = handledType();\n+            if (h == BigDecimal.class) {\n+                visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);\n+            } else {\n+                // otherwise bit unclear what to call... but let's try:\n+                /*JsonNumberFormatVisitor v2 =*/ visitor.expectNumberFormat(typeHint);\n             }\n         }\n     }\n",
      "files_name_in_blame_commit": [
        "ByteArraySerializer.java",
        "ClassSerializer.java",
        "StdKeySerializer.java",
        "StdSerializer.java",
        "StringSerializer.java",
        "SqlTimeSerializer.java",
        "DateTimeSerializerBase.java",
        "EnumSerializer.java",
        "FileSerializer.java",
        "StdJdkSerializers.java",
        "NumberSerializer.java",
        "RawSerializer.java",
        "StdArraySerializers.java",
        "StringArraySerializer.java",
        "ToStringSerializer.java",
        "AsArraySerializerBase.java",
        "StdScalarSerializer.java",
        "NumberSerializers.java"
      ]
    }
  },
  "commits_modify_file_before_fix": {
    "size": 6
  }
}