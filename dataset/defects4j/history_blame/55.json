{
  "id": "55",
  "blame_commit": {
    "commit": {
      "commit_id": "3ec253707dcfba4055e99d6af97d0d3877d0999a",
      "commit_message": "keep bundle annotations and prevent simple cycles\n\nI don't see any downsides and this makes it easier to manipulate\ncustom annotations, introspectors, serializers, and other parts\nthat interact with annotated objects. The cycle detection is a\nbonus.",
      "commit_author": "ian",
      "commit_date": "2014-08-15 19:28:51",
      "commit_parent": "e88a87c856421b4181b6a56ae9a5a320db9a62ad"
    },
    "function": {
      "function_name": "_add",
      "function_code_before": "protected final void _add(Annotation ann) {\n    if (_annotations == null) {\n        _annotations = new HashMap<Class<? extends Annotation>,Annotation>();\n    }\n    _annotations.put(ann.annotationType(), ann);\n}",
      "function_code_after": "protected final boolean _add(Annotation ann) {\n    if (_annotations == null) {\n        _annotations = new HashMap<Class<? extends Annotation>,Annotation>();\n    }\n    Annotation previous = _annotations.put(ann.annotationType(), ann);\n    return (previous != null) && previous.equals(ann);\n}",
      "function_before_start_line": 102,
      "function_before_end_line": 107,
      "function_after_start_line": 104,
      "function_after_end_line": 110,
      "function_before_token_count": 41,
      "function_after_token_count": 58,
      "functions_name_modified_file": [
        "addIfNotPresent",
        "size",
        "merge",
        "add",
        "toString",
        "AnnotationMap",
        "get",
        "_add",
        "annotations"
      ],
      "functions_name_all_files": [
        "_addMixOvers",
        "testVisibilityBundle",
        "getAllAnnotations",
        "getA",
        "toString",
        "add",
        "resolveClassAnnotations",
        "getIgnored",
        "resolveCreators",
        "_emptyAnnotationMaps",
        "getName",
        "getDefaultConstructor",
        "_add",
        "annotations",
        "fixAccess",
        "testIssue92",
        "getGenericType",
        "_isIncludableMemberMethod",
        "addOrOverride",
        "addIfNotPresent",
        "_isIncludableField",
        "withAnnotations",
        "getStaticMethods",
        "getRawType",
        "_addFactoryMixIns",
        "_addMemberMethods",
        "_addMixUnders",
        "resolveFields",
        "_constructCreatorMethod",
        "findMethod",
        "get",
        "construct",
        "testKeepAnnotationBundle",
        "_constructConstructor",
        "size",
        "merge",
        "memberMethods",
        "_collectRelevantAnnotations",
        "_addConstructorMixIns",
        "_addOrOverrideAnnotations",
        "constructWithoutSuperTypes",
        "_emptyAnnotationMap",
        "getAnnotation",
        "getAnnotated",
        "fields",
        "getB",
        "testRecursiveBundles",
        "getConstructors",
        "testBundledIgnore",
        "getFieldCount",
        "_addFieldMixIns",
        "_isAnnotationBundle",
        "_addAnnotationsIfNotPresent",
        "_addMethodMixIns",
        "_constructMethod",
        "getAnnotations",
        "AnnotationMap",
        "hasAnnotations",
        "resolveMemberMethods",
        "AnnotatedMember",
        "AnnotatedClass",
        "getMemberMethodCount",
        "_addClassMixIns",
        "_findFields",
        "getModifiers",
        "_constructField"
      ],
      "functions_name_co_evolved_modified_file": [
        "add",
        "addIfNotPresent",
        "_add"
      ],
      "functions_name_co_evolved_all_files": [
        "addIfNotPresent",
        "_addAnnotationsIfNotPresent",
        "add",
        "_add",
        "testRecursiveBundles",
        "testKeepAnnotationBundle",
        "addOrOverride"
      ]
    },
    "file": {
      "file_name": "AnnotationMap.java",
      "file_nloc": 74,
      "file_complexity": 27,
      "file_token_count": 481,
      "file_before": "",
      "file_after": "",
      "file_patch": "@@ -71,18 +71,20 @@ public final class AnnotationMap implements Annotations\n      * Method called to add specified annotation in the Map, but\n      * only if it didn't yet exist.\n      */\n-    public void addIfNotPresent(Annotation ann)\n+    public boolean addIfNotPresent(Annotation ann)\n     {\n         if (_annotations == null || !_annotations.containsKey(ann.annotationType())) {\n             _add(ann);\n+            return true;\n         }\n+        return false;\n     }\n \n     /**\n      * Method called to add specified annotation in the Map.\n      */\n-    public void add(Annotation ann) {\n-        _add(ann);\n+    public boolean add(Annotation ann) {\n+        return _add(ann);\n     }\n \n     @Override\n@@ -99,11 +101,12 @@ public final class AnnotationMap implements Annotations\n     /**********************************************************\n      */\n \n-    protected final void _add(Annotation ann) {\n+    protected final boolean _add(Annotation ann) {\n         if (_annotations == null) {\n             _annotations = new HashMap<Class<? extends Annotation>,Annotation>();\n         }\n-        _annotations.put(ann.annotationType(), ann);\n+        Annotation previous = _annotations.put(ann.annotationType(), ann);\n+        return (previous != null) && previous.equals(ann);\n     }\n }\n \n",
      "files_name_in_blame_commit": [
        "TestAnnotionBundles.java",
        "AnnotatedMember.java",
        "AnnotationMap.java",
        "AnnotatedClass.java"
      ]
    }
  },
  "commits_modify_file_before_fix": {
    "size": 8
  }
}