{
  "id": "37",
  "blame_commit": {
    "commit": {
      "commit_id": "00da5921e530ee96b4a03cb3f085bc292ac675bd",
      "commit_message": "Use constants in code for MIME and PEM chunk size instead of magic numbers. \n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/codec/trunk@928121 13f79535-47bb-0310-9956-ffa450edef68",
      "commit_author": "Gary D. Gregory",
      "commit_date": "2010-03-27 01:59:24",
      "commit_parent": "9535a94f6934edc9f3cc16d74621ca61429ebf8f"
    },
    "function": {
      "function_name": "encodeBase64",
      "function_code_before": "public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {\n    if (binaryData == null || binaryData.length == 0) {\n        return binaryData;\n    }\n\n    long len = getEncodeLength(binaryData, CHUNK_SIZE, CHUNK_SEPARATOR);\n    if (len > maxResultSize) {\n        throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +\n            len +\n            \") than the specified maxium size of \" +\n            maxResultSize);\n    }\n\n    Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);\n    return b64.encode(binaryData);\n}",
      "function_code_after": "public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {\n    if (binaryData == null || binaryData.length == 0) {\n        return binaryData;\n    }\n\n    long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);\n    if (len > maxResultSize) {\n        throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +\n            len +\n            \") than the specified maxium size of \" +\n            maxResultSize);\n    }\n\n    Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);\n    return b64.encode(binaryData);\n}",
      "function_before_start_line": 804,
      "function_before_end_line": 819,
      "function_after_start_line": 816,
      "function_after_end_line": 831,
      "function_before_token_count": 97,
      "function_after_token_count": 97,
      "functions_name_modified_file": [
        "encodeBase64",
        "resizeBuffer",
        "setInitialBuffer",
        "decodeInteger",
        "encodeBase64URLSafe",
        "encodeBase64String",
        "decode",
        "isUrlSafe",
        "getEncodeLength",
        "containsBase64Byte",
        "encodeBase64URLSafeString",
        "decodeBase64",
        "encodeToString",
        "avail",
        "isArrayByteBase64",
        "Base64",
        "isBase64",
        "readResults",
        "isWhiteSpace",
        "encodeInteger",
        "toIntegerBytes",
        "hasData",
        "encode",
        "encodeBase64Chunked",
        "discardWhitespace",
        "reset"
      ],
      "functions_name_all_files": [
        "testBase64OutputStreamByChunk",
        "testWriteOutOfBounds",
        "toString",
        "testByChunk",
        "testRead0",
        "testObjectEncode",
        "decode",
        "testTripletsChunked",
        "testBase64EmptyInputStreamMimeChuckSize",
        "testIgnoringNonBase64InDecode",
        "testTriplets",
        "testCodeInteger4",
        "encodeToString",
        "isArrayByteBase64",
        "testUUID",
        "testBase64EmptyOutputStreamPemChunkSize",
        "isWhiteSpace",
        "getRandom",
        "testPairs",
        "Base64OutputStreamTest",
        "testReadOutOfBounds",
        "encode",
        "testChunkedEncodeMultipleOf76",
        "resizeBuffer",
        "testDecodePadOnlyChunked",
        "decodeInteger",
        "encodeBase64URLSafe",
        "testDecodePadMarkerIndex3",
        "testCodeIntegerEdgeCases",
        "getEncodeLength",
        "containsBase64Byte",
        "testKnownEncodings",
        "avail",
        "Base64",
        "isBase64",
        "testObjectDecodeWithValidParameter",
        "testConstructors",
        "testBase64",
        "testConstructor_Int_ByteArray_Boolean",
        "testBase64EmptyOutputStream",
        "testNonBase64Test",
        "testSingletons",
        "testIsArrayByteBase64",
        "testDecodeWithWhitespace",
        "testRfc1421Section6Dot8ChunkSizeDefinition",
        "testDecodePadMarkerIndex2",
        "Base64InputStreamTest",
        "testDiscardWhitespace",
        "testCodeInteger3",
        "testByteToStringVariations",
        "testReadNull",
        "isUrlSafe",
        "testRfc2045Section2Dot1CrLfDefinition",
        "testWriteToNullCoverage",
        "testConstructor_Int_ByteArray_Boolean_UrlSafe",
        "testEmptyBase64",
        "testBase64InputStreamByChunk",
        "encodeBase64URLSafeString",
        "testObjectEncodeWithValidParameter",
        "testObjectEncodeWithInvalidParameter",
        "readResults",
        "Base64Test",
        "testStringToByteVariations",
        "testSingletonsChunked",
        "toIntegerBytes",
        "testEncodeDecodeRandom",
        "testKnownDecodings",
        "testByteByByte",
        "testEncodeOverMaxSize",
        "testBase64OutputStreamByteByByte",
        "encodeBase64",
        "testBase64EmptyInputStream",
        "testBase64EmptyInputStreamPemChuckSize",
        "setInitialBuffer",
        "testObjectDecodeWithInvalidParameter",
        "encodeBase64String",
        "testIsUrlSafe",
        "testCodeIntegerNull",
        "decodeBase64",
        "testBase64InputStreamByteByByte",
        "testEncodeDecodeSmall",
        "testRfc2045Section6Dot8ChunkSizeDefinition",
        "testUrlSafe",
        "testDecodePadOnly",
        "testBase64EmptyOutputStreamMimeChunkSize",
        "testCodec68",
        "encodeInteger",
        "testMarkSupported",
        "hasData",
        "encodeBase64Chunked",
        "testCodeInteger2",
        "discardWhitespace",
        "testCodeInteger1",
        "reset"
      ],
      "functions_name_co_evolved_modified_file": [
        "encodeBase64",
        "Base64"
      ],
      "functions_name_co_evolved_all_files": [
        "testBase64EmptyInputStreamMimeChuckSize",
        "testBase64OutputStreamByChunk",
        "testBase64",
        "encodeBase64",
        "testBase64EmptyInputStream",
        "testBase64InputStreamByChunk",
        "testBase64EmptyInputStreamPemChuckSize",
        "testBase64EmptyOutputStream",
        "testBase64InputStreamByteByByte",
        "testBase64EmptyOutputStreamPemChunkSize",
        "Base64",
        "testBase64EmptyOutputStreamMimeChunkSize",
        "testRfc2045Section6Dot8ChunkSizeDefinition",
        "testRfc1421Section6Dot8ChunkSizeDefinition"
      ]
    },
    "file": {
      "file_name": "Base64.java",
      "file_nloc": 422,
      "file_complexity": 121,
      "file_token_count": 3419,
      "file_before": "",
      "file_after": "",
      "file_patch": "@@ -56,7 +56,7 @@ public class Base64 implements BinaryEncoder, BinaryDecoder {\n     private static final int DEFAULT_BUFFER_SIZE = 8192;\n \n     /**\n-     * Chunk size per RFC 2045 section 6.8.\n+     *  MIME chunk size per RFC 2045 section 6.8.\n      * \n      * <p>\n      * The {@value} character limit does not count the trailing CRLF, but counts all other characters, including any\n@@ -65,7 +65,19 @@ public class Base64 implements BinaryEncoder, BinaryDecoder {\n      * \n      * @see <a href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045 section 6.8</a>\n      */\n-    static final int CHUNK_SIZE = 76;\n+    public static final int MIME_CHUNK_SIZE = 76;\n+\n+    /**\n+     * PEM chunk size per RFC 1421 section 4.3.2.4.\n+     * \n+     * <p>\n+     * The {@value} character limit does not count the trailing CRLF, but counts all other characters, including any\n+     * equal signs.\n+     * </p>\n+     * \n+     * @see <a href=\"http://tools.ietf.org/html/rfc1421\">RFC 1421 section 4.3.2.4</a>\n+     */\n+    public static final int PEM_CHUNK_SIZE = 64;\n \n     /**\n      * Chunk separator per RFC 2045 section 2.1.\n@@ -241,7 +253,7 @@ public class Base64 implements BinaryEncoder, BinaryDecoder {\n      * @since 1.4\n      */\n     public Base64(boolean urlSafe) {\n-        this(CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);\n+        this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);\n     }\n \n     /**\n@@ -806,7 +818,7 @@ public class Base64 implements BinaryEncoder, BinaryDecoder {\n             return binaryData;\n         }\n \n-        long len = getEncodeLength(binaryData, CHUNK_SIZE, CHUNK_SEPARATOR);\n+        long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);\n         if (len > maxResultSize) {\n             throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +\n                 len +\n",
      "files_name_in_blame_commit": [
        "Base64OutputStreamTest.java",
        "Base64.java",
        "Base64InputStreamTest.java",
        "Base64Test.java"
      ]
    }
  },
  "commits_modify_file_before_fix": {
    "size": 75
  }
}