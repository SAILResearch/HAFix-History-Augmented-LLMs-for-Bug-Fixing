{
  "id": "110",
  "blame_commit": {
    "commit": {
      "commit_id": "b3a6a6b3b5b269cf6ccab91588c320d925dac9ae",
      "commit_message": "Attempting to recover last revision.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@141013 13f79535-47bb-0310-9956-ffa450edef68",
      "commit_author": "Mark R. Diggory",
      "commit_date": "2003-11-14 22:25:28",
      "commit_parent": "dd899e75fcc95a4f4a982b3d0e6d424708c05955"
    },
    "function": {
      "function_name": "equals",
      "function_code_before": "",
      "function_code_after": "public boolean equals(Object other) {\n    boolean ret;\n\n    if (this == other) { \n        ret = true;\n    } else if (other == null) {\n        ret = false;\n    } else {\n        try {\n            Complex rhs = (Complex)other;\n            ret = (Double.doubleToRawLongBits(real) ==\n                    Double.doubleToRawLongBits(rhs.getReal())) &&\n                (Double.doubleToRawLongBits(imaginary) ==\n                    Double.doubleToRawLongBits(rhs.getImaginary())); \n        } catch (ClassCastException ex) {\n            // ignore exception\n            ret = false;\n        }\n    }\n\n    return ret;\n}",
      "function_before_start_line": "",
      "function_before_end_line": "",
      "function_after_start_line": 156,
      "function_after_end_line": 177,
      "function_before_token_count": 0,
      "function_after_token_count": 105,
      "functions_name_modified_file": [
        "divide",
        "negate",
        "squareSum",
        "add",
        "subtract",
        "equals",
        "abs",
        "isNaN",
        "getReal",
        "conjugate",
        "multiply",
        "Complex",
        "getImaginary"
      ],
      "functions_name_all_files": [
        "createHypergeometricDistribution",
        "findSample",
        "testNextExponential",
        "RealMatrixImpl",
        "copyIn",
        "testUnivariateImpl",
        "getKurtosisClass",
        "getY",
        "SkewnessTest",
        "getDomain",
        "HypergeometricDistributionTest",
        "AbstractContinuousDistribution",
        "GammaTest",
        "testHypergeometricDistributionPositivePositiveNegative",
        "getNumeratorDegreesOfFreedom",
        "testDivide",
        "testProperties",
        "getReal",
        "testResetRelativeAccuracy",
        "sqrt1z",
        "getDomainLowerBound",
        "testClasses",
        "getSampleStats",
        "apply",
        "testValue",
        "testNextSecureInt",
        "testInverseCummulativeProbability900",
        "getN",
        "testCreateGammaDistributionPositivePositive",
        "testTransformBigDecimal",
        "testMultiply",
        "testSignInt",
        "binomialCoefficientDouble",
        "getWindowSize",
        "setPropertyName",
        "testRegularizedGammaPositiveNan",
        "testRegularizedBetaNanPositivePositive",
        "testInterpolateLinear",
        "testUpperTailProbability",
        "setMean",
        "FixedDoubleArray",
        "testInverseCumulativeProbability975",
        "getNorm",
        "testInterpolateLinearDegenerateThreeSegment",
        "shuffle",
        "testHighPercentile",
        "testDiscard",
        "nextSecureLong",
        "setVitalStats",
        "testIncrementation",
        "testModes",
        "testInverseCumulativeProbability010",
        "getIterationCount",
        "BivariateRegressionTest",
        "testAddElementRolling",
        "testInverseCummulativeProbability010",
        "binomialCoefficient",
        "setPercentile",
        "testRegularizedGammaPositiveZero",
        "getRow",
        "testLogGammaNegative",
        "ProductTest",
        "setMaximalIterationCount",
        "atan",
        "ChiSquaredDistributionImpl",
        "newBrentSolver",
        "testStoredUnivariateImpl",
        "testPlusMinus",
        "getMin",
        "log",
        "testSignDouble",
        "product",
        "sinh",
        "getSumsq",
        "transform",
        "getNext",
        "TDistributionImpl",
        "openReplayFile",
        "newDefaultSolver",
        "testInverseCummulativeProbability050",
        "testTransformString",
        "setNumberOfTrials",
        "Kurtosis",
        "value",
        "getCount",
        "cos",
        "binomialCoefficientLog",
        "getNumberOfTrials",
        "testAbs",
        "ExpandableDoubleArray",
        "getDenominatorDegreesOfFreedom",
        "Skewness",
        "testSetMaximalIterationCount",
        "testSolveSin",
        "setFunctionValueAccuracy",
        "getUpperDomain",
        "addData",
        "testCounts",
        "testCreateTDistributionNegative",
        "UnivariateRealSolverFactory",
        "testCummulativeProbability0",
        "setInitialCapacity",
        "testNextHex",
        "createTDistribution",
        "assertEquals",
        "UnivariateRealSolverImpl",
        "testInterpolateSin",
        "setDegreesOfFreedom",
        "testDimensions",
        "StoreUnivariateImplTest",
        "testCummulativeProbability010",
        "SumTest",
        "sin",
        "testBinomialCoefficient",
        "testDeterminant",
        "testSignShort",
        "shouldContract",
        "GammaDistributionImpl",
        "RootFinding",
        "setDenominatorDegreesOfFreedom",
        "testPremultiply",
        "testContainsTransformer",
        "testHypergeometricDistributionNegativePositivePositive",
        "UnivariateImpl",
        "getPropertyName",
        "FrequencyTest",
        "testInverseCumulativeProbability100",
        "dumpMatrix",
        "getEmpiricalDistribution",
        "BinomialDistributionTest",
        "testBinomialDistributionNegativePositive",
        "testCumulativeProbability100",
        "assertClose",
        "getDataRef",
        "testBinomialDistributionZeroPositive",
        "ContractableDoubleArray",
        "BetaTest",
        "getRan",
        "scalarMultiply",
        "testConstructorNaN",
        "logBeta",
        "getInternalLength",
        "Complex",
        "PercentileTest",
        "testConstructorCause",
        "findBinomialLimits",
        "setContractionCriteria",
        "testConstructorMessage",
        "resetRelativeAccuracy",
        "testQuinticZero",
        "testSolveAccuracyNull",
        "testCummulativeProbabilityZero",
        "testCumulativeProbability900",
        "testInference",
        "getSlopeStdErr",
        "testRegularizedBetaPositivePositiveZero",
        "suite",
        "load",
        "testConfig",
        "TestStatisticTest",
        "testPercentiles",
        "setRelativeAccuracy",
        "testGetExceeding",
        "testRegularizedBetaPositivePositiveNan",
        "testConjugateNaN",
        "MathUtils",
        "testBinomialDistributionPositiveNegative",
        "testBinomialDistributionPositiveTwo",
        "copy",
        "getRank",
        "EmpiricalDistributionImpl",
        "testCreateFDistributionPositiveNegative",
        "setMu",
        "getNextReplay",
        "testNextSample",
        "clear",
        "ExponentialDistributionTest",
        "min",
        "testCumulativeProbability990",
        "testEvaluation",
        "getSlope",
        "testSignByte",
        "sumSq",
        "RandomDataTest",
        "getNatural",
        "getSampleSize",
        "testInverseCumulativeProbability050",
        "isSquare",
        "setNumberOfSuccesses",
        "preMultiply",
        "testNorris",
        "RealMatrixImplTest",
        "Patient",
        "getAlpha",
        "setData",
        "setUp",
        "removeTransformer",
        "testArrayIndexConditions",
        "LUDecompose",
        "getNextGaussian",
        "findFactorialLimits",
        "addElementRolling",
        "t",
        "getMode",
        "nextHexString",
        "testInverseCummulativeProbability950",
        "testInverseCummulativeProbabilityNegative",
        "testToString",
        "regularizedGammaP",
        "testSolveNull",
        "testRegularizedBetaPositiveNanPositive",
        "testRegularizedBetaPositiveZeroPositive",
        "multiply",
        "getAbsoluteAccuracy",
        "tearDown",
        "setProbabilityOfSuccess",
        "nextPoisson",
        "getRegressionSumSquares",
        "TransformerMap",
        "testGridTooFine",
        "testRegularizedBeta",
        "getSumFreq",
        "probability",
        "testSetName",
        "resetFunctionValueAccuracy",
        "testLogBetaPositiveNegative",
        "testInverseCumulativeProbability900",
        "createChiSquareDistribution",
        "createBinomialDistribution",
        "nextLong",
        "TestUtils",
        "setTemperature",
        "testSinZero",
        "testIllegalArguments",
        "testRegularizedGammaNanPositive",
        "getNumberOfSuccesses",
        "testCummulativeProbability050",
        "logGamma",
        "getMean",
        "getImaginary",
        "testTransformInvocationError",
        "ContinuedFraction",
        "ValueServerTest",
        "testCorr",
        "testOnlyRolling",
        "expand",
        "testCummulativeProbability001",
        "testTransformNull",
        "testSetElement",
        "getResult",
        "squareSum",
        "add",
        "testChiSquare",
        "nextPermutation",
        "ChiSquareDistributionTest",
        "getBinStats",
        "getName",
        "testLogGammaPositive",
        "SecantSolver",
        "nextInt",
        "MedianTest",
        "testFactorial",
        "Percentile",
        "VitalStats",
        "scalarAdd",
        "nextSample",
        "StatUtilsTest",
        "chiSquareTest",
        "getMaximalIterationCount",
        "testInverseCummulativeProbability999",
        "testInverseCummulativeProbabilityPositive",
        "testNegateNaN",
        "getZ",
        "getSkewness",
        "testCummulativeProbability975",
        "testSetRelativeAccuracy",
        "getLowerDomain",
        "setDataRef",
        "setEntry",
        "testConstructor",
        "MathUtilsTest",
        "testTransform",
        "testCreateChiSquareDistributionPositive",
        "tTest",
        "variance",
        "CertifiedDataTest",
        "UnivariateStatisticAbstractTest",
        "regularizedBeta",
        "testLogBeta",
        "testLogGammaZero",
        "nextUniform",
        "setNumElements",
        "factorialDouble",
        "testSetAbsoluteAccuracy",
        "testCumulativeProbability050",
        "FDistributionImpl",
        "setSigma",
        "testCummulativeProbability999",
        "testClear",
        "testNextPermutation",
        "testCreateChiSquareDistributionZero",
        "testHypergeometricDistributionPositivePositiveZero",
        "testLogGamma",
        "testAddNaN",
        "setSampleSize",
        "checkContractExpand",
        "factorial",
        "testDivideNaN",
        "testNegate",
        "testNexFail",
        "testLogGammaNan",
        "testMultiplyNaN",
        "heresFoo",
        "getNextDigest",
        "DoubleArrayAbstractTest",
        "testAdd1000",
        "testAdd",
        "testCummulativeProbability950",
        "getStandardDeviation",
        "setAlpha",
        "setResult",
        "TestStatisticImpl",
        "ContinuedFractionTest",
        "transformers",
        "addElement",
        "testResetFunctionValueAccuracy",
        "DistributionFactoryImpl",
        "getSecRan",
        "testGetVectors",
        "testTransformDouble",
        "copyOut",
        "testIllegalInitialCapacity",
        "testHypergeometricDistributionZeroPositivePositive",
        "getData",
        "testLogBetaZeroPositive",
        "MathException",
        "testSignFloat",
        "testCummulativeProbability8",
        "InteractionTest",
        "testLogBetaPositivePositive",
        "Frequency",
        "testInverseCummulativeProbability001",
        "getPercentile",
        "setY",
        "getDomainUpperBound",
        "testCreateFDistributionNegativePositive",
        "sign",
        "getSigma",
        "InterpolatorTest",
        "getUnivariateStatistic",
        "chiSquare",
        "closeReplayFile",
        "getHeartRate",
        "setWindowSize",
        "testWithInitialCapacity",
        "start",
        "tstGen",
        "testCumulativeProbability9",
        "testCreateFDistributionPositiveZero",
        "ListUnivariateImpl",
        "testIllegalExpansionFactor",
        "negate",
        "testLowerTailValues",
        "MixedListUnivariateImplTest",
        "getInitialDomain",
        "testGridTooFat",
        "predict",
        "UnivariateImplTest",
        "contract",
        "testSetPropertyName",
        "FixedDoubleArrayTest",
        "testBinomialDistributionPositiveZero",
        "testAddFail",
        "testNextInt",
        "testNextReplayFail",
        "setAge",
        "KurtosisTest",
        "testCreateGammaDistributionPositiveZero",
        "testTrace",
        "testSetOutOfBounds",
        "getR",
        "testSkewAndKurtosis",
        "getMu",
        "testTranspose",
        "getRowDimension",
        "setSecureAlgorithm",
        "resetAbsoluteAccuracy",
        "getSortedValues",
        "addObject",
        "testNaNContracts",
        "ContractableDoubleArrayTest",
        "getTransformer",
        "getSignificance",
        "nextGaussian",
        "classes",
        "getTemperature",
        "testTransformers",
        "testBinomialDistributionPositivePositive",
        "testTransformNoSuchMethod",
        "divide",
        "setExpansionFactor",
        "DistributionFactory",
        "testFactorialFail",
        "testCreateTDistributionPositive",
        "clearResult",
        "abs",
        "testCreateFDistributionZeroPositive",
        "getDeterminant",
        "testRegularizedBetaPositivePositiveNegative",
        "testRegularizedGammaZeroPositive",
        "getPct",
        "containsTransformer",
        "containsClass",
        "getNumElements",
        "testGetValues",
        "testFill",
        "getTotalSumSquares",
        "testSetNumberOfElements",
        "testContainsClass",
        "newSecantSolver",
        "newInstance",
        "getBinCount",
        "BeanTransformer",
        "testNextPoisson",
        "loadStats",
        "MaxTest",
        "tstGetSortedValues",
        "nextSecureHexString",
        "testSolveAccuracySin",
        "putTransformer",
        "testLoad",
        "testResetAbsoluteAccuracy",
        "testInverseCummulativeProbability990",
        "increment",
        "testSetElementArbitraryExpansion",
        "newBisectionSolver",
        "testCummulativeProbabilityNegative",
        "tan",
        "testN0andN1Conditions",
        "setName",
        "testCummulativeProbability990",
        "testInverseCummulativeProbabilityOne",
        "testInterpolateLinearDegenerateTwoSegment",
        "testIsSingular",
        "interpolate",
        "testStats",
        "SumSqTest",
        "testCreateGammaDistributionZeroPositive",
        "tanh",
        "testScalarAdd",
        "testNextLong",
        "setValuesFileURL",
        "expandTo",
        "isLoaded",
        "testTransformInvalidType",
        "cummulativeProbability",
        "testProductAndGeometricMean",
        "getUpperBounds",
        "testCreateExponentialDistributionZero",
        "createExponentialDistribution",
        "testProbability",
        "getSum",
        "transpose",
        "pow",
        "subtract",
        "mean",
        "AbstractDiscreteDistribution",
        "test",
        "VarianceTest",
        "testOperate",
        "testTransformInteger",
        "getValuesFileURL",
        "testCummulativeProbability1",
        "testInverseCummulativeProbabilityZero",
        "solve",
        "getDegreesOfFreedom",
        "saveDistribution",
        "ExponentialDistributionImpl",
        "testCreateExponentialDistributionPositive",
        "testUpperTailValues",
        "testInverseCummulativeProbability100",
        "testSignLong",
        "testNextGaussian",
        "HypergeometricDistributionImpl",
        "inverseCummulativeProbability",
        "testCumulativeProbability3",
        "BeanListUnivariateImpl",
        "testInverseCumulativeProbability025",
        "loadDistribution",
        "testGetSortedValues",
        "testValues",
        "getSlopeConfidenceInterval",
        "bracket",
        "BinomialDistributionImpl",
        "computeDistribution",
        "MinTest",
        "Variance",
        "testGoldenRation",
        "asin",
        "reSeed",
        "testCumulativeProbability975",
        "setGamma",
        "UnivariateRealSolverUtil",
        "getMax",
        "getBeta",
        "testCumulativeProbability025",
        "testCummulativeProbability100",
        "testCummulativeProbability900",
        "RandomDataImpl",
        "exp",
        "Beta",
        "acos",
        "Gamma",
        "testNext",
        "toString",
        "testCumulativeProbability950",
        "getProbabilityOfSuccess",
        "firstDerivative",
        "getExpansionFactor",
        "testCreateChiSquareDistributionNegative",
        "testProbabilities",
        "heresBar",
        "Mean",
        "ValueServer",
        "StatUtils",
        "testLogBetaPositiveNan",
        "getNextValue",
        "fill",
        "getRelativeAccuracy",
        "setPopulationSize",
        "testExceedingElements",
        "getRSquare",
        "setZ",
        "testNextSecureHex",
        "FDistributionTest",
        "getInterceptStdErr",
        "testRegularizedGammaPositivePositive",
        "midpoint",
        "testPutTransformer",
        "testSubtract",
        "getX",
        "addValue",
        "setHeartRate",
        "testRegularizedBetaZeroPositivePositive",
        "inverse",
        "StandardDeviationTest",
        "StandardDeviation",
        "getTDistribution",
        "testRegularizedBetaPositiveNegativePositive",
        "testPropStats",
        "ExpandableDoubleArrayTest",
        "TDistributionTest",
        "setElement",
        "factorialLog",
        "setBeta",
        "UnivariateRealSolverFactoryImpl",
        "SumLogTest",
        "ConvergenceException",
        "AbstractUnivariate",
        "testHypergeometricDistributionPositiveNegativePositive",
        "testRegularizedBetaNegativePositivePositive",
        "getPopulationSize",
        "testBinomialDistributionPositiveOne",
        "setMode",
        "testMinMax",
        "findPerm",
        "testRegularizedBetaPositivePositivePositive",
        "isSingular",
        "discardFrontElements",
        "testInverseCumulativeProbability950",
        "getContractionCriteria",
        "testSolve",
        "MathConfigurationException",
        "testCummulativeProbability025",
        "testRegularizedGammaPositiveNegative",
        "getFunctionValueAccuracy",
        "getIdentity",
        "resetMaximalIterationCount",
        "GeometricMeanTest",
        "testT",
        "testCreateGammaDistributionNegativePositive",
        "testNextUniform",
        "testConstructorMessageCause",
        "Median",
        "testSubtractNaN",
        "testEntryMutators",
        "equals",
        "getTrace",
        "sumLog",
        "getColumn",
        "getIntercept",
        "EmpiricalDistributionTest",
        "UnivariateRealSolverUtils",
        "BisectionSolver",
        "getNextExponential",
        "testCumulativeProbability4",
        "testCummulativeProbability2",
        "testLowerTailProbability",
        "getKurtosis",
        "testLogBetaPositiveZero",
        "getColumnDimension",
        "setAbsoluteAccuracy",
        "testNextDigestFail",
        "testCreateExponentialDistributionNegative",
        "reSeedSecure",
        "testInverseCumulativeProbability990",
        "testRollingMinMax",
        "createGammaDistribution",
        "StorelessUnivariateStatisticAbstractTest",
        "testRegularizedGamma",
        "StoreUnivariateImpl",
        "ListUnivariateImplTest",
        "testReplay",
        "testNextDigest",
        "RealSolverTest",
        "testCreateFDistributionPositivePositive",
        "getElements",
        "testBinomialCoefficientFail",
        "cosh",
        "isNaN",
        "ComplexMath",
        "sqrt",
        "testConstructorString",
        "nextExponential",
        "getVariance",
        "AbstractStoreUnivariate",
        "testGetOutOfBounds",
        "testCumulativeProbability5",
        "testCreateTDistributionZero",
        "testInteraction",
        "testInverseCummulativeProbability025",
        "testConjugate",
        "testWithInitialCapacityAndExpansionFactor",
        "df",
        "getVitalStats",
        "testCreateGammaDistributionPositiveNegative",
        "CubicSplineFunction",
        "expectedValue",
        "testLogBetaNanPositive",
        "getTolerance",
        "testInverseCummulativeProbability975",
        "BrentSolver",
        "nextSecureInt",
        "getElement",
        "testSetFunctionValueAccuracy",
        "conjugate",
        "testRegularizedGammaNegativePositive",
        "testNorm",
        "createFDistribution",
        "testRemoveTransformer",
        "testCopyFunctions",
        "getAge",
        "setX",
        "testResetMaximalIterationCount",
        "testLogBetaNegativePositive",
        "testNaNs",
        "max",
        "testPcts",
        "testTransformObject",
        "testNextSecureLong",
        "setNumeratorDegreesOfFreedom",
        "setTransformer",
        "BeanListUnivariateImplTest",
        "getMeanSquareError",
        "getValues",
        "testCumulativeProbability010",
        "testCumulativeProbability2",
        "sum",
        "getGamma",
        "DistributionFactoryImplTest",
        "MeanTest",
        "evaluate",
        "getEntry",
        "operate",
        "getGeometricMean",
        "getSumSquaredErrors",
        "getNextUniform",
        "secondDerivative",
        "testHypergeometricDistributionPositiveZeroPositive",
        "testInverse"
      ],
      "functions_name_co_evolved_modified_file": [
        "divide",
        "negate",
        "squareSum",
        "add",
        "subtract",
        "equals",
        "isNaN",
        "abs",
        "getReal",
        "conjugate",
        "multiply",
        "Complex",
        "getImaginary"
      ],
      "functions_name_co_evolved_all_files": [
        "createHypergeometricDistribution",
        "findSample",
        "testNextExponential",
        "RealMatrixImpl",
        "copyIn",
        "testUnivariateImpl",
        "getKurtosisClass",
        "getY",
        "SkewnessTest",
        "getDomain",
        "HypergeometricDistributionTest",
        "AbstractContinuousDistribution",
        "GammaTest",
        "testHypergeometricDistributionPositivePositiveNegative",
        "getNumeratorDegreesOfFreedom",
        "testDivide",
        "testProperties",
        "getReal",
        "testResetRelativeAccuracy",
        "sqrt1z",
        "getDomainLowerBound",
        "testClasses",
        "getSampleStats",
        "apply",
        "testValue",
        "testNextSecureInt",
        "testInverseCummulativeProbability900",
        "getN",
        "testCreateGammaDistributionPositivePositive",
        "testTransformBigDecimal",
        "testMultiply",
        "testSignInt",
        "binomialCoefficientDouble",
        "getWindowSize",
        "setPropertyName",
        "testRegularizedGammaPositiveNan",
        "testRegularizedBetaNanPositivePositive",
        "testInterpolateLinear",
        "testUpperTailProbability",
        "setMean",
        "FixedDoubleArray",
        "testInverseCumulativeProbability975",
        "getNorm",
        "testInterpolateLinearDegenerateThreeSegment",
        "shuffle",
        "testHighPercentile",
        "testDiscard",
        "nextSecureLong",
        "setVitalStats",
        "testIncrementation",
        "testModes",
        "testInverseCumulativeProbability010",
        "getIterationCount",
        "BivariateRegressionTest",
        "testAddElementRolling",
        "testInverseCummulativeProbability010",
        "binomialCoefficient",
        "setPercentile",
        "testRegularizedGammaPositiveZero",
        "getRow",
        "testLogGammaNegative",
        "ProductTest",
        "setMaximalIterationCount",
        "atan",
        "ChiSquaredDistributionImpl",
        "newBrentSolver",
        "testStoredUnivariateImpl",
        "testPlusMinus",
        "getMin",
        "log",
        "testSignDouble",
        "product",
        "sinh",
        "getSumsq",
        "transform",
        "getNext",
        "TDistributionImpl",
        "openReplayFile",
        "newDefaultSolver",
        "testInverseCummulativeProbability050",
        "testTransformString",
        "setNumberOfTrials",
        "Kurtosis",
        "value",
        "getCount",
        "cos",
        "binomialCoefficientLog",
        "getNumberOfTrials",
        "testAbs",
        "ExpandableDoubleArray",
        "getDenominatorDegreesOfFreedom",
        "Skewness",
        "testSetMaximalIterationCount",
        "testSolveSin",
        "setFunctionValueAccuracy",
        "getUpperDomain",
        "addData",
        "testCounts",
        "testCreateTDistributionNegative",
        "UnivariateRealSolverFactory",
        "testCummulativeProbability0",
        "setInitialCapacity",
        "testNextHex",
        "createTDistribution",
        "assertEquals",
        "UnivariateRealSolverImpl",
        "testInterpolateSin",
        "setDegreesOfFreedom",
        "testDimensions",
        "StoreUnivariateImplTest",
        "testCummulativeProbability010",
        "SumTest",
        "sin",
        "testBinomialCoefficient",
        "testDeterminant",
        "testSignShort",
        "shouldContract",
        "GammaDistributionImpl",
        "RootFinding",
        "setDenominatorDegreesOfFreedom",
        "testPremultiply",
        "testContainsTransformer",
        "testHypergeometricDistributionNegativePositivePositive",
        "UnivariateImpl",
        "getPropertyName",
        "FrequencyTest",
        "testInverseCumulativeProbability100",
        "dumpMatrix",
        "getEmpiricalDistribution",
        "BinomialDistributionTest",
        "testBinomialDistributionNegativePositive",
        "testCumulativeProbability100",
        "assertClose",
        "getDataRef",
        "testBinomialDistributionZeroPositive",
        "ContractableDoubleArray",
        "BetaTest",
        "getRan",
        "scalarMultiply",
        "testConstructorNaN",
        "logBeta",
        "getInternalLength",
        "Complex",
        "PercentileTest",
        "testConstructorCause",
        "findBinomialLimits",
        "setContractionCriteria",
        "testConstructorMessage",
        "resetRelativeAccuracy",
        "testQuinticZero",
        "testSolveAccuracyNull",
        "testCummulativeProbabilityZero",
        "testCumulativeProbability900",
        "testInference",
        "getSlopeStdErr",
        "testRegularizedBetaPositivePositiveZero",
        "suite",
        "load",
        "testConfig",
        "TestStatisticTest",
        "testPercentiles",
        "setRelativeAccuracy",
        "testGetExceeding",
        "testRegularizedBetaPositivePositiveNan",
        "testConjugateNaN",
        "MathUtils",
        "testBinomialDistributionPositiveNegative",
        "testBinomialDistributionPositiveTwo",
        "copy",
        "getRank",
        "EmpiricalDistributionImpl",
        "testCreateFDistributionPositiveNegative",
        "setMu",
        "getNextReplay",
        "testNextSample",
        "clear",
        "ExponentialDistributionTest",
        "min",
        "testCumulativeProbability990",
        "testEvaluation",
        "getSlope",
        "testSignByte",
        "sumSq",
        "RandomDataTest",
        "getNatural",
        "getSampleSize",
        "testInverseCumulativeProbability050",
        "isSquare",
        "setNumberOfSuccesses",
        "preMultiply",
        "testNorris",
        "RealMatrixImplTest",
        "Patient",
        "getAlpha",
        "setData",
        "setUp",
        "removeTransformer",
        "testArrayIndexConditions",
        "LUDecompose",
        "getNextGaussian",
        "findFactorialLimits",
        "addElementRolling",
        "t",
        "getMode",
        "nextHexString",
        "testInverseCummulativeProbability950",
        "testInverseCummulativeProbabilityNegative",
        "testToString",
        "regularizedGammaP",
        "testSolveNull",
        "testRegularizedBetaPositiveZeroPositive",
        "testRegularizedBetaPositiveNanPositive",
        "multiply",
        "getAbsoluteAccuracy",
        "tearDown",
        "setProbabilityOfSuccess",
        "nextPoisson",
        "getRegressionSumSquares",
        "TransformerMap",
        "testGridTooFine",
        "testRegularizedBeta",
        "getSumFreq",
        "probability",
        "testSetName",
        "resetFunctionValueAccuracy",
        "testLogBetaPositiveNegative",
        "testInverseCumulativeProbability900",
        "createChiSquareDistribution",
        "createBinomialDistribution",
        "nextLong",
        "TestUtils",
        "setTemperature",
        "testSinZero",
        "testIllegalArguments",
        "testRegularizedGammaNanPositive",
        "getNumberOfSuccesses",
        "testCummulativeProbability050",
        "logGamma",
        "getMean",
        "getImaginary",
        "testTransformInvocationError",
        "ContinuedFraction",
        "ValueServerTest",
        "testCorr",
        "testOnlyRolling",
        "expand",
        "testCummulativeProbability001",
        "testTransformNull",
        "testSetElement",
        "getResult",
        "squareSum",
        "add",
        "testChiSquare",
        "nextPermutation",
        "ChiSquareDistributionTest",
        "getBinStats",
        "getName",
        "testLogGammaPositive",
        "SecantSolver",
        "nextInt",
        "MedianTest",
        "testFactorial",
        "Percentile",
        "VitalStats",
        "scalarAdd",
        "nextSample",
        "StatUtilsTest",
        "chiSquareTest",
        "getMaximalIterationCount",
        "testInverseCummulativeProbability999",
        "testInverseCummulativeProbabilityPositive",
        "testNegateNaN",
        "getZ",
        "getSkewness",
        "testCummulativeProbability975",
        "testSetRelativeAccuracy",
        "getLowerDomain",
        "setDataRef",
        "setEntry",
        "testConstructor",
        "MathUtilsTest",
        "testTransform",
        "testCreateChiSquareDistributionPositive",
        "tTest",
        "variance",
        "CertifiedDataTest",
        "UnivariateStatisticAbstractTest",
        "regularizedBeta",
        "testLogBeta",
        "testLogGammaZero",
        "nextUniform",
        "setNumElements",
        "factorialDouble",
        "testSetAbsoluteAccuracy",
        "testCumulativeProbability050",
        "FDistributionImpl",
        "setSigma",
        "testCummulativeProbability999",
        "testClear",
        "testNextPermutation",
        "testCreateChiSquareDistributionZero",
        "testHypergeometricDistributionPositivePositiveZero",
        "testLogGamma",
        "testAddNaN",
        "setSampleSize",
        "checkContractExpand",
        "factorial",
        "testDivideNaN",
        "testNegate",
        "testNexFail",
        "testLogGammaNan",
        "testMultiplyNaN",
        "heresFoo",
        "getNextDigest",
        "DoubleArrayAbstractTest",
        "testAdd1000",
        "testAdd",
        "testCummulativeProbability950",
        "getStandardDeviation",
        "setAlpha",
        "setResult",
        "TestStatisticImpl",
        "ContinuedFractionTest",
        "transformers",
        "addElement",
        "testResetFunctionValueAccuracy",
        "DistributionFactoryImpl",
        "getSecRan",
        "testGetVectors",
        "testTransformDouble",
        "copyOut",
        "testIllegalInitialCapacity",
        "testHypergeometricDistributionZeroPositivePositive",
        "getData",
        "testLogBetaZeroPositive",
        "MathException",
        "testSignFloat",
        "testCummulativeProbability8",
        "InteractionTest",
        "testLogBetaPositivePositive",
        "Frequency",
        "testInverseCummulativeProbability001",
        "getPercentile",
        "setY",
        "getDomainUpperBound",
        "testCreateFDistributionNegativePositive",
        "sign",
        "getSigma",
        "InterpolatorTest",
        "getUnivariateStatistic",
        "chiSquare",
        "closeReplayFile",
        "getHeartRate",
        "setWindowSize",
        "testWithInitialCapacity",
        "start",
        "tstGen",
        "testCumulativeProbability9",
        "testCreateFDistributionPositiveZero",
        "ListUnivariateImpl",
        "testIllegalExpansionFactor",
        "negate",
        "testLowerTailValues",
        "MixedListUnivariateImplTest",
        "getInitialDomain",
        "testGridTooFat",
        "predict",
        "UnivariateImplTest",
        "contract",
        "testSetPropertyName",
        "FixedDoubleArrayTest",
        "testBinomialDistributionPositiveZero",
        "testAddFail",
        "testNextInt",
        "testNextReplayFail",
        "setAge",
        "KurtosisTest",
        "testCreateGammaDistributionPositiveZero",
        "testTrace",
        "testSetOutOfBounds",
        "getR",
        "testSkewAndKurtosis",
        "getMu",
        "testTranspose",
        "getRowDimension",
        "setSecureAlgorithm",
        "resetAbsoluteAccuracy",
        "getSortedValues",
        "addObject",
        "testNaNContracts",
        "ContractableDoubleArrayTest",
        "getTransformer",
        "getSignificance",
        "nextGaussian",
        "classes",
        "getTemperature",
        "testTransformers",
        "testBinomialDistributionPositivePositive",
        "testTransformNoSuchMethod",
        "divide",
        "setExpansionFactor",
        "DistributionFactory",
        "testFactorialFail",
        "testCreateTDistributionPositive",
        "clearResult",
        "abs",
        "testCreateFDistributionZeroPositive",
        "getDeterminant",
        "testRegularizedBetaPositivePositiveNegative",
        "testRegularizedGammaZeroPositive",
        "getPct",
        "containsTransformer",
        "containsClass",
        "getNumElements",
        "testGetValues",
        "testFill",
        "getTotalSumSquares",
        "testSetNumberOfElements",
        "testContainsClass",
        "newSecantSolver",
        "newInstance",
        "getBinCount",
        "BeanTransformer",
        "testNextPoisson",
        "loadStats",
        "MaxTest",
        "tstGetSortedValues",
        "nextSecureHexString",
        "testSolveAccuracySin",
        "putTransformer",
        "testLoad",
        "testResetAbsoluteAccuracy",
        "testInverseCummulativeProbability990",
        "increment",
        "testSetElementArbitraryExpansion",
        "newBisectionSolver",
        "testCummulativeProbabilityNegative",
        "tan",
        "testN0andN1Conditions",
        "setName",
        "testCummulativeProbability990",
        "testInverseCummulativeProbabilityOne",
        "testInterpolateLinearDegenerateTwoSegment",
        "testIsSingular",
        "interpolate",
        "testStats",
        "SumSqTest",
        "testCreateGammaDistributionZeroPositive",
        "tanh",
        "testScalarAdd",
        "testNextLong",
        "setValuesFileURL",
        "expandTo",
        "isLoaded",
        "testTransformInvalidType",
        "cummulativeProbability",
        "testProductAndGeometricMean",
        "getUpperBounds",
        "testCreateExponentialDistributionZero",
        "createExponentialDistribution",
        "testProbability",
        "getSum",
        "transpose",
        "pow",
        "subtract",
        "mean",
        "AbstractDiscreteDistribution",
        "test",
        "VarianceTest",
        "testOperate",
        "testTransformInteger",
        "getValuesFileURL",
        "testCummulativeProbability1",
        "testInverseCummulativeProbabilityZero",
        "solve",
        "getDegreesOfFreedom",
        "saveDistribution",
        "ExponentialDistributionImpl",
        "testCreateExponentialDistributionPositive",
        "testUpperTailValues",
        "testInverseCummulativeProbability100",
        "testSignLong",
        "testNextGaussian",
        "HypergeometricDistributionImpl",
        "inverseCummulativeProbability",
        "testCumulativeProbability3",
        "BeanListUnivariateImpl",
        "testInverseCumulativeProbability025",
        "loadDistribution",
        "testGetSortedValues",
        "testValues",
        "getSlopeConfidenceInterval",
        "bracket",
        "BinomialDistributionImpl",
        "computeDistribution",
        "MinTest",
        "Variance",
        "testGoldenRation",
        "asin",
        "reSeed",
        "testCumulativeProbability975",
        "setGamma",
        "UnivariateRealSolverUtil",
        "getMax",
        "getBeta",
        "testCumulativeProbability025",
        "testCummulativeProbability100",
        "testCummulativeProbability900",
        "RandomDataImpl",
        "exp",
        "Beta",
        "acos",
        "Gamma",
        "testNext",
        "toString",
        "testCumulativeProbability950",
        "getProbabilityOfSuccess",
        "firstDerivative",
        "getExpansionFactor",
        "testCreateChiSquareDistributionNegative",
        "testProbabilities",
        "heresBar",
        "Mean",
        "ValueServer",
        "StatUtils",
        "testLogBetaPositiveNan",
        "getNextValue",
        "fill",
        "getRelativeAccuracy",
        "setPopulationSize",
        "testExceedingElements",
        "getRSquare",
        "setZ",
        "testNextSecureHex",
        "FDistributionTest",
        "getInterceptStdErr",
        "testRegularizedGammaPositivePositive",
        "midpoint",
        "testPutTransformer",
        "testSubtract",
        "getX",
        "addValue",
        "setHeartRate",
        "testRegularizedBetaZeroPositivePositive",
        "inverse",
        "StandardDeviationTest",
        "StandardDeviation",
        "getTDistribution",
        "testRegularizedBetaPositiveNegativePositive",
        "testPropStats",
        "ExpandableDoubleArrayTest",
        "TDistributionTest",
        "setElement",
        "factorialLog",
        "setBeta",
        "UnivariateRealSolverFactoryImpl",
        "SumLogTest",
        "ConvergenceException",
        "AbstractUnivariate",
        "testHypergeometricDistributionPositiveNegativePositive",
        "testRegularizedBetaNegativePositivePositive",
        "getPopulationSize",
        "testBinomialDistributionPositiveOne",
        "setMode",
        "testMinMax",
        "findPerm",
        "testRegularizedBetaPositivePositivePositive",
        "isSingular",
        "discardFrontElements",
        "testInverseCumulativeProbability950",
        "getContractionCriteria",
        "testSolve",
        "MathConfigurationException",
        "testCummulativeProbability025",
        "testRegularizedGammaPositiveNegative",
        "getFunctionValueAccuracy",
        "getIdentity",
        "resetMaximalIterationCount",
        "GeometricMeanTest",
        "testT",
        "testCreateGammaDistributionNegativePositive",
        "testNextUniform",
        "testConstructorMessageCause",
        "Median",
        "testSubtractNaN",
        "testEntryMutators",
        "equals",
        "getTrace",
        "sumLog",
        "getColumn",
        "getIntercept",
        "EmpiricalDistributionTest",
        "UnivariateRealSolverUtils",
        "BisectionSolver",
        "getNextExponential",
        "testCumulativeProbability4",
        "testCummulativeProbability2",
        "testLowerTailProbability",
        "getKurtosis",
        "testLogBetaPositiveZero",
        "getColumnDimension",
        "setAbsoluteAccuracy",
        "testNextDigestFail",
        "testCreateExponentialDistributionNegative",
        "reSeedSecure",
        "testInverseCumulativeProbability990",
        "testRollingMinMax",
        "createGammaDistribution",
        "StorelessUnivariateStatisticAbstractTest",
        "testRegularizedGamma",
        "StoreUnivariateImpl",
        "ListUnivariateImplTest",
        "testReplay",
        "testNextDigest",
        "RealSolverTest",
        "testCreateFDistributionPositivePositive",
        "getElements",
        "testBinomialCoefficientFail",
        "cosh",
        "isNaN",
        "ComplexMath",
        "sqrt",
        "testConstructorString",
        "nextExponential",
        "getVariance",
        "AbstractStoreUnivariate",
        "testGetOutOfBounds",
        "testCumulativeProbability5",
        "testCreateTDistributionZero",
        "testInteraction",
        "testInverseCummulativeProbability025",
        "testConjugate",
        "testWithInitialCapacityAndExpansionFactor",
        "df",
        "getVitalStats",
        "testCreateGammaDistributionPositiveNegative",
        "CubicSplineFunction",
        "expectedValue",
        "testLogBetaNanPositive",
        "getTolerance",
        "testInverseCummulativeProbability975",
        "BrentSolver",
        "nextSecureInt",
        "getElement",
        "testSetFunctionValueAccuracy",
        "conjugate",
        "testRegularizedGammaNegativePositive",
        "testNorm",
        "createFDistribution",
        "testRemoveTransformer",
        "testCopyFunctions",
        "getAge",
        "setX",
        "testResetMaximalIterationCount",
        "testLogBetaNegativePositive",
        "testNaNs",
        "max",
        "testPcts",
        "testTransformObject",
        "testNextSecureLong",
        "setNumeratorDegreesOfFreedom",
        "setTransformer",
        "BeanListUnivariateImplTest",
        "getMeanSquareError",
        "getValues",
        "testCumulativeProbability010",
        "testCumulativeProbability2",
        "sum",
        "getGamma",
        "DistributionFactoryImplTest",
        "MeanTest",
        "evaluate",
        "getEntry",
        "operate",
        "getGeometricMean",
        "getSumSquaredErrors",
        "getNextUniform",
        "secondDerivative",
        "testHypergeometricDistributionPositiveZeroPositive",
        "testInverse"
      ]
    },
    "file": {
      "file_name": "Complex.java",
      "file_nloc": 101,
      "file_complexity": 30,
      "file_token_count": 718,
      "file_before": "",
      "file_after": "",
      "file_patch": "@@ -0,0 +1,255 @@\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"Apache\" and \"Apache Software Foundation\" and\n+ *    \"Apache Geronimo\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\",\n+ *    \"Apache Geronimo\", nor may \"Apache\" appear in their name, without\n+ *    prior written permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ * ====================================================================\n+ */\n+\n+package org.apache.commons.math.complex;\n+\n+/**\n+ * Reference:\n+ *   http://myweb.lmu.edu/dmsmith/ZMLIB.pdf\n+ * \n+ * @version $Revision: 1.3 $ $Date: 2003/11/14 22:22:22 $\n+ */\n+public class Complex {\n+\n+    /** The square root of -1. */    \n+    public static final Complex I = new Complex(0.0, 1.0);\n+    \n+    /** */\n+    public static final Complex NaN = new Complex(Double.NaN, Double.NaN);\n+\n+    /** 1. */    \n+    public static final Complex ONE = new Complex(1.0, 0.0);\n+    \n+    /** The imaginary part. */\n+    protected double imaginary;\n+    \n+    /** The real part. */\n+    protected double real;\n+    \n+    /**\n+     * Create a complex number given the real and imaginary parts.\n+     * @param real the real part.\n+     * @param imaginary the imaginary part.\n+     */\n+    public Complex(double real, double imaginary) {\n+        super();\n+        this.real = real;\n+        this.imaginary = imaginary;\n+    }\n+\n+    /**\n+     * Return the absolute value of this complex number.\n+     * @return the absolute value.\n+     */\n+    public double abs() {\n+        if (isNaN()) {\n+            return Double.NaN;\n+        }\n+        return Math.sqrt(squareSum());       \n+    }\n+    \n+    /**\n+     * Return the sum of this complex number and the given complex number.\n+     * @param rhs the other complex number.\n+     * @return the complex number sum.\n+     */\n+    public Complex add(Complex rhs) {\n+        if (isNaN() || rhs.isNaN()) {\n+            return NaN;\n+        }\n+        \n+        return new Complex(real + rhs.getReal(),\n+            imaginary + rhs.getImaginary());\n+    }\n+    \n+    /**\n+     * Return the conjugate of this complex number.\n+     * @return the conjugate.\n+     */\n+    public Complex conjugate() {\n+        if (isNaN()) {\n+            return NaN;\n+        }\n+        \n+        return new Complex(real, -imaginary);\n+    }\n+    \n+    /**\n+     * Return the quotient of this complex number and the given complex number.\n+     * @param rhs the other complex number.\n+     * @return the complex number quotient.\n+     */\n+    public Complex divide(Complex rhs) {\n+        if (isNaN() || rhs.isNaN()) {\n+            return NaN;\n+        }\n+        \n+        if (Math.abs(rhs.getReal()) < Math.abs(rhs.getImaginary())) {\n+            double q = rhs.getReal() / rhs.getImaginary();\n+            double d = (rhs.getReal() * q) + rhs.getImaginary();\n+            return new Complex(((real * q) + imaginary) / d,\n+                ((imaginary * q) - real) / d);\n+        } else {\n+            double q = rhs.getImaginary() / rhs.getReal();\n+            double d = (rhs.getImaginary() * q) + rhs.getReal();\n+            return new Complex(((imaginary * q) + real) / d,\n+                (imaginary - (real * q)) / d);\n+        }\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public boolean equals(Object other) {\n+        boolean ret;\n+        \n+        if (this == other) { \n+            ret = true;\n+        } else if (other == null) {\n+            ret = false;\n+        } else {\n+            try {\n+                Complex rhs = (Complex)other;\n+                ret = (Double.doubleToRawLongBits(real) ==\n+                        Double.doubleToRawLongBits(rhs.getReal())) &&\n+                    (Double.doubleToRawLongBits(imaginary) ==\n+                        Double.doubleToRawLongBits(rhs.getImaginary())); \n+            } catch (ClassCastException ex) {\n+                // ignore exception\n+                ret = false;\n+            }\n+        }\n+        \n+        return ret;\n+    }\n+\n+    /**\n+     * Access the imaginary part.\n+     * @return the imaginary part.\n+     */\n+    public double getImaginary() {\n+        return imaginary;\n+    }\n+\n+    /**\n+     * Access the real part.\n+     * @return the real part.\n+     */\n+    public double getReal() {\n+        return real;\n+    }\n+    \n+    /**\n+     * Returns true if this complex number is the special Not-a-Number (NaN)\n+     * value.\n+     * @return true if the value represented by this object is NaN; false\n+     *         otherwise.\n+     */\n+    public boolean isNaN() {\n+        return Double.isNaN(real) || Double.isNaN(imaginary);        \n+    }\n+    \n+    /**\n+     * Return the product of this complex number and the given complex number.\n+     * @param rhs the other complex number.\n+     * @return the complex number product.\n+     */\n+    public Complex multiply(Complex rhs) {\n+        if (isNaN() || rhs.isNaN()) {\n+            return NaN;\n+        }\n+        \n+        double p = (real + imaginary) * (rhs.getReal() + rhs.getImaginary());\n+        double ac = real * rhs.getReal();\n+        double bd = imaginary * rhs.getImaginary();\n+        return new Complex(ac - bd, p - ac - bd);\n+    }\n+    \n+    /**\n+     * Return the additive inverse of this complex number.\n+     * @return the negation of this complex number.\n+     */\n+    public Complex negate() {\n+        if (isNaN()) {\n+            return NaN;\n+        }\n+        \n+        return new Complex(-real, -imaginary);\n+    }\n+    \n+    /**\n+     * Return the sum of the squared terms.\n+     * @return the square sum.\n+     */\n+    private double squareSum() {\n+        return real * real + imaginary * imaginary;\n+    }\n+    \n+    /**\n+     * Return the difference between this complex number and the given complex\n+     * number.\n+     * @param rhs the other complex number.\n+     * @return the complex number difference.\n+     */\n+    public Complex subtract(Complex rhs) {\n+        if (isNaN() || rhs.isNaN()) {\n+            return NaN;\n+        }\n+        \n+        return new Complex(real - rhs.getReal(),\n+            imaginary - rhs.getImaginary());\n+    }\n+}\n",
      "files_name_in_blame_commit": [
        "ConvergenceExceptionTest.java",
        "StoreUnivariateImplTest.java",
        "MaxTest.java",
        "Mean.java",
        "GammaDistributionTest.java",
        "BeanTransformerTest.java",
        "SinFunction.java",
        "TDistribution.java",
        "HypergeometricDistributionTest.java",
        "Skewness.java",
        "DistributionFactoryImplTest.java",
        "DefaultTransformer.java",
        "HypergeometricDistribution.java",
        "ProductTest.java",
        "UnivariateRealSolverUtilsTest.java",
        "UnivariateRealSolverUtil.java",
        "GammaDistributionImpl.java",
        "BeanTransformer.java",
        "AbstractStorelessUnivariateStatistic.java",
        "TestUtils.java",
        "BrentSolver.java",
        "StorelessUnivariateStatisticAbstractTest.java",
        "FDistribution.java",
        "Min.java",
        "MeanTest.java",
        "RealMatrixImplTest.java",
        "UnivariateRealInterpolator.java",
        "BeanListUnivariateImplTest.java",
        "UnivariateStatistic.java",
        "UnivariateRealSolver.java",
        "CubicSplineFunction.java",
        "UnivariateFunction.java",
        "SumSqTest.java",
        "UnivariateRealSolverFactoryImpl.java",
        "UnivariateRealFunction.java",
        "UnivariateRealSolverImpl.java",
        "MinTest.java",
        "FixedDoubleArrayTest.java",
        "SkewnessTest.java",
        "StatUtils.java",
        "ChiSquareDistributionTest.java",
        "BinomialDistribution.java",
        "Univariate.java",
        "Beta.java",
        "MathException.java",
        "Gamma.java",
        "DistributionFactoryImpl.java",
        "SumOfLogs.java",
        "GeometricMean.java",
        "BeanListUnivariateImpl.java",
        "StandardDeviationTest.java",
        "UnivariateRealSolverUtils.java",
        "BivariateRegressionTest.java",
        "GammaDistribution.java",
        "StorelessUnivariateStatistic.java",
        "ListUnivariateImpl.java",
        "TestStatisticTest.java",
        "TDistributionTest.java",
        "RealMatrixImpl.java",
        "ChiSquaredDistribution.java",
        "ExpandableDoubleArray.java",
        "MathExceptionTest.java",
        "FDistributionImpl.java",
        "SumTest.java",
        "SplineInterpolator.java",
        "RandomDataTest.java",
        "StandardDeviation.java",
        "ContinuousDistribution.java",
        "FixedDoubleArray.java",
        "RandomDataImpl.java",
        "Product.java",
        "EmpiricalDistributionTest.java",
        "CertifiedDataTest.java",
        "ExpandableDoubleArrayTest.java",
        "Frequency.java",
        "AbstractDiscreteDistribution.java",
        "RootFinding.java",
        "SecondMoment.java",
        "Variance.java",
        "MedianTest.java",
        "GeometricMeanTest.java",
        "GammaTest.java",
        "KurtosisTest.java",
        "RealSolverTest.java",
        "AbstractUnivariate.java",
        "PercentileTest.java",
        "BetaTest.java",
        "AbstractUnivariateStatistic.java",
        "NumberTransformer.java",
        "MixedListUnivariateImplTest.java",
        "FDistributionTest.java",
        "Patient.java",
        "EmpiricalDistributionImpl.java",
        "ValueServer.java",
        "Max.java",
        "TransformerMap.java",
        "MathConfigurationExceptionTest.java",
        "InterpolatorTest.java",
        "ValueServerTest.java",
        "SumLogTest.java",
        "AbstractContinuousDistribution.java",
        "RandomData.java",
        "ConvergenceException.java",
        "BinomialDistributionImpl.java",
        "Median.java",
        "UnivariateImpl.java",
        "QuinticFunction.java",
        "DoubleArrayAbstractTest.java",
        "TransformerMapTest.java",
        "MathUtilsTest.java",
        "TestBean.java",
        "Sum.java",
        "AbstractStoreUnivariate.java",
        "SecantSolver.java",
        "TDistributionImpl.java",
        "DefaultTransformerTest.java",
        "TestStatistic.java",
        "BisectionSolverTest.java",
        "ExponentialDistributionTest.java",
        "InteractionTest.java",
        "ListUnivariateImplTest.java",
        "BisectionSolver.java",
        "ComplexMath.java",
        "Percentile.java",
        "TestStatisticImpl.java",
        "BinomialDistributionTest.java",
        "ExponentialDistribution.java",
        "SumOfSquares.java",
        "StatUtilsTest.java",
        "DistributionFactory.java",
        "MathConfigurationException.java",
        "BivariateRegression.java",
        "FrequencyTest.java",
        "UnivariateImplTest.java",
        "EmpiricalDistribution.java",
        "ContinuedFractionTest.java",
        "Kurtosis.java",
        "FourthMoment.java",
        "DoubleArray.java",
        "VarianceTest.java",
        "ThirdMoment.java",
        "MathUtils.java",
        "UnivariateRealSolverFactory.java",
        "UnivariateStatisticAbstractTest.java",
        "FirstMoment.java",
        "DiscreteDistribution.java",
        "ContractableDoubleArrayTest.java",
        "Complex.java",
        "RealMatrix.java",
        "ComplexTest.java",
        "ContinuedFraction.java",
        "HypergeometricDistributionImpl.java",
        "Applyable.java",
        "StoreUnivariateImpl.java",
        "VitalStats.java",
        "ContractableDoubleArray.java",
        "ChiSquaredDistributionImpl.java",
        "ExponentialDistributionImpl.java",
        "StoreUnivariate.java"
      ]
    }
  },
  "commits_modify_file_before_fix": {
    "size": 21
  }
}