{
  "id": "24",
  "blame_commit": {
    "commit": {
      "commit_id": "847b296c23a63aa0a0b38cc3e63883e1688288e3",
      "commit_message": "Add support for other charset types.\n\nAdd support for ES5 directives.\n\nFork unit tests, so that they run more hermetically.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@21 b0f006be-c8cd-11de-a2e8-8d36a3108c74",
      "commit_author": "nicholas.j.santos@gmail.com",
      "commit_date": "2009-12-08 23:50:11",
      "commit_parent": "845f5ff65858fd0d1829f3d2f16f758725e8028f"
    },
    "function": {
      "function_name": "strEscape",
      "function_code_before": "",
      "function_code_after": "static String strEscape(String s, char quote,\n                        String doublequoteEscape,\n                        String singlequoteEscape,\n                        String backslashEscape,\n                        CharsetEncoder outputCharsetEncoder) {\n  StringBuilder sb = new StringBuilder();\n  sb.append(quote);\n  for (int i = 0; i < s.length(); i++) {\n    char c = s.charAt(i);\n    switch (c) {\n      case '\\n': sb.append(\"\\\\n\"); break;\n      case '\\r': sb.append(\"\\\\r\"); break;\n      case '\\t': sb.append(\"\\\\t\"); break;\n      case '\\\\': sb.append(backslashEscape); break;\n      case '\\\"': sb.append(doublequoteEscape); break;\n      case '\\'': sb.append(singlequoteEscape); break;\n      case '>':                       // Break --> into --\\> or ]]> into ]]\\>\n        if (i >= 2 &&\n            ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||\n             (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n          sb.append(\"\\\\>\");\n        } else {\n          sb.append(c);\n        }\n        break;\n      case '<':                       // Break </script into <\\/script\n        final String END_SCRIPT = \"/script\";\n        if (s.regionMatches(true, i + 1, END_SCRIPT, 0,\n            END_SCRIPT.length())) {\n          sb.append(\"<\\\\\");\n        } else {\n          sb.append(c);\n        }\n        break;\n      default:\n        // If we're given an outputCharsetEncoder, then check if the\n        //  character can be represented in this character set.\n        if (outputCharsetEncoder != null) {\n          if (outputCharsetEncoder.canEncode(c)) {\n            sb.append(c);\n          } else {\n            // Unicode-escape the character.\n            StringUtil.appendHexJavaScriptRepresentation(sb, c);\n          }\n        } else {\n          // No charsetEncoder provided - pass straight latin characters\n          // through, and escape the rest.  Doing the explicit character\n          // check is measurably faster than using the CharsetEncoder.\n          if (c > 0x1f && c <= 0x7f) {\n            sb.append(c);\n          } else {\n            // Other characters can be misinterpreted by some js parsers,\n            // or perhaps mangled by proxies along the way,\n            // so we play it safe and unicode escape them.\n            StringUtil.appendHexJavaScriptRepresentation(sb, c);\n          }\n        }\n    }\n  }\n  sb.append(quote);\n  return sb.toString();\n}",
      "function_before_start_line": "",
      "function_before_end_line": "",
      "function_after_start_line": 793,
      "function_after_end_line": 854,
      "function_before_token_count": 0,
      "function_after_token_count": 366,
      "functions_name_modified_file": [
        "CodeGenerator",
        "addAllSiblings",
        "getFirstNonEmptyChild",
        "addLeftExpr",
        "identifierEscape",
        "addExpr",
        "clearContextForNoInOperator",
        "add",
        "addIdentifier",
        "getNonEmptyChildCount",
        "addNonEmptyExpression",
        "regexpEscape",
        "addList",
        "strEscape",
        "getContextForNoInOperator",
        "addCaseBody",
        "getContextForNonEmptyExpression",
        "jsString"
      ],
      "functions_name_all_files": [
        "maybeAliasNamesOnAssign",
        "testBitwiseOps",
        "recordPrototypePropUse",
        "getCurrentCharIndex",
        "createNode",
        "isStaticNameReference",
        "recordInterfaces",
        "getErrorCount",
        "getNonEmptyChildCount",
        "enables",
        "fromCode",
        "cloneTree",
        "testThrow",
        "JSSourceFile",
        "setDefineToNumberLiteral",
        "testRegexp",
        "addChildToFront",
        "isNoSideEffectsCall",
        "mergeLineCharNo",
        "getCode",
        "AbstractCompilerRunner",
        "main",
        "processBlock",
        "processContinueStatement",
        "setWarningLevel",
        "setQuotedString",
        "testTypeCheckingOffByDefault",
        "addFunctionDeclaration",
        "testLabel2",
        "MethodCompilerPass",
        "testTryCatchFinally",
        "defineNameIfNotExists",
        "strEscape",
        "endSourceMapping",
        "getRegion",
        "apply",
        "maybeSanityCheck",
        "processNewExpression",
        "NumberNode",
        "exitScope",
        "isLocalNameReference",
        "testCompareLocation",
        "isTypeCheckingEnabled",
        "setLineno",
        "addAssignmentDeclaration",
        "getLength",
        "TypedCodeGenerator",
        "defineAndAlias",
        "testNumber2",
        "endsWith",
        "addType",
        "createExterns",
        "disableThreads",
        "putBooleanProp",
        "isEmptyFunction",
        "getJsDocBuilderForNode",
        "processPrototypeParent",
        "hasSideEffects",
        "isForwardDeclaredType",
        "createNullableType",
        "addLeftExpr",
        "isOn",
        "setLineLengthThreshold",
        "connectUnknowns",
        "setPassConfig",
        "processObjectProperty",
        "getCurrentLineIndex",
        "testTry2",
        "handleCatch",
        "endPass",
        "getModule",
        "getLineIndex",
        "addAllSiblings",
        "outputSourceMap",
        "setRunOptions",
        "testAssignment",
        "transform",
        "toSource",
        "FlagUsageException",
        "JSTypeSystem",
        "getNext",
        "toStringTree",
        "pushContainingFunction",
        "testVar2",
        "Compiler",
        "addSignature",
        "tokenToName",
        "Name",
        "testParen",
        "setProcessObjectPropertyString",
        "getGetPropertyName",
        "precheck",
        "getPosition",
        "addWarningsGuard",
        "fromReader",
        "handleReturn",
        "transformAsString",
        "processExpressionStatement",
        "exposedToCallOrApply",
        "getSortedPropTypes",
        "getMapPath",
        "testSwitch3",
        "getUseSites",
        "convertPosition",
        "isContinueTarget",
        "testFor",
        "testBreak",
        "hasChildren",
        "testDefineFlag",
        "processStringLiteral",
        "getScope",
        "getCurrentBufferLength",
        "nextUniqueNameId",
        "addPossibleSignature",
        "getCharno",
        "getDirectImplementors",
        "handleGetProp",
        "createMessageFormatter",
        "checkTreeEquals",
        "toStringTreeImpl",
        "setCode",
        "resetForTypeCheck",
        "generateSourceMap",
        "setOptionsForWarningLevel",
        "getReferencesAt",
        "getActingCallback",
        "addTypeToSkip",
        "transformTree",
        "getFirstNonEmptyChild",
        "processForInLoop",
        "setRemoveAbstractMethods",
        "setDefineToDoubleLiteral",
        "getPropertyName",
        "processAssignment",
        "createOptionalType",
        "testVar3",
        "normalizeNodeTypes",
        "isContinueStructure",
        "hashCode",
        "clone",
        "setTemplateTypeName",
        "testForIn",
        "checkTreeEqualsImpl",
        "IRFactory",
        "PassFactory",
        "hasSideEffect",
        "shouldRename",
        "restrictByNotNullOrUndefined",
        "testArrayLiteral3",
        "testScope",
        "newParse",
        "getDirectives",
        "getWarningsGuard",
        "skipAllCompilerPasses",
        "testTry5",
        "processVariableDeclaration",
        "annotateCodingConvention",
        "handleObjectLit",
        "testLinenoFor",
        "processRegExpLiteral",
        "isUnscopedQualifiedName",
        "testRemoveDo",
        "removeChangeHandler",
        "clearContextForNoInOperator",
        "setAliased",
        "report",
        "reportCodeChange",
        "buildCallNode",
        "testHookLocation",
        "createSourceInputs",
        "reset",
        "isDirective",
        "testDebugger",
        "testArrayLiteral2",
        "hasHaltingErrors",
        "openExternExportsStream",
        "addChildToBack",
        "toStringTreeHelper",
        "declareType",
        "doRun",
        "testNoRemoveUseStrict",
        "processName",
        "testLinenoDeclaration",
        "testIfLocation",
        "getDefinitionSites",
        "setCollapsePropertiesOnExternTypes",
        "getSourceLine",
        "renameProperties",
        "registerNativeType",
        "getState",
        "hasNext",
        "testReturn",
        "getTypesToSkipForType",
        "setUp",
        "setLastGeneration",
        "startPass",
        "getColumnIndex",
        "processParenthesizedExpression",
        "setType",
        "processCatchClause",
        "register",
        "MethodCheck",
        "getChildAtIndex",
        "getAllInputsFromModules",
        "clearTemplateTypeName",
        "isOptionalArg",
        "handleContinue",
        "getFunctionAnnotation",
        "computeFallThrough",
        "initOptionsFromFlags",
        "isInliningForbidden",
        "connectToPossibleExceptionHandler",
        "getNodeForCodeInsertion",
        "IntermediateState",
        "remove",
        "tearDown",
        "checkFirstModule",
        "setSourceMap",
        "lookupProperty",
        "getSite",
        "processFunctionCall",
        "identifierEscape",
        "removeChildren",
        "isUnknown",
        "getVariableMap",
        "setPrettyPrint",
        "processArrayLiteral",
        "processSwitchStatement",
        "NameReferenceGraph",
        "getJSDocInfo",
        "testPrefixLocation",
        "testTryLocation",
        "testReturnLocation",
        "justTransform",
        "createJsModules",
        "isNormalized",
        "getModuleGraph",
        "putProp",
        "handleIf",
        "getPropertyMap",
        "createCompiler",
        "processIllegalToken",
        "testNew2",
        "estimateSavings",
        "testWith",
        "createParameterizedType",
        "handleStmtList",
        "testFunctionCall2",
        "testCommentPositions",
        "appendOp",
        "setIsSyntheticBlock",
        "compile",
        "getTypeRegistry",
        "setJSDocInfo",
        "getErrorManager",
        "resetUniqueNameId",
        "testTry4",
        "reduce",
        "normalize",
        "getResult",
        "handleStmt",
        "add",
        "stripCode",
        "handleCase",
        "getSimplifiedName",
        "getName",
        "processFunctionNode",
        "testWhile",
        "fromGenerator",
        "isPrototypeNameReference",
        "SimpleDefinitionFinder",
        "Comparator<DiGraphNode<Node,Branch>>",
        "addChildBefore",
        "initializeRegistry",
        "testUnary3",
        "testBinaryExprLocation",
        "applyToOptions",
        "Traversal",
        "CompilerRunner",
        "recordSuperClassPrototypePropUse",
        "testArrayLiteral",
        "regexpEscape",
        "canPropertyBeDefined",
        "Reference",
        "testTypeCheckingOnWithVerbose",
        "testObjectLiteral",
        "processScope",
        "testUnary2",
        "testStrictScript",
        "getTypeValidator",
        "getTypesToSkipForTypeNonUnion",
        "processDoLoop",
        "DisambiguateProperties",
        "build",
        "getMessages",
        "PrettyCodePrinter",
        "getDefaultExterns",
        "getNamedContainingFunction",
        "testFunction6",
        "putIntProp",
        "createRecordType",
        "recordPrototypePropDefinition",
        "newString",
        "Generated",
        "makeCompilerInput",
        "testElementGet",
        "testVarDeclLocation",
        "startNewLine",
        "fromFile",
        "parseDirectives",
        "expandTypesToSkip",
        "processProperty",
        "getNextSiblingOfType",
        "testRemoveUnreachableCode",
        "createExternInputs",
        "setCssRenamingMap",
        "SiblingNodeIterable",
        "addChildrenToBack",
        "handleFunction",
        "getPassConfig",
        "removeChildAfter",
        "testParen2",
        "testCheckSymbolsOffForDefault",
        "prioritizeFromEntryNode",
        "setCharno",
        "getOptions",
        "ReductionGatherer",
        "newNumber",
        "createFunctionType",
        "endLine",
        "testSwitch2",
        "createOptionalParameters",
        "testReturn3",
        "CompilerOptions",
        "getSourceMap",
        "createFunctionTypeWithNewReturnType",
        "getType",
        "getFunctionScope",
        "wasEmptyNode",
        "testRegexp2",
        "endFunction",
        "getReverseAbstractInterpreter",
        "testRemoveUselessStrings",
        "processKeywordLiteral",
        "parseModuleWrappers",
        "testScript",
        "testRegexpLocation",
        "Reduction",
        "containsName",
        "popContainingFunction",
        "getNativeFunctionType",
        "createUnionType",
        "testFunctionCall3",
        "handleWhile",
        "maybeCutLine",
        "endCaseBody",
        "testFunctionCall",
        "listSeparator",
        "markExported",
        "testCheckSymbolsOverrideForVerbose",
        "createConstructorType",
        "testLabel",
        "getNativeType",
        "appendBlockEnd",
        "createFromTypeNodes",
        "testString",
        "forJSTypeSystem",
        "getWarnings",
        "processElementGet",
        "replaceChild",
        "setRewriteNewDateGoogNow",
        "isInvalidatingType",
        "testArrayLiteral4",
        "handleSwitch",
        "check",
        "addChangeHandler",
        "setDirectives",
        "isSyntheticBlock",
        "testIf2",
        "outputNameMaps",
        "processTryStatement",
        "setCodingConvention",
        "setJSType",
        "init",
        "registerPropertyOnType",
        "next",
        "testFunction",
        "handleTry",
        "createParameters",
        "createEnumType",
        "getGreatestSubtypeWithProperty",
        "testSame",
        "toSourceArray",
        "testCheckUndefinedProperties",
        "propToString",
        "getLineno",
        "getChildCount",
        "getCssRenamingMap",
        "handleWith",
        "createConstructorTypeWithVarArgs",
        "testSwitchLocation",
        "forConcreteTypeSystem",
        "createAnonymousObjectType",
        "isLastGeneration",
        "testString2",
        "processWhileLoop",
        "AstControlFlowGraph",
        "recordStaticNameDefinition",
        "safeAlias",
        "hasChild",
        "newExternInput",
        "testName",
        "hasOneChild",
        "createPassConfigInternal",
        "isExtern",
        "newTracer",
        "Property",
        "getExistingIntProp",
        "createRecordTypeFromNodes",
        "isQuotedString",
        "maybeLineBreak",
        "processForLoop",
        "notePreferredLineBreak",
        "visit",
        "testFunction5",
        "setDouble",
        "getTopScope",
        "rebuildInputsFromModules",
        "setColorizeErrorOutput",
        "recordStaticNameUse",
        "reportDestructuringAssign",
        "testObjectLiteral3",
        "testFunction2",
        "setOptionalArg",
        "getErrors",
        "maybeGetSingleReturnRValue",
        "getOptionalNodeComparator",
        "testNew",
        "processAstRoot",
        "computeCFG",
        "OnDisk",
        "testReturn2",
        "createDefaultOptions",
        "initInputsByNameMap",
        "setErrorManager",
        "processDefines",
        "setState",
        "getChildBefore",
        "isVarArgs",
        "testInfix",
        "isBreakStructure",
        "processPropertyGet",
        "getProp",
        "addList",
        "compileInternal",
        "setWasEmptyNode",
        "cloneNode",
        "extractLineno",
        "runCustomPasses",
        "throwInternalError",
        "getAstDotGraph",
        "getSymbol",
        "FunctionRewriter",
        "getRoot",
        "isBreakTarget",
        "setDefineToStringLiteral",
        "mayThrowException",
        "getString",
        "testAssignment2",
        "testFunctionStrictModeNoWarning",
        "getUniqueNameIdSupplier",
        "handleFor",
        "getTypeAlternatives",
        "getSetPropertyName",
        "getNameReferenceGraph",
        "testNoRemoveUselessNameStatements",
        "getInput",
        "clearCachedSource",
        "getRootScope",
        "testCheckSymbolsOnForVerbose",
        "getDiagnoticGroups",
        "parseInputs",
        "ControlFlowAnalysis",
        "test",
        "testEmpty",
        "siblings",
        "testObjectLiteral2",
        "removeFirstChild",
        "getProcessor",
        "testMultilineBitTestLocation",
        "isEquivalentTo",
        "createParametersWithVarArgs",
        "scheduleRenaming",
        "recordUnknownUse",
        "fromInputStream",
        "getContextForNoInOperator",
        "connect",
        "Preloaded",
        "getInstanceFromPrototype",
        "getTypeAnnotation",
        "getDeclarations",
        "isAliased",
        "run",
        "setNormalized",
        "process",
        "incrementGeneration",
        "createFunctionTypeWithVarArgs",
        "getCodeNoCache",
        "setUnnormalized",
        "setVarArgs",
        "processVariableInitializer",
        "setIdGenerators",
        "setIsNoSideEffectsCall",
        "getProperty",
        "openSourceMapStream",
        "testMultilineEqLocation",
        "extractCharno",
        "removeChild",
        "oldParse",
        "testTry",
        "isIdentityFunction",
        "getCfg",
        "testNew3",
        "handleThrow",
        "recordClassConstructorOrInterface",
        "addChildrenToFront",
        "isQualifiedName",
        "setModule",
        "processObjectLiteral",
        "testDoLoop",
        "testObjectLitLocation",
        "NameReferenceGraphConstruction",
        "createObjectType",
        "CodeGenerator",
        "setNameAnonymousFunctionsOnly",
        "getQualifiedName",
        "canChangeSignature",
        "replaceChildAfter",
        "toString",
        "testIf",
        "isCallable",
        "setRenamingPolicy",
        "addVerboseWarnings",
        "processEmptyExpression",
        "hasMoreThanOneChild",
        "getDefinitionsReferencedAt",
        "testCommaLocation",
        "addDefaultWarnings",
        "createDefineReplacements",
        "addCaseBody",
        "beginCaseBody",
        "getSourceRegion",
        "buildPropNames",
        "appendStringTree",
        "getWarningCount",
        "getTypes",
        "AncestorIterable",
        "getCharset",
        "processGeneric",
        "parseAllJsDocInfo",
        "getDefineReplacements",
        "CompactCodePrinter",
        "setString",
        "addExpr",
        "getLine",
        "processUnaryExpression",
        "testContinue",
        "processLabeledStatement",
        "processThrowStatement",
        "testEqualityLocation",
        "testNestedOr",
        "getCodingConvention",
        "ensureProperty",
        "handleDo",
        "identifyEnumName",
        "shouldGenerateMapPerModule",
        "getAncestor",
        "reportLineCut",
        "handleBreak",
        "parseSyntheticCode",
        "testTry3",
        "testFunctionParamLocation",
        "getAncestors",
        "testVar",
        "isCall",
        "processReturnStatement",
        "processSwitchCase",
        "parseHelperCode",
        "jsString",
        "detachFromParent",
        "recordFunctionInformation",
        "testFunction4",
        "addInvalidatingType",
        "recordSubclassPrototypePropUse",
        "testScriptStrictModeNoWarning",
        "getFirstChild",
        "getBooleanProp",
        "testRemoveUselessNameStatements",
        "setOutputTypes",
        "getFunctionalInformationMap",
        "hasNamespace",
        "setLoggingLevel",
        "addIdentifier",
        "startSourceMapping",
        "testLabelLocation",
        "processBreakStatement",
        "addNonEmptyExpression",
        "processNumberLiteral",
        "runInCompilerThread",
        "matchLabel",
        "getTypeWithProperty",
        "acquireSymbolTable",
        "handleDefault",
        "stopTracer",
        "isIdeMode",
        "testTryWithoutFinallyLocation",
        "initBasedOnOptions",
        "externExports",
        "getScopeCreator",
        "setLineBreak",
        "addToDebugLog",
        "getIntProp",
        "testLabel3",
        "testRemoveUselessLiteralValueStatements",
        "addChildAfter",
        "optimize",
        "processConditionalExpression",
        "assertMarkerPosition",
        "getHelperSource",
        "testConditionalDeadCode",
        "getParent",
        "testObjectLiteral5",
        "processWithStatement",
        "position2charno",
        "testPlusEqLocation",
        "SourceFile",
        "checkTreeEqualsSilent",
        "createInputs",
        "getRenamedTypesForTesting",
        "testKeywordLiteral",
        "shouldColorizeErrorOutput",
        "runSanityCheck",
        "StringNode",
        "isExported",
        "detachChildren",
        "forwardDeclareType",
        "appendBlockStart",
        "append",
        "getDefaultErrorReporter",
        "assertNodePosition",
        "registerTypeImplementingInterface",
        "copyInformationFrom",
        "createOptionalNullableType",
        "resolveTypesInScope",
        "testCallLocation",
        "addIncrementalSourceAst",
        "testLiteralLocation",
        "initializeBuiltInTypes",
        "getCompiler",
        "getSourceFileByName",
        "markExposedToCallOrApply",
        "JSTypeRegistry",
        "testConditional",
        "setCharset",
        "ConcreteTypeSystem",
        "getLastChild",
        "parseTestCode",
        "getInputCharset",
        "handleExpr",
        "processLabel",
        "iterator",
        "maybeCreateDirsForPath",
        "getDouble",
        "setChainCalls",
        "isTypeToSkip",
        "testSwitch",
        "setOutputCharset",
        "testNumber",
        "nameUsesArgumentsProperty",
        "createInterfaceType",
        "children",
        "testRemovalRequiresRedeclaration",
        "getContextForNonEmptyExpression",
        "getSignatureStore",
        "Builder",
        "writeOutput",
        "MappedCodePrinter",
        "maybeRecordExport",
        "testPropertyGet",
        "testFunction3",
        "createOptions",
        "createEdge",
        "removeSignature",
        "getValueNode",
        "invalidate",
        "shouldTraverse",
        "setDefineToBooleanLiteral",
        "DefinitionGatheringCallback",
        "processInfixExpression",
        "getTypesWithProperty",
        "getErrorPrintStream",
        "parse",
        "testSwitchCase",
        "processIfStatement",
        "removeProp",
        "testObjectLiteral4",
        "getLastSibling",
        "removeTryCatchFinally",
        "maybeAddAutoboxes",
        "setUnknown",
        "getNativeObjectType",
        "hasErrors",
        "getLastChar",
        "computeFollowNode",
        "parseJSDocInfo",
        "testDuplicateParams",
        "getJSType",
        "testTryWithoutCatchLocation",
        "Node",
        "enterScope",
        "testUnary",
        "transformTokenType"
      ],
      "functions_name_co_evolved_modified_file": [
        "CodeGenerator",
        "identifierEscape",
        "add",
        "regexpEscape",
        "strEscape",
        "jsString"
      ],
      "functions_name_co_evolved_all_files": [
        "parseDirectives",
        "CodeGenerator",
        "testRemoveUselessStrings",
        "processAstRoot",
        "add",
        "TypedCodeGenerator",
        "OnDisk",
        "processFunctionNode",
        "doRun",
        "createInputs",
        "jsString",
        "getRenamedTypesForTesting",
        "SimpleDefinitionFinder",
        "testNoRemoveUseStrict",
        "identifierEscape",
        "runSanityCheck",
        "testScriptStrictModeNoWarning",
        "addDefaultWarnings",
        "process",
        "regexpEscape",
        "compileInternal",
        "getCode",
        "getDirectives",
        "setCharset",
        "testStrictScript",
        "getCharset",
        "openSourceMapStream",
        "getInputCharset",
        "build",
        "setDirectives",
        "endPass",
        "strEscape",
        "testFunctionStrictModeNoWarning",
        "maybeSanityCheck",
        "setRunOptions",
        "setOutputCharset",
        "parseInputs",
        "toSource",
        "compile",
        "fromFile",
        "isDirective",
        "tearDown"
      ]
    },
    "file": {
      "file_name": "CodeGenerator.java",
      "file_nloc": 693,
      "file_complexity": 188,
      "file_token_count": 4362,
      "file_before": "",
      "file_after": "",
      "file_patch": "@@ -16,12 +16,15 @@\n \n package com.google.javascript.jscomp;\n \n+import com.google.common.base.Charsets;\n import com.google.common.base.Preconditions;\n import com.google.common.base.StringUtil;\n import com.google.javascript.rhino.Node;\n import com.google.javascript.rhino.Token;\n import com.google.javascript.rhino.TokenStream;\n \n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetEncoder;\n \n /**\n  * CodeGenerator generates codes from a parse tree, sending it to the specified\n@@ -34,8 +37,23 @@ class CodeGenerator {\n \n   private final CodeConsumer cc;\n \n-  CodeGenerator(CodeConsumer consumer) {\n+  private final CharsetEncoder outputCharsetEncoder;\n+\n+  CodeGenerator(CodeConsumer consumer, Charset outputCharset) {\n     cc = consumer;\n+    if (outputCharset == null || outputCharset == Charsets.US_ASCII) {\n+      // If we want our default (pretending to be UTF-8, but escaping anything\n+      // outside of straight ASCII), then don't use the encoder, but\n+      // just special-case the code.  This keeps the normal path through\n+      // the code identical to how it's been for years.\n+      this.outputCharsetEncoder = null;\n+    } else {\n+      this.outputCharsetEncoder = outputCharset.newEncoder();\n+    }\n+  }\n+\n+  CodeGenerator(CodeConsumer consumer) {\n+    this(consumer, null);\n   }\n \n   void add(String str) {\n@@ -221,7 +239,7 @@ class CodeGenerator {\n           throw new Error(\"Expected children to be strings\");\n         }\n \n-        String regexp = regexpEscape(first.getString());\n+        String regexp = regexpEscape(first.getString(), outputCharsetEncoder);\n \n         // I only use one .add because whitespace matters\n         if (childCount == 2) {\n@@ -495,7 +513,7 @@ class CodeGenerator {\n \n       case Token.STRING:\n         Preconditions.checkState(childCount == 0);\n-        add(jsString(n.getString()));\n+        add(jsString(n.getString(), outputCharsetEncoder));\n         break;\n \n       case Token.DELPROP:\n@@ -730,7 +748,7 @@ class CodeGenerator {\n   }\n \n   /** Outputs a js string, using the optimal (single/double) quote character */\n-  static String jsString(String s) {\n+  static String jsString(String s, CharsetEncoder outputCharsetEncoder) {\n     int singleq = 0, doubleq = 0;\n \n     // could count the quotes and pick the optimal quote character\n@@ -755,19 +773,28 @@ class CodeGenerator {\n       singlequote = \"\\'\";\n     }\n \n-    return strEscape(s, quote, doublequote, singlequote, \"\\\\\\\\\");\n+    return strEscape(s, quote, doublequote, singlequote, \"\\\\\\\\\",\n+        outputCharsetEncoder);\n   }\n \n   /** Escapes regular expression */\n+  static String regexpEscape(String s, CharsetEncoder outputCharsetEncoder) {\n+    return strEscape(s, '/', \"\\\"\", \"'\", \"\\\\\", outputCharsetEncoder);\n+  }\n+\n+  /* If the user doesn't want to specify an output charset encoder, assume\n+     they want Latin/ASCII characters only.\n+   */\n   static String regexpEscape(String s) {\n-    return strEscape(s, '/', \"\\\"\", \"'\", \"\\\\\");\n+    return regexpEscape(s, null);\n   }\n \n   /** Helper to escape javascript string as well as regular expression */\n   static String strEscape(String s, char quote,\n                           String doublequoteEscape,\n                           String singlequoteEscape,\n-                          String backslashEscape) {\n+                          String backslashEscape,\n+                          CharsetEncoder outputCharsetEncoder) {\n     StringBuilder sb = new StringBuilder();\n     sb.append(quote);\n     for (int i = 0; i < s.length(); i++) {\n@@ -798,15 +825,27 @@ class CodeGenerator {\n           }\n           break;\n         default:\n-          // Please keep in sync with the same code in identifierEscape().\n-          if (c > 0x1F && c < 0x7F) {\n-            // Non-control ASCII characters are safe to transmit\n-            sb.append(c);\n+          // If we're given an outputCharsetEncoder, then check if the\n+          //  character can be represented in this character set.\n+          if (outputCharsetEncoder != null) {\n+            if (outputCharsetEncoder.canEncode(c)) {\n+              sb.append(c);\n+            } else {\n+              // Unicode-escape the character.\n+              StringUtil.appendHexJavaScriptRepresentation(sb, c);\n+            }\n           } else {\n-            // Other characters can be misinterpreted by some js parsers,\n-            // or perhaps mangled by proxies along the way,\n-            // so we play it safe and unicode escape them.\n-            StringUtil.appendHexJavaScriptRepresentation(sb, c);\n+            // No charsetEncoder provided - pass straight latin characters\n+            // through, and escape the rest.  Doing the explicit character\n+            // check is measurably faster than using the CharsetEncoder.\n+            if (c > 0x1f && c <= 0x7f) {\n+              sb.append(c);\n+            } else {\n+              // Other characters can be misinterpreted by some js parsers,\n+              // or perhaps mangled by proxies along the way,\n+              // so we play it safe and unicode escape them.\n+              StringUtil.appendHexJavaScriptRepresentation(sb, c);\n+            }\n           }\n       }\n     }\n@@ -824,7 +863,9 @@ class CodeGenerator {\n     StringBuilder sb = new StringBuilder();\n     for (int i = 0; i < s.length(); i++) {\n       char c = s.charAt(i);\n-      // See comments for the same code in strEscape(). Please keep in sync.\n+      // Identifiers should always go to Latin1/ ASCII characters because\n+      // different browser's rules for valid identifier characters are\n+      // crazy.\n       if (c > 0x1F && c < 0x7F) {\n         sb.append(c);\n       } else {\n",
      "files_name_in_blame_commit": [
        "UnreachableCodeEliminationTest.java",
        "IRFactory.java",
        "CompilerRunner.java",
        "FunctionRewriter.java",
        "JSSourceFile.java",
        "MethodCheck.java",
        "TypedCodeGenerator.java",
        "SimpleDefinitionFinder.java",
        "NameReferenceGraphConstruction.java",
        "Node.java",
        "Compiler.java",
        "IRFactoryTest.java",
        "DisambiguateProperties.java",
        "CompilerOptions.java",
        "CodeGenerator.java",
        "SourceFile.java",
        "AbstractCompilerRunner.java",
        "CodePrinter.java",
        "WarningLevel.java",
        "CompilerRunnerTest.java",
        "ControlFlowAnalysis.java",
        "MethodCompilerPass.java",
        "JSTypeRegistry.java",
        "NameReferenceGraph.java"
      ]
    }
  },
  "commits_modify_file_before_fix": {
    "size": 50
  }
}