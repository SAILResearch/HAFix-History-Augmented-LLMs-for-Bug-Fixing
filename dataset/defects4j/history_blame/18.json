{
  "id": "18",
  "blame_commit": {
    "commit": {
      "commit_id": "41acde3e8e5e8d37ade765b41d9fd29861f03e5e",
      "commit_message": "Define number keys in object literals to be quoted string nodes. Tagged with NUMBER_PROP\nFixes issue 347\n\nR=nicksantos\nDELTA=229  (157 added, 19 deleted, 53 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION=1252\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@966 b0f006be-c8cd-11de-a2e8-8d36a3108c74",
      "commit_author": "johnlenz@google.com",
      "commit_date": "2011-04-04 21:26:33",
      "commit_parent": "9f19220fbd022e8fbcee16d117564d5412e4ffa7"
    },
    "function": {
      "function_name": "isSimpleNumber",
      "function_code_before": "",
      "function_code_after": "static boolean isSimpleNumber(String s) {\n  int len = s.length();\n  for (int index = 0; index < len; index++) {\n    char c = s.charAt(index);\n    if (c < '0' || c > '9') {\n      return false;\n    }\n  }\n  return len > 0;\n}",
      "function_before_start_line": "",
      "function_before_end_line": "",
      "function_after_start_line": 736,
      "function_after_end_line": 745,
      "function_before_token_count": 0,
      "function_after_token_count": 62,
      "functions_name_modified_file": [
        "CodeGenerator",
        "getFirstNonEmptyChild",
        "add",
        "getContextForNoInOperator",
        "jsString",
        "getNonEmptyChildCount",
        "identifierEscape",
        "isIndirectEval",
        "addNonEmptyStatement",
        "regexpEscape",
        "isSimpleNumber",
        "addList",
        "appendHexJavaScriptRepresentation",
        "addCaseBody",
        "addLeftExpr",
        "addIdentifier",
        "escapeToDoubleQuotedJsString",
        "strEscape",
        "addAllSiblings",
        "clearContextForNoInOperator",
        "isOneExactlyFunctionOrDo",
        "addExpr",
        "addArrayList",
        "getSimpleNumber",
        "tagAsStrict",
        "getContextForNonEmptyExpression"
      ],
      "functions_name_all_files": [
        "testTrailingCommaWarning1",
        "testBitwiseOps",
        "checkForStateChangeHelper",
        "setReturnsTainted",
        "getNonEmptyChildCount",
        "testPrettyPrinter",
        "testJSDocAttachment2",
        "referencesThis",
        "cloneTree",
        "testThrow",
        "testExternedPropertyName",
        "setSourceInfo",
        "testRegexp",
        "addChildToFront",
        "isNoSideEffectsCall",
        "assertPrint",
        "testReparse",
        "testModule",
        "mergeLineCharNo",
        "processContinueStatement",
        "processBlock",
        "setQuotedString",
        "testLinenoCharnoAssign1",
        "testLinenoCharnoMod",
        "testLabel2",
        "escapeToDoubleQuotedJsString",
        "isBooleanResultHelper",
        "testDefineNumber",
        "getSourceName",
        "strEscape",
        "isValidDefineValue",
        "testSetter",
        "isStatementBlock",
        "testAmbiguousElseClauses",
        "isFunctionObjectApply",
        "apply",
        "processNewExpression",
        "NumberNode",
        "getCatchBlock",
        "testCompareLocation",
        "getSimpleNumber",
        "testLinenoCharnoMul",
        "testParsePrintParse",
        "isNullOrUndefined",
        "getArgumentForFunction",
        "testJSDocAttachment1",
        "setDebugInformation",
        "isAssociative",
        "setLineno",
        "testLinenoCharnoGe",
        "reportSetter",
        "testNumber2",
        "testRenamePrototypes2",
        "isVarArgsFunction",
        "parseError",
        "reportSetterParam",
        "testConstForbidden",
        "SimpleDefinitionEnumerator",
        "putBooleanProp",
        "testTypeAnnotationsDispatcher1",
        "isSimpleNumber",
        "getJsDocBuilderForNode",
        "appendHexJavaScriptRepresentation",
        "processPrototypeParent",
        "checkTreeTypeAwareEqualsImpl",
        "hasSideEffects",
        "testIncorrectJSDocDoesNotAlterJSParsing7",
        "testAvoidingConflictsBetweenQuotedAndUnquotedPropertyNames",
        "addLeftExpr",
        "processObjectProperty",
        "isLocalResultCall",
        "testPrototypeProperties",
        "testPrintArray",
        "addAllSiblings",
        "testAssignment",
        "getPrototypePropertyName",
        "callHasLocalResult",
        "transform",
        "isEmptyBlock",
        "getNext",
        "toStringTree",
        "testDestructuringAssignForbidden",
        "testTrailingCommaWarning5",
        "testVar2",
        "isImmutableValue",
        "isControlStructure",
        "MatchNodeType",
        "getCount",
        "tokenToName",
        "testTypeAnnotationsMember",
        "getNameReferenceCount",
        "testParen",
        "testPrototypePropertiesStable",
        "trimJsWhiteSpace",
        "isReferenceName",
        "testRenamePropertiesWithLeadingUnderscores",
        "testFreeCall1",
        "assertLineBreak",
        "isExprCall",
        "isObjectLitKey",
        "processExpressionStatement",
        "testObjectLiteral7",
        "transformAsString",
        "testFileOverviewJSDoc2",
        "testModules",
        "getSortedPropTypes",
        "newNumberNode",
        "PropListItem",
        "testPrintScript",
        "getFunctionBody",
        "testSwitch3",
        "testPropertyAffinityOff",
        "isLabelName",
        "testLiteralProperty",
        "testMixedQuotedAndUnquotedObjLitKeysStable",
        "testPrototypePropertiesAsObjLitKeys2",
        "getRootOfQualifiedName",
        "handleJsDoc",
        "testFor",
        "testBreak",
        "hasChildren",
        "testLinenoCharnoCall",
        "testJSDocAttachment14",
        "removeFlag",
        "testGetter",
        "checkDefinitionsInExterns",
        "testObjectLiteral6",
        "processStringLiteral",
        "getCharno",
        "getObjectLitKeyName",
        "checkTreeEquals",
        "toStringTreeImpl",
        "testStableSimple1",
        "transformTree",
        "getFirstNonEmptyChild",
        "processForInLoop",
        "testJSDocAttachment15",
        "testGettersForbidden2",
        "testReservedKeywords",
        "processAssignment",
        "testVar3",
        "hashCode",
        "canBeSideEffected",
        "testPropertyAddedToObject",
        "testForIn",
        "checkTreeEqualsImpl",
        "IRFactory",
        "setMutatesThis",
        "testLinenoCharnoAnd",
        "isThis",
        "testStableWithTrickyExternsChanges",
        "testNegation3",
        "testGettersForbidden3",
        "testArrayLiteral3",
        "testScope",
        "newParse",
        "getDirectives",
        "count",
        "testLinenoCharnoArrayLiteral",
        "isSimpleOperator",
        "processVariableDeclaration",
        "testLinenoCharnoAssign2",
        "testJSDocAttachment6",
        "testFreeCall3",
        "testParseBlockDescription",
        "testLinenoFor",
        "testRenamePropertiesWithLeadingUnderscoresStable",
        "processRegExpLiteral",
        "isUnscopedQualifiedName",
        "clearContextForNoInOperator",
        "isGetOrSetKey",
        "testParse",
        "isString",
        "testStableRenaming",
        "Comparator<Property>",
        "testObjectLiteralDoc1",
        "testHookLocation",
        "reportGetterParam",
        "isDirective",
        "getAssignedValue",
        "testRemoveRenameFunctionStubs2",
        "testDebugger",
        "testLinenoCharnoGetelem1",
        "testJSDocAttachment3",
        "testArrayLiteral2",
        "RenamePrototypesTest",
        "getStringValue",
        "getArgumentForCallOrNew",
        "addChildToBack",
        "toStringTreeHelper",
        "testIndirectEval",
        "areBitFlagsSet",
        "isLiteralValue",
        "canRenamePrototypeProperty",
        "parsePrint",
        "testGettersForbidden5",
        "testLinenoCharnoBinaryOr",
        "redeclareVarsInsideBranch",
        "processName",
        "testLinenoDeclaration",
        "maybeAddFinally",
        "testStaticAndInstanceMethodWithSameName",
        "testStableTrickyExternedMethods",
        "testIfLocation",
        "testStableSimple3",
        "isExpressionNode",
        "isName",
        "testJSDocAttachment5",
        "hasNext",
        "handlePossibleFileOverviewJsDoc",
        "testReturn",
        "setUp",
        "testJSDocAttachment9",
        "newFunctionNode",
        "processParenthesizedExpression",
        "getArrayElementStringValue",
        "ParserResult",
        "setType",
        "processCatchClause",
        "testPrettyPrinter3",
        "getChildAtIndex",
        "testFunctionWithCall",
        "isBooleanResult",
        "isOptionalArg",
        "testLinenoCharnoAdd",
        "isEquivalentToTyped",
        "testLinenoCharnoHook",
        "tagAsStrict",
        "isNumericResultHelper",
        "remove",
        "tearDown",
        "getNodeTypeReferenceCount",
        "testSamePropertyNameQuotedAndUnquoted",
        "newQualifiedNameNode",
        "testPropertyAddedToFunction",
        "getSideEffectFlags",
        "lookupProperty",
        "isLatin",
        "processFunctionCall",
        "identifierEscape",
        "removeChildren",
        "testRenamePrototypesWithGetOrSet",
        "testIncorrectJSDocDoesNotAlterJSParsing5",
        "processArrayLiteral",
        "testPrefixLocation",
        "processSwitchStatement",
        "getJSDocInfo",
        "testTryLocation",
        "mayHaveSideEffects",
        "getNodeClass",
        "justTransform",
        "testReturnLocation",
        "testLinenoCharnoGetelem3",
        "testRenamePropertiesFunctionCall2",
        "getOpFromAssignmentOp",
        "putProp",
        "clearSideEffectFlags",
        "getPropertyMap",
        "testDirectEval",
        "processIllegalToken",
        "testNew2",
        "testLinenoCharnoOr",
        "testWith",
        "testTypeAnnotationsAssign",
        "assertTypeAnnotations",
        "testQuotedPrototypeProperty",
        "isFunction",
        "testLinenoCharnoBinop",
        "testFunctionCall2",
        "isForIn",
        "isControlStructureCodeBlock",
        "testCommentPositions",
        "setIsSyntheticBlock",
        "setThrows",
        "setJSDocInfo",
        "isReservedKeyword",
        "isUndefined",
        "testFreeCall2",
        "add",
        "testIncorrectJSDocDoesNotAlterJSParsing6",
        "testGeneratePseudoNames",
        "processFunctionNode",
        "testWhile",
        "isVar",
        "checkDefinitions",
        "addChildBefore",
        "testUnary3",
        "testBinaryExprLocation",
        "getImpureBooleanValue",
        "canRename",
        "testArrayLiteral",
        "regexpEscape",
        "copyInformationFromForTree",
        "testPrototypePropertiesAsObjLitKeys1",
        "transformNumberAsString",
        "testObjectLiteral",
        "processScope",
        "testSettersForbidden",
        "testUnary2",
        "testFunctionsNamesAndIds",
        "testStrictScript",
        "createScript",
        "processDoLoop",
        "testRenameProperties",
        "testJSDocAttachment8",
        "testFunction6",
        "testTypeAnnotationsNamespace",
        "isTryCatchNodeContainer",
        "putIntProp",
        "newString",
        "testCallInExterns",
        "testElementGet",
        "markPrototypePropertyCandidate",
        "testVarDeclLocation",
        "testNoParseError",
        "parseDirectives",
        "testPrototypePropertiesAsObjLitKeys3",
        "testPropertyAffinity",
        "testTypeAnnotationsDispatcher2",
        "testSetQuotedPropertyOfThis",
        "SiblingNodeIterable",
        "addChildrenToBack",
        "canRenameObjLitProperty",
        "isVarDeclaration",
        "removeChildAfter",
        "testParen2",
        "nodeTypeMayHaveSideEffects",
        "has",
        "isIndirectEval",
        "testObjectLitInExterns",
        "setCharno",
        "newNumber",
        "testStable",
        "testSetPropertyOfThis",
        "getFnParamNode",
        "testObjectLiteral8",
        "getInfoForNameNode",
        "testSwitch2",
        "testReturn3",
        "testEmitUnknownParamTypesAsAllType",
        "testTypeAnnotationsTypeDef",
        "getType",
        "wasEmptyNode",
        "testTrailingCommaWarning3",
        "testObjectLit2",
        "testRegexp2",
        "testIncorrectJSDocDoesNotAlterJSParsing8",
        "testLinenoCharnoGt",
        "setAllFlags",
        "testLetForbidden",
        "processKeywordLiteral",
        "isTryFinallyNode",
        "testTypeAnnotationsInterface",
        "testLinenoCharnoSub",
        "testScript",
        "testRegexpLocation",
        "testLinenoCharnoLe",
        "testJSDocAttachment11",
        "valueOf",
        "hasFinally",
        "testFunctionCall3",
        "testFunctionCall",
        "assertPrintNode",
        "transformNameAsString",
        "constructorCallHasSideEffects",
        "newStringNode",
        "isConstantName",
        "addNonEmptyStatement",
        "testExternedPropertyNameDefinedByObjectLiteral",
        "markObjLitPropertyCandidate",
        "setMutatesArguments",
        "testLabel",
        "testString",
        "markPropertyAccessCandidate",
        "processElementGet",
        "FunctionNamesTest",
        "replaceChild",
        "testArrayLiteral4",
        "isStrWhiteSpaceChar",
        "testLineLength",
        "setDirectives",
        "setMutatesGlobalState",
        "testPrintInOperatorInForLoop",
        "testIncorrectJSDocDoesNotAlterJSParsing9",
        "isSyntheticBlock",
        "testIf2",
        "processTryStatement",
        "testUnfinishedComment",
        "testJSDocAttachment7",
        "setJSType",
        "newNode",
        "next",
        "testFunction",
        "isExprAssign",
        "testSettersForbidden2",
        "testOverlappingOriginalAndGeneratedNamesStable",
        "propToString",
        "getLineno",
        "testLinenoCharnoObjectLiteral",
        "getChildCount",
        "isFunctionObjectCallOrApply",
        "testOptionalTypesAnnotation",
        "testLinenoCharnoDiv",
        "testSwitchLocation",
        "testTrailingCommaWarning6",
        "testString2",
        "processWhileLoop",
        "testPropertyAddedToObjectStable",
        "hasChild",
        "testVariableArgumentsTypesAnnotation",
        "assertLineLength",
        "setSideEffectFlags",
        "testDoLoopIECompatiblity",
        "testPrototypePropertiesAsObjLitKeysStable",
        "testFunctionArgumentsBasic",
        "isSwitchCase",
        "hasOneChild",
        "newName",
        "testPropertyNameThatIsBothObjLitKeyAndPrototypeProperty",
        "testName",
        "newCallNode",
        "Property",
        "getExistingIntProp",
        "validAssignmentTarget",
        "isQuotedString",
        "testKeywordsAsProperties",
        "testPrettyPrinter4",
        "isFunctionExpression",
        "processForLoop",
        "visit",
        "testFunction5",
        "setDouble",
        "assertPrintNumber",
        "getObjectLitKeyTypeFromValueType",
        "testRenamePropertiesFunctionCallStable",
        "getVarsDeclaredInBranch",
        "isValidPropertyName",
        "isOneExactlyFunctionOrDo",
        "testMixedQuotedAndUnquotedObjLitKeys1",
        "reportDestructuringAssign",
        "testObjectLiteral3",
        "isFunctionObjectCall",
        "testFunction2",
        "setOptionalArg",
        "testMixedQuotedAndUnquotedObjLitKeys2",
        "isPrototypePropertyDeclaration",
        "testSubtraction",
        "testNew",
        "testNegCollapse",
        "assertNodeEquality",
        "processAstRoot",
        "isStatementParent",
        "isWithinLoop",
        "addSuppression",
        "clonePropsFrom",
        "testReturn2",
        "isLoopStructure",
        "isVarArgs",
        "getChildBefore",
        "testInfix",
        "arrayToString",
        "testGettersForbidden1",
        "processPropertyGet",
        "getFunctionInfo",
        "getProp",
        "addList",
        "setWasEmptyNode",
        "isOnlyModifiesThisCall",
        "cloneNode",
        "extractLineno",
        "testHook",
        "testPrint",
        "isArrayLiteral",
        "testAssignment2",
        "getString",
        "isAssign",
        "setFileOverviewJsDoc",
        "createTemplateNode",
        "getNearestFunctionName",
        "testEmpty",
        "siblings",
        "testObjectLiteral2",
        "newExpr",
        "removeFirstChild",
        "getProcessor",
        "isToStringMethodCall",
        "testMultilineBitTestLocation",
        "mayBeString",
        "isEquivalentTo",
        "testIncorrectAttemptToAccessQuotedProperty",
        "getContextForNoInOperator",
        "testStableSimple2",
        "isNew",
        "RenamePrototypes",
        "process",
        "getNumRepetitions",
        "setVarArgs",
        "processVariableInitializer",
        "testDestructuringAssignForbidden3",
        "isAssignmentOp",
        "testDefinitionInExterns",
        "testLinenoCharnoShift",
        "getProperty",
        "extractCharno",
        "testRenamePropertiesFunctionCall1",
        "removeChild",
        "oldParse",
        "testLinenoCharnoGetProp2",
        "testNew3",
        "testDefineGet",
        "testYieldForbidden",
        "isFunctionDeclaration",
        "addChildrenToFront",
        "isQualifiedName",
        "testObjectLit3",
        "processObjectLiteral",
        "getConditionExpression",
        "testDoLoop",
        "testLinenoCharnoLt",
        "testObjectLitLocation",
        "testExponents",
        "isGetProp",
        "CodeGenerator",
        "isStatement",
        "replaceChildAfter",
        "getQualifiedName",
        "testDefineFunction",
        "toString",
        "testIf",
        "reusePrototypeNames",
        "getAddingRoot",
        "createJsDocInfoParser",
        "processEmptyExpression",
        "hasMoreThanOneChild",
        "getNthSibling",
        "testCommaLocation",
        "testDestructuringAssignForbidden4",
        "isObjectCallMethod",
        "testLinenoCharnoGetelem2",
        "valueCheck",
        "opToStr",
        "copyNameAnnotations",
        "isConstantByConvention",
        "newUndefinedNode",
        "addCaseBody",
        "appendStringTree",
        "containsType",
        "isSimpleFunctionObjectCall",
        "AncestorIterable",
        "testMultipleDefinition",
        "testIncorrectJSDocDoesNotAlterJSParsing3",
        "processGeneric",
        "hasCatchHandler",
        "reportGetter",
        "testGeneratorsForbidden",
        "containsFunction",
        "testPrettyPrinter2",
        "setString",
        "addExpr",
        "testFunctionSafariCompatiblity",
        "processUnaryExpression",
        "testBracelessFunctionForbidden",
        "testContinue",
        "testOverlappingOriginalAndGeneratedNames",
        "processLabeledStatement",
        "processThrowStatement",
        "testFileOverviewJSDocDoesNotHoseParsing",
        "testEqualityLocation",
        "testNestedOr",
        "isCallOrNew",
        "testCatchClauseForbidden",
        "testNewParser",
        "testPropertyOfObjectOfUnknownType",
        "getAncestor",
        "testUnescapedSlashInRegexpCharClass",
        "testFunctionParamLocation",
        "testUnary",
        "testFunctionArgumentsInExterns",
        "getAncestors",
        "testVar",
        "isCall",
        "getNumberValue",
        "processReturnStatement",
        "processSwitchCase",
        "testAssignmentValidation",
        "jsString",
        "detachFromParent",
        "isLhs",
        "testJSDocAttachment4",
        "testFunction4",
        "testLineBreak",
        "isHoistedFunctionDeclaration",
        "getFirstChild",
        "testLinenoCharnoForComparison",
        "testDuplicatedParam",
        "getBooleanProp",
        "isNull",
        "isEmptyFunctionExpression",
        "checkUnexpectedErrorsOrWarnings",
        "testNegation1",
        "evaluatesToLocalValue",
        "addIdentifier",
        "testLabelLocation",
        "getLoopCodeBlock",
        "processBreakStatement",
        "processNumberLiteral",
        "tryMergeBlock",
        "testObjectLiteralInLocalScope",
        "testNegation2",
        "testTryWithoutFinallyLocation",
        "testMultilineEqLocation",
        "equals",
        "getIntProp",
        "testLabel3",
        "addChildAfter",
        "processConditionalExpression",
        "assertMarkerPosition",
        "testTempConstructor",
        "getStringNumberValue",
        "compileModules",
        "assertPrettyPrint",
        "getPrototypeClassName",
        "testStableOverlap",
        "getParent",
        "testObjectLiteral5",
        "processWithStatement",
        "getPureBooleanValue",
        "position2charno",
        "testPlusEqLocation",
        "testIncorrectJSDocDoesNotAlterJSParsing4",
        "testObjectLit",
        "testKeywordLiteral",
        "opToStrNoFail",
        "testTrailingCommaWarning2",
        "testAvoidingConflictsBetQuotedAndUnquotedPropertyNamesStable",
        "StringNode",
        "isPrototypeProperty",
        "detachChildren",
        "append",
        "getFunctionName",
        "assertNodePosition",
        "testJSDocAttachment10",
        "getFnParameters",
        "copyInformationFrom",
        "NodeMismatch",
        "testDefineSet",
        "testLiteralLocation",
        "testCallLocation",
        "isSimpleOperatorType",
        "testIncorrectJSDocDoesNotAlterJSParsing1",
        "testTypeAnnotationsImplements",
        "testConditional",
        "testGettersForbidden4",
        "isNumericResult",
        "transformBlock",
        "getLastChild",
        "printNode",
        "testIncorrectJSDocDoesNotAlterJSParsing2",
        "processLabel",
        "iterator",
        "functionCallHasSideEffects",
        "isCommutative",
        "getDouble",
        "testU2UFunctionTypeAnnotation",
        "NodeUtil",
        "testSwitch",
        "testLamestWarningEver",
        "RenamePropertiesTest",
        "testNumber",
        "children",
        "testTrailingCommaWarning7",
        "visitPreOrder",
        "mayEffectMutableState",
        "getContextForNonEmptyExpression",
        "mayBeStringHelper",
        "visitPostOrder",
        "testBoth",
        "checkDefinitionsInJs",
        "testUnnamedFunctionStatement",
        "testFileOverviewJSDoc1",
        "testLinenoCharnoBinaryAnd",
        "testJSDocAttachment13",
        "testDestructuringAssignForbidden2",
        "testPropertyGet",
        "testReadPropertyOfThis",
        "testRemoveRenameFunctionStubs1",
        "testFunction3",
        "testParseError",
        "SideEffectFlags",
        "isGet",
        "processInfixExpression",
        "clearAllFlags",
        "testTrailingCommaWarning4",
        "testLinenoCharnoGetProp1",
        "areAllFlagsSet",
        "newVarNode",
        "parse",
        "testTypeAnnotations",
        "newHasLocalResult",
        "testStrict",
        "processIfStatement",
        "removeProp",
        "testRenamePrototypes1",
        "testObjectLiteral4",
        "getLastSibling",
        "testTypeAnnotationsMemberSubclass",
        "testJSDocAttachment12",
        "testTryWithoutCatchLocation",
        "getJSType",
        "Node",
        "addArrayList",
        "precedence",
        "isNameReferenced",
        "containsCall",
        "MatchNameNode",
        "transformTokenType",
        "testZero"
      ],
      "functions_name_co_evolved_modified_file": [
        "add",
        "getSimpleNumber",
        "isSimpleNumber"
      ],
      "functions_name_co_evolved_all_files": [
        "testRenamePrototypes",
        "add",
        "getStringValue",
        "testPrototypePropertiesAsObjLitKeys3",
        "testRenamePrototypes2",
        "testObjectLiteral7",
        "transformAsString",
        "isSimpleNumber",
        "processPrototypeParent",
        "transformNumberAsString",
        "testPrototypePropertiesAsObjLitKeys2",
        "testFunctionsNamesAndIds",
        "testObjectLiteral8",
        "testRenamePrototypes1",
        "visit",
        "testDefineNumber",
        "testGetter",
        "testObjectLiteral6",
        "testSetter",
        "testObjectLit2",
        "testObjectLit3",
        "testObjectLiteralDoc1",
        "getSimpleNumber",
        "propToString"
      ]
    },
    "file": {
      "file_name": "CodeGenerator.java",
      "file_nloc": 878,
      "file_complexity": 241,
      "file_token_count": 5687,
      "file_before": "",
      "file_after": "",
      "file_patch": "@@ -340,13 +340,20 @@ class CodeGenerator {\n         Node body = fn.getLastChild();\n \n         // Add the property name.\n-        if (TokenStream.isJSIdentifier(name) &&\n+        if (!n.isQuotedString() &&\n+            TokenStream.isJSIdentifier(name) &&\n             // do not encode literally any non-literal characters that were\n             // unicode escaped.\n             NodeUtil.isLatin(name)) {\n           add(name);\n         } else {\n-          add(jsString(n.getString(), outputCharsetEncoder));\n+          // Determine if the string is a simple number.\n+          double d = getSimpleNumber(name);\n+          if (!Double.isNaN(d)) {\n+            cc.addNumber(d);\n+          } else {\n+            add(jsString(n.getString(), outputCharsetEncoder));\n+          }\n         }\n \n         add(parameters);\n@@ -650,18 +657,25 @@ class CodeGenerator {\n           if (c.getType() == Token.GET || c.getType() == Token.SET) {\n             add(c);\n           } else {\n-            // Object literal property names don't have to be quoted if they are\n-            // not JavaScript keywords\n-            if (c.getType() == Token.STRING &&\n-                !c.isQuotedString() &&\n-                !TokenStream.isKeyword(c.getString()) &&\n-                TokenStream.isJSIdentifier(c.getString()) &&\n-                // do not encode literally any non-literal characters that were\n-                // unicode escaped.\n-                NodeUtil.isLatin(c.getString())) {\n-              add(c.getString());\n+            Preconditions.checkState(c.getType() == Token.STRING);\n+            String key = c.getString();\n+            // Object literal property names don't have to be quoted if they\n+            // are not JavaScript keywords\n+            if (!c.isQuotedString() &&\n+                !TokenStream.isKeyword(key) &&\n+                TokenStream.isJSIdentifier(key) &&\n+                // do not encode literally any non-literal characters that\n+                // were unicode escaped.\n+                NodeUtil.isLatin(key)) {\n+              add(key);\n             } else {\n-              addExpr(c, 1);\n+              // Determine if the string is a simple number.\n+              double d = getSimpleNumber(key);\n+              if (!Double.isNaN(d)) {\n+                cc.addNumber(d);\n+              } else {\n+                addExpr(c, 1);\n+              }\n             }\n             add(\":\");\n             addExpr(c.getFirstChild(), 1);\n@@ -719,6 +733,27 @@ class CodeGenerator {\n     cc.endSourceMapping(n);\n   }\n \n+  static boolean isSimpleNumber(String s) {\n+    int len = s.length();\n+    for (int index = 0; index < len; index++) {\n+      char c = s.charAt(index);\n+      if (c < '0' || c > '9') {\n+        return false;\n+      }\n+    }\n+    return len > 0;\n+  }\n+\n+  static double getSimpleNumber(String s) {\n+    if (isSimpleNumber(s)) {\n+      long l = Long.parseLong(s);\n+      if (l < NodeUtil.MAX_POSITIVE_INTEGER_NUMBER) {\n+        return l;\n+      }\n+    }\n+    return Double.NaN;\n+  }\n+\n   /**\n    * @return Whether the name is an indirect eval.\n    */\n",
      "files_name_in_blame_commit": [
        "RenamePrototypesTest.java",
        "RenamePropertiesTest.java",
        "SimpleDefinitionFinderTest.java",
        "CodeGenerator.java",
        "CodePrinterTest.java",
        "RenamePrototypes.java",
        "IRFactory.java",
        "FunctionNamesTest.java",
        "ParserTest.java",
        "Node.java",
        "IRFactoryTest.java",
        "NodeUtil.java"
      ]
    }
  },
  "commits_modify_file_before_fix": {
    "size": 55
  }
}