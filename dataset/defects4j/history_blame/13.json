{
  "id": "13",
  "blame_commit": {
    "commit": {
      "commit_id": "aae50c585ec3ac33c6a9af792e80378904a73195",
      "commit_message": "moved cli over from the sandbox to commons proper\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129767 13f79535-47bb-0310-9956-ffa450edef68",
      "commit_author": "James Strachan",
      "commit_date": "2002-06-10 18:01:16",
      "commit_parent": "4868ac5e7c2afd428de74a6dcbec07dc6541a1ea"
    },
    "function": {
      "function_name": "",
      "function_code_before": "",
      "function_code_after": "",
      "function_before_start_line": "",
      "function_before_end_line": "",
      "function_after_start_line": "",
      "function_after_end_line": "",
      "function_before_token_count": 0,
      "function_after_token_count": 0,
      "functions_name_modified_file": [
        "createFiles",
        "createFile",
        "createURL",
        "createObject",
        "createValue",
        "createNumber",
        "createDate",
        "createClass"
      ],
      "functions_name_all_files": [
        "ParseException",
        "testNoOptionsExtraArgs",
        "toString",
        "createPadding",
        "ParseTest",
        "addOptionGroup",
        "testPrintWrapped",
        "printUsage",
        "lsExample",
        "testTwoOptionsFromGroup",
        "getValueClass",
        "testShortWithArg",
        "MissingOptionException",
        "burst",
        "findWrapPos",
        "testSingleOption",
        "testMissingRequiredOption",
        "testPrintOptions",
        "main",
        "setUp",
        "testMissingArg",
        "getSelected",
        "testMultipleWithLong",
        "addArg",
        "createValue",
        "rtrim",
        "BuildTest",
        "hasOption",
        "addValue",
        "getValue",
        "testMultiple",
        "printOptions",
        "testExtraArgs",
        "getOpt",
        "getOptionValue",
        "tearDown",
        "getOption",
        "isRequired",
        "HelpFormatter",
        "ValuesTest",
        "testSimple",
        "getNames",
        "renderWrappedText",
        "testDoubleDash",
        "hasMultipleArgs",
        "setOpt",
        "getArgs",
        "ParseRequiredTest",
        "printWrapped",
        "renderOptions",
        "testStop",
        "getArgList",
        "MissingArgumentException",
        "testComplexShort",
        "printHelp",
        "setSelected",
        "testFindWrapPos",
        "checkRequiredOptions",
        "testLong",
        "ValueTest",
        "testTwoValidLongOptions",
        "Option",
        "createDate",
        "processOption",
        "testSingleDash",
        "testSimplePattern",
        "getOptionObject",
        "testSingleLongOption",
        "testTwoLongOptionsFromGroup",
        "createObject",
        "testSimpleLong",
        "hasLongOpt",
        "getDescription",
        "getOptionValues",
        "testSingleOptionFromGroup",
        "bzip2Example",
        "createFile",
        "testShortArgs",
        "testShortNoArg",
        "manExample",
        "createNumber",
        "addOption",
        "PatternOptionBuilderTest",
        "testLongWithArg",
        "testMultipleArgValues",
        "UnrecognizedOptionException",
        "testSimpleShort",
        "createClass",
        "testShortArgsWithValue",
        "compare",
        "createURL",
        "isValueCode",
        "testDuplicateSimple",
        "testDuplicateLong",
        "getLongOpt",
        "CommandLine",
        "testExtraOption",
        "parse",
        "testLongNoArg",
        "getOptions",
        "OptionGroupTest",
        "hasArg",
        "testWithRequiredOption",
        "getValues",
        "TestHelpFormatter",
        "suite",
        "testOptionAndRequiredOption",
        "Options",
        "createFiles",
        "getType",
        "testTwoValidOptions",
        "parsePattern",
        "testTwoOptionsFromDifferentGroup",
        "AlreadySelectedException"
      ],
      "functions_name_co_evolved_modified_file": [
        "createFiles",
        "createFile",
        "createURL",
        "createObject",
        "createValue",
        "createNumber",
        "createDate",
        "createClass"
      ],
      "functions_name_co_evolved_all_files": [
        "ParseException",
        "testNoOptionsExtraArgs",
        "toString",
        "createPadding",
        "ParseTest",
        "addOptionGroup",
        "testPrintWrapped",
        "printUsage",
        "lsExample",
        "testTwoOptionsFromGroup",
        "getValueClass",
        "testShortWithArg",
        "MissingOptionException",
        "burst",
        "findWrapPos",
        "testSingleOption",
        "testMissingRequiredOption",
        "testPrintOptions",
        "main",
        "setUp",
        "testMissingArg",
        "getSelected",
        "testMultipleWithLong",
        "addArg",
        "createValue",
        "rtrim",
        "BuildTest",
        "hasOption",
        "addValue",
        "getValue",
        "testMultiple",
        "printOptions",
        "testExtraArgs",
        "getOpt",
        "getOptionValue",
        "tearDown",
        "getOption",
        "isRequired",
        "HelpFormatter",
        "ValuesTest",
        "testSimple",
        "getNames",
        "renderWrappedText",
        "testDoubleDash",
        "hasMultipleArgs",
        "setOpt",
        "getArgs",
        "ParseRequiredTest",
        "printWrapped",
        "renderOptions",
        "testStop",
        "getArgList",
        "MissingArgumentException",
        "testComplexShort",
        "printHelp",
        "setSelected",
        "testFindWrapPos",
        "checkRequiredOptions",
        "testLong",
        "ValueTest",
        "testTwoValidLongOptions",
        "Option",
        "createDate",
        "processOption",
        "testSingleDash",
        "testSimplePattern",
        "getOptionObject",
        "testSingleLongOption",
        "testTwoLongOptionsFromGroup",
        "createObject",
        "testSimpleLong",
        "hasLongOpt",
        "getDescription",
        "getOptionValues",
        "testSingleOptionFromGroup",
        "bzip2Example",
        "createFile",
        "testShortArgs",
        "testShortNoArg",
        "manExample",
        "createNumber",
        "addOption",
        "PatternOptionBuilderTest",
        "testLongWithArg",
        "testMultipleArgValues",
        "UnrecognizedOptionException",
        "testSimpleShort",
        "createClass",
        "testShortArgsWithValue",
        "compare",
        "createURL",
        "isValueCode",
        "testDuplicateSimple",
        "testDuplicateLong",
        "getLongOpt",
        "CommandLine",
        "testExtraOption",
        "parse",
        "testLongNoArg",
        "getOptions",
        "OptionGroupTest",
        "hasArg",
        "testWithRequiredOption",
        "getValues",
        "TestHelpFormatter",
        "suite",
        "testOptionAndRequiredOption",
        "Options",
        "createFiles",
        "getType",
        "testTwoValidOptions",
        "parsePattern",
        "testTwoOptionsFromDifferentGroup",
        "AlreadySelectedException"
      ]
    },
    "file": {
      "file_name": "TypeHandler.java",
      "file_nloc": 100,
      "file_complexity": 25,
      "file_token_count": 550,
      "file_before": "",
      "file_after": "",
      "file_patch": "@@ -0,0 +1,196 @@\n+/*\n+ * $Header: /home/cvs/jakarta-commons-sandbox/cli/src/java/org/apache/commons/cli/TypeHandler.java,v 1.2 2002/06/06 22:49:36 bayard Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2002/06/06 22:49:36 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.cli;\n+\n+import java.io.File;\n+import java.net.URL;\n+import java.net.MalformedURLException;\n+import java.util.Date;\n+\n+import org.apache.commons.lang.Numbers;\n+\n+/**\n+  * This is a temporary implementation. TypeHandler will handle the \n+  * pluggableness of OptionTypes and it will direct all of these types \n+  * of conversion functionalities to ConvertUtils component in Commons \n+  * alreayd. BeanUtils I think.\n+  *\n+  * @author Henri Yandell (bayard @ generationjava.com)\n+  * @version $Revision: 1.2 $\n+  */    \n+public class TypeHandler {\n+\n+    static public Object createValue(String str, Object obj) {\n+        return createValue(str, (Class)obj);\n+    }\n+    static public Object createValue(String str, Class clazz) {\n+        if( PatternOptionBuilder.STRING_VALUE == clazz) {\n+            return str;\n+        } else\n+        if( PatternOptionBuilder.OBJECT_VALUE == clazz) {\n+            return createObject(str);\n+        } else\n+        if( PatternOptionBuilder.NUMBER_VALUE == clazz) {\n+            return createNumber(str);\n+        } else\n+        if( PatternOptionBuilder.DATE_VALUE   == clazz) {\n+            return createDate(str);\n+        } else\n+        if( PatternOptionBuilder.CLASS_VALUE  == clazz) {\n+            return createClass(str);\n+        } else\n+        if( PatternOptionBuilder.FILE_VALUE   == clazz) {\n+            return createFile(str);\n+        } else\n+        if( PatternOptionBuilder.EXISTING_FILE_VALUE   == clazz) {\n+            return createFile(str);\n+        } else\n+        if( PatternOptionBuilder.FILES_VALUE  == clazz) {\n+            return createFiles(str);\n+        } else\n+        if( PatternOptionBuilder.URL_VALUE    == clazz) {\n+            return createURL(str);\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+      * Create an Object from the classname and empty constructor.\n+      * Returns null if it couldn't create the Object.\n+      */\n+    static public Object createObject(String str) {\n+        Class cl = null;\n+        try {\n+            cl = Class.forName(str);\n+        } catch (ClassNotFoundException cnfe) {\n+            System.err.println(\"Unable to find: \"+str);\n+            return null;\n+        }\n+\n+        Object instance = null;\n+\n+        try {\n+            instance = cl.newInstance();\n+        } catch (InstantiationException cnfe) {\n+            System.err.println(\"InstantiationException; Unable to create: \"+str);\r\n+            return null;\n+        }\n+        catch (IllegalAccessException cnfe) {\n+            System.err.println(\"IllegalAccessException; Unable to create: \"+str);\n+            return null;\n+        }\n+\n+        return instance;\n+    }\n+\n+    /**\n+      * Create a number from a String.\n+      */\n+    static public Number createNumber(String str) {\n+        // Needs to be able to create\n+        try {\n+            // do searching for decimal point etc, but atm just make an Integer\n+            return Numbers.createNumber(str);\n+        } catch (NumberFormatException nfe) {\n+            System.err.println(nfe.getMessage());\n+            return null;\n+        }\n+    }\n+\n+    static public Class createClass(String str) {\n+        try {\n+            return Class.forName(str);\n+        } catch (ClassNotFoundException cnfe) {\n+            System.err.println(\"Unable to find: \"+str);\n+            return null;\n+        }\n+    }\n+\n+    static public Date createDate(String str) {\n+        Date date = null;\n+        if(date == null) {\n+            System.err.println(\"Unable to parse: \"+str);\n+        }\n+        return date;\n+    }\n+\n+    static public URL createURL(String str) {\n+        try {\n+            return new URL(str);\n+        } catch (MalformedURLException mue) {\n+            System.err.println(\"Unable to parse: \"+str);\n+            return null;\n+        }\n+    }\n+\n+    static public File createFile(String str) {\n+        return new File(str);\n+    }\n+\n+    static public File[] createFiles(String str) {\n+// to implement/port:\n+//        return FileW.findFiles(str);\n+        return null;\n+    }\n+\n+}\n",
      "files_name_in_blame_commit": [
        "HelpFormatterExamples.java",
        "ValueTest.java",
        "AlreadySelectedException.java",
        "ParseException.java",
        "ValuesTest.java",
        "MissingArgumentException.java",
        "ParseRequiredTest.java",
        "HelpFormatter.java",
        "PatternOptionBuilder.java",
        "UnrecognizedOptionException.java",
        "TestHelpFormatter.java",
        "OptionGroup.java",
        "Option.java",
        "PatternOptionBuilderTest.java",
        "BuildTest.java",
        "CommandLine.java",
        "Options.java",
        "TypeHandler.java",
        "OptionGroupTest.java",
        "ParseTest.java",
        "MissingOptionException.java"
      ]
    }
  },
  "commits_modify_file_before_fix": {
    "size": 37
  }
}