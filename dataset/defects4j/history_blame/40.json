{
  "id": "40",
  "blame_commit": {
    "commit": {
      "commit_id": "37ba197e62d6b60037d18afc33801e6221f1b8c6",
      "commit_message": "<action dev=\"ggregory\" type=\"add\" issue=\"CODEC-184\" due-to=\"Cyrille Artho\">NullPointerException in DoubleMetaPhone.isDoubleMetaphoneEqual when using empty strings</action>\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/codec/trunk@1586300 13f79535-47bb-0310-9956-ffa450edef68",
      "commit_author": "Gary D. Gregory",
      "commit_date": "2014-04-10 13:51:06",
      "commit_parent": "8c145775da55fb33104751199a28809acb657c1f"
    },
    "function": {
      "function_name": "equals",
      "function_code_before": "",
      "function_code_after": "public static boolean equals(final CharSequence cs1, final CharSequence cs2) {\n    if (cs1 == cs2) {\n        return true;\n    }\n    if (cs1 == null || cs2 == null) {\n        return false;\n    }\n    if (cs1 instanceof String && cs2 instanceof String) {\n        return cs1.equals(cs2);\n    }\n    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));\n}",
      "function_before_start_line": "",
      "function_before_end_line": "",
      "function_after_start_line": 70,
      "function_after_end_line": 81,
      "function_before_token_count": 0,
      "function_after_token_count": 91,
      "functions_name_modified_file": [
        "getBytesUtf16Be",
        "newStringUtf16Be",
        "getBytesUsAscii",
        "newStringUtf8",
        "getBytes",
        "getBytesUnchecked",
        "newString",
        "getBytesIso8859_1",
        "equals",
        "newStringIso8859_1",
        "getBytesUtf16Le",
        "newIllegalStateException",
        "getBytesUtf8",
        "newStringUtf16Le",
        "newStringUsAscii",
        "newStringUtf16",
        "getBytesUtf16"
      ],
      "functions_name_all_files": [
        "DoubleMetaphoneResult",
        "doubleMetaphone",
        "getMaxCodeLen",
        "testIsDoubleMetaphoneEqualExtended2",
        "handleSC",
        "handleT",
        "getBytesUsAscii",
        "handleGH",
        "testIsDoubleMetaphoneEqualExtended3",
        "conditionCH0",
        "validateFixture",
        "newStringUsAscii",
        "conditionCH1",
        "getBytesIso8859_1",
        "newStringUtf16Le",
        "isDoubleMetaphoneEqual",
        "doubleMetaphoneNotEqualTest",
        "handleCC",
        "handleAEIOUY",
        "encode",
        "handleP",
        "testIsDoubleMetaphoneEqualWithMATCHES",
        "handleD",
        "handleW",
        "doubleMetaphoneEqualTest",
        "getBytesUtf16",
        "isSlavoGermanic",
        "handleC",
        "testIsDoubleMetaphoneEqualExtended1",
        "testDoubleMetaphone",
        "testCCedilla",
        "handleH",
        "cleanInput",
        "testIsDoubleMetaphoneEqualBasic",
        "handleG",
        "createStringEncoder",
        "newStringUtf16Be",
        "isSilentStart",
        "equals",
        "newStringIso8859_1",
        "assertDoubleMetaphone",
        "handleS",
        "handleR",
        "getBytesUtf16Le",
        "handleZ",
        "isComplete",
        "conditionL0",
        "getBytes",
        "appendAlternate",
        "append",
        "DoubleMetaphone",
        "newStringUtf16",
        "testSetMaxCodeLength",
        "handleCH",
        "contains",
        "getAlternate",
        "isVowel",
        "handleX",
        "newStringUtf8",
        "newString",
        "assertDoubleMetaphoneAlt",
        "testEmpty",
        "newIllegalStateException",
        "charAt",
        "appendPrimary",
        "handleL",
        "getPrimary",
        "setMaxCodeLen",
        "conditionC0",
        "testIsDoubleMetaphoneNotEqual",
        "conditionM0",
        "getBytesUnchecked",
        "getBytesUtf8",
        "getBytesUtf16Be",
        "testCodec184",
        "handleJ",
        "testNTilde",
        "regionMatches"
      ],
      "functions_name_co_evolved_modified_file": [
        "equals"
      ],
      "functions_name_co_evolved_all_files": [
        "testCodec184",
        "testIsDoubleMetaphoneEqualBasic",
        "equals",
        "regionMatches",
        "isDoubleMetaphoneEqual"
      ]
    },
    "file": {
      "file_name": "StringUtils.java",
      "file_nloc": 88,
      "file_complexity": 29,
      "file_token_count": 638,
      "file_before": "",
      "file_after": "",
      "file_patch": "@@ -37,6 +37,49 @@ import org.apache.commons.codec.Charsets;\n  */\n public class StringUtils {\n \n+    /**\n+     * <p>\n+     * Compares two CharSequences, returning {@code true} if they represent equal sequences of characters.\n+     * </p>\n+     * \n+     * <p>\n+     * {@code null}s are handled without exceptions. Two {@code null} references are considered to be equal. The\n+     * comparison is case sensitive.\n+     * </p>\n+     * \n+     * <pre>\n+     * StringUtils.equals(null, null)   = true\n+     * StringUtils.equals(null, \"abc\")  = false\n+     * StringUtils.equals(\"abc\", null)  = false\n+     * StringUtils.equals(\"abc\", \"abc\") = true\n+     * StringUtils.equals(\"abc\", \"ABC\") = false\n+     * </pre>\n+     * \n+     * <p>\n+     * Copied from Apache Commons Lang r1583482 on April 10, 2014 (day of 3.3.2 release).\n+     * </p>\n+     * \n+     * @see Object#equals(Object)\n+     * @param cs1\n+     *            the first CharSequence, may be {@code null}\n+     * @param cs2\n+     *            the second CharSequence, may be {@code null}\n+     * @return {@code true} if the CharSequences are equal (case-sensitive), or both {@code null}\n+     * @since 1.10\n+     */\n+    public static boolean equals(final CharSequence cs1, final CharSequence cs2) {\n+        if (cs1 == cs2) {\n+            return true;\n+        }\n+        if (cs1 == null || cs2 == null) {\n+            return false;\n+        }\n+        if (cs1 instanceof String && cs2 instanceof String) {\n+            return cs1.equals(cs2);\n+        }\n+        return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));\n+    }\n+\n     /**\n      * Calls {@link String#getBytes(Charset)}\n      *\n",
      "files_name_in_blame_commit": [
        "DoubleMetaphoneTest.java",
        "CharSequenceUtils.java",
        "StringUtils.java",
        "DoubleMetaphone.java"
      ]
    }
  },
  "commits_modify_file_before_fix": {
    "size": 39
  }
}