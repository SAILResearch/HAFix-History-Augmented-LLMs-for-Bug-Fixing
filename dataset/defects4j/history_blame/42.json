{
  "id": "42",
  "blame_commit": {
    "commit": {
      "commit_id": "29e063ff3f765ce97088a4cf71162855d1f24e3e",
      "commit_message": "Fix various javadoc link warnings\nbug 23680, from Eric Johnson\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/collections/trunk@131271 13f79535-47bb-0310-9956-ffa450edef68",
      "commit_author": "Stephen Colebourne",
      "commit_date": "2003-10-09 20:58:53",
      "commit_parent": "5db7fd697622ee56a4da46034db63eb1f8d0431f"
    },
    "function": {
      "function_name": "combine",
      "function_code_before": "",
      "function_code_after": "public void combine(ExtendedProperties props) {\n    for (Iterator it = props.getKeys(); it.hasNext();) {\n        String key = (String) it.next();\n        setProperty(key, props.get(key));\n    }\n}",
      "function_before_start_line": "",
      "function_before_end_line": "",
      "function_after_start_line": 804,
      "function_after_end_line": 809,
      "function_before_token_count": 0,
      "function_after_token_count": 51,
      "functions_name_modified_file": [
        "escape",
        "getBoolean",
        "addPropertyDirect",
        "getStringArray",
        "unescape",
        "getFloat",
        "getShort",
        "display",
        "clearProperty",
        "nextToken",
        "getInteger",
        "interpolate",
        "convertProperties",
        "hasMoreTokens",
        "PropertiesTokenizer",
        "combine",
        "addStringProperty",
        "testBoolean",
        "endsWithSlash",
        "ExtendedProperties",
        "getVector",
        "getProperty",
        "getKeys",
        "setInclude",
        "subset",
        "getString",
        "getLong",
        "getInclude",
        "setProperty",
        "getProperties",
        "getDouble",
        "load",
        "getInt",
        "PropertiesReader",
        "readProperty",
        "countPreceding",
        "getByte",
        "isInitialized",
        "addProperty",
        "save"
      ],
      "functions_name_all_files": [
        "copy",
        "checkMod",
        "getFirst",
        "toString",
        "clear",
        "createNode",
        "exceptionTransformer",
        "addFirst",
        "constantTransformer",
        "checkModCount",
        "createCollection",
        "SoftRef",
        "searchNextIterator",
        "hasPrevious",
        "Entry",
        "initializeEmptyList",
        "InvokerTransformer",
        "removeNode",
        "hasNext",
        "nextToken",
        "PropertiesTokenizer",
        "containsValue",
        "addStringProperty",
        "endsWithSlash",
        "validate",
        "chainedTransformer",
        "getVector",
        "addNodeBefore",
        "getKeys",
        "switchTransformer",
        "setInclude",
        "addNodeToCache",
        "BufferUnderflowException",
        "getValue",
        "previousIndex",
        "next",
        "BufferOverflowException",
        "addLast",
        "countPreceding",
        "getByte",
        "readObject",
        "addProperty",
        "lastIndexOf",
        "FactoryTransformer",
        "removeFirst",
        "remove",
        "indexFor",
        "toArray",
        "invokerTransformer",
        "addPropertyDirect",
        "getStringArray",
        "getLastNodeReturned",
        "previous",
        "nextNull",
        "InstantiateTransformer",
        "getShort",
        "UnboundedFifoBuffer",
        "CommonsLinkedList",
        "clearProperty",
        "get",
        "hasMoreTokens",
        "nextIndex",
        "indexOf",
        "containsKey",
        "put",
        "subset",
        "ChainedTransformer",
        "getInclude",
        "values",
        "elementEquals",
        "addNodeAfter",
        "SwitchTransformer",
        "readProperty",
        "equals",
        "transform",
        "stringValueTransformer",
        "ValueIterator",
        "escape",
        "add",
        "ListIteratorImpl",
        "setMaximumCacheSize",
        "MultiHashMap",
        "increment",
        "removeLast",
        "ExceptionTransformer",
        "getKey",
        "MapTransformer",
        "entrySet",
        "removeAllNodes",
        "nextEntry",
        "display",
        "getInteger",
        "interpolate",
        "instantiateTransformer",
        "mapTransformer",
        "ConstantTransformer",
        "listIterator",
        "ClosureTransformer",
        "combine",
        "contains",
        "shrinkCacheToMaximumSize",
        "iterator",
        "nullTransformer",
        "getString",
        "getLong",
        "getDouble",
        "getInt",
        "cacheFull",
        "isInitialized",
        "CloneTransformer",
        "TransformerUtils",
        "toReference",
        "getBoolean",
        "WeakRef",
        "purge",
        "unescape",
        "switchMapTransformer",
        "hashCode",
        "addAll",
        "clone",
        "EntryIterator",
        "NodeCachingLinkedList",
        "asTransformer",
        "NOPTransformer",
        "decrement",
        "getFloat",
        "getMaximumCacheSize",
        "convertProperties",
        "getCause",
        "testBoolean",
        "getLast",
        "size",
        "ExtendedProperties",
        "switchTransformerInternal",
        "getProperty",
        "getNodeFromCache",
        "isEmpty",
        "cloneTransformer",
        "setValue",
        "PredicateTransformer",
        "set",
        "setProperty",
        "getProperties",
        "load",
        "PropertiesReader",
        "getEntry",
        "ReferenceMap",
        "Node",
        "keySet",
        "verify",
        "getNode",
        "writeObject",
        "resize",
        "nopTransformer",
        "save"
      ],
      "functions_name_co_evolved_modified_file": [
        "testBoolean",
        "combine",
        "getBoolean",
        "getVector",
        "clearProperty",
        "getString",
        "save"
      ],
      "functions_name_co_evolved_all_files": [
        "testBoolean",
        "combine",
        "getBoolean",
        "getVector",
        "clearProperty",
        "getString",
        "save"
      ]
    },
    "file": {
      "file_name": "ExtendedProperties.java",
      "file_nloc": 685,
      "file_complexity": 189,
      "file_token_count": 4590,
      "file_before": "",
      "file_after": "",
      "file_patch": "@@ -1,5 +1,5 @@\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ExtendedProperties.java,v 1.16 2003/08/31 17:26:44 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ExtendedProperties.java,v 1.17 2003/10/09 20:58:53 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n@@ -161,7 +161,7 @@ import java.util.Vector;\n  * it, go ahead and tune it up!\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.16 $ $Date: 2003/08/31 17:26:44 $\n+ * @version $Revision: 1.17 $ $Date: 2003/10/09 20:58:53 $\n  * \n  * @author <a href=\"mailto:stefano@apache.org\">Stefano Mazzocchi</a>\n  * @author <a href=\"mailto:jon@latchkey.com\">Jon S. Stevens</a>\n@@ -323,8 +323,8 @@ public class ExtendedProperties extends Hashtable {\n         /**\n          * Read a property.\n          *\n-         * @return A String.\n-         * @throws IOException.\n+         * @return a String property\n+         * @throws IOException if there is difficulty reading the source.\n          */\n         public String readProperty() throws IOException {\n             StringBuffer buffer = new StringBuffer();\n@@ -767,7 +767,7 @@ public class ExtendedProperties extends Hashtable {\n         Enumeration theKeys = keys();\n         while (theKeys.hasMoreElements()) {\n             String key = (String) theKeys.nextElement();\n-            Object value = get((Object) key);\n+            Object value = get(key);\n             if (value != null) {\n                 if (value instanceof String) {\n                     StringBuffer currentOutput = new StringBuffer();\n@@ -799,12 +799,12 @@ public class ExtendedProperties extends Hashtable {\n      * <p>\n      * Warning: It will overwrite previous entries without warning.\n      *\n-     * @param ExtendedProperties\n+     * @param props  the properties to combine\n      */\n-    public void combine(ExtendedProperties c) {\n-        for (Iterator i = c.getKeys(); i.hasNext();) {\n-            String key = (String) i.next();\n-            setProperty(key, c.get(key));\n+    public void combine(ExtendedProperties props) {\n+        for (Iterator it = props.getKeys(); it.hasNext();) {\n+            String key = (String) it.next();\n+            setProperty(key, props.get(key));\n         }\n     }\n     \n@@ -818,7 +818,7 @@ public class ExtendedProperties extends Hashtable {\n             // we also need to rebuild the keysAsListed or else\n             // things get *very* confusing\n             for (int i = 0; i < keysAsListed.size(); i++) {\n-                if (((String) keysAsListed.get(i)).equals(key)) {\n+                if (( keysAsListed.get(i)).equals(key)) {\n                     keysAsListed.remove(i);\n                     break;\n                 }\n@@ -947,7 +947,7 @@ public class ExtendedProperties extends Hashtable {\n         Object value = get(key);\n \n         if (value instanceof String) {\n-            return (String) interpolate((String) value);\n+            return interpolate((String) value);\n             \n         } else if (value == null) {\n             if (defaults != null) {\n@@ -1080,7 +1080,7 @@ public class ExtendedProperties extends Hashtable {\n             \n         } else if (value instanceof String) {\n             Vector v = new Vector(1);\n-            v.addElement((String) value);\n+            v.addElement(value);\n             put(key, v);\n             return v;\n             \n@@ -1106,7 +1106,7 @@ public class ExtendedProperties extends Hashtable {\n      * object that is not a Boolean.\n      */\n     public boolean getBoolean(String key) {\n-        Boolean b = getBoolean(key, (Boolean) null);\n+        Boolean b = getBoolean(key, null);\n         if (b != null) {\n             return b.booleanValue();\n         } else {\n@@ -1169,12 +1169,12 @@ public class ExtendedProperties extends Hashtable {\n      * <code>false</code> boolean values.  Case of value to test for\n      * boolean status is ignored.\n      *\n-     * @param String The value to test for boolean state.\n+     * @param value  the value to test for boolean state\n      * @return <code>true</code> or <code>false</code> if the supplied\n      * text maps to a boolean value, or <code>null</code> otherwise.\n      */\n     public String testBoolean(String value) {\n-        String s = ((String) value).toLowerCase();\n+        String s = value.toLowerCase();\n \n         if (s.equals(\"true\") || s.equals(\"on\") || s.equals(\"yes\")) {\n             return \"true\";\n",
      "files_name_in_blame_commit": [
        "MultiHashMap.java",
        "UnboundedFifoBuffer.java",
        "ReferenceMap.java",
        "TransformerUtils.java",
        "CommonsLinkedList.java",
        "BufferOverflowException.java",
        "ExtendedProperties.java",
        "BufferUnderflowException.java",
        "NodeCachingLinkedList.java",
        "MultiMap.java"
      ]
    }
  },
  "commits_modify_file_before_fix": {
    "size": 33
  }
}