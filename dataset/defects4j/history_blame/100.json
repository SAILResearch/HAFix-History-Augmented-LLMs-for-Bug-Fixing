{
  "id": "100",
  "blame_commit": {
    "commit": {
      "commit_id": "dd63599d2a28f8ea02b8ac9ab5a1838a5f6c05ab",
      "commit_message": "Added first batch of weighted statistics\n  * mean\n  * sum\n  * product\n  * variance\nJIRA: MATH-287\nThanks to Matthew Rowles\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@809448 13f79535-47bb-0310-9956-ffa450edef68",
      "commit_author": "Phil Steitz",
      "commit_date": "2009-08-31 01:56:09",
      "commit_parent": "b91ed8574752b9f5596398654133a4c5f9337e60"
    },
    "function": {
      "function_name": "evaluate",
      "function_code_before": "",
      "function_code_after": "public double evaluate(final double[] values, final double[] weights,\n                       final double mean, final int begin, final int length) {\n\n    double var = Double.NaN;\n\n    if (test(values, weights, begin, length)) {\n        if (length == 1) {\n            var = 0.0;\n        } else if (length > 1) {\n            double accum = 0.0;\n            double dev = 0.0;\n            for (int i = begin; i < begin + length; i++) {\n                dev = values[i] - mean;\n                accum += weights[i] * (dev * dev);\n            }\n\n            double sumWts = 0;\n            for (int i = 0; i < weights.length; i++) {\n                sumWts += weights[i];\n            }\n\n            if (isBiasCorrected) {\n                var = accum / (sumWts - 1);\n            } else {\n                var = accum / sumWts;\n            }\n        }\n    }\n    return var;\n}",
      "function_before_start_line": "",
      "function_before_end_line": "",
      "function_after_start_line": 416,
      "function_after_end_line": 445,
      "function_before_token_count": 0,
      "function_after_token_count": 185,
      "functions_name_modified_file": [
        "Variance",
        "evaluate",
        "copy",
        "getResult",
        "clear",
        "getN",
        "increment",
        "isBiasCorrected",
        "setBiasCorrected"
      ],
      "functions_name_all_files": [
        "copy",
        "getTolerance",
        "getResult",
        "expectedWeightedValue",
        "clear",
        "testSpecialValues",
        "increment",
        "testEvaluation",
        "Mean",
        "testWeightedConsistency",
        "Product",
        "testTestNegative",
        "populationVariance",
        "testSmallSamples",
        "AbstractUnivariateStatisticTest",
        "testPopulation",
        "getUnivariateStatistic",
        "testWeightedSum",
        "Variance",
        "ProductTest",
        "isBiasCorrected",
        "testCopy",
        "testNaN",
        "setBiasCorrected",
        "SumTest",
        "Sum",
        "suite",
        "MeanTest",
        "testWeightedVariance",
        "evaluate",
        "UnivariateStatisticAbstractTest",
        "testWeightedProduct",
        "testWeightedMean",
        "test",
        "getN",
        "VarianceTest",
        "testTestPositive",
        "expectedValue"
      ],
      "functions_name_co_evolved_modified_file": [
        "Variance",
        "evaluate"
      ],
      "functions_name_co_evolved_all_files": [
        "Variance",
        "evaluate",
        "expectedWeightedValue",
        "testWeightedProduct",
        "testTestNegative",
        "populationVariance",
        "testSpecialValues",
        "testWeightedMean",
        "test",
        "testEvaluation",
        "testPopulation",
        "getUnivariateStatistic",
        "testWeightedSum",
        "testWeightedConsistency",
        "testWeightedVariance"
      ]
    },
    "file": {
      "file_name": "Variance.java",
      "file_nloc": 167,
      "file_complexity": 42,
      "file_token_count": 1086,
      "file_before": "",
      "file_after": "",
      "file_patch": "@@ -20,10 +20,11 @@ import java.io.Serializable;\n \n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;\n+import org.apache.commons.math.stat.descriptive.summary.Sum;\n \n /**\n  * Computes the variance of the available values.  By default, the unbiased\n- * \"sample variance\" definitional formula is used: \n+ * \"sample variance\" definitional formula is used:\n  * <p>\n  * variance = sum((x_i - mean)^2) / (n - 1) </p>\n  * <p>\n@@ -33,19 +34,19 @@ import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStati\n  * The definitional formula does not have good numerical properties, so\n  * this implementation does not compute the statistic using the definitional\n  * formula. <ul>\n- * <li> The <code>getResult</code> method computes the variance using \n+ * <li> The <code>getResult</code> method computes the variance using\n  * updating formulas based on West's algorithm, as described in\n  * <a href=\"http://doi.acm.org/10.1145/359146.359152\"> Chan, T. F. and\n  * J. G. Lewis 1979, <i>Communications of the ACM</i>,\n  * vol. 22 no. 9, pp. 526-531.</a></li>\n  * <li> The <code>evaluate</code> methods leverage the fact that they have the\n- * full array of values in memory to execute a two-pass algorithm. \n+ * full array of values in memory to execute a two-pass algorithm.\n  * Specifically, these methods use the \"corrected two-pass algorithm\" from\n  * Chan, Golub, Levesque, <i>Algorithms for Computing the Sample Variance</i>,\n- * American Statistician, August 1983.</li></ul>\n- * Note that adding values using <code>increment</code> or \n+ * American Statistician, vol. 37, no. 3 (1983) pp. 242-247.</li></ul>\n+ * Note that adding values using <code>increment</code> or\n  * <code>incrementAll</code> and then executing <code>getResult</code> will\n- * sometimes give a different, less accurate, result than executing \n+ * sometimes give a different, less accurate, result than executing\n  * <code>evaluate</code> with the full array of values. The former approach\n  * should only be used when the full array of values is not available.</p>\n  * <p>\n@@ -77,10 +78,10 @@ public class Variance extends AbstractStorelessUnivariateStatistic implements Se\n      * constructed with an external SecondMoment as a parameter.\n      */\n     protected boolean incMoment = true;\n-    \n+\n     /**\n      * Determines whether or not bias correction is applied when computing the\n-     * value of the statisic.  True means that bias is corrected.  See \n+     * value of the statisic.  True means that bias is corrected.  See\n      * {@link Variance} for details on the formula.\n      */\n     private boolean isBiasCorrected = true;\n@@ -95,7 +96,7 @@ public class Variance extends AbstractStorelessUnivariateStatistic implements Se\n \n     /**\n      * Constructs a Variance based on an external second moment.\n-     * \n+     *\n      * @param m2 the SecondMoment (Third or Fourth moments work\n      * here as well.)\n      */\n@@ -103,11 +104,11 @@ public class Variance extends AbstractStorelessUnivariateStatistic implements Se\n         incMoment = false;\n         this.moment = m2;\n     }\n-    \n+\n     /**\n      * Constructs a Variance with the specified <code>isBiasCorrected</code>\n      * property\n-     * \n+     *\n      * @param isBiasCorrected  setting for bias correction - true means\n      * bias will be corrected and is equivalent to using the argumentless\n      * constructor\n@@ -116,11 +117,11 @@ public class Variance extends AbstractStorelessUnivariateStatistic implements Se\n         moment = new SecondMoment();\n         this.isBiasCorrected = isBiasCorrected;\n     }\n-    \n+\n     /**\n      * Constructs a Variance with the specified <code>isBiasCorrected</code>\n      * property and the supplied external second moment.\n-     * \n+     *\n      * @param isBiasCorrected  setting for bias correction - true means\n      * bias will be corrected\n      * @param m2 the SecondMoment (Third or Fourth moments work\n@@ -129,26 +130,26 @@ public class Variance extends AbstractStorelessUnivariateStatistic implements Se\n     public Variance(boolean isBiasCorrected, SecondMoment m2) {\n         incMoment = false;\n         this.moment = m2;\n-        this.isBiasCorrected = isBiasCorrected;      \n+        this.isBiasCorrected = isBiasCorrected;\n     }\n-   \n+\n     /**\n      * Copy constructor, creates a new {@code Variance} identical\n      * to the {@code original}\n-     * \n+     *\n      * @param original the {@code Variance} instance to copy\n      */\n     public Variance(Variance original) {\n         copy(original, this);\n-    }           \n-    \n+    }\n+\n     /**\n-     * {@inheritDoc}  \n-     * <p>If all values are available, it is more accurate to use \n+     * {@inheritDoc}\n+     * <p>If all values are available, it is more accurate to use\n      * {@link #evaluate(double[])} rather than adding values one at a time\n      * using this method and then executing {@link #getResult}, since\n-     * <code>evaluate</code> leverages the fact that is has the full \n-     * list of values together to execute a two-pass algorithm.  \n+     * <code>evaluate</code> leverages the fact that is has the full\n+     * list of values together to execute a two-pass algorithm.\n      * See {@link Variance}.</p>\n      */\n     @Override\n@@ -182,7 +183,7 @@ public class Variance extends AbstractStorelessUnivariateStatistic implements Se\n     public long getN() {\n         return moment.getN();\n     }\n-    \n+\n     /**\n      * {@inheritDoc}\n      */\n@@ -192,9 +193,9 @@ public class Variance extends AbstractStorelessUnivariateStatistic implements Se\n             moment.clear();\n         }\n     }\n-    \n+\n     /**\n-     * Returns the variance of the entries in the input array, or \n+     * Returns the variance of the entries in the input array, or\n      * <code>Double.NaN</code> if the array is empty.\n      * <p>\n      * See {@link Variance} for details on the computing algorithm.</p>\n@@ -204,7 +205,7 @@ public class Variance extends AbstractStorelessUnivariateStatistic implements Se\n      * Throws <code>IllegalArgumentException</code> if the array is null.</p>\n      * <p>\n      * Does not change the internal state of the statistic.</p>\n-     * \n+     *\n      * @param values the input array\n      * @return the variance of the values or Double.NaN if length = 0\n      * @throws IllegalArgumentException if the array is null\n@@ -229,7 +230,7 @@ public class Variance extends AbstractStorelessUnivariateStatistic implements Se\n      * Does not change the internal state of the statistic.</p>\n      * <p>\n      * Throws <code>IllegalArgumentException</code> if the array is null.</p>\n-     * \n+     *\n      * @param values the input array\n      * @param begin index of the first array element to include\n      * @param length the number of elements to include\n@@ -254,10 +255,69 @@ public class Variance extends AbstractStorelessUnivariateStatistic implements Se\n         }\n         return var;\n     }\n-    \n+\n+    /**\n+     * <p>Returns the weighted variance of the entries in the specified portion of\n+     * the input array, or <code>Double.NaN</code> if the designated subarray\n+     * is empty.</p>\n+     * <p>\n+     * Uses the formula <pre>\n+     *   &Sigma;(weights[i]*(values[i] - weightedMean)<sup>2</sup>)/(&Sigma;(weights[i]) - 1)\n+     * </pre>\n+     * where weightedMean is the weighted mean</p>\n+     * <p>\n+     * This formula will not return the same result as the unweighted variance when all\n+     * weights are equal, unless all weights are equal to 1. The formula assumes that\n+     * weights are to be treated as \"expansion values,\" as will be the case if for example\n+     * the weights represent frequency counts. To normalize weights so that the denominator\n+     * in the variance computation equals the length of the input vector minus one, use <pre>\n+     *   <code>evaluate(values, MathUtils.normalizeArray(weights, values.length)); </code>\n+     * </pre>\n+     * <p>\n+     * Returns 0 for a single-value (i.e. length = 1) sample.</p>\n+     * <p>\n+     * Throws <code>IllegalArgumentException</code> if any of the following are true:\n+     * <ul><li>the values array is null</li>\n+     *     <li>the weights array is null</li>\n+     *     <li>the weights array does not have the same length as the values array</li>\n+     *     <li>the weights array contains one or more infinite values</li>\n+     *     <li>the weights array contains one or more NaN values</li>\n+     *     <li>the weights array contains negative values</li>\n+     *     <li>the start and length arguments do not determine a valid array</li>\n+     * </ul></p>\n+     * <p>\n+     * Does not change the internal state of the statistic.</p>\n+     * <p>\n+     * Throws <code>IllegalArgumentException</code> if either array is null.</p>\n+     *\n+     * @param values the input array\n+     * @param weights the weights array\n+     * @param begin index of the first array element to include\n+     * @param length the number of elements to include\n+     * @return the variance of the values or Double.NaN if length = 0\n+     * @throws IllegalArgumentException if the parameters are not valid\n+     */\n+    public double evaluate(final double[] values, final double[] weights,\n+                           final int begin, final int length) {\n+\n+        double var = Double.NaN;\n+\n+        if (test(values, weights,begin, length)) {\n+            clear();\n+            if (length == 1) {\n+                var = 0.0;\n+            } else if (length > 1) {\n+                Mean mean = new Mean();\n+                double m = mean.evaluate(values, weights, begin, length);\n+                var = evaluate(values, weights, m, begin, length);\n+            }\n+        }\n+        return var;\n+    }\n+\n     /**\n      * Returns the variance of the entries in the specified portion of\n-     * the input array, using the precomputed mean value.  Returns \n+     * the input array, using the precomputed mean value.  Returns\n      * <code>Double.NaN</code> if the designated subarray is empty.\n      * <p>\n      * See {@link Variance} for details on the computing algorithm.</p>\n@@ -272,7 +332,7 @@ public class Variance extends AbstractStorelessUnivariateStatistic implements Se\n      * Throws <code>IllegalArgumentException</code> if the array is null.</p>\n      * <p>\n      * Does not change the internal state of the statistic.</p>\n-     * \n+     *\n      * @param values the input array\n      * @param mean the precomputed mean value\n      * @param begin index of the first array element to include\n@@ -281,9 +341,9 @@ public class Variance extends AbstractStorelessUnivariateStatistic implements Se\n      * @throws IllegalArgumentException if the array is null or the array index\n      *  parameters are not valid\n      */\n-    public double evaluate(final double[] values, final double mean, \n+    public double evaluate(final double[] values, final double mean,\n             final int begin, final int length) {\n-        \n+\n         double var = Double.NaN;\n \n         if (test(values, begin, length)) {\n@@ -298,7 +358,7 @@ public class Variance extends AbstractStorelessUnivariateStatistic implements Se\n                     accum += dev * dev;\n                     accum2 += dev;\n                 }\n-                double len = length;            \n+                double len = length;\n                 if (isBiasCorrected) {\n                     var = (accum - (accum2 * accum2 / len)) / (len - 1.0);\n                 } else {\n@@ -308,7 +368,82 @@ public class Variance extends AbstractStorelessUnivariateStatistic implements Se\n         }\n         return var;\n     }\n-    \n+\n+    /**\n+     * Returns the weighted variance of the entries in the specified portion of\n+     * the input array, using the precomputed weighted mean value.  Returns\n+     * <code>Double.NaN</code> if the designated subarray is empty.\n+     * <p>\n+     * Uses the formula <pre>\n+     *   &Sigma;(weights[i]*(values[i] - mean)<sup>2</sup>)/(&Sigma;(weights[i]) - 1)\n+     * </pre></p>\n+     * <p>\n+     * The formula used assumes that the supplied mean value is the weighted arithmetic\n+     * mean of the sample data, not a known population parameter. This method\n+     * is supplied only to save computation when the mean has already been\n+     * computed.</p>\n+     * <p>\n+     * This formula will not return the same result as the unweighted variance when all\n+     * weights are equal, unless all weights are equal to 1. The formula assumes that\n+     * weights are to be treated as \"expansion values,\" as will be the case if for example\n+     * the weights represent frequency counts. To normalize weights so that the denominator\n+     * in the variance computation equals the length of the input vector minus one, use <pre>\n+     *   <code>evaluate(values, MathUtils.normalizeArray(weights, values.length)); </code>\n+     * </pre>\n+     * <p>\n+     * Returns 0 for a single-value (i.e. length = 1) sample.</p>\n+     * <p>\n+     * Throws <code>IllegalArgumentException</code> if any of the following are true:\n+     * <ul><li>the values array is null</li>\n+     *     <li>the weights array is null</li>\n+     *     <li>the weights array does not have the same length as the values array</li>\n+     *     <li>the weights array contains one or more infinite values</li>\n+     *     <li>the weights array contains one or more NaN values</li>\n+     *     <li>the weights array contains negative values</li>\n+     *     <li>the start and length arguments do not determine a valid array</li>\n+     * </ul></p>\n+     * <p>\n+     * Does not change the internal state of the statistic.</p>\n+     *\n+     * @param values the input array\n+     * @param weights the weights array\n+     * @param mean the precomputed weighted mean value\n+     * @param begin index of the first array element to include\n+     * @param length the number of elements to include\n+     * @return the variance of the values or Double.NaN if length = 0\n+     * @throws IllegalArgumentException if the parameters are not valid\n+     */\n+    public double evaluate(final double[] values, final double[] weights,\n+                           final double mean, final int begin, final int length) {\n+\n+        double var = Double.NaN;\n+\n+        if (test(values, weights, begin, length)) {\n+            if (length == 1) {\n+                var = 0.0;\n+            } else if (length > 1) {\n+                double accum = 0.0;\n+                double dev = 0.0;\n+                for (int i = begin; i < begin + length; i++) {\n+                    dev = values[i] - mean;\n+                    accum += weights[i] * (dev * dev);\n+                }\n+\n+                double sumWts = 0;\n+                for (int i = 0; i < weights.length; i++) {\n+                    sumWts += weights[i];\n+                }\n+                \n+                if (isBiasCorrected) {\n+                    var = accum / (sumWts - 1);\n+                } else {\n+                    var = accum / sumWts;\n+                }\n+            }\n+        }\n+        return var;\n+    }\n+\n     /**\n      * Returns the variance of the entries in the input array, using the\n      * precomputed mean value.  Returns <code>Double.NaN</code> if the array\n@@ -328,7 +463,7 @@ public class Variance extends AbstractStorelessUnivariateStatistic implements Se\n      * Throws <code>IllegalArgumentException</code> if the array is null.</p>\n      * <p>\n      * Does not change the internal state of the statistic.</p>\n-     * \n+     *\n      * @param values the input array\n      * @param mean the precomputed mean value\n      * @return the variance of the values or Double.NaN if the array is empty\n@@ -351,7 +486,7 @@ public class Variance extends AbstractStorelessUnivariateStatistic implements Se\n     public void setBiasCorrected(boolean isBiasCorrected) {\n         this.isBiasCorrected = isBiasCorrected;\n     }\n-    \n+\n     /**\n      * {@inheritDoc}\n      */\n@@ -361,12 +496,12 @@ public class Variance extends AbstractStorelessUnivariateStatistic implements Se\n         copy(this, result);\n         return result;\n     }\n-    \n-    \n+\n+\n     /**\n      * Copies source to dest.\n      * <p>Neither source nor dest can be null.</p>\n-     * \n+     *\n      * @param source Variance to copy\n      * @param dest Variance to copy to\n      * @throws NullPointerException if either source or dest is null\n",
      "files_name_in_blame_commit": [
        "SumTest.java",
        "Sum.java",
        "Mean.java",
        "AbstractUnivariateStatistic.java",
        "UnivariateStatisticAbstractTest.java",
        "Variance.java",
        "MeanTest.java",
        "Product.java",
        "ProductTest.java",
        "AbstractUnivariateStatisticTest.java",
        "VarianceTest.java"
      ]
    }
  },
  "commits_modify_file_before_fix": {
    "size": 75
  }
}