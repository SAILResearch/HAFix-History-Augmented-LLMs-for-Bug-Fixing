{
  "id": "21",
  "blame_commit": {
    "commit": {
      "commit_id": "828828472848b88b6d3b1e847fa8be5dde78e2da",
      "commit_message": "Make sure that the compiler doesn't crash when you have\nfunction f(undefined) {}\nand you left out the default externs.\nI blame this on a poorly-named function\n\nR=johnlenz\nDELTA=70  (53 added, 7 deleted, 10 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION=1920\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1108 b0f006be-c8cd-11de-a2e8-8d36a3108c74",
      "commit_author": "nicksantos@google.com",
      "commit_date": "2011-05-16 22:01:19",
      "commit_parent": "4c1e16ff017e20a6d94803d8e369cf6e9d748a6a"
    },
    "function": {
      "function_name": "isPrototypePropertyAssign",
      "function_code_before": "private boolean isPrototypePropertyAssign(Node assign) {\n  Node n = assign.getFirstChild();\n  if (n != null && NodeUtil.isLhs(n, assign) &&\n      n.getType() == Token.GETPROP) {\n    // We want to exclude the assignment itself from the usage list\n    boolean isChainedProperty =\n        n.getFirstChild().getType() == Token.GETPROP;\n\n    if (isChainedProperty) {\n      Node child = n.getFirstChild().getFirstChild().getNext();\n\n      if (child.getType() == Token.STRING &&\n          child.getString().equals(\"prototype\")) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}",
      "function_code_after": "private boolean isPrototypePropertyAssign(Node assign) {\n  Node n = assign.getFirstChild();\n  if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign) &&\n      n.getType() == Token.GETPROP) {\n    // We want to exclude the assignment itself from the usage list\n    boolean isChainedProperty =\n        n.getFirstChild().getType() == Token.GETPROP;\n\n    if (isChainedProperty) {\n      Node child = n.getFirstChild().getFirstChild().getNext();\n\n      if (child.getType() == Token.STRING &&\n          child.getString().equals(\"prototype\")) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}",
      "function_before_start_line": 314,
      "function_before_end_line": 333,
      "function_after_start_line": 314,
      "function_after_end_line": 333,
      "function_before_token_count": 114,
      "function_after_token_count": 114,
      "functions_name_modified_file": [
        "NameContext",
        "toString",
        "getNameInfoForName",
        "LiteralProperty",
        "getAllNameInfo",
        "addSymbolUse",
        "getPrototype",
        "GlobalFunction",
        "AnalyzePrototypeProperties",
        "shouldTraverse",
        "traverseEdge",
        "getDeclarations",
        "process",
        "processGlobalFunctionDeclaration",
        "processPrototypeParent",
        "getDeepestCommonModuleRef",
        "isGlobalFunctionDeclaration",
        "ProcessProperties",
        "visit",
        "readsClosureVariables",
        "getModule",
        "addGlobalUseOfSymbol",
        "getValue",
        "AssignmentProperty",
        "getFunctionNode",
        "markReference",
        "NameInfo",
        "exitScope",
        "enterScope",
        "isReferenced",
        "isPrototypePropertyAssign",
        "getAssignNode",
        "remove"
      ],
      "functions_name_all_files": [
        "safeToMoveBefore",
        "checkForStateChangeHelper",
        "inlineCostDelta",
        "testCodeBuilderAppend",
        "recordPrototypeSet",
        "nodesHaveSameControlFlow",
        "referencesThis",
        "getSideEffectNodes",
        "isBooleanResultHelper",
        "isVarBlock",
        "getSourceName",
        "isValidDefineValue",
        "isStatementBlock",
        "testContainsUnicodeEscape",
        "isFunctionObjectApply",
        "apply",
        "exitScope",
        "getCatchBlock",
        "isHigherPrecedence",
        "testMinimizeWhileCondition",
        "classifyCallSite",
        "isVarOrSimpleAssignLhs",
        "isNullOrUndefined",
        "getArgumentForFunction",
        "testCyclicalDependencyInInputs",
        "assertResultString",
        "setDebugInformation",
        "NameContext",
        "isAssociative",
        "testFoldRegExpConstructor",
        "ClassDefiningFunctionNode",
        "inliningLowersCost",
        "classDefiningCallsHaveSideEffects",
        "intersectsLocation",
        "recordDepScope",
        "isVarArgsFunction",
        "LiteralProperty",
        "nodeHasCall",
        "testComma4",
        "keepSimplifiedShortCircuitExpression",
        "processPrototypeParent",
        "isVariableStillLiveWithinExpression",
        "inlineReturnValue",
        "testFoldLiteralArrayConstructors",
        "getModule",
        "addGlobalUseOfSymbol",
        "testFoldAssignments",
        "getPrototypePropertyName",
        "callHasLocalResult",
        "isEmptyBlock",
        "isReferenced",
        "getUniqueResultName",
        "testNestedIfCombine",
        "LiveRangeChecker",
        "isImmutableValue",
        "isControlStructure",
        "MatchNodeType",
        "getCount",
        "VisibilityLocationAbstraction",
        "getNameReferenceCount",
        "getAllNameInfo",
        "trimJsWhiteSpace",
        "isReferenceName",
        "isExprCall",
        "AnalyzePrototypeProperties",
        "isObjectLitKey",
        "traverseEdge",
        "CrossModuleMotionEnvironment",
        "isReturnBlock",
        "getFunctionBody",
        "isPropertyAssignmentInExpression",
        "isLabelName",
        "getRootOfQualifiedName",
        "collapseReplacements",
        "getObjectLitKeyName",
        "testFoldNot",
        "testAndParenthesesCount",
        "createName",
        "testMinimizeCondition_example1",
        "InstanceOfCheckNode",
        "removeUnreferenced",
        "calculateRefSet",
        "isSupportedCallType",
        "testFoldLiteralObjectConstructors",
        "canBeSideEffected",
        "checkHookBranchReadBeforeKill",
        "isThis",
        "getFunctionJSDocInfo",
        "getDeepestCommonModuleRef",
        "isSimpleOperator",
        "getFunctionParameters",
        "testComma1",
        "isGetOrSetKey",
        "isString",
        "tryReplaceExitWithBreak",
        "testSubsituteBreakForThrow",
        "getAssignedValue",
        "areMatchingExits",
        "calculateReferences",
        "getStringValue",
        "name",
        "getArgumentForCallOrNew",
        "getBottomLocation",
        "isLiteralValue",
        "FunctionInjector",
        "recordSet",
        "DeadAssignmentsElimination",
        "redeclareVarsInsideBranch",
        "maybeAddFinally",
        "testCodeBuilderColumnAfterReset",
        "isExpressionNode",
        "isName",
        "processGlobalFunctionDeclaration",
        "setUp",
        "isExceptionPossible",
        "isGlobalFunctionDeclaration",
        "newFunctionNode",
        "getArrayElementStringValue",
        "Comparator<Var>",
        "AliasSet",
        "isBooleanResult",
        "getValue",
        "AssignmentProperty",
        "consumesDanglingElse",
        "getEnclosingFunctionDependencyScope",
        "tryRemoveRepeatedStatements",
        "calculateEnvironment",
        "nameAnchor",
        "computeVariableNamesInterferenceGraph",
        "isNumericResultHelper",
        "remove",
        "isVariableReadBeforeKill",
        "testComma5",
        "getNodeTypeReferenceCount",
        "keepSimplifiedHookExpression",
        "referenceParentNames",
        "tryRemoveRedundantExit",
        "doesFunctionMeetMinimumRequirements",
        "newQualifiedNameNode",
        "testSplitCommaExpressions",
        "isStorageNode",
        "getHtmlReport",
        "isLatin",
        "VariableUseDeclarationMap",
        "canInlineReferenceToFunction",
        "mayHaveSideEffects",
        "isLowerPrecedence",
        "getOpFromAssignmentOp",
        "isFunction",
        "SpecialReferenceNode",
        "testUndefined",
        "isForIn",
        "isControlStructureCodeBlock",
        "PeepholeSubstituteAlternateSyntaxTest",
        "Predicate<Node>",
        "isUndefined",
        "areValidRegexpFlags",
        "getName",
        "isPure",
        "findStorageLocationReferences",
        "addSymbolUse",
        "isVar",
        "inlineFunction",
        "getImpureBooleanValue",
        "recordWriteOnProperties",
        "testArrayLiteral",
        "isReturnExpression",
        "canInlineReferenceAsStatementBlock",
        "Reference",
        "testObjectLiteral",
        "LocationSummary",
        "isDirectCallNodeReplacementPossible",
        "testMinimizeExprCondition",
        "skipFinallyNodes",
        "isTryCatchNodeContainer",
        "testFoldStandardConstructors",
        "doesLowerCost",
        "testLocalUndefined",
        "mapUses",
        "getRefSet",
        "appendListItem",
        "calculateLocationSummary",
        "testFoldLogicalOpStringCompare",
        "isVarDeclaration",
        "getDef",
        "nodeTypeMayHaveSideEffects",
        "has",
        "replaceTopLevelExpressionWithRhs",
        "SideEffectsAnalysis",
        "isControlDependentChild",
        "isLowerPrecedenceInExpression",
        "testMinimizeForCondition",
        "getInfoForNameNode",
        "getBlockVar",
        "PeepholeSubstituteAlternateSyntax",
        "storageNodeIsLValue",
        "inline",
        "getDependencyScope",
        "foldSame",
        "maybeRecordAlias",
        "isTryFinallyNode",
        "areSafeFlagsToFold",
        "containsUnicodeEscape",
        "hasFinally",
        "tryRemoveDeadAssignments",
        "NameAnalyzer",
        "constructorCallHasSideEffects",
        "isConstantName",
        "tryReplaceUndefined",
        "testFoldConditionalVarDeclaration",
        "ProcessProperties",
        "setKnownConstants",
        "readsClosureVariables",
        "isStrWhiteSpaceChar",
        "recordReference",
        "isExprAssign",
        "fold",
        "storageNodeIsRValue",
        "nodeHasAncestor",
        "calculateModSet",
        "isFunctionObjectCallOrApply",
        "testFoldOneChildBlocks",
        "recordAlias",
        "getPrototype",
        "testVersionSpecificRegExpQuirks",
        "isExternallyReferenceable",
        "isSwitchCase",
        "newName",
        "newCallNode",
        "CombinedLiveRangeChecker",
        "isFunctionExpression",
        "visit",
        "estimateCallCost",
        "getObjectLitKeyTypeFromValueType",
        "IntraproceduralMotionEnvironment",
        "getVarsDeclaredInBranch",
        "isValidPropertyName",
        "NameInfo",
        "isFunctionObjectCall",
        "reduceTrueFalse",
        "testRemoveDuplicateReturn",
        "RawMotionEnvironment",
        "isPrototypePropertyDeclaration",
        "maybeHiddenAlias",
        "isStatementParent",
        "isWithinLoop",
        "getNameInfoForName",
        "effectMaskForVariableReference",
        "getModSet",
        "isLoopStructure",
        "arrayToString",
        "FindReferences",
        "testFoldRegExpConstructorStringCompare",
        "tryReduceReturn",
        "tryMinimizeCondition",
        "isArrayLiteral",
        "testCodeBuilderColumnAfterResetDummy",
        "isAssign",
        "addSimplifiedChildren",
        "createNameInformation",
        "getNearestFunctionName",
        "replaceWithRhs",
        "isReturnExpressBlock",
        "testSubsituteReturn",
        "isPrototypePropertyAssign",
        "newExpr",
        "getProcessor",
        "isToStringMethodCall",
        "mayBeString",
        "keepSubTree",
        "testNotCond",
        "testComma3",
        "isNew",
        "getDeclarations",
        "process",
        "getNumRepetitions",
        "testRemoveDuplicateStatements",
        "removeVarDeclaration",
        "isAssignmentOp",
        "shouldVisit",
        "PrototypeSetNode",
        "removeChild",
        "testFoldReturns",
        "valueConsumedByParent",
        "isFunctionDeclaration",
        "nodeRemoved",
        "getConditionExpression",
        "isGetProp",
        "isStatement",
        "testComma2",
        "toString",
        "referenceAliases",
        "getAddingRoot",
        "compareTo",
        "getNthSibling",
        "JsNameRefNode",
        "isObjectCallMethod",
        "valueCheck",
        "opToStr",
        "copyNameAnnotations",
        "isConstantByConvention",
        "newUndefinedNode",
        "containsType",
        "isSimpleFunctionObjectCall",
        "optimizeSubtree",
        "tryRemoveAssignment",
        "testRemoveDuplicateThrow",
        "testIssue291",
        "hasCatchHandler",
        "testFoldReturnResult",
        "containsFunction",
        "getBlockExpression",
        "isCallOrNew",
        "nameLink",
        "getAssignNode",
        "getRhsSubexpressions",
        "callMeetsBlockInliningRequirements",
        "isCall",
        "getNumberValue",
        "countOf",
        "CoalesceVariableNames",
        "isHoistedFunctionDeclaration",
        "tryMinimizeNot",
        "isNull",
        "isEmptyFunctionExpression",
        "getExceptionHandler",
        "evaluatesToLocalValue",
        "maybeReplaceChildWithNumber",
        "getLoopCodeBlock",
        "VisibilityBasedEffectLocation",
        "tryMergeBlock",
        "tryFoldLiteralConstructor",
        "connectIfCrossed",
        "addAllChildren",
        "getStringNumberValue",
        "isReadFrom",
        "getPrototypeClassName",
        "findDeclaringNameNodeForUse",
        "getPureBooleanValue",
        "closestControlDependentAncestor",
        "opToStrNoFail",
        "isPrototypeProperty",
        "tryFoldComma",
        "getFunctionName",
        "createVisibilityAbstraction",
        "isSimpleOperatorType",
        "isLValue",
        "getBlockReturnExpression",
        "isSafeToFoldArrayConstructor",
        "isNumericResult",
        "functionCallHasSideEffects",
        "isCommutative",
        "tryFoldRegularExpressionConstructor",
        "NodeUtil",
        "getFunctionNode",
        "makeForwardSlashBracketSafe",
        "visitPreOrder",
        "mayEffectMutableState",
        "mayBeStringHelper",
        "visitPostOrder",
        "canInlineReferenceDirectly",
        "tryFoldStandardConstructors",
        "isAssignTo",
        "isFoldableExpressBlock",
        "GlobalFunction",
        "shouldTraverse",
        "isGet",
        "newVarNode",
        "addSimplifiedExpression",
        "newHasLocalResult",
        "tryMinimizeIf",
        "isEmpty",
        "testFoldTrueFalse",
        "markReference",
        "tryReplaceIf",
        "enterScope",
        "join",
        "precedence",
        "isNameReferenced",
        "containsCall",
        "MatchNameNode"
      ],
      "functions_name_co_evolved_modified_file": [
        "processPrototypeParent",
        "isPrototypePropertyAssign"
      ],
      "functions_name_co_evolved_all_files": [
        "isVariableReadBeforeKill",
        "storageNodeIsLValue",
        "isLhs",
        "isReadFrom",
        "testUndefined",
        "visit",
        "tryReplaceUndefined",
        "classifyCallSite",
        "isVarOrSimpleAssignLhs",
        "testLocalUndefined",
        "isPrototypePropertyAssign",
        "processPrototypeParent",
        "isLValue",
        "maybeHiddenAlias"
      ]
    },
    "file": {
      "file_name": "AnalyzePrototypeProperties.java",
      "file_nloc": 436,
      "file_complexity": 109,
      "file_token_count": 2900,
      "file_before": "",
      "file_after": "",
      "file_patch": "@@ -313,7 +313,7 @@ class AnalyzePrototypeProperties implements CompilerPass {\n \n     private boolean isPrototypePropertyAssign(Node assign) {\n       Node n = assign.getFirstChild();\n-      if (n != null && NodeUtil.isLhs(n, assign) &&\n+      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign) &&\n           n.getType() == Token.GETPROP) {\n         // We want to exclude the assignment itself from the usage list\n         boolean isChainedProperty =\n@@ -376,7 +376,7 @@ class AnalyzePrototypeProperties implements CompilerPass {\n \n           if (dest.getType() == Token.STRING &&\n               NodeUtil.isExprAssign(grandParent) &&\n-              NodeUtil.isLhs(n, parent)) {\n+              NodeUtil.isVarOrSimpleAssignLhs(n, parent)) {\n             String name = dest.getString();\n             Property prop = new AssignmentProperty(grandParent, t.getModule());\n             getNameInfoForName(name, PROPERTY).getDeclarations().add(prop);\n",
      "files_name_in_blame_commit": [
        "CoalesceVariableNames.java",
        "DeadAssignmentsElimination.java",
        "FunctionInjector.java",
        "PeepholeSubstituteAlternateSyntaxTest.java",
        "AnalyzePrototypeProperties.java",
        "CompilerTest.java",
        "NameAnalyzer.java",
        "PeepholeSubstituteAlternateSyntax.java",
        "NodeUtil.java",
        "SideEffectsAnalysis.java"
      ]
    }
  },
  "commits_modify_file_before_fix": {
    "size": 19
  }
}