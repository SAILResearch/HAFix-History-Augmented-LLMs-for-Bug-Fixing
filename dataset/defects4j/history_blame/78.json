{
  "id": "78",
  "blame_commit": {
    "commit": {
      "commit_id": "6569bb7a3671cb7241c6fcb6e0f1eef7a39f7a1d",
      "commit_message": "Introduced ParseSettings for tag and attribute name case options.",
      "commit_author": "Jonathan Hedley",
      "commit_date": "2016-08-05 15:05:22",
      "commit_parent": "f6a1ef346c74ca3305ef5f198ac953a4fc208813"
    },
    "function": {
      "function_name": "anyOtherEndTag",
      "function_code_before": "boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) {\n    String name = t.asEndTag().name();\n    ArrayList<Element> stack = tb.getStack();\n    for (int pos = stack.size() -1; pos >= 0; pos--) {\n        Element node = stack.get(pos);\n        if (node.nodeName().equals(name)) {\n            tb.generateImpliedEndTags(name);\n            if (!name.equals(tb.currentElement().nodeName()))\n                tb.error(this);\n            tb.popStackToClose(name);\n            break;\n        } else {\n            if (tb.isSpecial(node)) {\n                tb.error(this);\n                return false;\n            }\n        }\n    }\n    return true;\n}",
      "function_code_after": "boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) {\n    String name = t.asEndTag().normalName();\n    ArrayList<Element> stack = tb.getStack();\n    for (int pos = stack.size() -1; pos >= 0; pos--) {\n        Element node = stack.get(pos);\n        if (node.nodeName().equals(name)) {\n            tb.generateImpliedEndTags(name);\n            if (!name.equals(tb.currentElement().nodeName()))\n                tb.error(this);\n            tb.popStackToClose(name);\n            break;\n        } else {\n            if (tb.isSpecial(node)) {\n                tb.error(this);\n                return false;\n            }\n        }\n    }\n    return true;\n}",
      "function_before_start_line": 761,
      "function_before_end_line": 780,
      "function_after_start_line": 763,
      "function_after_end_line": 782,
      "function_before_token_count": 150,
      "function_after_token_count": 150,
      "functions_name_modified_file": [
        "handleMissingTr",
        "handleRcData",
        "anyOtherEndTag",
        "process",
        "isWhitespace",
        "closeCell",
        "handleRawtext",
        "anythingElse",
        "exitTableBody"
      ],
      "functions_name_all_files": [
        "defaultSettings",
        "Character",
        "testThrowsOnPrependNullText",
        "aboveOnStack",
        "normalise",
        "ignoresDupeEndTrTag",
        "testGetSiblingsWithDuplicateContent",
        "getDeepChild",
        "getAttributes",
        "isKnownTag",
        "IndexEquals",
        "isFormListed",
        "setTreeBuilder",
        "getElementsByTagName",
        "getFromStack",
        "lastFormattingElement",
        "AttributeStarting",
        "initialiseParse",
        "getNamespacedElementsByTag",
        "clearStackToTableContext",
        "Tokeniser",
        "combinator",
        "handlesCdata",
        "canPreserveTagCase",
        "lastElementSibling",
        "location",
        "nextElementSibling",
        "handleMissingTr",
        "encoder",
        "caseInsensitive",
        "handlesTextAfterData",
        "unwrap",
        "deeperDescendant",
        "isDoctype",
        "getDocument",
        "getHeadElement",
        "isData",
        "noImplicitFormForTextAreas",
        "charset",
        "Element",
        "testAddNewHtml",
        "handlesEscapedData",
        "HtmlTreeBuilder",
        "testGetSiblings",
        "byTag",
        "processEndTag",
        "replaceWith",
        "selectClassWithSpace",
        "OuterHtmlVisitor",
        "isForceQuirks",
        "isInline",
        "testSetHtmlTitle",
        "setParentNode",
        "testPrependRowToTable",
        "createShell",
        "getElementsByTag",
        "insertInFosterParent",
        "testAFlowContents",
        "testClone",
        "handlesWhitespaceInoDocType",
        "get",
        "testPrependElement",
        "testByClass",
        "hasKey",
        "getIgnoreCase",
        "getElementsMatchingText",
        "testElementSiblingIndex",
        "getElementsByAttributeValueContaining",
        "Doctype",
        "testGetElementsWithClass",
        "put",
        "testClassDomMethods",
        "asDoctype",
        "isEndTag",
        "currentElement",
        "testGetTextNodes",
        "parsesRoughAttributes",
        "nextSibling",
        "testGetParents",
        "handlesUnclosedRawtextAtEof",
        "reparentChild",
        "notClass",
        "canContainBlock",
        "testGroupOrAttribute",
        "hasClass",
        "ContainsText",
        "indentAmount",
        "hasSameValue",
        "StartTag",
        "handlesMisnestedTagsBP",
        "newAttribute",
        "getElementsByIndexGreaterThan",
        "asCharacter",
        "handlesJavadocFont",
        "siblingIndex",
        "handlesXmlDeclarationAsBogusComment",
        "commentBeforeHtml",
        "consumeCharacterReference",
        "isFosterInserts",
        "handlesUnclosedAnchors",
        "Token",
        "inButtonScope",
        "text",
        "setEmptyAttributeValue",
        "OutputSettings",
        "testGetElementsWithAttributeValue",
        "containsOwn",
        "testByAttribute",
        "Id",
        "characterReferenceError",
        "normalisesEmptyDocument",
        "cssNthChild",
        "not",
        "canBeInsensitive",
        "appendText",
        "insertOnStackAfter",
        "handleRawtext",
        "normalName",
        "handlesMultiClosingBody",
        "handlesInputInTable",
        "isSameFormattingElement",
        "MatchesOwn",
        "before",
        "id",
        "isTrackErrors",
        "indexLessThan",
        "hashCode",
        "consumeSubQuery",
        "clone",
        "addAll",
        "testFormatHtml",
        "previousSibling",
        "parseFragment",
        "getElementsByAttributeStarting",
        "asEndTag",
        "absUrl",
        "IsNthChild",
        "childNodes",
        "AttributeWithValueMatching",
        "prependChild",
        "AttributeWithValueEnding",
        "handlesTagsInTextarea",
        "generalSiblings",
        "createElement",
        "createDoctypePending",
        "testFormatOutline",
        "createTempBuffer",
        "elementIsNotASiblingOfItself",
        "pSemantics",
        "testSetIndent",
        "normalizeAttribute",
        "prependText",
        "isElementInQueue",
        "getPendingTableCharacters",
        "removeAttr",
        "inListItemScope",
        "Class",
        "getElementsByClass",
        "createFromEncoded",
        "indexInList",
        "reset",
        "isInActiveFormattingElements",
        "parsesSimpleDocument",
        "SelectorParseException",
        "name",
        "exitTableBody",
        "popStackToBefore",
        "testByAttributeStarting",
        "testAddNewText",
        "normaliseStructure",
        "mixCombinator",
        "getElementsByIndexLessThan",
        "setTrackErrors",
        "removeLastFormattingElement",
        "testSupportsNonAsciiTags",
        "Selector",
        "caseSensitiveDeclaration",
        "tag",
        "hasNext",
        "getState",
        "AttributeWithValue",
        "mixCombinatorGroup",
        "Dataset",
        "testManipulateTextNodes",
        "handlesManyChildren",
        "testGetText",
        "IndexEvaluator",
        "testNoIndentOnScriptAndStyle",
        "testGetElementsWithAttribute",
        "parseXmlFragment",
        "Attribute",
        "getPublicIdentifier",
        "parentWithClassChild",
        "register",
        "createsStructureFromBodySnippet",
        "testRelaxedTags",
        "getValue",
        "calculatePosition",
        "handlesInvalidDoctypes",
        "addSiblingHtml",
        "prettyPrint",
        "remove",
        "testHtmlContainsOuter",
        "markInsertionMode",
        "ignoresContentAfterFrameset",
        "handlesInvalidStartTags",
        "maybeSetBaseUri",
        "testSpanContents",
        "xmlFragment",
        "framesetOk",
        "testOuterHtml",
        "outputSettings",
        "testContainerOutput",
        "doesNotFindShortestMatchingEntity",
        "isBlock",
        "insertStartTag",
        "testPopToClose",
        "createCommentPending",
        "testCreatesValidProlog",
        "divSemantics",
        "appropriateEndTagName",
        "IndexGreaterThan",
        "testGroupOr",
        "parentlessToString",
        "prepend",
        "getBaseUri",
        "normalizeTag",
        "after",
        "appendTagName",
        "testPrependText",
        "hasKeyIgnoreCase",
        "isAppropriateEndTagToken",
        "clearStackToTableBodyContext",
        "parents",
        "testHgroup",
        "handlesUnclosedDefinitionLists",
        "canNormalizeCase",
        "AttributeWithValueStarting",
        "attr",
        "tracksErrorsWhenRequested",
        "handlesSolidusInA",
        "testSupplyParserToJsoupClass",
        "testNestedHas",
        "popStackToClose",
        "normalisesDocument",
        "head",
        "selectSupplementaryCharacter",
        "handlesWhatWgExpensesTableExample",
        "siblingElements",
        "canPreserveAttributeCase",
        "handlesCommentsInTable",
        "isFormSubmittable",
        "prependElement",
        "setPendingTableCharacters",
        "ensureChildNodes",
        "accumulateParents",
        "push",
        "emitCommentPending",
        "handlesUnknownInlineTags",
        "Matches",
        "getName",
        "asComment",
        "testNamespacedTag",
        "AttributeWithValueNot",
        "testPseudoLessThan",
        "allElements",
        "parsesComments",
        "notAll",
        "getElementsByAttributeValue",
        "childNodeSize",
        "appendWhitespaceIfBr",
        "testById",
        "shouldCollapseAttribute",
        "testAddBooleanAttribute",
        "insertMarkerToFormattingElements",
        "inScope",
        "readData",
        "testByAttributeRegex",
        "attributeWithBrackets",
        "testNormalisesIsIndex",
        "getPseudoClass",
        "handlesNestedImplicitTable",
        "IndexLessThan",
        "testHtmlLowerCase",
        "appendAttributeName",
        "read",
        "handlesUnclosedTitleAtEof",
        "testSupportsPartiallyNonAsciiTags",
        "tagName",
        "handles0CharacterAsText",
        "emit",
        "testKeepsPreText",
        "testClassUpdates",
        "className",
        "adjacentSiblingsWithId",
        "ensureAttributeValue",
        "elementSiblingIndex",
        "readCharRef",
        "IsNthLastOfType",
        "formatAsBlock",
        "testPseudoCombined",
        "byClass",
        "removeFromActiveFormattingElements",
        "testDetectCharsetEncodingDeclaration",
        "CssNthEvaluator",
        "parentNode",
        "getAllElements",
        "has",
        "AttributeWithValueContaining",
        "insertEmpty",
        "matches",
        "handlesQuotesInCommentsInScripts",
        "testPseudoHas",
        "handlesBlocksInDefinitions",
        "testEmptyElementFormatHtml",
        "testByAttributeRegexCharacterClass",
        "appendAttributeValue",
        "setHeadElement",
        "dropsUnterminatedAttribute",
        "ParseSettings",
        "parsesUnterminatedTextarea",
        "childNodesAsArray",
        "imgSemantics",
        "getData",
        "htmlParser",
        "appendMustCorrectlyMoveChildrenInsideOneParentElement",
        "testByAttributeRegexCombined",
        "inTableScope",
        "valueOf",
        "child",
        "setFosterInserts",
        "asStartTag",
        "siblingNodes",
        "textNodes",
        "val",
        "resetInsertionMode",
        "state",
        "preservesCaseByDefault",
        "testHasText",
        "testCharactersInIdAndClass",
        "Tag",
        "settings",
        "nameAttr",
        "handlesProtocolRelativeUrl",
        "replaceChild",
        "testSupplyParserToConnection",
        "insertForm",
        "testNotPretty",
        "findsCharsetInMalformedMeta",
        "testBrHasSpace",
        "moveByAppend",
        "testSpaceAfterTag",
        "IsFirstOfType",
        "next",
        "tokenType",
        "normalisesHeadlessBody",
        "testSupplyParserToDataStream",
        "syntax",
        "testAddNewElement",
        "testDoesHandleEOFInTag",
        "escapeMode",
        "testParseDeclarationAttributes",
        "testNoImagesInNoScriptInHead",
        "testNamespacedElements",
        "testWrapWithRemainder",
        "isCharacter",
        "getElementsContainingOwnText",
        "getElementsByAttributeValueNot",
        "insertNode",
        "handlesNullInData",
        "dataKey",
        "IsNthOfType",
        "handlesTextArea",
        "parentChildElement",
        "runParser",
        "testByTag",
        "empty",
        "getSystemIdentifier",
        "testClonesClassnames",
        "originalState",
        "data",
        "handleDataEndTag",
        "dropsUnterminatedTag",
        "testAllWithClass",
        "xmlParser",
        "Comment",
        "handlesImplicitCaptionClose",
        "adjacentSiblings",
        "outline",
        "testSetHtml",
        "isEOF",
        "anythingElse",
        "title",
        "Parser",
        "getErrors",
        "testWrap",
        "attributes",
        "handlesBaseTags",
        "handlesUnclosedCdataAtEOF",
        "updateMetaCharsetElement",
        "testMatches",
        "testGetElementsWithAttributeDash",
        "normalizeAttributes",
        "handlesUnknownNamespaceTags",
        "isComment",
        "indexGreaterThan",
        "entrySet",
        "readEndTag",
        "closeCell",
        "getElementById",
        "preservesSpaceInScript",
        "insertChildren",
        "getElementsMatchingOwnText",
        "getTreeBuilder",
        "testFontFlowContents",
        "traverse",
        "IsLastOfType",
        "baseUri",
        "testChildThrowsIndexOutOfBoundsOnMissing",
        "handlesKnownEmptyBlocks",
        "Document",
        "getOutputSettings",
        "isDataAttribute",
        "onStack",
        "indent",
        "childNode",
        "canPreserveBothCase",
        "handlesNullInComments",
        "parsesQuiteRoughAttributes",
        "inSpecificScope",
        "firstElementSibling",
        "inSelectScope",
        "parsesBodyFragment",
        "processStartTag",
        "isWhitespace",
        "testHashcodeIsStableWithContentChanges",
        "for",
        "testClassNames",
        "testPseudoBetween",
        "byAttribute",
        "isBooleanAttribute",
        "parseBodyFragmentRelaxed",
        "testNormalisesText",
        "caseSupport",
        "getElementsByAttributeValueStarting",
        "advanceTransition",
        "and",
        "process",
        "notAdjacent",
        "classNames",
        "currentNodeInHtmlNS",
        "testSetText",
        "size",
        "handlesUnclosedFormattingElements",
        "parent",
        "previousElementSibling",
        "setSiblingIndex",
        "replaceOnStack",
        "Evaluator",
        "emitDoctypePending",
        "QueryParser",
        "handlesCommasInSelector",
        "removeChild",
        "handlesDataOnlyTags",
        "reindexChildren",
        "convertsImageToImg",
        "addChildren",
        "createsDocumentStructure",
        "isSpecial",
        "handleRcData",
        "anyOtherEndTag",
        "createsFormElements",
        "acknowledgeSelfClosingFlag",
        "body",
        "pop",
        "unescapeEntities",
        "isStartTag",
        "indexEquals",
        "testSupportsLeadingCombinator",
        "parseBodyFragment",
        "addClass",
        "testPseudoGreaterThan",
        "getStack",
        "toString",
        "emitTagPending",
        "valueOfChecksNotEmpty",
        "asList",
        "handlesBaseWithoutHref",
        "relaxedBaseEntityMatchAndStrictExtendedMatch",
        "generateImpliedEndTags",
        "testCombinedWithContains",
        "equality",
        "hasAttr",
        "handlesSolidusAtAttributeEnd",
        "tracksLimitedErrorsWhenRequested",
        "testSimpleXmlParse",
        "pushActiveFormattingElements",
        "ContainsOwnText",
        "handleNullContextInParseFragment",
        "descendant",
        "filterOut",
        "testCommentAndDocType",
        "handlesTbodyTable",
        "discardsNakedTds",
        "testUsingSingleQuotesInQueries",
        "replaceActiveFormattingElement",
        "setSelfClosing",
        "testTagNameSet",
        "handlesEscapedScript",
        "handlesUnknownTags",
        "testDoesNotForceSelfClosingKnownTags",
        "handlesMisnestedTagsBI",
        "insertChildrenAsCopy",
        "appendElement",
        "getElementsContainingText",
        "doClone",
        "testPsuedoContainsWithParentheses",
        "handleDataDoubleEscapeTag",
        "testHeaderContents",
        "createTagPending",
        "transition",
        "getElementsByAttributeValueEnding",
        "getElementsByAttributeValueMatching",
        "appendNormalisedText",
        "getFormElement",
        "html",
        "clearStackToTableRowContext",
        "setKey",
        "appendChild",
        "testElementSiblingIndexSameContent",
        "quirksMode",
        "dataNodes",
        "outerHtmlTail",
        "ownerDocument",
        "handlesXmlDeclarationAsDeclaration",
        "findElements",
        "testPseudoEquals",
        "childNodesCopy",
        "matchesOwn",
        "consumeIndex",
        "cssSelector",
        "valueOfChecksNotNull",
        "error",
        "preserveWhitespace",
        "testAppendRowToTable",
        "associatedFormControlsWithDisjointForms",
        "testReinsertionModeForThCelss",
        "doesNotCreateImplicitLists",
        "testGetDataNodes",
        "normaliseTextNodes",
        "outerHtml",
        "equals",
        "testAllElements",
        "testHashAndEqualsAndValue",
        "outerHtmlHead",
        "AttributeKeyPair",
        "handlesSpanInTbody",
        "clearFormattingElementsToLastMarker",
        "xmlParseDefaultsToHtmlOutputSyntax",
        "newPendingTableCharacters",
        "testGetChildText",
        "noTableDirectInTable",
        "testRelativeUrls",
        "normalisedBodyAfterContent",
        "getElementsByIndexEquals",
        "getKey",
        "select",
        "removeFromStack",
        "append",
        "finaliseTag",
        "handlesFrames",
        "tail",
        "testKeepsPreTextInCode",
        "eofError",
        "setBaseUri",
        "wrap",
        "contains",
        "clearStackToContext",
        "testPseudoContains",
        "iterator",
        "byId",
        "testCssPath",
        "parsesUnterminatedComments",
        "IsNthLastChild",
        "nodeName",
        "hasText",
        "ownText",
        "children",
        "parentChildStar",
        "multiChildDescent",
        "testThrowsOnAddNullText",
        "testPrependNewHtml",
        "preservesSpaceInTextArea",
        "testInvalidTableContents",
        "getActiveFormattingElement",
        "defaultSemantics",
        "handlesUnclosedTitle",
        "testGetElementById",
        "removeIgnoreCase",
        "reconstructFormattingElementsInTable",
        "removeClass",
        "trims",
        "emptyTdTag",
        "getElementsByAttribute",
        "insert",
        "isSelfClosing",
        "EndTag",
        "parsesUnterminatedOption",
        "handlesNewlinesAndWhitespaceInTag",
        "notParas",
        "toggleClass",
        "parse",
        "handlesUnexpectedMarkupInTables",
        "selectSameElements",
        "replaceInQueue",
        "isEmpty",
        "reconstructFormattingElements",
        "handlesUnclosedScriptAtEof",
        "dataset",
        "isCaseSensitive",
        "setValue",
        "findFirstElementByTagName",
        "EOF",
        "setFormElement",
        "Node",
        "parseInput",
        "insertChildrenArgumentValidation",
        "noErrorsByDefault",
        "insertChildrenAtPosition",
        "isFragmentParsing",
        "testInnerHtml",
        "ensureMetaCharsetElement"
      ],
      "functions_name_co_evolved_modified_file": [
        "process"
      ],
      "functions_name_co_evolved_all_files": [
        "defaultSettings",
        "byTag",
        "removeIgnoreCase",
        "id",
        "handleDataDoubleEscapeTag",
        "name",
        "testAddNewElement",
        "valueOf",
        "insertStartTag",
        "byClass",
        "getElementsByAttribute",
        "insert",
        "parseFragment",
        "normalizeAttributes",
        "caseSupport",
        "getElementsByAttributeStarting",
        "html",
        "setKey",
        "hasAttr",
        "preservesCaseByDefault",
        "normalizeTag",
        "process",
        "parse",
        "Tag",
        "appendTagName",
        "get",
        "initialiseParse",
        "hasKeyIgnoreCase",
        "settings",
        "hasKey",
        "isAppropriateEndTagToken",
        "getIgnoreCase",
        "AttributeStarting",
        "nameAttr",
        "testByClass",
        "insertEmpty",
        "matches",
        "canNormalizeCase",
        "canPreserveTagCase",
        "testHtmlLowerCase",
        "attr",
        "descendant",
        "read",
        "createElement",
        "isCaseSensitive",
        "insertForm",
        "Attribute",
        "parseXmlFragment",
        "testCommentAndDocType",
        "Document",
        "caseSensitiveDeclaration",
        "testByTag",
        "tagName",
        "handleDataEndTag",
        "testByAttribute",
        "normalizeAttribute",
        "isCaseInsensitive",
        "removeAttr",
        "canPreserveAttributeCase",
        "equals",
        "parseInput",
        "ParseSettings",
        "canPreserveBothCase",
        "canBeInsensitive",
        "normalName",
        "Parser",
        "defaultSemantics",
        "reset",
        "remove"
      ]
    },
    "file": {
      "file_name": "HtmlTreeBuilderState.java",
      "file_nloc": 1414,
      "file_complexity": 429,
      "file_token_count": 11376,
      "file_before": "",
      "file_after": "",
      "file_patch": "@@ -19,7 +19,8 @@ enum HtmlTreeBuilderState {\n                 // todo: parse error check on expected doctypes\n                 // todo: quirk state check on doctype ids\n                 Token.Doctype d = t.asDoctype();\n-                DocumentType doctype = new DocumentType(d.getName(), d.getPublicIdentifier(), d.getSystemIdentifier(), tb.getBaseUri());\n+                DocumentType doctype = new DocumentType(\n+                    tb.settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier(), tb.getBaseUri());\n                 tb.getDocument().appendChild(doctype);\n                 if (d.isForceQuirks())\n                     tb.getDocument().quirksMode(Document.QuirksMode.quirks);\n@@ -41,10 +42,10 @@ enum HtmlTreeBuilderState {\n                 tb.insert(t.asComment());\n             } else if (isWhitespace(t)) {\n                 return true; // ignore whitespace\n-            } else if (t.isStartTag() && t.asStartTag().name().equals(\"html\")) {\n+            } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) {\n                 tb.insert(t.asStartTag());\n                 tb.transition(BeforeHead);\n-            } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().name(), \"head\", \"body\", \"html\", \"br\"))) {\n+            } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) {\n                 return anythingElse(t, tb);\n             } else if (t.isEndTag()) {\n                 tb.error(this);\n@@ -70,13 +71,13 @@ enum HtmlTreeBuilderState {\n             } else if (t.isDoctype()) {\n                 tb.error(this);\n                 return false;\n-            } else if (t.isStartTag() && t.asStartTag().name().equals(\"html\")) {\n+            } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) {\n                 return InBody.process(t, tb); // does not transition\n-            } else if (t.isStartTag() && t.asStartTag().name().equals(\"head\")) {\n+            } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"head\")) {\n                 Element head = tb.insert(t.asStartTag());\n                 tb.setHeadElement(head);\n                 tb.transition(InHead);\n-            } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().name(), \"head\", \"body\", \"html\", \"br\"))) {\n+            } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) {\n                 tb.processStartTag(\"head\");\n                 return tb.process(t);\n             } else if (t.isEndTag()) {\n@@ -104,7 +105,7 @@ enum HtmlTreeBuilderState {\n                     return false;\n                 case StartTag:\n                     Token.StartTag start = t.asStartTag();\n-                    String name = start.name();\n+                    String name = start.normalName();\n                     if (name.equals(\"html\")) {\n                         return InBody.process(t, tb);\n                     } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) {\n@@ -139,7 +140,7 @@ enum HtmlTreeBuilderState {\n                     break;\n                 case EndTag:\n                     Token.EndTag end = t.asEndTag();\n-                    name = end.name();\n+                    name = end.normalName();\n                     if (name.equals(\"head\")) {\n                         tb.pop();\n                         tb.transition(AfterHead);\n@@ -165,17 +166,17 @@ enum HtmlTreeBuilderState {\n         boolean process(Token t, HtmlTreeBuilder tb) {\n             if (t.isDoctype()) {\n                 tb.error(this);\n-            } else if (t.isStartTag() && t.asStartTag().name().equals(\"html\")) {\n+            } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) {\n                 return tb.process(t, InBody);\n-            } else if (t.isEndTag() && t.asEndTag().name().equals(\"noscript\")) {\n+            } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"noscript\")) {\n                 tb.pop();\n                 tb.transition(InHead);\n-            } else if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().name(),\n+            } else if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(),\n                     \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\"))) {\n                 return tb.process(t, InHead);\n-            } else if (t.isEndTag() && t.asEndTag().name().equals(\"br\")) {\n+            } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"br\")) {\n                 return anythingElse(t, tb);\n-            } else if ((t.isStartTag() && StringUtil.in(t.asStartTag().name(), \"head\", \"noscript\")) || t.isEndTag()) {\n+            } else if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"head\", \"noscript\")) || t.isEndTag()) {\n                 tb.error(this);\n                 return false;\n             } else {\n@@ -200,7 +201,7 @@ enum HtmlTreeBuilderState {\n                 tb.error(this);\n             } else if (t.isStartTag()) {\n                 Token.StartTag startTag = t.asStartTag();\n-                String name = startTag.name();\n+                String name = startTag.normalName();\n                 if (name.equals(\"html\")) {\n                     return tb.process(t, InBody);\n                 } else if (name.equals(\"body\")) {\n@@ -223,7 +224,7 @@ enum HtmlTreeBuilderState {\n                     anythingElse(t, tb);\n                 }\n             } else if (t.isEndTag()) {\n-                if (StringUtil.in(t.asEndTag().name(), \"body\", \"html\")) {\n+                if (StringUtil.in(t.asEndTag().normalName(), \"body\", \"html\")) {\n                     anythingElse(t, tb);\n                 } else {\n                     tb.error(this);\n@@ -270,7 +271,7 @@ enum HtmlTreeBuilderState {\n                 }\n                 case StartTag:\n                     Token.StartTag startTag = t.asStartTag();\n-                    String name = startTag.name();\n+                    String name = startTag.normalName();\n                     if (name.equals(\"a\")) {\n                         if (tb.getActiveFormattingElement(\"a\") != null) {\n                             tb.error(this);\n@@ -555,7 +556,7 @@ enum HtmlTreeBuilderState {\n \n                 case EndTag:\n                     Token.EndTag endTag = t.asEndTag();\n-                    name = endTag.name();\n+                    name = endTag.normalName();\n                     if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) {\n                         // Adoption Agency Algorithm.\n                         for (int i = 0; i < 8; i++) {\n@@ -608,7 +609,8 @@ enum HtmlTreeBuilderState {\n                                 } else if (node == formatEl)\n                                     break;\n \n-                                Element replacement = new Element(Tag.valueOf(node.nodeName()), tb.getBaseUri());\n+                                Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri());\n+                                // case will follow the original node (so honours ParseSettings)\n                                 tb.replaceActiveFormattingElement(node, replacement);\n                                 tb.replaceOnStack(node, replacement);\n                                 node = replacement;\n@@ -759,7 +761,7 @@ enum HtmlTreeBuilderState {\n         }\n \n         boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) {\n-            String name = t.asEndTag().name();\n+            String name = t.asEndTag().normalName();\n             ArrayList<Element> stack = tb.getStack();\n             for (int pos = stack.size() -1; pos >= 0; pos--) {\n                 Element node = stack.get(pos);\n@@ -813,7 +815,7 @@ enum HtmlTreeBuilderState {\n                 return false;\n             } else if (t.isStartTag()) {\n                 Token.StartTag startTag = t.asStartTag();\n-                String name = startTag.name();\n+                String name = startTag.normalName();\n                 if (name.equals(\"caption\")) {\n                     tb.clearStackToTableContext();\n                     tb.insertMarkerToFormattingElements();\n@@ -859,7 +861,7 @@ enum HtmlTreeBuilderState {\n                 return true; // todo: check if should return processed http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#parsing-main-intable\n             } else if (t.isEndTag()) {\n                 Token.EndTag endTag = t.asEndTag();\n-                String name = endTag.name();\n+                String name = endTag.normalName();\n \n                 if (name.equals(\"table\")) {\n                     if (!tb.inTableScope(name)) {\n@@ -937,9 +939,9 @@ enum HtmlTreeBuilderState {\n     },\n     InCaption {\n         boolean process(Token t, HtmlTreeBuilder tb) {\n-            if (t.isEndTag() && t.asEndTag().name().equals(\"caption\")) {\n+            if (t.isEndTag() && t.asEndTag().normalName().equals(\"caption\")) {\n                 Token.EndTag endTag = t.asEndTag();\n-                String name = endTag.name();\n+                String name = endTag.normalName();\n                 if (!tb.inTableScope(name)) {\n                     tb.error(this);\n                     return false;\n@@ -952,15 +954,15 @@ enum HtmlTreeBuilderState {\n                     tb.transition(InTable);\n                 }\n             } else if ((\n-                    t.isStartTag() && StringUtil.in(t.asStartTag().name(),\n+                    t.isStartTag() && StringUtil.in(t.asStartTag().normalName(),\n                             \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") ||\n-                            t.isEndTag() && t.asEndTag().name().equals(\"table\"))\n+                            t.isEndTag() && t.asEndTag().normalName().equals(\"table\"))\n                     ) {\n                 tb.error(this);\n                 boolean processed = tb.processEndTag(\"caption\");\n                 if (processed)\n                     return tb.process(t);\n-            } else if (t.isEndTag() && StringUtil.in(t.asEndTag().name(),\n+            } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(),\n                     \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) {\n                 tb.error(this);\n                 return false;\n@@ -985,7 +987,7 @@ enum HtmlTreeBuilderState {\n                     break;\n                 case StartTag:\n                     Token.StartTag startTag = t.asStartTag();\n-                    String name = startTag.name();\n+                    String name = startTag.normalName();\n                     if (name.equals(\"html\"))\n                         return tb.process(t, InBody);\n                     else if (name.equals(\"col\"))\n@@ -995,7 +997,7 @@ enum HtmlTreeBuilderState {\n                     break;\n                 case EndTag:\n                     Token.EndTag endTag = t.asEndTag();\n-                    name = endTag.name();\n+                    name = endTag.normalName();\n                     if (name.equals(\"colgroup\")) {\n                         if (tb.currentElement().nodeName().equals(\"html\")) { // frag case\n                             tb.error(this);\n@@ -1030,7 +1032,7 @@ enum HtmlTreeBuilderState {\n             switch (t.type) {\n                 case StartTag:\n                     Token.StartTag startTag = t.asStartTag();\n-                    String name = startTag.name();\n+                    String name = startTag.normalName();\n                     if (name.equals(\"tr\")) {\n                         tb.clearStackToTableBodyContext();\n                         tb.insert(startTag);\n@@ -1046,7 +1048,7 @@ enum HtmlTreeBuilderState {\n                     break;\n                 case EndTag:\n                     Token.EndTag endTag = t.asEndTag();\n-                    name = endTag.name();\n+                    name = endTag.normalName();\n                     if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n                         if (!tb.inTableScope(name)) {\n                             tb.error(this);\n@@ -1089,7 +1091,7 @@ enum HtmlTreeBuilderState {\n         boolean process(Token t, HtmlTreeBuilder tb) {\n             if (t.isStartTag()) {\n                 Token.StartTag startTag = t.asStartTag();\n-                String name = startTag.name();\n+                String name = startTag.normalName();\n \n                 if (StringUtil.in(name, \"th\", \"td\")) {\n                     tb.clearStackToTableRowContext();\n@@ -1103,7 +1105,7 @@ enum HtmlTreeBuilderState {\n                 }\n             } else if (t.isEndTag()) {\n                 Token.EndTag endTag = t.asEndTag();\n-                String name = endTag.name();\n+                String name = endTag.normalName();\n \n                 if (name.equals(\"tr\")) {\n                     if (!tb.inTableScope(name)) {\n@@ -1150,7 +1152,7 @@ enum HtmlTreeBuilderState {\n         boolean process(Token t, HtmlTreeBuilder tb) {\n             if (t.isEndTag()) {\n                 Token.EndTag endTag = t.asEndTag();\n-                String name = endTag.name();\n+                String name = endTag.normalName();\n \n                 if (StringUtil.in(name, \"td\", \"th\")) {\n                     if (!tb.inTableScope(name)) {\n@@ -1178,7 +1180,7 @@ enum HtmlTreeBuilderState {\n                     return anythingElse(t, tb);\n                 }\n             } else if (t.isStartTag() &&\n-                    StringUtil.in(t.asStartTag().name(),\n+                    StringUtil.in(t.asStartTag().normalName(),\n                             \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) {\n                 if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\"))) {\n                     tb.error(this);\n@@ -1223,7 +1225,7 @@ enum HtmlTreeBuilderState {\n                     return false;\n                 case StartTag:\n                     Token.StartTag start = t.asStartTag();\n-                    String name = start.name();\n+                    String name = start.normalName();\n                     if (name.equals(\"html\"))\n                         return tb.process(start, InBody);\n                     else if (name.equals(\"option\")) {\n@@ -1252,7 +1254,7 @@ enum HtmlTreeBuilderState {\n                     break;\n                 case EndTag:\n                     Token.EndTag end = t.asEndTag();\n-                    name = end.name();\n+                    name = end.normalName();\n                     if (name.equals(\"optgroup\")) {\n                         if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\"))\n                             tb.processEndTag(\"option\");\n@@ -1293,13 +1295,13 @@ enum HtmlTreeBuilderState {\n     },\n     InSelectInTable {\n         boolean process(Token t, HtmlTreeBuilder tb) {\n-            if (t.isStartTag() && StringUtil.in(t.asStartTag().name(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) {\n+            if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) {\n                 tb.error(this);\n                 tb.processEndTag(\"select\");\n                 return tb.process(t);\n-            } else if (t.isEndTag() && StringUtil.in(t.asEndTag().name(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) {\n+            } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) {\n                 tb.error(this);\n-                if (tb.inTableScope(t.asEndTag().name())) {\n+                if (tb.inTableScope(t.asEndTag().normalName())) {\n                     tb.processEndTag(\"select\");\n                     return (tb.process(t));\n                 } else\n@@ -1318,9 +1320,9 @@ enum HtmlTreeBuilderState {\n             } else if (t.isDoctype()) {\n                 tb.error(this);\n                 return false;\n-            } else if (t.isStartTag() && t.asStartTag().name().equals(\"html\")) {\n+            } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) {\n                 return tb.process(t, InBody);\n-            } else if (t.isEndTag() && t.asEndTag().name().equals(\"html\")) {\n+            } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) {\n                 if (tb.isFragmentParsing()) {\n                     tb.error(this);\n                     return false;\n@@ -1348,7 +1350,7 @@ enum HtmlTreeBuilderState {\n                 return false;\n             } else if (t.isStartTag()) {\n                 Token.StartTag start = t.asStartTag();\n-                String name = start.name();\n+                String name = start.normalName();\n                 if (name.equals(\"html\")) {\n                     return tb.process(start, InBody);\n                 } else if (name.equals(\"frameset\")) {\n@@ -1361,7 +1363,7 @@ enum HtmlTreeBuilderState {\n                     tb.error(this);\n                     return false;\n                 }\n-            } else if (t.isEndTag() && t.asEndTag().name().equals(\"frameset\")) {\n+            } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"frameset\")) {\n                 if (tb.currentElement().nodeName().equals(\"html\")) { // frag\n                     tb.error(this);\n                     return false;\n@@ -1392,11 +1394,11 @@ enum HtmlTreeBuilderState {\n             } else if (t.isDoctype()) {\n                 tb.error(this);\n                 return false;\n-            } else if (t.isStartTag() && t.asStartTag().name().equals(\"html\")) {\n+            } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) {\n                 return tb.process(t, InBody);\n-            } else if (t.isEndTag() && t.asEndTag().name().equals(\"html\")) {\n+            } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) {\n                 tb.transition(AfterAfterFrameset);\n-            } else if (t.isStartTag() && t.asStartTag().name().equals(\"noframes\")) {\n+            } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) {\n                 return tb.process(t, InHead);\n             } else if (t.isEOF()) {\n                 // cool your heels, we're complete\n@@ -1411,7 +1413,7 @@ enum HtmlTreeBuilderState {\n         boolean process(Token t, HtmlTreeBuilder tb) {\n             if (t.isComment()) {\n                 tb.insert(t.asComment());\n-            } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().name().equals(\"html\"))) {\n+            } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) {\n                 return tb.process(t, InBody);\n             } else if (t.isEOF()) {\n                 // nice work chuck\n@@ -1427,11 +1429,11 @@ enum HtmlTreeBuilderState {\n         boolean process(Token t, HtmlTreeBuilder tb) {\n             if (t.isComment()) {\n                 tb.insert(t.asComment());\n-            } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().name().equals(\"html\"))) {\n+            } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) {\n                 return tb.process(t, InBody);\n             } else if (t.isEOF()) {\n                 // nice work chuck\n-            } else if (t.isStartTag() && t.asStartTag().name().equals(\"noframes\")) {\n+            } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) {\n                 return tb.process(t, InHead);\n             } else {\n                 tb.error(this);\n",
      "files_name_in_blame_commit": [
        "XmlTreeBuilderTest.java",
        "HtmlParserTest.java",
        "ParserSettingsTest.java",
        "Element.java",
        "ElementTest.java",
        "Evaluator.java",
        "QueryParser.java",
        "TagTest.java",
        "AttributesTest.java",
        "HtmlTreeBuilderState.java",
        "SelectorTest.java",
        "TokeniserState.java",
        "ParseSettings.java",
        "Node.java",
        "Token.java",
        "Attribute.java",
        "Tokeniser.java",
        "Tag.java",
        "HtmlTreeBuilder.java",
        "XmlTreeBuilder.java",
        "Parser.java",
        "TreeBuilder.java",
        "Document.java",
        "Attributes.java",
        "Selector.java"
      ]
    }
  },
  "commits_modify_file_before_fix": {
    "size": 29
  }
}