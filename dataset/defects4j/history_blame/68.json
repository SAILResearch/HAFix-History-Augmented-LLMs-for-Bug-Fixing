{
  "id": "68",
  "blame_commit": {
    "commit": {
      "commit_id": "5ca6b4041d0605025f1a1582a605d2aee377bc1c",
      "commit_message": "Implemented Node.clone() to create deep, independent copies of Nodes, Elements, and Documents.\n\nFixes #47",
      "commit_author": "Jonathan Hedley",
      "commit_date": "2011-07-02 21:12:02",
      "commit_parent": "2f5b1878624b28c268e337fcb2748dbc249c5e6d"
    },
    "function": {
      "function_name": "clone",
      "function_code_before": "",
      "function_code_after": "public Element clone() {\n    Element clone = (Element) super.clone();\n    clone.classNames(); // creates linked set of class names from class attribute\n    return clone;\n}",
      "function_before_start_line": "",
      "function_before_end_line": "",
      "function_after_start_line": 1046,
      "function_after_end_line": 1050,
      "function_before_token_count": 0,
      "function_after_token_count": 26,
      "functions_name_modified_file": [
        "prependElement",
        "hasClass",
        "before",
        "accumulateParents",
        "elementSiblingIndex",
        "id",
        "firstElementSibling",
        "toString",
        "removeClass",
        "child",
        "getDeepChild",
        "hashCode",
        "clone",
        "isBlock",
        "getElementsByAttributeValueEnding",
        "getElementsByAttributeValue",
        "getElementsByAttribute",
        "getElementsByAttributeValueMatching",
        "appendNormalisedText",
        "getElementsByAttributeStarting",
        "getElementsByIndexGreaterThan",
        "val",
        "getElementsByIndexEquals",
        "getElementsByIndexLessThan",
        "select",
        "html",
        "getElementsByAttributeValueStarting",
        "getAllElements",
        "appendChild",
        "append",
        "prepend",
        "getElementsByTag",
        "after",
        "outerHtmlTail",
        "toggleClass",
        "tag",
        "getElementById",
        "prependChild",
        "getElementsContainingOwnText",
        "getElementsMatchingText",
        "getElementsMatchingOwnText",
        "parents",
        "getElementsByAttributeValueNot",
        "getElementsByAttributeValueContaining",
        "classNames",
        "wrap",
        "attr",
        "lastElementSibling",
        "dataset",
        "outerHtmlHead",
        "parent",
        "nextElementSibling",
        "previousElementSibling",
        "text",
        "empty",
        "preserveWhitespace",
        "tagName",
        "data",
        "prependText",
        "nodeName",
        "siblingElements",
        "getElementsByClass",
        "children",
        "ownText",
        "indexInList",
        "hasText",
        "equals",
        "className",
        "appendElement",
        "Element",
        "getElementsContainingText",
        "appendText",
        "addSiblingHtml",
        "addClass"
      ],
      "functions_name_all_files": [
        "testTitles",
        "toString",
        "normalise",
        "child",
        "getDeepChild",
        "asList",
        "siblingNodes",
        "testAddNewText",
        "normaliseStructure",
        "val",
        "getElementsByIndexLessThan",
        "hasAttr",
        "getElementsByTagName",
        "testHasText",
        "tag",
        "hasNext",
        "getNamespacedElementsByTag",
        "lastElementSibling",
        "replaceChild",
        "testGetText",
        "testGetElementsWithAttribute",
        "Attribute",
        "nextElementSibling",
        "testNotPretty",
        "encoder",
        "getValue",
        "next",
        "appendElement",
        "charset",
        "Element",
        "getElementsContainingText",
        "doClone",
        "addSiblingHtml",
        "testAddNewHtml",
        "prettyPrint",
        "remove",
        "testGetSiblings",
        "replaceWith",
        "setTextPreservesDocumentStructure",
        "testAddNewElement",
        "testOuterHtml",
        "outputSettings",
        "escapeMode",
        "OuterHtmlVisitor",
        "isBlock",
        "getElementsByAttributeValueEnding",
        "getElementsByAttributeValueMatching",
        "appendNormalisedText",
        "html",
        "setParentNode",
        "testPrependRowToTable",
        "setKey",
        "parentlessToString",
        "testXhtmlReferences",
        "appendChild",
        "createShell",
        "prepend",
        "getElementsByTag",
        "after",
        "outerHtmlTail",
        "ownerDocument",
        "testClone",
        "testPrependText",
        "get",
        "testPrependElement",
        "testWrapWithRemainder",
        "hasKey",
        "getElementsContainingOwnText",
        "getElementsMatchingText",
        "testElementSiblingIndex",
        "parents",
        "getElementsByAttributeValueNot",
        "getElementsByAttributeValueContaining",
        "testGetElementsWithClass",
        "attr",
        "put",
        "dataKey",
        "testClassDomMethods",
        "empty",
        "head",
        "preserveWhitespace",
        "testAppendRowToTable",
        "data",
        "siblingElements",
        "normaliseTextNodes",
        "outerHtml",
        "nextSibling",
        "equals",
        "testGetParents",
        "reparentChild",
        "testSetHtml",
        "outerHtmlHead",
        "title",
        "testWrap",
        "attributes",
        "prependElement",
        "hasClass",
        "accumulateParents",
        "indentAmount",
        "testGetChildText",
        "getElementsByAttributeValue",
        "getElementsByIndexGreaterThan",
        "getElementsByIndexEquals",
        "getKey",
        "select",
        "entrySet",
        "append",
        "siblingIndex",
        "getElementById",
        "tail",
        "testKeepsPreTextInCode",
        "testOutputEncoding",
        "getElementsMatchingOwnText",
        "setBaseUri",
        "wrap",
        "baseUri",
        "iterator",
        "Document",
        "text",
        "getOutputSettings",
        "isDataAttribute",
        "OutputSettings",
        "testGetElementsWithAttributeValue",
        "tagName",
        "indent",
        "nodeName",
        "hasText",
        "ownText",
        "children",
        "childNode",
        "testKeepsPreText",
        "testClassUpdates",
        "className",
        "testPrependNewHtml",
        "appendText",
        "testGetElementById",
        "before",
        "elementSiblingIndex",
        "id",
        "firstElementSibling",
        "removeClass",
        "hashCode",
        "testFormatHtml",
        "addAll",
        "clone",
        "previousSibling",
        "getElementsByAttribute",
        "getElementsByAttributeStarting",
        "testNormalisesText",
        "getElementsByAttributeValueStarting",
        "getAllElements",
        "absUrl",
        "childNodes",
        "toggleClass",
        "prependChild",
        "classNames",
        "testSetText",
        "size",
        "testNormalisesStructure",
        "dataset",
        "createElement",
        "parent",
        "previousElementSibling",
        "setValue",
        "setSiblingIndex",
        "testEmptyElementFormatHtml",
        "findFirstElementByTagName",
        "removeChild",
        "reindexChildren",
        "testSetIndent",
        "prependText",
        "addChildren",
        "removeAttr",
        "getElementsByClass",
        "Node",
        "createFromEncoded",
        "indexInList",
        "body",
        "testInnerHtml",
        "childNodesAsArray",
        "addClass"
      ],
      "functions_name_co_evolved_modified_file": [
        "clone"
      ],
      "functions_name_co_evolved_all_files": [
        "doClone",
        "testClone",
        "clone"
      ]
    },
    "file": {
      "file_name": "Element.java",
      "file_nloc": 492,
      "file_complexity": 149,
      "file_token_count": 3414,
      "file_before": "",
      "file_after": "",
      "file_patch": "@@ -1041,4 +1041,11 @@ public class Element extends Node {\n         result = 31 * result + (tag != null ? tag.hashCode() : 0);\n         return result;\n     }\n+\n+    @Override\n+    public Element clone() {\n+        Element clone = (Element) super.clone();\n+        clone.classNames(); // creates linked set of class names from class attribute\n+        return clone;\n+    }\n }\n",
      "files_name_in_blame_commit": [
        "Document.java",
        "Attribute.java",
        "Attributes.java",
        "DocumentTest.java",
        "Element.java",
        "ElementTest.java",
        "Node.java"
      ]
    }
  },
  "commits_modify_file_before_fix": {
    "size": 80
  }
}