{
  "id": "91",
  "blame_commit": {
    "commit": {
      "commit_id": "e77e2124c4a55270b890be6b109b8714818c95ea",
      "commit_message": "Use the name \"buffer\", not \"buf\".\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@227240 13f79535-47bb-0310-9956-ffa450edef68",
      "commit_author": "Gary D. Gregory",
      "commit_date": "2005-08-03 18:02:35",
      "commit_parent": "dcfba435bbe1129f7e3e0a52ff709927768e3559"
    },
    "function": {
      "function_name": "appendFixedWidthPadRight",
      "function_code_before": "public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) {\n    if (width > 0) {\n        ensureCapacity(size + width);\n        String str = (obj == null ? getNullText() : obj.toString());\n        int strLen = str.length();\n        if (strLen >= width) {\n            str.getChars(0, strLen, buf, size);\n        } else {\n            int padLen = width - strLen;\n            str.getChars(0, strLen, buf, size);\n            for (int i = 0; i < padLen; i++) {\n                buf[size + strLen + i] = padChar;\n            }\n        }\n        size += width;\n    }\n    return this;\n}",
      "function_code_after": "public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) {\n    if (width > 0) {\n        ensureCapacity(size + width);\n        String str = (obj == null ? getNullText() : obj.toString());\n        int strLen = str.length();\n        if (strLen >= width) {\n            str.getChars(0, strLen, buffer, size);\n        } else {\n            int padLen = width - strLen;\n            str.getChars(0, strLen, buffer, size);\n            for (int i = 0; i < padLen; i++) {\n                buffer[size + strLen + i] = padChar;\n            }\n        }\n        size += width;\n    }\n    return this;\n}",
      "function_before_start_line": 711,
      "function_before_end_line": 728,
      "function_after_start_line": 711,
      "function_after_end_line": 728,
      "function_before_token_count": 134,
      "function_after_token_count": 134,
      "functions_name_modified_file": [
        "charAt",
        "toString",
        "clear",
        "midString",
        "getChars",
        "appendFixedWidthPadRight",
        "endsWith",
        "StrBuilder",
        "ensureCapacity",
        "insert",
        "leftString",
        "appendPadding",
        "startsWith",
        "append",
        "reverse",
        "appendWithSeparators",
        "replace",
        "validateRange",
        "setNullText",
        "minimizeCapacity",
        "size",
        "toCharArray",
        "delete",
        "contains",
        "indexOf",
        "isEmpty",
        "rightString",
        "setLength",
        "substring",
        "length",
        "setCharAt",
        "deleteCharAt",
        "getNullText",
        "validateIndex",
        "toStringBuffer",
        "capacity",
        "appendNull",
        "lastIndexOf",
        "appendFixedWidthPadLeft"
      ],
      "functions_name_all_files": [
        "testDeleteCharAt",
        "toString",
        "testNullText",
        "clear",
        "testAppendWithSeparators_Array",
        "testMidString",
        "appendPadding",
        "testToCharArray",
        "testSetLength",
        "main",
        "setNullText",
        "minimizeCapacity",
        "toCharArray",
        "testAppend_CharArray",
        "testReplaceStringString",
        "testAppendFixedWidthPadRight_int",
        "testMinimizeCapacity",
        "length",
        "testAppend_Object",
        "capacity",
        "testDeleteIntInt",
        "testAppendFixedWidthPadLeft",
        "testGetChars",
        "lastIndexOf",
        "testCharAt",
        "testAppendWithSeparators_Iterator",
        "appendFixedWidthPadRight",
        "endsWith",
        "StrBuilder",
        "testReverse",
        "leftString",
        "testContainsString",
        "reverse",
        "testSetCharAt",
        "testConstructors",
        "replace",
        "testAppendStringBuffer",
        "delete",
        "indexOf",
        "testAppendWithSeparatorsWithNullText",
        "testCapacity",
        "testContainsChar",
        "testDeleteChar",
        "setCharAt",
        "getNullText",
        "validateIndex",
        "testLength",
        "testAppendFixedWidthPadLeft_int",
        "testDeleteString",
        "testAppendStrBuilder",
        "appendNull",
        "testIsEmpty",
        "testEndsWith",
        "testDeleteCharAtExceptions",
        "testSize",
        "testStartsWith",
        "testAppendWithNullText",
        "testToCharArrayIntInt",
        "testSubstringIntInt",
        "startsWith",
        "append",
        "testLastIndexOfCharInt",
        "appendWithSeparators",
        "testInsertWithNullText",
        "testCapacityAndLength",
        "testAppendWithSeparators_Collection",
        "testInsert",
        "testIndexOfCharInt",
        "contains",
        "testAppendPadding",
        "testGetCharsIntIntCharArrayInt",
        "testAppend_PrimitiveNumber",
        "rightString",
        "setLength",
        "substring",
        "deleteCharAt",
        "testClear",
        "testIndexOfString",
        "appendFixedWidthPadLeft",
        "testLastIndexOfStringInt",
        "charAt",
        "testLeftString",
        "midString",
        "getChars",
        "StrBuilderTest",
        "ensureCapacity",
        "testSubstringInt",
        "insert",
        "testIndexOfStringInt",
        "testAppend_Primitive",
        "testRightString",
        "testLastIndexOfChar",
        "testStringBuffer",
        "testReplaceIntIntStrBuilder",
        "testReplaceCharChar",
        "validateRange",
        "size",
        "testLastIndexOfString",
        "isEmpty",
        "suite",
        "toStringBuffer",
        "testIndexOfChar",
        "testEnsureCapacity",
        "testAppendFixedWidthPadRight",
        "Object"
      ],
      "functions_name_co_evolved_modified_file": [
        "charAt",
        "toString",
        "midString",
        "getChars",
        "endsWith",
        "appendFixedWidthPadRight",
        "StrBuilder",
        "ensureCapacity",
        "insert",
        "leftString",
        "appendPadding",
        "startsWith",
        "append",
        "reverse",
        "replace",
        "minimizeCapacity",
        "delete",
        "toCharArray",
        "indexOf",
        "contains",
        "rightString",
        "setLength",
        "substring",
        "setCharAt",
        "deleteCharAt",
        "toStringBuffer",
        "capacity",
        "lastIndexOf",
        "appendFixedWidthPadLeft"
      ],
      "functions_name_co_evolved_all_files": [
        "charAt",
        "toString",
        "midString",
        "getChars",
        "endsWith",
        "appendFixedWidthPadRight",
        "StrBuilder",
        "ensureCapacity",
        "insert",
        "leftString",
        "appendPadding",
        "startsWith",
        "append",
        "reverse",
        "replace",
        "minimizeCapacity",
        "delete",
        "toCharArray",
        "indexOf",
        "contains",
        "testCapacity",
        "rightString",
        "setLength",
        "substring",
        "setCharAt",
        "deleteCharAt",
        "toStringBuffer",
        "capacity",
        "testClear",
        "lastIndexOf",
        "appendFixedWidthPadLeft"
      ]
    },
    "file": {
      "file_name": "StrBuilder.java",
      "file_nloc": 737,
      "file_complexity": 230,
      "file_token_count": 4701,
      "file_before": "",
      "file_after": "",
      "file_patch": "@@ -65,7 +65,7 @@ public class StrBuilder implements Cloneable {\n     private static final long serialVersionUID = 7628716375283629643L;\n \n     /** Internal data storage. */\n-    protected char[] buf;\n+    protected char[] buffer;\n     /** Current size of the buffer. */\n     protected int size;\n     /** The null text. */\n@@ -89,7 +89,7 @@ public StrBuilder(int initialCapacity) {\n         if (initialCapacity <= 0) {\n             initialCapacity = CAPACITY;\n         }\n-        buf = new char[initialCapacity];\n+        buffer = new char[initialCapacity];\n     }\n \n     /**\n@@ -101,9 +101,9 @@ public StrBuilder(int initialCapacity) {\n     public StrBuilder(String str) {\n         super();\n         if (str == null) {\n-            buf = new char[CAPACITY];\n+            buffer = new char[CAPACITY];\n         } else {\n-            buf = new char[str.length() + CAPACITY];\n+            buffer = new char[str.length() + CAPACITY];\n             append(str);\n         }\n     }\n@@ -161,7 +161,7 @@ public void setLength(int length) {\n             int newEnd = length;\n             size = length;\n             for (int i = oldEnd; i < newEnd; i++) {\n-                buf[i] = '\\0';\n+                buffer[i] = '\\0';\n             }\n         }\n     }\n@@ -173,7 +173,7 @@ public void setLength(int length) {\n      * @return the capacity\n      */\n     public int capacity() {\n-        return buf.length;\n+        return buffer.length;\n     }\n \n     /**\n@@ -182,10 +182,10 @@ public int capacity() {\n      * @param capacity  the capacity to ensure\n      */\n     public void ensureCapacity(int capacity) {\n-        if (capacity > buf.length) {\n-            char[] old = buf;\n-            buf = new char[capacity];\n-            System.arraycopy(old, 0, buf, 0, size);\n+        if (capacity > buffer.length) {\n+            char[] old = buffer;\n+            buffer = new char[capacity];\n+            System.arraycopy(old, 0, buffer, 0, size);\n         }\n     }\n \n@@ -193,10 +193,10 @@ public void ensureCapacity(int capacity) {\n      * Minimizes the capacity to the actual length of the string.\n      */\n     public void minimizeCapacity() {\n-        if (buf.length > length()) {\n-            char[] old = buf;\n-            buf = new char[length()];\n-            System.arraycopy(old, 0, buf, 0, size);\n+        if (buffer.length > length()) {\n+            char[] old = buffer;\n+            buffer = new char[length()];\n+            System.arraycopy(old, 0, buffer, 0, size);\n         }\n     }\n \n@@ -249,7 +249,7 @@ public char charAt(int index) {\n         if (index < 0 || index >= length()) {\n             throw new StringIndexOutOfBoundsException(index);\n         }\n-        return buf[index];\n+        return buffer[index];\n     }\n \n     /**\n@@ -263,7 +263,7 @@ public void setCharAt(int index, char ch) {\n         if (index < 0 || index >= length()) {\n             throw new StringIndexOutOfBoundsException(index);\n         }\n-        buf[index] = ch;\n+        buffer[index] = ch;\n     }\n \n     //-----------------------------------------------------------------------\n@@ -277,7 +277,7 @@ public char[] toCharArray() {\n             return ArrayUtils.EMPTY_CHAR_ARRAY;\n         }\n         char chars[] = new char[size];\n-        System.arraycopy(buf, 0, chars, 0, size);\n+        System.arraycopy(buffer, 0, chars, 0, size);\n         return chars;\n     }\n \n@@ -300,7 +300,7 @@ public char[] toCharArray(int startIndex, int endIndex) {\n             return ArrayUtils.EMPTY_CHAR_ARRAY;\n         }\n         char chars[] = new char[len];\n-        System.arraycopy(buf, startIndex, chars, 0, len);\n+        System.arraycopy(buffer, startIndex, chars, 0, len);\n         return chars;\n     }\n \n@@ -315,7 +315,7 @@ public char[] getChars(char[] destination) {\n         if (destination == null || destination.length < len) {\n             destination = new char[len];\n         }\n-        System.arraycopy(buf, 0, destination, 0, len);\n+        System.arraycopy(buffer, 0, destination, 0, len);\n         return destination;\n     }\n \n@@ -339,7 +339,7 @@ public void getChars(int startIndex, int endIndex, char destination[], int desti\n         if (startIndex > endIndex) {\n             throw new StringIndexOutOfBoundsException(\"end < start\");\n         }\n-        System.arraycopy(buf, startIndex, destination, destinationIndex, endIndex - startIndex);\n+        System.arraycopy(buffer, startIndex, destination, destinationIndex, endIndex - startIndex);\n     }\n \n     //-----------------------------------------------------------------------\n@@ -384,7 +384,7 @@ public StrBuilder append(String str) {\n         if (strLen > 0) {\n             int len = length();\n             ensureCapacity(len + strLen);\n-            str.getChars(0, strLen, buf, len);\n+            str.getChars(0, strLen, buffer, len);\n             size += strLen;\n         }\n         return this;\n@@ -405,7 +405,7 @@ public StrBuilder append(StringBuffer str) {\n         if (strLen > 0) {\n             int len = length();\n             ensureCapacity(len + strLen);\n-            str.getChars(0, strLen, buf, len);\n+            str.getChars(0, strLen, buffer, len);\n             size += strLen;\n         }\n         return this;\n@@ -426,7 +426,7 @@ public StrBuilder append(StrBuilder str) {\n         if (strLen > 0) {\n             int len = length();\n             ensureCapacity(len + strLen);\n-            System.arraycopy(str.buf, 0, buf, len, strLen);\n+            System.arraycopy(str.buffer, 0, buffer, len, strLen);\n             size += strLen;\n         }\n         return this;\n@@ -450,7 +450,7 @@ public StrBuilder append(char[] chars) {\n         if (strLen > 0) {\n             int len = length();\n             ensureCapacity(len + strLen);\n-            System.arraycopy(chars, 0, buf, len, strLen);\n+            System.arraycopy(chars, 0, buffer, len, strLen);\n             size += strLen;\n         }\n         return this;\n@@ -481,7 +481,7 @@ public StrBuilder append(char[] chars, int startIndex, int length) {\n         if (length > 0) {\n             int len = length();\n             ensureCapacity(len + length);\n-            System.arraycopy(chars, startIndex, buf, len, length);\n+            System.arraycopy(chars, startIndex, buffer, len, length);\n             size += length;\n         }\n         return this;\n@@ -496,17 +496,17 @@ public StrBuilder append(char[] chars, int startIndex, int length) {\n     public StrBuilder append(boolean value) {\n         if (value) {\n             ensureCapacity(size + 4);\n-            buf[size++] = 't';\n-            buf[size++] = 'r';\n-            buf[size++] = 'u';\n-            buf[size++] = 'e';\n+            buffer[size++] = 't';\n+            buffer[size++] = 'r';\n+            buffer[size++] = 'u';\n+            buffer[size++] = 'e';\n         } else {\n             ensureCapacity(size + 5);\n-            buf[size++] = 'f';\n-            buf[size++] = 'a';\n-            buf[size++] = 'l';\n-            buf[size++] = 's';\n-            buf[size++] = 'e';\n+            buffer[size++] = 'f';\n+            buffer[size++] = 'a';\n+            buffer[size++] = 'l';\n+            buffer[size++] = 's';\n+            buffer[size++] = 'e';\n         }\n         return this;\n     }\n@@ -520,7 +520,7 @@ public StrBuilder append(boolean value) {\n     public StrBuilder append(char ch) {\n         int len = length();\n         ensureCapacity(len + 1);\n-        buf[size++] = ch;\n+        buffer[size++] = ch;\n         return this;\n     }\n \n@@ -646,7 +646,7 @@ public StrBuilder appendPadding(int length, char padChar) {\n         if (length >= 0) {\n             ensureCapacity(size + length);\n             for (int i = 0; i < length; i++) {\n-                buf[size++] = padChar;\n+                buffer[size++] = padChar;\n             }\n         }\n         return this;\n@@ -670,13 +670,13 @@ public StrBuilder appendFixedWidthPadLeft(Object obj, int width, char padChar) {\n             String str = (obj == null ? getNullText() : obj.toString());\n             int strLen = str.length();\n             if (strLen >= width) {\n-                str.getChars(strLen - width, strLen, buf, size);\n+                str.getChars(strLen - width, strLen, buffer, size);\n             } else {\n                 int padLen = width - strLen;\n                 for (int i = 0; i < padLen; i++) {\n-                    buf[size + i] = padChar;\n+                    buffer[size + i] = padChar;\n                 }\n-                str.getChars(0, strLen, buf, size + padLen);\n+                str.getChars(0, strLen, buffer, size + padLen);\n             }\n             size += width;\n         }\n@@ -714,12 +714,12 @@ public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar)\n             String str = (obj == null ? getNullText() : obj.toString());\n             int strLen = str.length();\n             if (strLen >= width) {\n-                str.getChars(0, strLen, buf, size);\n+                str.getChars(0, strLen, buffer, size);\n             } else {\n                 int padLen = width - strLen;\n-                str.getChars(0, strLen, buf, size);\n+                str.getChars(0, strLen, buffer, size);\n                 for (int i = 0; i < padLen; i++) {\n-                    buf[size + strLen + i] = padChar;\n+                    buffer[size + strLen + i] = padChar;\n                 }\n             }\n             size += width;\n@@ -776,9 +776,9 @@ public StrBuilder insert(int index, String str) {\n         if (strLen > 0) {\n             int newSize = size + strLen;\n             ensureCapacity(newSize);\n-            System.arraycopy(buf, index, buf, index + strLen, size - index);\n+            System.arraycopy(buffer, index, buffer, index + strLen, size - index);\n             size = newSize;\n-            str.getChars(0, strLen, buf, index);\n+            str.getChars(0, strLen, buffer, index);\n         }\n         return this;\n     }\n@@ -803,8 +803,8 @@ public StrBuilder insert(int index, char chars[]) {\n         int len = chars.length;\n         if (len > 0) {\n             ensureCapacity(size + len);\n-            System.arraycopy(buf, index, buf, index + len, size - index);\n-            System.arraycopy(chars, 0, buf, index, len);\n+            System.arraycopy(buffer, index, buffer, index + len, size - index);\n+            System.arraycopy(chars, 0, buffer, index, len);\n             size += len;\n         }\n         return this;\n@@ -837,8 +837,8 @@ public StrBuilder insert(int index, char chars[], int offset, int length) {\n         }\n         if (length > 0) {\n             ensureCapacity(size + length);\n-            System.arraycopy(buf, index, buf, index + length, size - index);\n-            System.arraycopy(chars, offset, buf, index, length);\n+            System.arraycopy(buffer, index, buffer, index + length, size - index);\n+            System.arraycopy(chars, offset, buffer, index, length);\n             size += length;\n         }\n         return this;\n@@ -856,20 +856,20 @@ public StrBuilder insert(int index, boolean value) {\n         validateIndex(index);\n         if (value) {\n             ensureCapacity(size + 4);\n-            System.arraycopy(buf, index, buf, index + 4, size - index);\n-            buf[index++] = 't';\n-            buf[index++] = 'r';\n-            buf[index++] = 'u';\n-            buf[index] = 'e';\n+            System.arraycopy(buffer, index, buffer, index + 4, size - index);\n+            buffer[index++] = 't';\n+            buffer[index++] = 'r';\n+            buffer[index++] = 'u';\n+            buffer[index] = 'e';\n             size += 4;\n         } else {\n             ensureCapacity(size + 5);\n-            System.arraycopy(buf, index, buf, index + 5, size - index);\n-            buf[index++] = 'f';\n-            buf[index++] = 'a';\n-            buf[index++] = 'l';\n-            buf[index++] = 's';\n-            buf[index] = 'e';\n+            System.arraycopy(buffer, index, buffer, index + 5, size - index);\n+            buffer[index++] = 'f';\n+            buffer[index++] = 'a';\n+            buffer[index++] = 'l';\n+            buffer[index++] = 's';\n+            buffer[index] = 'e';\n             size += 5;\n         }\n         return this;\n@@ -886,8 +886,8 @@ public StrBuilder insert(int index, boolean value) {\n     public StrBuilder insert(int index, char value) {\n         validateIndex(index);\n         ensureCapacity(size + 1);\n-        System.arraycopy(buf, index, buf, index + 1, size - index);\n-        buf[index] = value;\n+        System.arraycopy(buffer, index, buffer, index + 1, size - index);\n+        buffer[index] = value;\n         size++;\n         return this;\n     }\n@@ -954,7 +954,7 @@ public StrBuilder delete(int startIndex, int endIndex) {\n         endIndex = validateRange(startIndex, endIndex);\n         int len = endIndex - startIndex;\n         if (len > 0) {\n-            System.arraycopy(buf, endIndex, buf, startIndex, size - endIndex);\n+            System.arraycopy(buffer, endIndex, buffer, startIndex, size - endIndex);\n             size -= len;\n         }\n         return this;\n@@ -971,7 +971,7 @@ public StrBuilder deleteCharAt(int index) {\n         if (index < 0 || index >= size) {\n             throw new StringIndexOutOfBoundsException(index);\n         }\n-        System.arraycopy(buf, index + 1, buf, index, size - index - 1);\n+        System.arraycopy(buffer, index + 1, buffer, index, size - index - 1);\n         size--;\n         return this;\n     }\n@@ -984,14 +984,14 @@ public StrBuilder deleteCharAt(int index) {\n      */\n     public StrBuilder delete(char ch) {\n         for (int i = 0; i < size; i++) {\n-            if (buf[i] == ch) {\n+            if (buffer[i] == ch) {\n                 int start = i;\n                 while (++i < size) {\n-                    if (buf[i] != ch) {\n+                    if (buffer[i] != ch) {\n                         break;\n                     }\n                 }\n-                System.arraycopy(buf, i, buf, start, size - i);\n+                System.arraycopy(buffer, i, buffer, start, size - i);\n                 size -= (i - start);\n             }\n         }\n@@ -1037,10 +1037,10 @@ public StrBuilder replace(int startIndex, int endIndex, String str) {\n             ensureCapacity(newSize);\n         }\n         if (insertLen != removeLen) {\n-            System.arraycopy(buf, endIndex, buf, startIndex + insertLen, size - endIndex);\n+            System.arraycopy(buffer, endIndex, buffer, startIndex + insertLen, size - endIndex);\n             size = newSize;\n         }\n-        str.getChars(0, insertLen, buf, startIndex);\n+        str.getChars(0, insertLen, buffer, startIndex);\n         return this;\n     }\n \n@@ -1064,11 +1064,11 @@ public StrBuilder replace(int startIndex, int endIndex, StrBuilder builder) {\n         }\n         if (insertLen != removeLen) {\n             //shift the current characters to the right\n-            System.arraycopy(buf, endIndex, buf, startIndex + insertLen, size - endIndex);\n+            System.arraycopy(buffer, endIndex, buffer, startIndex + insertLen, size - endIndex);\n             //adjust the size accordingly\n             size += (insertLen - removeLen);\n         }\n-        builder.getChars(0, insertLen, buf, startIndex);\n+        builder.getChars(0, insertLen, buffer, startIndex);\n         return this;\n     }\n \n@@ -1082,8 +1082,8 @@ public StrBuilder replace(int startIndex, int endIndex, StrBuilder builder) {\n     public StrBuilder replace(char search, char replace) {\n         if (search != replace) {\n             for (int i = 0; i < size; i++) {\n-                if (buf[i] == search) {\n-                    buf[i] = replace;\n+                if (buffer[i] == search) {\n+                    buffer[i] = replace;\n                 }\n             }\n         }\n@@ -1131,7 +1131,7 @@ public boolean startsWith(String str) {\n             return false;\n         }\n         for (int i = 0; i < len; i++) {\n-            if (buf[i] != str.charAt(i)) {\n+            if (buffer[i] != str.charAt(i)) {\n                 return false;\n             }\n         }\n@@ -1159,7 +1159,7 @@ public boolean endsWith(String str) {\n         }\n         int pos = size - len;\n         for (int i = 0; i < len; i++,pos++) {\n-            if (buf[pos] != str.charAt(i)) {\n+            if (buffer[pos] != str.charAt(i)) {\n                 return false;\n             }\n         }\n@@ -1193,7 +1193,7 @@ public String substring(int start) {\n      */\n     public String substring(int startIndex, int endIndex) {\n         endIndex = validateRange(startIndex, endIndex);\n-        return new String(buf, startIndex, endIndex - startIndex);\n+        return new String(buffer, startIndex, endIndex - startIndex);\n     }\n \n     /**\n@@ -1212,9 +1212,9 @@ public String leftString(int length) {\n         if (length <= 0) {\n             return \"\";\n         } else if (length >= size) {\n-            return new String(buf, 0, size);\n+            return new String(buffer, 0, size);\n         } else {\n-            return new String(buf, 0, length);\n+            return new String(buffer, 0, length);\n         }\n     }\n \n@@ -1234,9 +1234,9 @@ public String rightString(int length) {\n         if (length <= 0) {\n             return \"\";\n         } else if (length >= size) {\n-            return new String(buf, 0, size);\n+            return new String(buffer, 0, size);\n         } else {\n-            return new String(buf, size - length, length);\n+            return new String(buffer, size - length, length);\n         }\n     }\n \n@@ -1264,9 +1264,9 @@ public String midString(int index, int length) {\n             return \"\";\n         }\n         if (size <= index + length) {\n-            return new String(buf, index, size - index);\n+            return new String(buffer, index, size - index);\n         } else {\n-            return new String(buf, index, length);\n+            return new String(buffer, index, length);\n         }\n     }\n \n@@ -1278,7 +1278,7 @@ public String midString(int index, int length) {\n      * @return true if the builder contains the character\n      */\n     public boolean contains(char ch) {\n-        char[] thisBuf = buf;\n+        char[] thisBuf = buffer;\n         for (int i = 0; i < thisBuf.length; i++) {\n             if (thisBuf[i] == ch) {\n                 return true;\n@@ -1320,7 +1320,7 @@ public int indexOf(char ch, int startIndex) {\n         if (startIndex >= size) {\n             return -1;\n         }\n-        char[] thisBuf = buf;\n+        char[] thisBuf = buffer;\n         for (int i = startIndex; i < thisBuf.length; i++) {\n             if (thisBuf[i] == ch) {\n                 return i;\n@@ -1361,7 +1361,7 @@ public int indexOf(String str, int startIndex) {\n             if (strLen == 1) {\n                 return indexOf(str.charAt(0), startIndex);\n             }\n-            char[] thisBuf = buf;\n+            char[] thisBuf = buffer;\n             outer:\n             for (int i = startIndex; i < thisBuf.length - strLen; i++) {\n                 for (int j = 0; j < strLen; j++) {\n@@ -1402,7 +1402,7 @@ public int lastIndexOf(char ch, int startIndex) {\n             return -1;\n         }\n         for (int i = startIndex; i >= 0; i--) {\n-            if (buf[i] == ch) {\n+            if (buffer[i] == ch) {\n                 return i;\n             }\n         }\n@@ -1445,7 +1445,7 @@ public int lastIndexOf(String str, int startIndex) {\n             outer:\n             for (int i = startIndex - strLen + 1; i >= 0; i--) {\n                 for (int j = 0; j < strLen; j++) {\n-                    if (str.charAt(j) != buf[i + j]) {\n+                    if (str.charAt(j) != buffer[i + j]) {\n                         continue outer;\n                     }\n                 }\n@@ -1470,9 +1470,9 @@ public StrBuilder reverse() {\n         \n         int half = size / 2;\n         for (int leftIdx = 0, rightIdx = size - 1; leftIdx < half; leftIdx++,rightIdx--) {\n-            char swap = buf[leftIdx];\n-            buf[leftIdx] = buf[rightIdx];\n-            buf[rightIdx] = swap;\n+            char swap = buffer[leftIdx];\n+            buffer[leftIdx] = buffer[rightIdx];\n+            buffer[rightIdx] = swap;\n         }\n         return this;\n     }\n@@ -1516,7 +1516,7 @@ public StrBuilder reverse() {\n      * @return the builder as a String\n      */\n     public String toString() {\n-        return new String(buf, 0, size);\n+        return new String(buffer, 0, size);\n     }\n \n     /**\n@@ -1526,7 +1526,7 @@ public String toString() {\n      * @return the builder as a StringBuffer\n      */\n     public StringBuffer toStringBuffer() {\n-        return new StringBuffer(size).append(buf, 0, size);\n+        return new StringBuffer(size).append(buffer, 0, size);\n     }\n \n     //-----------------------------------------------------------------------\n",
      "files_name_in_blame_commit": [
        "StrBuilder.java",
        "StrBuilderTest.java"
      ]
    }
  },
  "commits_modify_file_before_fix": {
    "size": 47
  }
}