{
  "id": "70",
  "blame_commit": {
    "commit": {
      "commit_id": "62ea04e4d5cbf91b1b1a225c90b8077e6db27e58",
      "commit_message": "Whitespace tests",
      "commit_author": "Jonathan Hedley",
      "commit_date": "2011-07-02 21:11:47",
      "commit_parent": "7898cdffecce78996012bd06eac0792dd4b6ac6d"
    },
    "function": {
      "function_name": "html",
      "function_code_before": "public String html() {\n    StringBuilder accum = new StringBuilder();\n    html(accum); \n    return accum.toString();\n}",
      "function_code_after": "public String html() {\n    StringBuilder accum = new StringBuilder();\n    html(accum); \n    return accum.toString().trim();\n}",
      "function_before_start_line": 597,
      "function_before_end_line": 601,
      "function_after_start_line": 599,
      "function_after_end_line": 603,
      "function_before_token_count": 25,
      "function_after_token_count": 29,
      "functions_name_modified_file": [
        "prependElement",
        "hasClass",
        "toString",
        "id",
        "firstElementSibling",
        "child",
        "hashCode",
        "isBlock",
        "getElementsByAttributeValueEnding",
        "getElementsByAttributeValue",
        "getElementsByAttribute",
        "html",
        "select",
        "getElementsByAttributeValueStarting",
        "getAllElements",
        "appendChild",
        "append",
        "prepend",
        "getElementsByTag",
        "tag",
        "getElementById",
        "prependChild",
        "classNames",
        "getElementsByAttributeValueContaining",
        "getElementsByAttributeValueNot",
        "attr",
        "lastElementSibling",
        "parent",
        "nextElementSibling",
        "previousElementSibling",
        "text",
        "empty",
        "tagName",
        "data",
        "prependText",
        "nodeName",
        "siblingElements",
        "getElementsByClass",
        "children",
        "outerHtml",
        "equals",
        "className",
        "appendElement",
        "Element",
        "appendText"
      ],
      "functions_name_all_files": [
        "getData",
        "toString",
        "parsesSimpleDocument",
        "TextNode",
        "valueOf",
        "child",
        "testAddNewText",
        "getElementsByTagName",
        "Tag",
        "tag",
        "stripNewlines",
        "testRelaxed",
        "handlesCdata",
        "createsImplicitLists",
        "lastElementSibling",
        "basicWithImagesTest",
        "testGetText",
        "testGetElementsWithAttribute",
        "nextElementSibling",
        "register",
        "canContain",
        "testCleanJavascriptHref",
        "getWholeData",
        "handlesUnknownTags",
        "createsImplicitTable",
        "isData",
        "appendElement",
        "Element",
        "XmlDeclaration",
        "testAddNewHtml",
        "handlesEscapedData",
        "testGetSiblings",
        "handlesInvalidStartTags",
        "basicBehaviourTest",
        "testDropImageScript",
        "testAddNewElement",
        "testOuterHtml",
        "isBlock",
        "getElementsByAttributeValueEnding",
        "isInline",
        "setContainDataOnly",
        "html",
        "testDropScript",
        "appendChild",
        "prepend",
        "getElementsByTag",
        "setOptionalClosing",
        "testPrependText",
        "testPrependElement",
        "DataNode",
        "testDropXmlProc",
        "getElementsByAttributeValueContaining",
        "getElementsByAttributeValueNot",
        "handlesUnclosedDefinitionLists",
        "createBlock",
        "testGetElementsWithClass",
        "attr",
        "handlesEmptyBlocks",
        "testClassDomMethods",
        "empty",
        "isValidParent",
        "preserveWhitespace",
        "data",
        "siblingElements",
        "simpleBehaviourTest2",
        "outerHtml",
        "parsesRoughAttributes",
        "Comment",
        "equals",
        "testSetHtml",
        "canContainBlock",
        "setPreserveWhitespace",
        "prependElement",
        "hasClass",
        "handlesBaseTags",
        "lastCharIsWhitespace",
        "getName",
        "parsesComments",
        "getElementsByAttributeValue",
        "select",
        "getWholeDeclaration",
        "append",
        "normaliseWhitespace",
        "getElementById",
        "text",
        "parsesUnterminatedComments",
        "testGetElementsWithAttributeValue",
        "tagName",
        "createInline",
        "nodeName",
        "testKeepsPreText",
        "children",
        "className",
        "testPrependNewHtml",
        "appendText",
        "handlesMultiClosingBody",
        "simpleBehaviourTest",
        "testGetElementById",
        "id",
        "firstElementSibling",
        "hashCode",
        "testFormatHtml",
        "getElementsByAttribute",
        "testNormalisesText",
        "getElementsByAttributeValueStarting",
        "getAllElements",
        "prependChild",
        "testDropComments",
        "classNames",
        "testSetText",
        "setContainInlineOnly",
        "isEmpty",
        "parent",
        "previousElementSibling",
        "setAncestor",
        "parsesUnterminatedAttribute",
        "stripLeadingWhitespace",
        "handlesDataOnlyTags",
        "getWholeText",
        "prependText",
        "getImplicitParent",
        "getElementsByClass",
        "createsDocumentStructure",
        "createFromEncoded",
        "parsesUnterminatedTag",
        "setEmpty",
        "testInnerHtml"
      ],
      "functions_name_co_evolved_modified_file": [
        "html",
        "outerHtml",
        "text"
      ],
      "functions_name_co_evolved_all_files": [
        "basicBehaviourTest",
        "testAddNewElement",
        "testOuterHtml",
        "testFormatHtml",
        "testAddNewText",
        "html",
        "testNormalisesText",
        "testPrependText",
        "stripNewlines",
        "testRelaxed",
        "testSetText",
        "handlesCdata",
        "testKeepsPreTexT",
        "basicWithImagesTest",
        "text",
        "stripLeadingWhitespace",
        "testKeepsPreText",
        "outerHtml",
        "createsImplicitTable",
        "testSetHtml",
        "testPrependNewHtml",
        "canContainBlock",
        "testAddNewHtml"
      ]
    },
    "file": {
      "file_name": "Element.java",
      "file_nloc": 291,
      "file_complexity": 84,
      "file_token_count": 2016,
      "file_before": "",
      "file_after": "",
      "file_patch": "@@ -478,14 +478,11 @@ public class Element extends Node {\n     public String text() {\n         StringBuilder sb = new StringBuilder();\n         text(sb);\n-        return sb.toString();\n+        return sb.toString().trim();\n     }\n \n     private void text(StringBuilder accum) {\n-        int numNodes = childNodes.size();\n-        for (int i = 0; i <= numNodes; i++) {\n-            Node child = childNodes.get(i);\n-\n+        for (Node child : childNodes) {\n             if (child instanceof TextNode) {\n                 TextNode textNode = (TextNode) child;\n                 String text = textNode.getWholeText();\n@@ -499,7 +496,7 @@ public class Element extends Node {\n \n             } else if (child instanceof Element) {\n                 Element element = (Element) child;\n-                if (element.isBlock() && !TextNode.lastCharIsWhitespace(accum))\n+                if (accum.length() > 0 && element.isBlock() && !TextNode.lastCharIsWhitespace(accum))\n                     accum.append(\" \");\n                 element.text(accum);\n             }\n@@ -573,6 +570,7 @@ public class Element extends Node {\n     }\n \n     void outerHtml(StringBuilder accum) {\n+ \n         accum\n                 .append(\"<\")\n                 .append(tagName())\n@@ -582,8 +580,12 @@ public class Element extends Node {\n             accum.append(\" />\");\n         } else {\n             accum.append(\">\");\n+            if (tag.canContainBlock())\n+                accum.append(\"\\n\");\n             html(accum);\n             accum.append(\"</\").append(tagName()).append(\">\");\n+            if (tag.isBlock())\n+                accum.append(\"\\n\");\n         }\n     }\n \n@@ -597,7 +599,7 @@ public class Element extends Node {\n     public String html() {\n         StringBuilder accum = new StringBuilder();\n         html(accum); \n-        return accum.toString();\n+        return accum.toString().trim();\n     }\n \n     private void html(StringBuilder accum) {\n",
      "files_name_in_blame_commit": [
        "XmlDeclaration.java",
        "CleanerTest.java",
        "TextUtil.java",
        "Comment.java",
        "Element.java",
        "Tag.java",
        "ElementTest.java",
        "TextNode.java",
        "ParserTest.java",
        "DataNode.java"
      ]
    }
  },
  "commits_modify_file_before_fix": {
    "size": 86
  }
}