{
  "id": "95",
  "blame_commit": {
    "commit": {
      "commit_id": "5d699563b14402c410e32bc4b175419c18993918",
      "commit_message": "Fixed BigFraction percentage method which did not work at all.\n\nJIRA: MATH-709\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1203516 13f79535-47bb-0310-9956-ffa450edef68",
      "commit_author": "Luc Maisonobe",
      "commit_date": "2011-11-18 07:42:12",
      "commit_parent": "9591a91f45ce63a964327d9429074418939fe29b"
    },
    "function": {
      "function_name": "percentageValue",
      "function_code_before": "",
      "function_code_after": "public double percentageValue() {\n    return multiply(100).doubleValue();\n}",
      "function_before_start_line": "",
      "function_before_end_line": "",
      "function_after_start_line": 596,
      "function_after_end_line": 598,
      "function_before_token_count": 0,
      "function_after_token_count": 15,
      "functions_name_modified_file": [
        "reciprocal",
        "floatValue",
        "add",
        "toString",
        "hashCode",
        "doubleValue",
        "addSub",
        "compareTo",
        "getNumerator",
        "divide",
        "getDenominator",
        "longValue",
        "abs",
        "percentageValue",
        "Fraction",
        "negate",
        "getReducedFraction",
        "subtract",
        "equals",
        "multiply",
        "getField",
        "intValue"
      ],
      "functions_name_all_files": [
        "reciprocal",
        "floatValue",
        "testEqualsAndHashCode",
        "getNumeratorAsLong",
        "reduce",
        "add",
        "toString",
        "testPow",
        "testSerial",
        "BigFraction",
        "bigDecimalValue",
        "testBigDecimalValue",
        "testAbs",
        "getDenominatorAsInt",
        "hashCode",
        "testEpsilonLimitConstructor",
        "testCompareTo",
        "doubleValue",
        "testNegate",
        "testDoubleConstructor",
        "testMultiply",
        "addSub",
        "checkIntegerOverflow",
        "testReciprocal",
        "compareTo",
        "testGoldenRatio",
        "testDigitLimitConstructor",
        "testIntegerOverflow",
        "getDenominatorAsLong",
        "assertFraction",
        "testLongValue",
        "getNumerator",
        "testAdd",
        "testDoubleValue",
        "testFloatValue",
        "divide",
        "testConstructorDouble",
        "getDenominator",
        "longValue",
        "testMath340",
        "testDivide",
        "abs",
        "testConstructor",
        "testSubtract",
        "percentageValue",
        "Fraction",
        "testIntValue",
        "negate",
        "pow",
        "getReducedFraction",
        "subtract",
        "testGetReducedFraction",
        "equals",
        "testToString",
        "multiply",
        "getField",
        "intValue",
        "testPercentage",
        "getNumeratorAsInt"
      ],
      "functions_name_co_evolved_modified_file": [
        "percentageValue"
      ],
      "functions_name_co_evolved_all_files": [
        "percentageValue",
        "testPercentage"
      ]
    },
    "file": {
      "file_name": "Fraction.java",
      "file_nloc": 306,
      "file_complexity": 77,
      "file_token_count": 2087,
      "file_before": "",
      "file_after": "",
      "file_patch": "@@ -585,6 +585,18 @@ public class Fraction\n         return new Fraction(numerator, denominator * i);\n     }\n \n+    /**\n+     * <p>\n+     * Gets the fraction percentage as a <tt>double</tt>. This calculates the\n+     * fraction as the numerator divided by denominator multiplied by 100.\n+     * </p>\n+     *\n+     * @return the fraction percentage as a <tt>double</tt>.\n+     */\n+    public double percentageValue() {\n+        return multiply(100).doubleValue();\n+    }\n+\n     /**\n      * <p>Creates a {@code Fraction} instance with the 2 parts\n      * of a fraction Y/Z.</p>\n",
      "files_name_in_blame_commit": [
        "FractionTest.java",
        "Fraction.java",
        "BigFraction.java",
        "BigFractionTest.java"
      ]
    }
  },
  "commits_modify_file_before_fix": {
    "size": 47
  }
}