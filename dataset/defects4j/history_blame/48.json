{
  "id": "48",
  "blame_commit": {
    "commit": {
      "commit_id": "99c3819bec33a0999b743b6827e6b48fcdd9c8ad",
      "commit_message": "[CSV-121] Exception that the header contains duplicate names when the column names are empty. Added the setting ignoreEmptyHeaders, defaults to false to keep the IAE as the default behavior.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1602206 13f79535-47bb-0310-9956-ffa450edef68",
      "commit_author": "Gary D. Gregory",
      "commit_date": "2014-06-12 15:38:24",
      "commit_parent": "f9871c5d359f61c04ba567df58af206b676ad9f3"
    },
    "function": {
      "function_name": "initializeHeader",
      "function_code_before": "private Map<String, Integer> initializeHeader() throws IOException {\n    Map<String, Integer> hdrMap = null;\n    final String[] formatHeader = this.format.getHeader();\n    if (formatHeader != null) {\n        hdrMap = new LinkedHashMap<String, Integer>();\n\n        String[] header = null;\n        if (formatHeader.length == 0) {\n            // read the header from the first line of the file\n            final CSVRecord nextRecord = this.nextRecord();\n            if (nextRecord != null) {\n                header = nextRecord.values();\n            }\n        } else {\n            if (this.format.getSkipHeaderRecord()) {\n                this.nextRecord();\n            }\n            header = formatHeader;\n        }\n\n        // build the name to index mappings\n        if (header != null) {\n            for (int i = 0; i < header.length; i++) {\n                if (hdrMap.containsKey(header[i])) {\n                    throw new IllegalArgumentException(\"The header contains duplicate names: \" +\n                            Arrays.toString(header));\n                }\n                hdrMap.put(header[i], Integer.valueOf(i));\n            }\n        }\n    }\n    return hdrMap;\n}",
      "function_code_after": "private Map<String, Integer> initializeHeader() throws IOException {\n    Map<String, Integer> hdrMap = null;\n    final String[] formatHeader = this.format.getHeader();\n    if (formatHeader != null) {\n        hdrMap = new LinkedHashMap<String, Integer>();\n\n        String[] headerRecord = null;\n        if (formatHeader.length == 0) {\n            // read the header from the first line of the file\n            final CSVRecord nextRecord = this.nextRecord();\n            if (nextRecord != null) {\n                headerRecord = nextRecord.values();\n            }\n        } else {\n            if (this.format.getSkipHeaderRecord()) {\n                this.nextRecord();\n            }\n            headerRecord = formatHeader;\n        }\n\n        // build the name to index mappings\n        if (headerRecord != null) {\n            for (int i = 0; i < headerRecord.length; i++) {\n                final String header = headerRecord[i];\n                final boolean containsHeader = hdrMap.containsKey(header);\n                final boolean emptyHeader = header.trim().isEmpty();\n                if (containsHeader && (!emptyHeader || (emptyHeader && !this.format.getIgnoreEmptyHeaders()))) {\n                    throw new IllegalArgumentException(\"The header contains a duplicate name: \\\"\" + header\n                            + \"\\\" in \" + Arrays.toString(headerRecord));\n                }\n                hdrMap.put(header, Integer.valueOf(i));\n            }\n        }\n    }\n    return hdrMap;\n}",
      "function_before_start_line": 357,
      "function_before_end_line": 389,
      "function_after_start_line": 357,
      "function_after_end_line": 392,
      "function_before_token_count": 193,
      "function_after_token_count": 238,
      "functions_name_modified_file": [
        "getRecords",
        "initializeHeader",
        "isClosed",
        "nextRecord",
        "getHeaderMap",
        "close",
        "addRecordValue",
        "parse",
        "CSVParser",
        "getRecordNumber",
        "iterator",
        "getCurrentLineNumber"
      ],
      "functions_name_all_files": [
        "getRecords",
        "getIgnoreEmptyHeaders",
        "testInvalidFormat",
        "toString",
        "nextRecord",
        "testGetLine",
        "getNullString",
        "getHeader",
        "testEndOfFileBehaviourExcel",
        "testMappedButNotSetAsOutlook2007ContactExport",
        "testForEach",
        "testClose",
        "validateLineNumbers",
        "testSkipAutoHeader",
        "testCarriageReturnEndings",
        "validate",
        "testDuplicateHeaders",
        "withDelimiter",
        "testCarriageReturnLineFeedEndings",
        "testBOMInputStream",
        "print",
        "testGetHeaderMap",
        "testHeadersMissingException",
        "testEmptyLineBehaviourCSV",
        "withIgnoreEmptyHeaders",
        "testParseUrlCharsetNullFormat",
        "testDefaultFormat",
        "testParseFileNullFormat",
        "isNullHandling",
        "withQuotePolicy",
        "testGetRecordNumberWithLF",
        "testSkipSetHeader",
        "testGetRecords",
        "testProvidedHeaderAuto",
        "isQuoting",
        "testNewCSVParserReaderNullFormat",
        "testParserUrlNullCharsetFormat",
        "testGetLineNumberWithCR",
        "close",
        "testBOM",
        "CSVParser",
        "testIterator",
        "getDelimiter",
        "testGetRecordNumberWithCR",
        "testIgnoreEmptyLines",
        "testExcelFormat1",
        "testHeaderComment",
        "withQuoteChar",
        "testParseStringNullFormat",
        "getRecordSeparator",
        "testGetLineNumberWithCRLF",
        "getCommentStart",
        "testRoundtrip",
        "equals",
        "addRecordValue",
        "testParseNullStringFormat",
        "isCommentingEnabled",
        "testBackslashEscapingOld",
        "getIgnoreSurroundingSpaces",
        "testParseNullFileFormat",
        "withIgnoreEmptyLines",
        "getRecordNumber",
        "withEscape",
        "testEmptyFile",
        "getQuoteChar",
        "isClosed",
        "getQuotePolicy",
        "testGetLineNumberWithLF",
        "isLineBreak",
        "isEscaping",
        "testEmptyLineBehaviourExcel",
        "testGetRecordNumberWithCRLF",
        "testGetOneLine",
        "getSkipHeaderRecord",
        "testGetOneLineCustomCollection",
        "withSkipHeaderRecord",
        "testLineFeedEndings",
        "testCSV57",
        "testEndOfFileBehaviorCSV",
        "testBackslashEscaping",
        "iterator",
        "testGetOneLineOneParser",
        "getHeaderMap",
        "testParseNullUrlCharsetFormat",
        "getIgnoreEmptyLines",
        "validateRecordNumbers",
        "testNewCSVParserNullReaderFormat",
        "getEscape",
        "hashCode",
        "testProvidedHeader",
        "withNullString",
        "testExcelFormat2",
        "testMultipleIterators",
        "parse",
        "withRecordSeparator",
        "testHeader",
        "testHeadersMissing",
        "withHeader",
        "withCommentStart",
        "format",
        "initializeHeader",
        "testNoHeaderMap",
        "testHeaderMissing",
        "getCurrentLineNumber",
        "testBackslashEscaping2",
        "testGetRecordWithMultiLineValues",
        "newFormat",
        "withIgnoreSurroundingSpaces",
        "CSVFormat"
      ],
      "functions_name_co_evolved_modified_file": [
        "initializeHeader"
      ],
      "functions_name_co_evolved_all_files": [
        "getIgnoreEmptyHeaders",
        "withIgnoreEmptyLines",
        "withEscape",
        "withNullString",
        "withRecordSeparator",
        "testHeadersMissing",
        "withHeader",
        "withCommentStart",
        "initializeHeader",
        "testDuplicateHeaderEntries",
        "withSkipHeaderRecord",
        "testDuplicateHeaders",
        "withDelimiter",
        "withQuoteChar",
        "withIgnoreEmptyHeaders",
        "newFormat",
        "withIgnoreSurroundingSpaces",
        "CSVFormat",
        "withQuotePolicy"
      ]
    },
    "file": {
      "file_name": "CSVParser.java",
      "file_nloc": 199,
      "file_complexity": 46,
      "file_token_count": 1398,
      "file_before": "",
      "file_after": "",
      "file_patch": "@@ -360,28 +360,31 @@ public final class CSVParser implements Iterable<CSVRecord>, Closeable {\n         if (formatHeader != null) {\n             hdrMap = new LinkedHashMap<String, Integer>();\n \n-            String[] header = null;\n+            String[] headerRecord = null;\n             if (formatHeader.length == 0) {\n                 // read the header from the first line of the file\n                 final CSVRecord nextRecord = this.nextRecord();\n                 if (nextRecord != null) {\n-                    header = nextRecord.values();\n+                    headerRecord = nextRecord.values();\n                 }\n             } else {\n                 if (this.format.getSkipHeaderRecord()) {\n                     this.nextRecord();\n                 }\n-                header = formatHeader;\n+                headerRecord = formatHeader;\n             }\n \n             // build the name to index mappings\n-            if (header != null) {\n-                for (int i = 0; i < header.length; i++) {\n-                    if (hdrMap.containsKey(header[i])) {\n-                        throw new IllegalArgumentException(\"The header contains duplicate names: \" +\n-                                Arrays.toString(header));\n+            if (headerRecord != null) {\n+                for (int i = 0; i < headerRecord.length; i++) {\n+                    final String header = headerRecord[i];\n+                    final boolean containsHeader = hdrMap.containsKey(header);\n+                    final boolean emptyHeader = header.trim().isEmpty();\n+                    if (containsHeader && (!emptyHeader || (emptyHeader && !this.format.getIgnoreEmptyHeaders()))) {\n+                        throw new IllegalArgumentException(\"The header contains a duplicate name: \\\"\" + header\n+                                + \"\\\" in \" + Arrays.toString(headerRecord));\n                     }\n-                    hdrMap.put(header[i], Integer.valueOf(i));\n+                    hdrMap.put(header, Integer.valueOf(i));\n                 }\n             }\n         }\n",
      "files_name_in_blame_commit": [
        "CSVParser.java",
        "CSVFormat.java",
        "CSVParserTest.java"
      ]
    }
  },
  "commits_modify_file_before_fix": {
    "size": 160
  }
}