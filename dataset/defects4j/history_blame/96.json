{
  "id": "96",
  "blame_commit": {
    "commit": {
      "commit_id": "ddc27b4a15ebceca5552bd139bc0a4997defcb6f",
      "commit_message": "Merged interface and implementation of OneWayAnova, MannWhitneyUTest and WilcoxonSignedRankTest.\nJIRA: MATH-739\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1242164 13f79535-47bb-0310-9956-ffa450edef68",
      "commit_author": "Thomas Neidhart",
      "commit_date": "2012-02-08 22:58:51",
      "commit_parent": "bf9278893c0ef7a2a7466cb43809d7d142bd3428"
    },
    "function": {
      "function_name": "calculateAsymptoticPValue",
      "function_code_before": "",
      "function_code_after": "private double calculateAsymptoticPValue(final double Umin,\n                                         final int n1,\n                                         final int n2)\n    throws ConvergenceException, MaxCountExceededException {\n\n    final int n1n2prod = n1 * n2;\n\n    // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation\n    final double EU = (double) n1n2prod / 2.0;\n    final double VarU = (double) (n1n2prod * (n1 + n2 + 1)) / 12.0;\n\n    final double z = (Umin - EU) / FastMath.sqrt(VarU);\n\n    final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n\n    return 2 * standardNormal.cumulativeProbability(z);\n}",
      "function_before_start_line": "",
      "function_before_end_line": "",
      "function_after_start_line": 168,
      "function_after_end_line": 184,
      "function_before_token_count": 0,
      "function_after_token_count": 103,
      "functions_name_modified_file": [
        "mannWhitneyU",
        "mannWhitneyUTest",
        "MannWhitneyUTest",
        "concatenateSamples",
        "ensureDataConformance",
        "calculateAsymptoticPValue"
      ],
      "functions_name_all_files": [
        "oneWayAnovaFValue",
        "homoscedasticT",
        "testChiSquare",
        "AnovaStats",
        "chiSquareTestDataSetsComparison",
        "concatenateSamples",
        "testAnovaPValue",
        "wilcoxonSignedRankTest",
        "ensureDataConformance",
        "testOneSampleT",
        "testChiSquareLargeTestStatistic",
        "OneWayAnova",
        "testWilcoxonSignedRankSimple",
        "wilcoxonSignedRank",
        "chiSquareTest",
        "mannWhitneyU",
        "MannWhitneyUTest",
        "testSmallSamples",
        "homoscedasticTTest",
        "TestUtils",
        "anovaTest",
        "calculateAsymptoticPValue",
        "testChiSquareZeroCount",
        "chiSquare",
        "testOneWayAnovaUtils",
        "calculateAbsoluteDifferences",
        "testAnovaTest",
        "testTwoSampleTHeterscedastic",
        "anovaPValue",
        "testChiSquareIndependence",
        "pairedTTest",
        "t",
        "chiSquareDataSetsComparison",
        "testPaired",
        "WilcoxonSignedRankTest",
        "testTwoSampleTHomoscedastic",
        "testWilcoxonSignedRankInputValidation",
        "testMannWhitneyUInputValidation",
        "tTest",
        "oneWayAnovaPValue",
        "testOneSampleTTest",
        "testMannWhitneyUSimple",
        "mannWhitneyUTest",
        "anovaFValue",
        "anovaStats",
        "testAnovaFValue",
        "calculateDifferences",
        "oneWayAnovaTest",
        "calculateExactPValue",
        "pairedT"
      ],
      "functions_name_co_evolved_modified_file": [
        "mannWhitneyU",
        "mannWhitneyUTest",
        "MannWhitneyUTest",
        "concatenateSamples",
        "ensureDataConformance",
        "calculateAsymptoticPValue"
      ],
      "functions_name_co_evolved_all_files": [
        "oneWayAnovaFValue",
        "AnovaStats",
        "concatenateSamples",
        "wilcoxonSignedRankTest",
        "ensureDataConformance",
        "OneWayAnova",
        "wilcoxonSignedRank",
        "chiSquareTest",
        "mannWhitneyU",
        "WilcoxonSignedRankTestImpl",
        "MannWhitneyUTest",
        "homoscedasticTTest",
        "OneWayAnovaImpl",
        "anovaTest",
        "calculateAsymptoticPValue",
        "calculateAbsoluteDifferences",
        "anovaPValue",
        "WilcoxonSignedRankTest",
        "tTest",
        "MannWhitneyUTestImpl",
        "oneWayAnovaPValue",
        "mannWhitneyUTest",
        "anovaFValue",
        "anovaStats",
        "calculateDifferences",
        "oneWayAnovaTest",
        "calculateExactPValue"
      ]
    },
    "file": {
      "file_name": "MannWhitneyUTest.java",
      "file_nloc": 70,
      "file_complexity": 12,
      "file_token_count": 635,
      "file_before": "",
      "file_after": "",
      "file_patch": "@@ -16,17 +16,84 @@\n  */\n package org.apache.commons.math.stat.inference;\n \n+import org.apache.commons.math.distribution.NormalDistribution;\n import org.apache.commons.math.exception.ConvergenceException;\n import org.apache.commons.math.exception.MaxCountExceededException;\n import org.apache.commons.math.exception.NoDataException;\n import org.apache.commons.math.exception.NullArgumentException;\n+import org.apache.commons.math.stat.ranking.NaNStrategy;\n+import org.apache.commons.math.stat.ranking.NaturalRanking;\n+import org.apache.commons.math.stat.ranking.TiesStrategy;\n+import org.apache.commons.math.util.FastMath;\n \n /**\n- * An interface for Mann-Whitney U test (also called Wilcoxon rank-sum test).\n+ * An implementation of the Mann-Whitney U test (also called Wilcoxon rank-sum test).\n  *\n  * @version $Id$\n  */\n-public interface MannWhitneyUTest {\n+public class MannWhitneyUTest {\n+\n+    /** Ranking algorithm. */\n+    private NaturalRanking naturalRanking;\n+\n+    /**\n+     * Create a test instance using where NaN's are left in place and ties get\n+     * the average of applicable ranks. Use this unless you are very sure of\n+     * what you are doing.\n+     */\n+    public MannWhitneyUTest() {\n+        naturalRanking = new NaturalRanking(NaNStrategy.FIXED,\n+                TiesStrategy.AVERAGE);\n+    }\n+\n+    /**\n+     * Create a test instance using the given strategies for NaN's and ties.\n+     * Only use this if you are sure of what you are doing.\n+     *\n+     * @param nanStrategy\n+     *            specifies the strategy that should be used for Double.NaN's\n+     * @param tiesStrategy\n+     *            specifies the strategy that should be used for ties\n+     */\n+    public MannWhitneyUTest(final NaNStrategy nanStrategy,\n+                            final TiesStrategy tiesStrategy) {\n+        naturalRanking = new NaturalRanking(nanStrategy, tiesStrategy);\n+    }\n+\n+    /**\n+     * Ensures that the provided arrays fulfills the assumptions.\n+     *\n+     * @param x first sample\n+     * @param y second sample\n+     * @throws NullArgumentException if {@code x} or {@code y} are {@code null}.\n+     * @throws NoDataException if {@code x} or {@code y} are zero-length.\n+     */\n+    private void ensureDataConformance(final double[] x, final double[] y)\n+        throws NullArgumentException, NoDataException {\n+\n+        if (x == null ||\n+            y == null) {\n+            throw new NullArgumentException();\n+        }\n+        if (x.length == 0 ||\n+            y.length == 0) {\n+            throw new NoDataException();\n+        }\n+    }\n+\n+    /** Concatenate the samples into one array.\n+     * @param x first sample\n+     * @param y second sample\n+     * @return concatenated array\n+     */\n+    private double[] concatenateSamples(final double[] x, final double[] y) {\n+        final double[] z = new double[x.length + y.length];\n+\n+        System.arraycopy(x, 0, z, 0, x.length);\n+        System.arraycopy(y, 0, z, x.length, y.length);\n+\n+        return z;\n+    }\n \n     /**\n      * Computes the <a\n@@ -56,8 +123,65 @@ public interface MannWhitneyUTest {\n      * @throws NullArgumentException if {@code x} or {@code y} are {@code null}.\n      * @throws NoDataException if {@code x} or {@code y} are zero-length.\n      */\n-    double mannWhitneyU(final double[] x, final double[] y)\n-        throws NullArgumentException, NoDataException;\n+    public double mannWhitneyU(final double[] x, final double[] y)\n+        throws NullArgumentException, NoDataException {\n+\n+        ensureDataConformance(x, y);\n+\n+        final double[] z = concatenateSamples(x, y);\n+        final double[] ranks = naturalRanking.rank(z);\n+\n+        double sumRankX = 0;\n+\n+        /*\n+         * The ranks for x is in the first x.length entries in ranks because x\n+         * is in the first x.length entries in z\n+         */\n+        for (int i = 0; i < x.length; ++i) {\n+            sumRankX += ranks[i];\n+        }\n+\n+        /*\n+         * U1 = R1 - (n1 * (n1 + 1)) / 2 where R1 is sum of ranks for sample 1,\n+         * e.g. x, n1 is the number of observations in sample 1.\n+         */\n+        final double U1 = sumRankX - (x.length * (x.length + 1)) / 2;\n+\n+        /*\n+         * It can be shown that U1 + U2 = n1 * n2\n+         */\n+        final double U2 = x.length * y.length - U1;\n+\n+        return FastMath.max(U1, U2);\n+    }\n+\n+    /**\n+     * @param Umin smallest Mann-Whitney U value\n+     * @param n1 number of subjects in first sample\n+     * @param n2 number of subjects in second sample\n+     * @return two-sided asymptotic p-value\n+     * @throws ConvergenceException if the p-value can not be computed\n+     * due to a convergence error\n+     * @throws MaxCountExceededException if the maximum number of\n+     * iterations is exceeded\n+     */\n+    private double calculateAsymptoticPValue(final double Umin,\n+                                             final int n1,\n+                                             final int n2)\n+        throws ConvergenceException, MaxCountExceededException {\n+\n+        final int n1n2prod = n1 * n2;\n+\n+        // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation\n+        final double EU = (double) n1n2prod / 2.0;\n+        final double VarU = (double) (n1n2prod * (n1 + n2 + 1)) / 12.0;\n+\n+        final double z = (Umin - EU) / FastMath.sqrt(VarU);\n+\n+        final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n+\n+        return 2 * standardNormal.cumulativeProbability(z);\n+    }\n \n     /**\n      * Returns the asymptotic <i>observed significance level</i>, or <a href=\n@@ -76,7 +200,10 @@ public interface MannWhitneyUTest {\n      * <li>All observations in the two samples are independent.</li>\n      * <li>The observations are at least ordinal (continuous are also ordinal).</li>\n      * </ul>\n-     * </p>\n+     * </p><p>\n+     * Ties give rise to biased variance at the moment. See e.g. <a\n+     * href=\"http://mlsc.lboro.ac.uk/resources/statistics/Mannwhitney.pdf\"\n+     * >http://mlsc.lboro.ac.uk/resources/statistics/Mannwhitney.pdf</a>.</p>\n      *\n      * @param x the first sample\n      * @param y the second sample\n@@ -88,7 +215,20 @@ public interface MannWhitneyUTest {\n      * @throws MaxCountExceededException if the maximum number of iterations\n      * is exceeded\n      */\n-    double mannWhitneyUTest(final double[] x, final double[] y)\n+    public double mannWhitneyUTest(final double[] x, final double[] y)\n         throws NullArgumentException, NoDataException,\n-        ConvergenceException, MaxCountExceededException;\n+        ConvergenceException, MaxCountExceededException {\n+\n+        ensureDataConformance(x, y);\n+\n+        final double Umax = mannWhitneyU(x, y);\n+\n+        /*\n+         * It can be shown that U1 + U2 = n1 * n2\n+         */\n+        final double Umin = x.length * y.length - Umax;\n+\n+        return calculateAsymptoticPValue(Umin, x.length, y.length);\n+    }\n+\n }\n",
      "files_name_in_blame_commit": [
        "MannWhitneyUTestImpl.java",
        "WilcoxonSignedRankTest.java",
        "OneWayAnovaTest.java",
        "OneWayAnova.java",
        "OneWayAnovaImpl.java",
        "MannWhitneyUTest.java",
        "WilcoxonSignedRankTestImpl.java",
        "TestUtilsTest.java",
        "WilcoxonSignedRankTestTest.java",
        "TestUtils.java",
        "MannWhitneyUTestTest.java"
      ]
    }
  },
  "commits_modify_file_before_fix": {
    "size": 9
  }
}