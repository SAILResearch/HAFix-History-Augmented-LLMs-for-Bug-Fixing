{
  "id": "76",
  "blame_commit": {
    "commit": {
      "commit_id": "6569bb7a3671cb7241c6fcb6e0f1eef7a39f7a1d",
      "commit_message": "Introduced ParseSettings for tag and attribute name case options.",
      "commit_author": "Jonathan Hedley",
      "commit_date": "2016-08-05 15:05:22",
      "commit_parent": "f6a1ef346c74ca3305ef5f198ac953a4fc208813"
    },
    "function": {
      "function_name": "removeIgnoreCase",
      "function_code_before": "",
      "function_code_after": "public void removeIgnoreCase(String key) {\n    Validate.notEmpty(key);\n    if (attributes == null)\n        return;\n    for (String attrKey : attributes.keySet()) {\n        if (attrKey.equalsIgnoreCase(key))\n            attributes.remove(attrKey);\n    }\n}",
      "function_before_start_line": "",
      "function_before_end_line": "",
      "function_after_start_line": 118,
      "function_after_end_line": 126,
      "function_before_token_count": 0,
      "function_after_token_count": 51,
      "functions_name_modified_file": [
        "toString",
        "removeIgnoreCase",
        "hashCode",
        "clone",
        "asList",
        "addAll",
        "html",
        "entrySet",
        "get",
        "hasNext",
        "hasKeyIgnoreCase",
        "hasKey",
        "getIgnoreCase",
        "size",
        "Dataset",
        "put",
        "dataset",
        "dataKey",
        "iterator",
        "next",
        "equals",
        "remove"
      ],
      "functions_name_all_files": [
        "defaultSettings",
        "Character",
        "testThrowsOnPrependNullText",
        "aboveOnStack",
        "normalise",
        "ignoresDupeEndTrTag",
        "testGetSiblingsWithDuplicateContent",
        "getDeepChild",
        "getAttributes",
        "isKnownTag",
        "IndexEquals",
        "isFormListed",
        "setTreeBuilder",
        "getElementsByTagName",
        "getFromStack",
        "lastFormattingElement",
        "AttributeStarting",
        "initialiseParse",
        "getNamespacedElementsByTag",
        "clearStackToTableContext",
        "Tokeniser",
        "combinator",
        "handlesCdata",
        "canPreserveTagCase",
        "lastElementSibling",
        "location",
        "nextElementSibling",
        "handleMissingTr",
        "encoder",
        "caseInsensitive",
        "handlesTextAfterData",
        "unwrap",
        "deeperDescendant",
        "isDoctype",
        "getDocument",
        "getHeadElement",
        "isData",
        "noImplicitFormForTextAreas",
        "charset",
        "Element",
        "testAddNewHtml",
        "handlesEscapedData",
        "HtmlTreeBuilder",
        "testGetSiblings",
        "byTag",
        "processEndTag",
        "replaceWith",
        "selectClassWithSpace",
        "OuterHtmlVisitor",
        "isForceQuirks",
        "isInline",
        "testSetHtmlTitle",
        "setParentNode",
        "testPrependRowToTable",
        "createShell",
        "getElementsByTag",
        "insertInFosterParent",
        "testAFlowContents",
        "testClone",
        "handlesWhitespaceInoDocType",
        "get",
        "testPrependElement",
        "testByClass",
        "hasKey",
        "getIgnoreCase",
        "getElementsMatchingText",
        "testElementSiblingIndex",
        "getElementsByAttributeValueContaining",
        "Doctype",
        "testGetElementsWithClass",
        "put",
        "testClassDomMethods",
        "asDoctype",
        "isEndTag",
        "currentElement",
        "testGetTextNodes",
        "parsesRoughAttributes",
        "nextSibling",
        "testGetParents",
        "handlesUnclosedRawtextAtEof",
        "reparentChild",
        "notClass",
        "canContainBlock",
        "testGroupOrAttribute",
        "hasClass",
        "ContainsText",
        "indentAmount",
        "hasSameValue",
        "StartTag",
        "handlesMisnestedTagsBP",
        "newAttribute",
        "getElementsByIndexGreaterThan",
        "asCharacter",
        "handlesJavadocFont",
        "siblingIndex",
        "handlesXmlDeclarationAsBogusComment",
        "commentBeforeHtml",
        "consumeCharacterReference",
        "isFosterInserts",
        "handlesUnclosedAnchors",
        "Token",
        "inButtonScope",
        "text",
        "setEmptyAttributeValue",
        "OutputSettings",
        "testGetElementsWithAttributeValue",
        "containsOwn",
        "testByAttribute",
        "Id",
        "characterReferenceError",
        "normalisesEmptyDocument",
        "cssNthChild",
        "not",
        "canBeInsensitive",
        "appendText",
        "insertOnStackAfter",
        "handleRawtext",
        "normalName",
        "handlesMultiClosingBody",
        "handlesInputInTable",
        "isSameFormattingElement",
        "MatchesOwn",
        "before",
        "id",
        "isTrackErrors",
        "indexLessThan",
        "hashCode",
        "consumeSubQuery",
        "clone",
        "addAll",
        "testFormatHtml",
        "previousSibling",
        "parseFragment",
        "getElementsByAttributeStarting",
        "asEndTag",
        "absUrl",
        "IsNthChild",
        "childNodes",
        "AttributeWithValueMatching",
        "prependChild",
        "AttributeWithValueEnding",
        "handlesTagsInTextarea",
        "generalSiblings",
        "createElement",
        "createDoctypePending",
        "testFormatOutline",
        "createTempBuffer",
        "elementIsNotASiblingOfItself",
        "pSemantics",
        "testSetIndent",
        "normalizeAttribute",
        "prependText",
        "isElementInQueue",
        "getPendingTableCharacters",
        "removeAttr",
        "inListItemScope",
        "Class",
        "getElementsByClass",
        "createFromEncoded",
        "indexInList",
        "reset",
        "isInActiveFormattingElements",
        "parsesSimpleDocument",
        "SelectorParseException",
        "name",
        "exitTableBody",
        "popStackToBefore",
        "testByAttributeStarting",
        "testAddNewText",
        "normaliseStructure",
        "mixCombinator",
        "getElementsByIndexLessThan",
        "setTrackErrors",
        "removeLastFormattingElement",
        "testSupportsNonAsciiTags",
        "Selector",
        "caseSensitiveDeclaration",
        "tag",
        "hasNext",
        "getState",
        "AttributeWithValue",
        "mixCombinatorGroup",
        "Dataset",
        "testManipulateTextNodes",
        "handlesManyChildren",
        "testGetText",
        "IndexEvaluator",
        "testNoIndentOnScriptAndStyle",
        "testGetElementsWithAttribute",
        "parseXmlFragment",
        "Attribute",
        "getPublicIdentifier",
        "parentWithClassChild",
        "register",
        "createsStructureFromBodySnippet",
        "testRelaxedTags",
        "getValue",
        "calculatePosition",
        "handlesInvalidDoctypes",
        "addSiblingHtml",
        "prettyPrint",
        "remove",
        "testHtmlContainsOuter",
        "markInsertionMode",
        "ignoresContentAfterFrameset",
        "handlesInvalidStartTags",
        "maybeSetBaseUri",
        "testSpanContents",
        "xmlFragment",
        "framesetOk",
        "testOuterHtml",
        "outputSettings",
        "testContainerOutput",
        "doesNotFindShortestMatchingEntity",
        "isBlock",
        "insertStartTag",
        "testPopToClose",
        "createCommentPending",
        "testCreatesValidProlog",
        "divSemantics",
        "appropriateEndTagName",
        "IndexGreaterThan",
        "testGroupOr",
        "parentlessToString",
        "prepend",
        "getBaseUri",
        "normalizeTag",
        "after",
        "appendTagName",
        "testPrependText",
        "hasKeyIgnoreCase",
        "isAppropriateEndTagToken",
        "clearStackToTableBodyContext",
        "parents",
        "testHgroup",
        "handlesUnclosedDefinitionLists",
        "canNormalizeCase",
        "AttributeWithValueStarting",
        "attr",
        "tracksErrorsWhenRequested",
        "handlesSolidusInA",
        "testSupplyParserToJsoupClass",
        "testNestedHas",
        "popStackToClose",
        "normalisesDocument",
        "head",
        "selectSupplementaryCharacter",
        "handlesWhatWgExpensesTableExample",
        "siblingElements",
        "canPreserveAttributeCase",
        "handlesCommentsInTable",
        "isFormSubmittable",
        "prependElement",
        "setPendingTableCharacters",
        "ensureChildNodes",
        "accumulateParents",
        "push",
        "emitCommentPending",
        "handlesUnknownInlineTags",
        "Matches",
        "getName",
        "asComment",
        "testNamespacedTag",
        "AttributeWithValueNot",
        "testPseudoLessThan",
        "allElements",
        "parsesComments",
        "notAll",
        "getElementsByAttributeValue",
        "childNodeSize",
        "appendWhitespaceIfBr",
        "testById",
        "shouldCollapseAttribute",
        "testAddBooleanAttribute",
        "insertMarkerToFormattingElements",
        "inScope",
        "readData",
        "testByAttributeRegex",
        "attributeWithBrackets",
        "testNormalisesIsIndex",
        "getPseudoClass",
        "handlesNestedImplicitTable",
        "IndexLessThan",
        "testHtmlLowerCase",
        "appendAttributeName",
        "read",
        "handlesUnclosedTitleAtEof",
        "testSupportsPartiallyNonAsciiTags",
        "tagName",
        "handles0CharacterAsText",
        "emit",
        "testKeepsPreText",
        "testClassUpdates",
        "className",
        "adjacentSiblingsWithId",
        "ensureAttributeValue",
        "elementSiblingIndex",
        "readCharRef",
        "IsNthLastOfType",
        "formatAsBlock",
        "testPseudoCombined",
        "byClass",
        "removeFromActiveFormattingElements",
        "testDetectCharsetEncodingDeclaration",
        "CssNthEvaluator",
        "parentNode",
        "getAllElements",
        "has",
        "AttributeWithValueContaining",
        "insertEmpty",
        "matches",
        "handlesQuotesInCommentsInScripts",
        "testPseudoHas",
        "handlesBlocksInDefinitions",
        "testEmptyElementFormatHtml",
        "testByAttributeRegexCharacterClass",
        "appendAttributeValue",
        "setHeadElement",
        "dropsUnterminatedAttribute",
        "ParseSettings",
        "parsesUnterminatedTextarea",
        "childNodesAsArray",
        "imgSemantics",
        "getData",
        "htmlParser",
        "appendMustCorrectlyMoveChildrenInsideOneParentElement",
        "testByAttributeRegexCombined",
        "inTableScope",
        "valueOf",
        "child",
        "setFosterInserts",
        "asStartTag",
        "siblingNodes",
        "textNodes",
        "val",
        "resetInsertionMode",
        "state",
        "preservesCaseByDefault",
        "testHasText",
        "testCharactersInIdAndClass",
        "Tag",
        "settings",
        "nameAttr",
        "handlesProtocolRelativeUrl",
        "replaceChild",
        "testSupplyParserToConnection",
        "insertForm",
        "testNotPretty",
        "findsCharsetInMalformedMeta",
        "testBrHasSpace",
        "moveByAppend",
        "testSpaceAfterTag",
        "IsFirstOfType",
        "next",
        "tokenType",
        "normalisesHeadlessBody",
        "testSupplyParserToDataStream",
        "syntax",
        "testAddNewElement",
        "testDoesHandleEOFInTag",
        "escapeMode",
        "testParseDeclarationAttributes",
        "testNoImagesInNoScriptInHead",
        "testNamespacedElements",
        "testWrapWithRemainder",
        "isCharacter",
        "getElementsContainingOwnText",
        "getElementsByAttributeValueNot",
        "insertNode",
        "handlesNullInData",
        "dataKey",
        "IsNthOfType",
        "handlesTextArea",
        "parentChildElement",
        "runParser",
        "testByTag",
        "empty",
        "getSystemIdentifier",
        "testClonesClassnames",
        "originalState",
        "data",
        "handleDataEndTag",
        "dropsUnterminatedTag",
        "testAllWithClass",
        "xmlParser",
        "Comment",
        "handlesImplicitCaptionClose",
        "adjacentSiblings",
        "outline",
        "testSetHtml",
        "isEOF",
        "anythingElse",
        "title",
        "Parser",
        "getErrors",
        "testWrap",
        "attributes",
        "handlesBaseTags",
        "handlesUnclosedCdataAtEOF",
        "updateMetaCharsetElement",
        "testMatches",
        "testGetElementsWithAttributeDash",
        "normalizeAttributes",
        "handlesUnknownNamespaceTags",
        "isComment",
        "indexGreaterThan",
        "entrySet",
        "readEndTag",
        "closeCell",
        "getElementById",
        "preservesSpaceInScript",
        "insertChildren",
        "getElementsMatchingOwnText",
        "getTreeBuilder",
        "testFontFlowContents",
        "traverse",
        "IsLastOfType",
        "baseUri",
        "testChildThrowsIndexOutOfBoundsOnMissing",
        "handlesKnownEmptyBlocks",
        "Document",
        "getOutputSettings",
        "isDataAttribute",
        "onStack",
        "indent",
        "childNode",
        "canPreserveBothCase",
        "handlesNullInComments",
        "parsesQuiteRoughAttributes",
        "inSpecificScope",
        "firstElementSibling",
        "inSelectScope",
        "parsesBodyFragment",
        "processStartTag",
        "isWhitespace",
        "testHashcodeIsStableWithContentChanges",
        "for",
        "testClassNames",
        "testPseudoBetween",
        "byAttribute",
        "isBooleanAttribute",
        "parseBodyFragmentRelaxed",
        "testNormalisesText",
        "caseSupport",
        "getElementsByAttributeValueStarting",
        "advanceTransition",
        "and",
        "process",
        "notAdjacent",
        "classNames",
        "currentNodeInHtmlNS",
        "testSetText",
        "size",
        "handlesUnclosedFormattingElements",
        "parent",
        "previousElementSibling",
        "setSiblingIndex",
        "replaceOnStack",
        "Evaluator",
        "emitDoctypePending",
        "QueryParser",
        "handlesCommasInSelector",
        "removeChild",
        "handlesDataOnlyTags",
        "reindexChildren",
        "convertsImageToImg",
        "addChildren",
        "createsDocumentStructure",
        "isSpecial",
        "handleRcData",
        "anyOtherEndTag",
        "createsFormElements",
        "acknowledgeSelfClosingFlag",
        "body",
        "pop",
        "unescapeEntities",
        "isStartTag",
        "indexEquals",
        "testSupportsLeadingCombinator",
        "parseBodyFragment",
        "addClass",
        "testPseudoGreaterThan",
        "getStack",
        "toString",
        "emitTagPending",
        "valueOfChecksNotEmpty",
        "asList",
        "handlesBaseWithoutHref",
        "relaxedBaseEntityMatchAndStrictExtendedMatch",
        "generateImpliedEndTags",
        "testCombinedWithContains",
        "equality",
        "hasAttr",
        "handlesSolidusAtAttributeEnd",
        "tracksLimitedErrorsWhenRequested",
        "testSimpleXmlParse",
        "pushActiveFormattingElements",
        "ContainsOwnText",
        "handleNullContextInParseFragment",
        "descendant",
        "filterOut",
        "testCommentAndDocType",
        "handlesTbodyTable",
        "discardsNakedTds",
        "testUsingSingleQuotesInQueries",
        "replaceActiveFormattingElement",
        "setSelfClosing",
        "testTagNameSet",
        "handlesEscapedScript",
        "handlesUnknownTags",
        "testDoesNotForceSelfClosingKnownTags",
        "handlesMisnestedTagsBI",
        "insertChildrenAsCopy",
        "appendElement",
        "getElementsContainingText",
        "doClone",
        "testPsuedoContainsWithParentheses",
        "handleDataDoubleEscapeTag",
        "testHeaderContents",
        "createTagPending",
        "transition",
        "getElementsByAttributeValueEnding",
        "getElementsByAttributeValueMatching",
        "appendNormalisedText",
        "getFormElement",
        "html",
        "clearStackToTableRowContext",
        "setKey",
        "appendChild",
        "testElementSiblingIndexSameContent",
        "quirksMode",
        "dataNodes",
        "outerHtmlTail",
        "ownerDocument",
        "handlesXmlDeclarationAsDeclaration",
        "findElements",
        "testPseudoEquals",
        "childNodesCopy",
        "matchesOwn",
        "consumeIndex",
        "cssSelector",
        "valueOfChecksNotNull",
        "error",
        "preserveWhitespace",
        "testAppendRowToTable",
        "associatedFormControlsWithDisjointForms",
        "testReinsertionModeForThCelss",
        "doesNotCreateImplicitLists",
        "testGetDataNodes",
        "normaliseTextNodes",
        "outerHtml",
        "equals",
        "testAllElements",
        "testHashAndEqualsAndValue",
        "outerHtmlHead",
        "AttributeKeyPair",
        "handlesSpanInTbody",
        "clearFormattingElementsToLastMarker",
        "xmlParseDefaultsToHtmlOutputSyntax",
        "newPendingTableCharacters",
        "testGetChildText",
        "noTableDirectInTable",
        "testRelativeUrls",
        "normalisedBodyAfterContent",
        "getElementsByIndexEquals",
        "getKey",
        "select",
        "removeFromStack",
        "append",
        "finaliseTag",
        "handlesFrames",
        "tail",
        "testKeepsPreTextInCode",
        "eofError",
        "setBaseUri",
        "wrap",
        "contains",
        "clearStackToContext",
        "testPseudoContains",
        "iterator",
        "byId",
        "testCssPath",
        "parsesUnterminatedComments",
        "IsNthLastChild",
        "nodeName",
        "hasText",
        "ownText",
        "children",
        "parentChildStar",
        "multiChildDescent",
        "testThrowsOnAddNullText",
        "testPrependNewHtml",
        "preservesSpaceInTextArea",
        "testInvalidTableContents",
        "getActiveFormattingElement",
        "defaultSemantics",
        "handlesUnclosedTitle",
        "testGetElementById",
        "removeIgnoreCase",
        "reconstructFormattingElementsInTable",
        "removeClass",
        "trims",
        "emptyTdTag",
        "getElementsByAttribute",
        "insert",
        "isSelfClosing",
        "EndTag",
        "parsesUnterminatedOption",
        "handlesNewlinesAndWhitespaceInTag",
        "notParas",
        "toggleClass",
        "parse",
        "handlesUnexpectedMarkupInTables",
        "selectSameElements",
        "replaceInQueue",
        "isEmpty",
        "reconstructFormattingElements",
        "handlesUnclosedScriptAtEof",
        "dataset",
        "isCaseSensitive",
        "setValue",
        "findFirstElementByTagName",
        "EOF",
        "setFormElement",
        "Node",
        "parseInput",
        "insertChildrenArgumentValidation",
        "noErrorsByDefault",
        "insertChildrenAtPosition",
        "isFragmentParsing",
        "testInnerHtml",
        "ensureMetaCharsetElement"
      ],
      "functions_name_co_evolved_modified_file": [
        "html",
        "removeIgnoreCase",
        "equals",
        "get",
        "hasKeyIgnoreCase",
        "hasKey",
        "getIgnoreCase",
        "remove"
      ],
      "functions_name_co_evolved_all_files": [
        "defaultSettings",
        "byTag",
        "removeIgnoreCase",
        "id",
        "handleDataDoubleEscapeTag",
        "name",
        "testAddNewElement",
        "valueOf",
        "insertStartTag",
        "byClass",
        "getElementsByAttribute",
        "insert",
        "parseFragment",
        "normalizeAttributes",
        "caseSupport",
        "getElementsByAttributeStarting",
        "html",
        "setKey",
        "hasAttr",
        "preservesCaseByDefault",
        "normalizeTag",
        "process",
        "parse",
        "Tag",
        "appendTagName",
        "get",
        "initialiseParse",
        "hasKeyIgnoreCase",
        "settings",
        "hasKey",
        "isAppropriateEndTagToken",
        "getIgnoreCase",
        "AttributeStarting",
        "nameAttr",
        "testByClass",
        "insertEmpty",
        "matches",
        "canNormalizeCase",
        "canPreserveTagCase",
        "testHtmlLowerCase",
        "attr",
        "descendant",
        "read",
        "createElement",
        "isCaseSensitive",
        "insertForm",
        "Attribute",
        "parseXmlFragment",
        "testCommentAndDocType",
        "Document",
        "caseSensitiveDeclaration",
        "testByTag",
        "tagName",
        "handleDataEndTag",
        "testByAttribute",
        "normalizeAttribute",
        "isCaseInsensitive",
        "removeAttr",
        "canPreserveAttributeCase",
        "equals",
        "anyOtherEndTag",
        "parseInput",
        "ParseSettings",
        "canPreserveBothCase",
        "canBeInsensitive",
        "normalName",
        "Parser",
        "defaultSemantics",
        "reset",
        "remove"
      ]
    },
    "file": {
      "file_name": "Attributes.java",
      "file_nloc": 204,
      "file_complexity": 64,
      "file_token_count": 1362,
      "file_before": "",
      "file_after": "",
      "file_patch": "@@ -4,30 +4,39 @@ import org.jsoup.SerializationException;\n import org.jsoup.helper.Validate;\n \n import java.io.IOException;\n-import java.util.*;\n+import java.util.AbstractMap;\n+import java.util.AbstractSet;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n \n /**\n  * The attributes of an Element.\n  * <p>\n- * Attributes are treated as a map: there can be only one value associated with an attribute key.\n+ * Attributes are treated as a map: there can be only one value associated with an attribute key/name.\n  * </p>\n  * <p>\n- * Attribute key and value comparisons are done case insensitively, and keys are normalised to\n- * lower-case.\n+ * Attribute name and value comparisons are  <b>case sensitive</b>. By default for HTML, attribute names are\n+ * normalized to lower-case on parsing. That means you should use lower-case strings when referring to attributes by\n+ * name.\n  * </p>\n- * \n+ *\n  * @author Jonathan Hedley, jonathan@hedley.net\n  */\n public class Attributes implements Iterable<Attribute>, Cloneable {\n     protected static final String dataPrefix = \"data-\";\n-    \n+\n     private LinkedHashMap<String, Attribute> attributes = null;\n     // linked hash map to preserve insertion order.\n     // null be default as so many elements have no attributes -- saves a good chunk of memory\n \n     /**\n      Get an attribute value by key.\n-     @param key the attribute key\n+     @param key the (case-sensitive) attribute key\n      @return the attribute value if set; or empty string if not set.\n      @see #hasKey(String)\n      */\n@@ -37,10 +46,27 @@ public class Attributes implements Iterable<Attribute>, Cloneable {\n         if (attributes == null)\n             return \"\";\n \n-        Attribute attr = attributes.get(key.toLowerCase());\n+        Attribute attr = attributes.get(key);\n         return attr != null ? attr.getValue() : \"\";\n     }\n \n+    /**\n+     * Get an attribute's value by case-insensitive key\n+     * @param key the attribute name\n+     * @return the first matching attribute value if set; or empty string if not set.\n+     */\n+    public String getIgnoreCase(String key) {\n+        Validate.notEmpty(key);\n+        if (attributes == null)\n+            return \"\";\n+\n+        for (String attrKey : attributes.keySet()) {\n+            if (attrKey.equalsIgnoreCase(key))\n+                return attributes.get(attrKey).getValue();\n+        }\n+        return \"\";\n+    }\n+\n     /**\n      Set a new attribute, or replace an existing one by key.\n      @param key attribute key\n@@ -50,7 +76,7 @@ public class Attributes implements Iterable<Attribute>, Cloneable {\n         Attribute attr = new Attribute(key, value);\n         put(attr);\n     }\n-    \n+\n     /**\n     Set a new boolean attribute, remove attribute if value is false.\n     @param key attribute key\n@@ -75,23 +101,52 @@ public class Attributes implements Iterable<Attribute>, Cloneable {\n     }\n \n     /**\n-     Remove an attribute by key.\n+     Remove an attribute by key. <b>Case sensitive.</b>\n      @param key attribute key to remove\n      */\n     public void remove(String key) {\n         Validate.notEmpty(key);\n         if (attributes == null)\n             return;\n-        attributes.remove(key.toLowerCase());\n+        attributes.remove(key);\n+    }\n+\n+    /**\n+     Remove an attribute by key. <b>Case insensitive.</b>\n+     @param key attribute key to remove\n+     */\n+    public void removeIgnoreCase(String key) {\n+        Validate.notEmpty(key);\n+        if (attributes == null)\n+            return;\n+        for (String attrKey : attributes.keySet()) {\n+            if (attrKey.equalsIgnoreCase(key))\n+                attributes.remove(attrKey);\n+        }\n     }\n \n     /**\n      Tests if these attributes contain an attribute with this key.\n-     @param key key to check for\n+     @param key case-sensitive key to check for\n      @return true if key exists, false otherwise\n      */\n     public boolean hasKey(String key) {\n-        return attributes != null && attributes.containsKey(key.toLowerCase());\n+        return attributes != null && attributes.containsKey(key);\n+    }\n+\n+    /**\n+     Tests if these attributes contain an attribute with this key.\n+     @param key key to check for\n+     @return true if key exists, false otherwise\n+     */\n+    public boolean hasKeyIgnoreCase(String key) {\n+        if (attributes == null)\n+            return false;\n+        for (String attrKey : attributes.keySet()) {\n+            if (attrKey.equalsIgnoreCase(key))\n+                return true;\n+        }\n+        return false;\n     }\n \n     /**\n@@ -115,7 +170,7 @@ public class Attributes implements Iterable<Attribute>, Cloneable {\n             attributes = new LinkedHashMap<String, Attribute>(incoming.size());\n         attributes.putAll(incoming.attributes);\n     }\n-    \n+\n     public Iterator<Attribute> iterator() {\n         return asList().iterator();\n     }\n@@ -159,18 +214,18 @@ public class Attributes implements Iterable<Attribute>, Cloneable {\n         }\n         return accum.toString();\n     }\n-    \n+\n     void html(Appendable accum, Document.OutputSettings out) throws IOException {\n         if (attributes == null)\n             return;\n-        \n+\n         for (Map.Entry<String, Attribute> entry : attributes.entrySet()) {\n             Attribute attribute = entry.getValue();\n             accum.append(\" \");\n             attribute.html(accum, out);\n         }\n     }\n-    \n+\n     @Override\n     public String toString() {\n         return html();\n@@ -185,9 +240,9 @@ public class Attributes implements Iterable<Attribute>, Cloneable {\n     public boolean equals(Object o) {\n         if (this == o) return true;\n         if (!(o instanceof Attributes)) return false;\n-        \n+\n         Attributes that = (Attributes) o;\n-        \n+\n         return !(attributes != null ? !attributes.equals(that.attributes) : that.attributes != null);\n     }\n \n",
      "files_name_in_blame_commit": [
        "XmlTreeBuilderTest.java",
        "HtmlParserTest.java",
        "ParserSettingsTest.java",
        "Element.java",
        "ElementTest.java",
        "Evaluator.java",
        "QueryParser.java",
        "TagTest.java",
        "AttributesTest.java",
        "HtmlTreeBuilderState.java",
        "SelectorTest.java",
        "TokeniserState.java",
        "ParseSettings.java",
        "Node.java",
        "Token.java",
        "Attribute.java",
        "Tokeniser.java",
        "Tag.java",
        "HtmlTreeBuilder.java",
        "XmlTreeBuilder.java",
        "Parser.java",
        "TreeBuilder.java",
        "Document.java",
        "Attributes.java",
        "Selector.java"
      ]
    }
  },
  "commits_modify_file_before_fix": {
    "size": 32
  }
}