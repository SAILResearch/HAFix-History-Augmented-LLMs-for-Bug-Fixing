{
  "id": "16",
  "blame_commit": {
    "commit": {
      "commit_id": "a4c526dae1537f027f429145656ffb849699c1fc",
      "commit_message": "sort dependencies by default\n\nR=acleung\nDELTA=86  (44 added, 16 deleted, 26 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION=4348\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1824 b0f006be-c8cd-11de-a2e8-8d36a3108c74",
      "commit_author": "nicksantos@google.com",
      "commit_date": "2012-03-09 23:05:59",
      "commit_parent": "187a77990aeb8028d1f7315add4c8fe56b3d79d9"
    },
    "function": {
      "function_name": "parseInputs",
      "function_code_before": "Node parseInputs() {\n  boolean devMode = options.devMode != DevMode.OFF;\n\n  // If old roots exist (we are parsing a second time), detach each of the\n  // individual file parse trees.\n  if (externsRoot != null) {\n    externsRoot.detachChildren();\n  }\n  if (jsRoot != null) {\n    jsRoot.detachChildren();\n  }\n\n  // Parse main js sources.\n  jsRoot = IR.block();\n  jsRoot.setIsSyntheticBlock(true);\n\n  externsRoot = IR.block();\n  externsRoot.setIsSyntheticBlock(true);\n\n  externAndJsRoot = IR.block(externsRoot, jsRoot);\n  externAndJsRoot.setIsSyntheticBlock(true);\n\n  if (options.tracer.isOn()) {\n    tracker = new PerformanceTracker(jsRoot, options.tracer);\n    addChangeHandler(tracker.getCodeChangeHandler());\n  }\n\n  Tracer tracer = newTracer(\"parseInputs\");\n\n  try {\n    // Parse externs sources.\n    for (CompilerInput input : externs) {\n      Node n = input.getAstRoot(this);\n      if (hasErrors()) {\n        return null;\n      }\n      externsRoot.addChildToBack(n);\n    }\n\n    // Modules inferred in ProcessCommonJS pass.\n    if (options.transformAMDToCJSModules || options.processCommonJSModules) {\n      processAMDAndCommonJSModules();\n    }\n\n    // Check if the sources need to be re-ordered.\n    if (options.dependencyOptions.needsManagement()) {\n      for (CompilerInput input : inputs) {\n        input.setCompiler(this);\n\n        // Forward-declare all the provided types, so that they\n        // are not flagged even if they are dropped from the process.\n        for (String provide : input.getProvides()) {\n          getTypeRegistry().forwardDeclareType(provide);\n        }\n      }\n\n      try {\n        inputs =\n            (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph)\n            .manageDependencies(options.dependencyOptions, inputs);\n      } catch (CircularDependencyException e) {\n        report(JSError.make(\n            JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));\n\n        // If in IDE mode, we ignore the error and keep going.\n        if (hasErrors()) {\n          return null;\n        }\n      } catch (MissingProvideException e) {\n        report(JSError.make(\n            MISSING_ENTRY_ERROR, e.getMessage()));\n\n        // If in IDE mode, we ignore the error and keep going.\n        if (hasErrors()) {\n          return null;\n        }\n      }\n    }\n\n    // Check if inputs need to be rebuilt from modules.\n    boolean staleInputs = false;\n    for (CompilerInput input : inputs) {\n      Node n = input.getAstRoot(this);\n\n      // Inputs can have a null AST during initial parse.\n      if (n == null) {\n        continue;\n      }\n\n      if (n.getJSDocInfo() != null) {\n        JSDocInfo info = n.getJSDocInfo();\n        if (info.isExterns()) {\n          // If the input file is explicitly marked as an externs file, then\n          // assume the programmer made a mistake and throw it into\n          // the externs pile anyways.\n          externsRoot.addChildToBack(n);\n          input.setIsExtern(true);\n\n          input.getModule().remove(input);\n\n          externs.add(input);\n          staleInputs = true;\n        } else if (info.isNoCompile()) {\n          input.getModule().remove(input);\n          staleInputs = true;\n        }\n      }\n    }\n\n    if (staleInputs) {\n      fillEmptyModules(modules);\n      rebuildInputsFromModules();\n    }\n\n    // Build the AST.\n    for (CompilerInput input : inputs) {\n      Node n = input.getAstRoot(this);\n      if (n == null) {\n        continue;\n      }\n\n      if (devMode) {\n        runSanityCheck();\n        if (hasErrors()) {\n          return null;\n        }\n      }\n\n      if (options.sourceMapOutputPath != null ||\n          options.nameReferenceReportPath != null) {\n\n        // Annotate the nodes in the tree with information from the\n        // input file. This information is used to construct the SourceMap.\n        SourceInformationAnnotator sia =\n            new SourceInformationAnnotator(\n                input.getName(), options.devMode != DevMode.OFF);\n        NodeTraversal.traverse(this, n, sia);\n      }\n\n      jsRoot.addChildToBack(n);\n    }\n\n    if (hasErrors()) {\n      return null;\n    }\n    return externAndJsRoot;\n  } finally {\n    stopTracer(tracer, \"parseInputs\");\n  }\n}",
      "function_code_after": "Node parseInputs() {\n  boolean devMode = options.devMode != DevMode.OFF;\n\n  // If old roots exist (we are parsing a second time), detach each of the\n  // individual file parse trees.\n  if (externsRoot != null) {\n    externsRoot.detachChildren();\n  }\n  if (jsRoot != null) {\n    jsRoot.detachChildren();\n  }\n\n  // Parse main js sources.\n  jsRoot = IR.block();\n  jsRoot.setIsSyntheticBlock(true);\n\n  externsRoot = IR.block();\n  externsRoot.setIsSyntheticBlock(true);\n\n  externAndJsRoot = IR.block(externsRoot, jsRoot);\n  externAndJsRoot.setIsSyntheticBlock(true);\n\n  if (options.tracer.isOn()) {\n    tracker = new PerformanceTracker(jsRoot, options.tracer);\n    addChangeHandler(tracker.getCodeChangeHandler());\n  }\n\n  Tracer tracer = newTracer(\"parseInputs\");\n\n  try {\n    // Parse externs sources.\n    for (CompilerInput input : externs) {\n      Node n = input.getAstRoot(this);\n      if (hasErrors()) {\n        return null;\n      }\n      externsRoot.addChildToBack(n);\n    }\n\n    // Modules inferred in ProcessCommonJS pass.\n    if (options.transformAMDToCJSModules || options.processCommonJSModules) {\n      processAMDAndCommonJSModules();\n    }\n\n    // Check if inputs need to be rebuilt from modules.\n    boolean staleInputs = false;\n\n    // Check if the sources need to be re-ordered.\n    if (options.dependencyOptions.needsManagement() &&\n        !options.skipAllPasses &&\n        options.closurePass) {\n      for (CompilerInput input : inputs) {\n        // Forward-declare all the provided types, so that they\n        // are not flagged even if they are dropped from the process.\n        for (String provide : input.getProvides()) {\n          getTypeRegistry().forwardDeclareType(provide);\n        }\n      }\n\n      try {\n        inputs =\n            (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph)\n            .manageDependencies(options.dependencyOptions, inputs);\n        staleInputs = true;\n      } catch (CircularDependencyException e) {\n        report(JSError.make(\n            JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));\n\n        // If in IDE mode, we ignore the error and keep going.\n        if (hasErrors()) {\n          return null;\n        }\n      } catch (MissingProvideException e) {\n        report(JSError.make(\n            MISSING_ENTRY_ERROR, e.getMessage()));\n\n        // If in IDE mode, we ignore the error and keep going.\n        if (hasErrors()) {\n          return null;\n        }\n      }\n    }\n\n    for (CompilerInput input : inputs) {\n      Node n = input.getAstRoot(this);\n\n      // Inputs can have a null AST during initial parse.\n      if (n == null) {\n        continue;\n      }\n\n      if (n.getJSDocInfo() != null) {\n        JSDocInfo info = n.getJSDocInfo();\n        if (info.isExterns()) {\n          // If the input file is explicitly marked as an externs file, then\n          // assume the programmer made a mistake and throw it into\n          // the externs pile anyways.\n          externsRoot.addChildToBack(n);\n          input.setIsExtern(true);\n\n          input.getModule().remove(input);\n\n          externs.add(input);\n          staleInputs = true;\n        } else if (info.isNoCompile()) {\n          input.getModule().remove(input);\n          staleInputs = true;\n        }\n      }\n    }\n\n    if (staleInputs) {\n      fillEmptyModules(modules);\n      rebuildInputsFromModules();\n    }\n\n    // Build the AST.\n    for (CompilerInput input : inputs) {\n      Node n = input.getAstRoot(this);\n      if (n == null) {\n        continue;\n      }\n\n      if (devMode) {\n        runSanityCheck();\n        if (hasErrors()) {\n          return null;\n        }\n      }\n\n      if (options.sourceMapOutputPath != null ||\n          options.nameReferenceReportPath != null) {\n\n        // Annotate the nodes in the tree with information from the\n        // input file. This information is used to construct the SourceMap.\n        SourceInformationAnnotator sia =\n            new SourceInformationAnnotator(\n                input.getName(), options.devMode != DevMode.OFF);\n        NodeTraversal.traverse(this, n, sia);\n      }\n\n      jsRoot.addChildToBack(n);\n    }\n\n    if (hasErrors()) {\n      return null;\n    }\n    return externAndJsRoot;\n  } finally {\n    stopTracer(tracer, \"parseInputs\");\n  }\n}",
      "function_before_start_line": 1227,
      "function_before_end_line": 1376,
      "function_after_start_line": 1232,
      "function_after_end_line": 1383,
      "function_before_token_count": 608,
      "function_after_token_count": 614,
      "functions_name_modified_file": [
        "getGlobalVarReferences",
        "getInputsForTesting",
        "hasHaltingErrors",
        "toString",
        "acceptEcmaScript5",
        "getErrorCount",
        "ensureLibraryInjected",
        "getSourceLine",
        "getState",
        "getTypedScopeCreator",
        "getSourceRegion",
        "getWarningCount",
        "startPass",
        "getWarnings",
        "getParserConfig",
        "getExternsForTesting",
        "getColumnIndex",
        "addNewSourceAst",
        "check",
        "addChangeHandler",
        "getExternsInOrder",
        "getAllInputsFromModules",
        "maybeSanityCheck",
        "init",
        "newCompilerOptions",
        "isInliningForbidden",
        "getNodeForCodeInsertion",
        "toSourceArray",
        "getCodingConvention",
        "isTypeCheckingEnabled",
        "IntermediateState",
        "processAMDAndCommonJSModules",
        "getErrorLevel",
        "getLength",
        "getCssRenamingMap",
        "checkFirstModule",
        "parseSyntheticCode",
        "endsWith",
        "recordFunctionInformation",
        "disableThreads",
        "newExternInput",
        "getVariableMap",
        "createPassConfigInternal",
        "initModules",
        "getFunctionalInformationMap",
        "getDegenerateModuleGraph",
        "newTracer",
        "getModuleGraph",
        "getDiagnosticGroups",
        "setPassConfig",
        "setLoggingLevel",
        "getPropertyMap",
        "acceptConstKeyword",
        "initInputsByIdMap",
        "runInCompilerThread",
        "endPass",
        "getLineIndex",
        "getTopScope",
        "rebuildInputsFromModules",
        "getInputsById",
        "replaceScript",
        "runCallableWithLargeStack",
        "updateGlobalVarReferences",
        "stopTracer",
        "isIdeMode",
        "initBasedOnOptions",
        "externExports",
        "addToDebugLog",
        "toSource",
        "compile",
        "getTypeRegistry",
        "optimize",
        "addNewScript",
        "getErrors",
        "runHotSwapPass",
        "getErrorManager",
        "compileModules",
        "Compiler",
        "resetUniqueNameId",
        "runCallable",
        "normalize",
        "getResult",
        "initCompilerOptionsIfTesting",
        "computeCFG",
        "languageMode",
        "stripCode",
        "getCleanupPassConfig",
        "precheck",
        "setErrorManager",
        "processDefines",
        "fillEmptyModules",
        "setState",
        "runSanityCheck",
        "append",
        "getDefaultErrorReporter",
        "hasRegExpGlobalReferences",
        "setProgress",
        "compileInternal",
        "addIncrementalSourceAst",
        "getSourceFileByName",
        "initOptions",
        "runHotSwap",
        "runCustomPasses",
        "throwInternalError",
        "getAstDotGraph",
        "parseTestCode",
        "getProgress",
        "getRoot",
        "getTypeValidator",
        "replaceIncrementalSourceAst",
        "getMessages",
        "getUniqueNameIdSupplier",
        "nextUniqueNameId",
        "getInput",
        "createMessageFormatter",
        "putCompilerInput",
        "makeCompilerInput",
        "parseInputs",
        "setHasRegExpGlobalReferences",
        "processNewScript",
        "setCssRenamingMap",
        "loadLibraryCode",
        "prepareAst",
        "removeExternInput",
        "removeSyntheticVarsInput",
        "getPassConfig",
        "PassFactory",
        "getSynthesizedExternsInput",
        "process",
        "parse",
        "getOptions",
        "ensureDefaultPassConfig",
        "getInputsInOrder",
        "removeTryCatchFinally",
        "hasErrors",
        "createFillFileName",
        "removeChangeHandler",
        "getSourceMap",
        "buildKnownSymbolTable",
        "areNodesEqualForInlining",
        "report",
        "reportCodeChange",
        "getReverseAbstractInterpreter",
        "reset"
      ],
      "functions_name_all_files": [
        "testInferTypes",
        "testFoldLocals6",
        "removeRequire",
        "testAliasExterns",
        "setSourceMapDetailLevel",
        "testCodeBuilderAppend",
        "setSourceFile",
        "getErrorCount",
        "setLanguageOut",
        "setWarningsGuard",
        "enables",
        "testTightenTypesWithoutTypeCheck",
        "Entry",
        "testDebugFlag4",
        "testIssue63SourceMap",
        "setDefineToNumberLiteral",
        "ensureLibraryInjected",
        "setOptimizeCalls",
        "setGeneratePseudoNames",
        "setErrorFormat",
        "testMarkPureCalls",
        "getCode",
        "setBrokenClosureRequiresLevel",
        "testTypeCheckingOffByDefault",
        "setWarningLevel",
        "checkErrorManager",
        "getTracerMode",
        "setStripNamePrefixes",
        "setCoalesceVariableNames",
        "setCheckProvides",
        "testCssNameCheck",
        "getRegion",
        "testReplaceCssNames",
        "setCheckGlobalNamesLevel",
        "testWithKeywordDefault",
        "testInlineVariables",
        "maybeSanityCheck",
        "newCompilerOptions",
        "testSourceMapFormat2",
        "testVersionFlag2",
        "setTweak",
        "testBug1949424_v2",
        "isTypeCheckingEnabled",
        "testCyclicalDependencyInInputs",
        "setAliasableStrings",
        "testPrintAstFlag",
        "testBug4152835",
        "setCheckGlobalThisLevel",
        "visitTree",
        "getLength",
        "setTransformAMDToCJSModules",
        "setFilename",
        "setTweakToNumberLiteral",
        "testHelpFlag",
        "endsWith",
        "testAliasKeywords",
        "testVarDeclarationsIntoFor",
        "setCheckRequires",
        "createExterns",
        "disableThreads",
        "getRequires",
        "setRenamePrefix",
        "setSyntheticBlockEndMarker",
        "testIssue81",
        "testLateConstantReordering",
        "getDegenerateModuleGraph",
        "testCssNameWiring",
        "testTypeCheckingWithSyntheticBlocks",
        "isOn",
        "setLineLengthThreshold",
        "testClosurePassPreservesJsDoc",
        "setPassConfig",
        "testBug1949424",
        "fileNameToLegacyOutputWriter",
        "endPass",
        "testTwoParseErrors",
        "getModule",
        "testCheckSymbolsOn",
        "testSourceMapExpansion2",
        "getLineIndex",
        "outputSourceMap",
        "setSummaryDetailLevel",
        "setRunOptions",
        "getSourceFile",
        "testFoldLocals4",
        "toSource",
        "FlagUsageException",
        "CompilationLevel",
        "testES5",
        "setAliasStringsBlacklist",
        "setInlineLocalVariables",
        "Compiler",
        "testInlineGetters",
        "setProcessObjectPropertyString",
        "testSourceMapFormat1",
        "setSourceMapOutputPath",
        "setIdeMode",
        "testTypeCheckAndInference",
        "precheck",
        "testVersionFlag",
        "testIssue504",
        "hasRegExpGlobalReferences",
        "addWarningsGuard",
        "getMapPath",
        "setOutputBundle",
        "shouldStrip",
        "testTransformAMDAndProcessCJS",
        "testDefineFlag",
        "testCollapseProperties2",
        "getLanguageIn",
        "testProvidedNamespaceIsConst5",
        "createCommandLineRunner",
        "testUnreachableCode",
        "setClosureEntryPoints",
        "setReportMissingOverride",
        "setCollapseObjectLiterals",
        "testIssue601",
        "nextUniqueNameId",
        "testSourcePruningOn1",
        "testLateStatementFusion",
        "testCheckReferencesOff",
        "createMessageFormatter",
        "setErrorHandler",
        "getSourceAst",
        "testRegExp1",
        "testAllChecksOn",
        "setJs",
        "setRemoveUnusedVariable",
        "testGetMsgWiring",
        "setSkipNormalOutputs",
        "testIssue70",
        "setRemoveAbstractMethods",
        "setDefineToDoubleLiteral",
        "testSourcePruningOn4",
        "testBadBreakStatementInIdeMode",
        "processNewScript",
        "setGenerateExports",
        "processResults",
        "setMarkAsCompiled",
        "useEmergencyFailSafe",
        "clone",
        "setExternExports",
        "fileNameToOutputWriter2",
        "getFilename",
        "getAstRoot",
        "PassFactory",
        "setDevirtualizePrototypeMethods",
        "testWarningGuardOrdering3",
        "testRenameVars2",
        "setRecordFunctionInformation",
        "enableExternExports",
        "getWarningsGuard",
        "skipAllCompilerPasses",
        "testTypedefBeforeOwner2",
        "testSourceMapExpansion1",
        "testProvidedNamespaceIsConst4",
        "testDevirtualizationAndExtractPrototypeMemberDeclarations",
        "testExtractPrototypeMemberDeclarations",
        "testRegExp2",
        "createFillFileName",
        "setJscompDevMode",
        "removeChangeHandler",
        "testES5StrictUseStrict",
        "setInputPropertyMapSerialized",
        "setCheckMissingGetCssNameBlacklist",
        "report",
        "testQuietMode",
        "reportCodeChange",
        "testNamelessParameter",
        "setLocale",
        "createSourceInputs",
        "reset",
        "setTweakProcessing",
        "getInputsForTesting",
        "testClosurePassOff",
        "hasHaltingErrors",
        "getPathRelativeToClosureBase",
        "openExternExportsStream",
        "clear",
        "testCrossModuleCodeMotion",
        "testMoveFunctionDeclarations",
        "outputManifestOrBundle",
        "setReplaceIdGenerators",
        "testRecoverOnBadExterns",
        "doRun",
        "isInTestMode",
        "testMarkNoSideEffects",
        "testCodeBuilderColumnAfterReset",
        "setCollapsePropertiesOnExternTypes",
        "getSourceLine",
        "getState",
        "getTypedScopeCreator",
        "setUp",
        "startPass",
        "testGenerateExports",
        "testIssue284",
        "setCollapseVariableDeclarations",
        "getColumnIndex",
        "setGroupVariableDeclarations",
        "addNewSourceAst",
        "testModuleWrapperBaseNameExpansion",
        "testBooleanFlag2",
        "testProcessClosurePrimitives",
        "setAcceptConstKeyword",
        "setSyntheticBlockStartMarker",
        "getAllInputsFromModules",
        "resetWarningsGuard",
        "setSkipAllPasses",
        "setDefineReplacements",
        "testIssue601b",
        "setMessageBundle",
        "initOptionsFromFlags",
        "setExterns",
        "testCheckGlobalThisOffByDefault",
        "isInliningForbidden",
        "getNodeForCodeInsertion",
        "overrideModule",
        "IntermediateState",
        "setRemoveClosureAsserts",
        "setVariableRenaming",
        "testSusiciousCodeOff",
        "testExtraAnnotationNames",
        "setPropertyMapOutputFile",
        "getAliasTransformationHandler",
        "setRemoveUnusedPrototypeProperties",
        "tearDown",
        "testDebugFlag2",
        "testRewriteFunctionExpressions",
        "testInlineGettersWithAmbiguate",
        "checkFirstModule",
        "testFoldLocals3",
        "testExploitAssigns",
        "setOptimizeParameters",
        "testSmartNamePass",
        "getVariableMap",
        "printModuleGraphManifestOrBundleTo",
        "testSourceSortingOn",
        "setAliasExternals",
        "setOutputJsStringUsage",
        "setPrettyPrint",
        "printBundleTo",
        "testReflectedMethods",
        "createJsModules",
        "getModuleGraph",
        "setNameReferenceReportPath",
        "testWithKeywordWithEs5ChecksOff",
        "setCheckCaja",
        "setClosurePass",
        "getPropertyMap",
        "logAliasTransformation",
        "setSpecializeInitialModule",
        "testExternsLifting1",
        "testES5Strict",
        "visitSubtree",
        "getInputsById",
        "testFoldLocals1",
        "getModuleOutputFileName",
        "setRewriteFunctionExpressions",
        "testCheckRequiresOn",
        "testIssue90",
        "compile",
        "getTypeRegistry",
        "setProcessCommonJSModules",
        "getErrorManager",
        "getOutputCharset2",
        "setAliasAllStrings",
        "setInstrumentationTemplate",
        "resetUniqueNameId",
        "writeModuleOutput",
        "normalize",
        "getResult",
        "add",
        "addRequire",
        "testMissingReturn",
        "testRemoveUnusedVars1",
        "stripCode",
        "getName",
        "testAlwaysRunSafetyCheck",
        "testInlineFunctions",
        "constructRootRelativePathsMap",
        "setReportUnknownTypes",
        "setModuleWrapper",
        "testDisambiguateProperties",
        "testProcessDefinesAlwaysOn",
        "setVariableMapOutputFile",
        "getAst",
        "testDuplicateVariablesInExterns",
        "testTypeCheckingOnWithVerbose",
        "applyFullCompilationOptions",
        "setOptimizeReturns",
        "testCommonJSProvidesAndRequire",
        "setUnaliasableGlobals",
        "testCheckUndefinedProperties2",
        "setPrintPassGraph",
        "getProgress",
        "getTypeValidator",
        "testCheckUndefinedProperties1",
        "getMessages",
        "getInputId",
        "setRuntimeTypeCheck",
        "setAliasKeywords",
        "setIgnoreCajaProperties",
        "setTracerMode",
        "makeCompilerInput",
        "testLocalUndefined",
        "setSmartNameRemoval",
        "getProvides",
        "testTypeParsingOnWithVerbose",
        "setHasRegExpGlobalReferences",
        "setPropertyAffinity",
        "setInputDelimiter",
        "testNoSrCFilesWithManifest",
        "setPreferLineBreakAtEndOfFile",
        "setDependencyOptions",
        "testRenamePrefixNamespaceActivatesMoveFunctionDeclarations",
        "getTweakProcessing",
        "setCheckSymbols",
        "testRemoveUnreachableCode",
        "createExternInputs",
        "testSuppressCheckProvidesWarning",
        "setCssRenamingMap",
        "testHiddenSideEffect",
        "shouldGenerateOutputPerModule",
        "loadLibraryCode",
        "prepareAst",
        "getPassConfig",
        "testCheckGlobalNames",
        "testCheckSymbolsOffForDefault",
        "testDeprecation",
        "testSourceSortingCircularDeps1",
        "getOptions",
        "setDebugOptionsForCompilationLevel",
        "ensureDefaultPassConfig",
        "addAlias",
        "testRenamePrefixNamespace",
        "setCheckUnreachableCode",
        "disables",
        "CompilerOptions",
        "testRemoveClosureAsserts",
        "getSourceMap",
        "buildKnownSymbolTable",
        "testExportTestFunctionsOn",
        "setDeadAssignmentElimination",
        "setAggressiveVarCheck",
        "setInlineVariables",
        "setTweakToBooleanLiteral",
        "getReverseAbstractInterpreter",
        "getGlobalVarReferences",
        "setExtractPrototypeMemberDeclarations",
        "setGatherCssNames",
        "parseModuleWrappers",
        "getCommandLineConfig",
        "setCrossModuleMethodMotion",
        "acceptEcmaScript5",
        "setManageClosureDependencies",
        "testInlineConstants",
        "filenameToOutputStream",
        "testDebugFlag1",
        "testBug2592659",
        "setReplaceStringsFunctionDescriptions",
        "assumeClosuresOnlyCaptureReferences",
        "testSourcePruningOn5",
        "setLanguageIn",
        "setAnonymousFunctionNaming",
        "setInlineLocalFunctions",
        "setTracer",
        "testCheckSymbolsOverrideForVerbose",
        "regenerateDependencyInfoIfNecessary",
        "getWarnings",
        "getParserConfig",
        "testStarModuleManifest",
        "setRewriteNewDateGoogNow",
        "getLineOffset",
        "testOptimizeArgumentsArray",
        "testCheckGlobalThisOff",
        "testIssue601c",
        "setConvertToDottedProperties",
        "testRemoveUnusedPrototypeProperties1",
        "check",
        "addChangeHandler",
        "getExternsInOrder",
        "testCollapseObjectLiteral2",
        "testChainedCalls",
        "outputNameMaps",
        "setCodingConvention",
        "testRemoveAbstractMethods",
        "testMemoizedTypedScopeCreator",
        "init",
        "testConvertToDottedProperties",
        "testWarningGuardOrdering1",
        "testProcessCJS",
        "setJsOutputFile",
        "testSame",
        "toSourceArray",
        "setInlineFunctions",
        "setRemoveUnusedVars",
        "testCrossModuleMethodMotion",
        "testFlowSensitiveInlineVariables1",
        "getCssRenamingMap",
        "testCheckRequiresAndCheckProvidesOff",
        "setAssumeStrictThis",
        "outputTracerReport",
        "setComputePhaseOrdering",
        "newExternInput",
        "testCheckSymbolsOff",
        "setTweakReplacements",
        "createPassConfigInternal",
        "initModules",
        "isExtern",
        "newTracer",
        "setDefine",
        "getDiagnosticGroups",
        "testIssue598",
        "acceptConstKeyword",
        "testShadowVaribles",
        "testCoaleseVariables",
        "testIssue115",
        "getInferTypes",
        "getTopScope",
        "rebuildInputsFromModules",
        "replaceScript",
        "testES5StrictUseStrictMultipleInputs",
        "setAmbiguateProperties",
        "runCallableWithLargeStack",
        "testAliasAllStrings",
        "setColorizeErrorOutput",
        "setPrintTree",
        "setDevMode",
        "addNewScript",
        "getErrors",
        "runHotSwapPass",
        "testRemoveUnusedVars2",
        "testSingletonGetter1",
        "runCallable",
        "testNegativeZero",
        "setAssumeClosuresOnlyCaptureReferences",
        "initCompilerOptionsIfTesting",
        "setComputeFunctionSideEffects",
        "computeCFG",
        "languageMode",
        "setTightenTypes",
        "setReserveRawExports",
        "outputBestPhaseOrdering",
        "setExtraAnnotationNames",
        "setSourceMapFormat",
        "setErrorManager",
        "processDefines",
        "setState",
        "testProvidedNamespaceIsConst3",
        "testFoldLocals5",
        "setStripTypes",
        "setManifestMaps",
        "compileInternal",
        "testFoldLocals2",
        "runHotSwap",
        "streamToOutputWriter2",
        "recordStartRun",
        "setAliasableGlobals",
        "testSourceSortingOff",
        "runCustomPasses",
        "getLegacyOutputCharset",
        "throwInternalError",
        "getAstDotGraph",
        "checkModuleName",
        "setIsExtern",
        "testConstantTagsMustAlwaysBeRemoved",
        "testSuppressEs5StrictWarning",
        "getRoot",
        "testMinimizeExits",
        "testDefineFlag2",
        "testCodeBuilderColumnAfterResetDummy",
        "replaceIncrementalSourceAst",
        "setDefineToStringLiteral",
        "setStripTypePrefixes",
        "setRemoveUnusedVariables",
        "testFunctionStrictModeNoWarning",
        "testCodingConvention",
        "getUniqueNameIdSupplier",
        "getInput",
        "putCompilerInput",
        "testCheckSymbolsOnForVerbose",
        "parseInputs",
        "test",
        "getLanguageOut",
        "setOutputWrapper",
        "testBug1956277",
        "testClosurePassOn",
        "setCreateNameMapFiles",
        "setPropertyRenaming",
        "setInputVariableMapSerialized",
        "setAliasTransformationHandler",
        "testIncompleteFunction",
        "testTypeCheckOverride2",
        "enableRuntimeTypeCheck",
        "testIssue297",
        "getSynthesizedExternsInput",
        "testPropertyRenaming",
        "testTransformAMD",
        "run",
        "process",
        "setExternExportsPath",
        "testJQueryStringSplitLoops",
        "testForwardDeclareDroppedTypes",
        "setReplaceStringsPlaceholderToken",
        "getInputsInOrder",
        "testCheckGlobalThisOnWithAdvancedMode",
        "testProvidedNamespaceIsConst2",
        "testNameAnonymousFunctions",
        "setIdGenerators",
        "clearAst",
        "testMissingReturnCheckOnWithVerbose",
        "testReplaceMessages",
        "testRenameLabels",
        "setCheckSuspiciousCode",
        "setLooseTypes",
        "testSourceMapExpansion3",
        "testCollapseProperties1",
        "setCrossModuleCodeMotion",
        "setModule",
        "testChainModuleManifest",
        "setRemoveUnusedLocalVars",
        "setNameAnonymousFunctionsOnly",
        "toString",
        "createCompilerOptions",
        "testSourcePruningOn3",
        "setCheckControlStructures",
        "setRenamingPolicy",
        "testIssue378",
        "setCollapseAnonymousFunctions",
        "testLanguageMode2",
        "testDeadAssignmentsElimination",
        "setInferTypes",
        "createDefineOrTweakReplacements",
        "setRemoveDeadCode",
        "testTypeCheckOverride1",
        "testRemoveUnusedPrototypeProperties2",
        "getSourceRegion",
        "setWarningGuardSpec",
        "getWarningCount",
        "getExternsForTesting",
        "testExportedNames",
        "testCheckProvidesWarning",
        "testGoogAssertStripping",
        "testOptimizeReturns",
        "streamToLegacyOutputWriter",
        "getDefineReplacements",
        "setPrintInputDelimiter",
        "getLine",
        "assumeStrictThis",
        "addProvide",
        "testDebugFlag3",
        "getCodingConvention",
        "processAMDAndCommonJSModules",
        "setDisambiguateProperties",
        "shouldGenerateMapPerModule",
        "getErrorLevel",
        "disableRuntimeTypeCheck",
        "testWarningGuardOrdering2",
        "parseSyntheticCode",
        "setRemoveTryCatchFinally",
        "testProvideRequireSameFile",
        "setSourceMapLocationMappings",
        "testCheckConsts",
        "setDebugFunctionSideEffectsPath",
        "setRemoveUnusedPrototypePropertiesInExterns",
        "recordFunctionInformation",
        "testBrokenNameSpace",
        "testScriptStrictModeNoWarning",
        "testsyntheticBlockOnDeadAssignments",
        "testCollapseAnonymousFunctions",
        "testExportTestFunctionsOff",
        "testFoldLocals7",
        "setRuntimeTypeCheckLogFunction",
        "testLanguageMode",
        "setRenamePrefixNamespace",
        "getFunctionalInformationMap",
        "applyBasicCompilationOptions",
        "setFlowSensitiveInlineVariables",
        "testCharSetExpansion",
        "checkUnexpectedErrorsOrWarnings",
        "setMarkNoSideEffectCalls",
        "applySafeCompilationOptions",
        "setLoggingLevel",
        "testTypeNameParser",
        "initInputsByIdMap",
        "testCheckTypes",
        "testTypeParsingOffByDefault",
        "setInlineConstantVars",
        "testCheckGlobalThisOn",
        "runInCompilerThread",
        "testGenerateExportsOn",
        "testBug2410122",
        "updateGlobalVarReferences",
        "setNameReferenceGraphPath",
        "testProvidedNamespaceIsConst",
        "testCollapseObjectLiteral1",
        "stopTracer",
        "isIdeMode",
        "initBasedOnOptions",
        "externExports",
        "testSortingOff",
        "setOptionsForCompilationLevel",
        "getTweakReplacements",
        "setProtectHiddenSideEffects",
        "addToDebugLog",
        "setLineBreak",
        "optimize",
        "setCustomPasses",
        "setCheckMissingGetCssNameLevel",
        "compileModules",
        "testOptimizeParameters",
        "CompilerInput",
        "testDepreciationWithVerbose",
        "testFlowSensitiveInlineVariables2",
        "getCleanupPassConfig",
        "setPrintAst",
        "setCheckMissingReturn",
        "createInputs",
        "fillEmptyModules",
        "shouldColorizeErrorOutput",
        "expandCommandLinePath",
        "setReportPath",
        "runSanityCheck",
        "testCheckGlobalThisOnWithErrorFlag",
        "setModuleOutputPathPrefix",
        "append",
        "setVariableMapInputFile",
        "getDefaultErrorReporter",
        "setProgress",
        "setLabelRenaming",
        "setTweakToDoubleLiteral",
        "enableTestMode",
        "setCreateSourceMap",
        "testRenameVars1",
        "setCheckTypes",
        "addIncrementalSourceAst",
        "getSourceFileByName",
        "getCompiler",
        "initOptions",
        "testExternsLifting2",
        "testCheckUndefinedProperties3",
        "setCompiler",
        "setCharset",
        "recordEndRun",
        "setReplaceStringsReservedStrings",
        "parseTestCode",
        "setOutputManifest",
        "getInputCharset",
        "testDefineFlag3",
        "maybeCreateDirsForPath",
        "testTypedefBeforeOwner1",
        "testIdGenerators",
        "setChainCalls",
        "setOutputCharset",
        "outputBundle",
        "testBug5786871",
        "setFoldConstants",
        "testWarningGuardOrdering4",
        "writeOutput",
        "testCheckReferencesOn",
        "getNumLines",
        "testProcessDefinesAdditionalReplacements",
        "testGenerateExportsOff",
        "setCommonJSModulePathPrefix",
        "getReplacementsHelper",
        "testBug1962380",
        "testVisibility",
        "testES3ByDefault",
        "setExportTestFunctions",
        "removeExternInput",
        "removeSyntheticVarsInput",
        "isExternExportsEnabled",
        "testCheckProvidesOn",
        "testSyntheticExterns",
        "setPropertyInvalidationErrors",
        "setDefineToBooleanLiteral",
        "setCollapseProperties",
        "setAppNameStr",
        "getErrorPrintStream",
        "AbstractCommandLineRunner",
        "parse",
        "setPropertyMapInputFile",
        "expandSourceMapPath",
        "testCompilerDoesNotBlowUpIfUndefinedSymbols",
        "testBooleanFlag1",
        "testIssue550",
        "setTweakToStringLiteral",
        "setStripNameSuffixes",
        "testCoalesceVariableNames",
        "removeTryCatchFinally",
        "setInlineGetters",
        "setMoveFunctionDeclarations",
        "hasErrors",
        "testSourcePruningOn2",
        "testFoldConstants",
        "testSourceSortingCircularDeps2",
        "areNodesEqualForInlining",
        "testCheckSymbolsOverrideForQuiet",
        "testDuplicateParams",
        "testSourcePruningOn6",
        "setOptimizeArgumentsArray",
        "testDevirtualizePrototypeMethods",
        "setShadowVariables",
        "printManifestTo",
        "setReplaceStringsConfiguration",
        "outputManifest"
      ],
      "functions_name_co_evolved_modified_file": [
        "putCompilerInput",
        "parseTestCode",
        "newExternInput",
        "initInputsByIdMap",
        "parseSyntheticCode",
        "addNewSourceAst",
        "parseInputs",
        "replaceIncrementalSourceAst",
        "addIncrementalSourceAst"
      ],
      "functions_name_co_evolved_all_files": [
        "parseSyntheticCode",
        "setManageClosureDependencies",
        "setErrorManager",
        "getRequires",
        "newExternInput",
        "testSourceSortingOn",
        "addIncrementalSourceAst",
        "regenerateDependencyInfoIfNecessary",
        "applyFullCompilationOptions",
        "testCommonJSProvidesAndRequire",
        "checkErrorManager",
        "testSourceSortingOff",
        "setCompiler",
        "applySafeCompilationOptions",
        "parseTestCode",
        "initInputsByIdMap",
        "addNewSourceAst",
        "replaceIncrementalSourceAst",
        "setRunOptions",
        "putCompilerInput",
        "testSortingOff",
        "parseInputs",
        "getProvides"
      ]
    },
    "file": {
      "file_name": "Compiler.java",
      "file_nloc": 1629,
      "file_complexity": 354,
      "file_token_count": 9796,
      "file_before": "",
      "file_after": "",
      "file_patch": "@@ -479,14 +479,14 @@ public class Compiler extends AbstractCompiler {\n     inputsById = new HashMap<InputId, CompilerInput>();\n     for (CompilerInput input : externs) {\n       InputId id = input.getInputId();\n-      CompilerInput previous = inputsById.put(id, input);\n+      CompilerInput previous = putCompilerInput(id, input);\n       if (previous != null) {\n         report(JSError.make(DUPLICATE_EXTERN_INPUT, input.getName()));\n       }\n     }\n     for (CompilerInput input : inputs) {\n       InputId id = input.getInputId();\n-      CompilerInput previous = inputsById.put(id, input);\n+      CompilerInput previous = putCompilerInput(id, input);\n       if (previous != null) {\n         report(JSError.make(DUPLICATE_INPUT, input.getName()));\n       }\n@@ -1021,17 +1021,22 @@ public class Compiler extends AbstractCompiler {\n       throw new IllegalArgumentException(\"Conflicting externs name: \" + name);\n     }\n     CompilerInput input = new CompilerInput(ast, true);\n-    inputsById.put(input.getInputId(), input);\n+    putCompilerInput(input.getInputId(), input);\n     externsRoot.addChildToFront(ast.getAstRoot(this));\n     externs.add(0, input);\n     return input;\n   }\n \n+  private CompilerInput putCompilerInput(InputId id, CompilerInput input) {\n+    input.setCompiler(this);\n+    return inputsById.put(id, input);\n+  }\n+\n   /** Add a source input dynamically. Intended for incremental compilation. */\n   void addIncrementalSourceAst(JsAst ast) {\n     InputId id = ast.getInputId();\n     Preconditions.checkState(getInput(id) == null, \"Duplicate input %s\", id.getIdName());\n-    inputsById.put(id, new CompilerInput(ast));\n+    putCompilerInput(id, new CompilerInput(ast));\n   }\n \n   /**\n@@ -1059,7 +1064,7 @@ public class Compiler extends AbstractCompiler {\n     }\n \n     CompilerInput newInput = new CompilerInput(ast);\n-    inputsById.put(ast.getInputId(), newInput);\n+    putCompilerInput(ast.getInputId(), newInput);\n \n     JSModule module = oldInput.getModule();\n     if (module != null) {\n@@ -1108,7 +1113,7 @@ public class Compiler extends AbstractCompiler {\n       modules.get(0).add(newInput);\n     }\n \n-    inputsById.put(ast.getInputId(), newInput);\n+    putCompilerInput(ast.getInputId(), newInput);\n \n     return true;\n   }\n@@ -1268,11 +1273,14 @@ public class Compiler extends AbstractCompiler {\n         processAMDAndCommonJSModules();\n       }\n \n+      // Check if inputs need to be rebuilt from modules.\n+      boolean staleInputs = false;\n+\n       // Check if the sources need to be re-ordered.\n-      if (options.dependencyOptions.needsManagement()) {\n+      if (options.dependencyOptions.needsManagement() &&\n+          !options.skipAllPasses &&\n+          options.closurePass) {\n         for (CompilerInput input : inputs) {\n-          input.setCompiler(this);\n-\n           // Forward-declare all the provided types, so that they\n           // are not flagged even if they are dropped from the process.\n           for (String provide : input.getProvides()) {\n@@ -1284,6 +1292,7 @@ public class Compiler extends AbstractCompiler {\n           inputs =\n               (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph)\n               .manageDependencies(options.dependencyOptions, inputs);\n+          staleInputs = true;\n         } catch (CircularDependencyException e) {\n           report(JSError.make(\n               JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));\n@@ -1303,8 +1312,6 @@ public class Compiler extends AbstractCompiler {\n         }\n       }\n \n-      // Check if inputs need to be rebuilt from modules.\n-      boolean staleInputs = false;\n       for (CompilerInput input : inputs) {\n         Node n = input.getAstRoot(this);\n \n@@ -1446,7 +1453,7 @@ public class Compiler extends AbstractCompiler {\n   Node parseSyntheticCode(String js) {\n     CompilerInput input = new CompilerInput(\n         SourceFile.fromCode(\" [synthetic:\" + (++syntheticCodeId) + \"] \", js));\n-    inputsById.put(input.getInputId(), input);\n+    putCompilerInput(input.getInputId(), input);\n     return input.getAstRoot(this);\n   }\n \n@@ -1479,7 +1486,7 @@ public class Compiler extends AbstractCompiler {\n     if (inputsById == null) {\n       inputsById = Maps.newHashMap();\n     }\n-    inputsById.put(input.getInputId(), input);\n+    putCompilerInput(input.getInputId(), input);\n     return input.getAstRoot(this);\n   }\n \n",
      "files_name_in_blame_commit": [
        "CompilerInput.java",
        "CompilationLevel.java",
        "CompilerOptions.java",
        "IntegrationTest.java",
        "AbstractCommandLineRunner.java",
        "CompilerTest.java",
        "Compiler.java",
        "CommandLineRunnerTest.java"
      ]
    }
  },
  "commits_modify_file_before_fix": {
    "size": 148
  }
}