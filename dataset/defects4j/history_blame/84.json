{
  "id": "84",
  "blame_commit": {
    "commit": {
      "commit_id": "af6aba957f4dc4d19d5f295172b4ddc941ca1681",
      "commit_message": "Update null handling behaviour and documentation\nbug 21734, from Phil Steiz\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137476 13f79535-47bb-0310-9956-ffa450edef68",
      "commit_author": "Stephen Colebourne",
      "commit_date": "2003-07-20 16:03:21",
      "commit_parent": "69756032f5cd94fa04084a30a071e7fcb5aa2970"
    },
    "function": {
      "function_name": "createNumber",
      "function_code_before": "",
      "function_code_after": "public static Number createNumber(String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (str.length() == 0) {\n        throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n    }\n    if (str.startsWith(\"--\")) {\n        // this is protection for poorness in java.lang.BigDecimal.\n        // it accepts this as a legal value, but it does not appear \n        // to be in specification of class. OS X Java parses it to \n        // a wrong value.\n        return null;\n    }\n    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n        return createInteger(str);\n    }   \n    char lastChar = str.charAt(str.length() - 1);\n    String mant;\n    String dec;\n    String exp;\n    int decPos = str.indexOf('.');\n    int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n\n    if (decPos > -1) {\n\n        if (expPos > -1) {\n            if (expPos < decPos) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            dec = str.substring(decPos + 1, expPos);\n        } else {\n            dec = str.substring(decPos + 1);\n        }\n        mant = str.substring(0, decPos);\n    } else {\n        if (expPos > -1) {\n            mant = str.substring(0, expPos);\n        } else {\n            mant = str;\n        }\n        dec = null;\n    }\n    if (!Character.isDigit(lastChar)) {\n        if (expPos > -1 && expPos < str.length() - 1) {\n            exp = str.substring(expPos + 1, str.length() - 1);\n        } else {\n            exp = null;\n        }\n        //Requesting a specific type..\n        String numeric = str.substring(0, str.length() - 1);\n        boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n        switch (lastChar) {\n            case 'l' :\n            case 'L' :\n                if (dec == null\n                    && exp == null\n                    && isDigits(numeric.substring(1))\n                    && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) {\n                    try {\n                        return createLong(numeric);\n                    } catch (NumberFormatException nfe) {\n                        //Too big for a long\n                    }\n                    return createBigInteger(numeric);\n\n                }\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            case 'f' :\n            case 'F' :\n                try {\n                    Float f = NumberUtils.createFloat(numeric);\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        //If it's too big for a float or the float value = 0 and the string\n                        //has non-zeros in it, then float doens't have the presision we want\n                        return f;\n                    }\n\n                } catch (NumberFormatException nfe) {\n                }\n                //Fall through\n            case 'd' :\n            case 'D' :\n                try {\n                    Double d = NumberUtils.createDouble(numeric);\n                    if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (NumberFormatException nfe) {\n                }\n                try {\n                    return createBigDecimal(numeric);\n                } catch (NumberFormatException e) {\n                }\n                //Fall through\n            default :\n                throw new NumberFormatException(str + \" is not a valid number.\");\n\n        }\n    } else {\n        //User doesn't have a preference on the return type, so let's start\n        //small and go from there...\n        if (expPos > -1 && expPos < str.length() - 1) {\n            exp = str.substring(expPos + 1, str.length());\n        } else {\n            exp = null;\n        }\n        if (dec == null && exp == null) {\n            //Must be an int,long,bigint\n            try {\n                return createInteger(str);\n            } catch (NumberFormatException nfe) {\n            }\n            try {\n                return createLong(str);\n            } catch (NumberFormatException nfe) {\n            }\n            return createBigInteger(str);\n\n        } else {\n            //Must be a float,double,BigDec\n            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n            try {\n                Float f = createFloat(str);\n                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                    return f;\n                }\n            } catch (NumberFormatException nfe) {\n            }\n            try {\n                Double d = createDouble(str);\n                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                    return d;\n                }\n            } catch (NumberFormatException nfe) {\n            }\n\n            return createBigDecimal(str);\n\n        }\n    }\n}",
      "function_before_start_line": "",
      "function_before_end_line": "",
      "function_after_start_line": 218,
      "function_after_end_line": 359,
      "function_before_token_count": 0,
      "function_after_token_count": 771,
      "functions_name_modified_file": [
        "compare",
        "isAllZeros",
        "min",
        "createFloat",
        "createBigDecimal",
        "createNumber",
        "createDouble",
        "isNumber",
        "isDigits",
        "max",
        "createBigInteger",
        "createInteger",
        "createLong",
        "NumberUtils",
        "stringToInt"
      ],
      "functions_name_all_files": [
        "compare",
        "testMinShort",
        "testMaximumShort",
        "testMaxFloat",
        "min",
        "testMinimumByte",
        "testCreateNumber",
        "testCreateBigDecimal",
        "testCreateBigInteger",
        "testMaxDouble",
        "testMinimumShort",
        "testIsNumber",
        "testCompareFloat",
        "testStringToIntStringI",
        "testMaximumInt",
        "testCreateDouble",
        "testCreateInteger",
        "isAllZeros",
        "testMinimumInt",
        "testCreateLong",
        "testMaximumByte",
        "testCompareDouble",
        "createFloat",
        "checkCreateNumber",
        "testMinInt",
        "max",
        "NumberUtilsTest",
        "main",
        "createInteger",
        "stringToInt",
        "createBigDecimal",
        "createNumber",
        "createDouble",
        "isDigits",
        "testMinLong",
        "testConstants",
        "testMinimumLong",
        "suite",
        "NumberUtils",
        "testMinFloat",
        "testMaxInt",
        "testMaxShort",
        "testCreateFloat",
        "testStringToIntString",
        "testIsDigits",
        "testMaximumLong",
        "testMinDouble",
        "testMaxLong",
        "createBigInteger",
        "isNumber",
        "createLong"
      ],
      "functions_name_co_evolved_modified_file": [
        "isAllZeros",
        "createFloat",
        "createBigDecimal",
        "createNumber",
        "createDouble",
        "createBigInteger",
        "createInteger",
        "createLong"
      ],
      "functions_name_co_evolved_all_files": [
        "testCreateFloat",
        "testCreateDouble",
        "testCreateInteger",
        "isAllZeros",
        "testCreateLong",
        "testStringToIntString",
        "createFloat",
        "createBigDecimal",
        "createNumber",
        "createDouble",
        "testCreateBigDecimal",
        "testCreateBigInteger",
        "checkCreateNumber",
        "testCreateNumber",
        "createBigInteger",
        "createInteger",
        "createLong",
        "testIsNumber"
      ]
    },
    "file": {
      "file_name": "NumberUtils.java",
      "file_nloc": 556,
      "file_complexity": 208,
      "file_token_count": 3528,
      "file_before": "",
      "file_after": "",
      "file_patch": "@@ -69,7 +69,7 @@\n  * @author Phil Steitz\n  * @author Matthew Hawthorne\n  * @since 2.0\n- * @version $Id: NumberUtils.java,v 1.3 2003/07/14 22:25:05 bayard Exp $\n+ * @version $Id: NumberUtils.java,v 1.4 2003/07/20 16:03:21 scolebourne Exp $\n  */\n public final class NumberUtils {\n     \n@@ -124,8 +124,10 @@ public NumberUtils() {\n     /**\n      * <p>Convert a <code>String</code> to an <code>int</code>, returning\n      * <code>zero</code> if the conversion fails.</p>\n+     *\n+     * <p>If the string is <code>null</code>, <code>zero</code> is returned.</p>\n      * \n-     * @param str  the string to convert\n+     * @param str  the string to convert, may be null\n      * @return the int represented by the string, or <code>zero</code> if\n      *  conversion fails\n      */\n@@ -136,8 +138,10 @@ public static int stringToInt(String str) {\n     /**\n      * <p>Convert a <code>String</code> to an <code>int</code>, returning a\n      * default value if the conversion fails.</p>\n+     *\n+     * <p>If the string is <code>null</code>, the default value is returned.</p>\n      * \n-     * @param str  the string to convert\n+     * @param str  the string to convert, may be null\n      * @param defaultValue  the default value\n      * @return the int represented by the string, or the default if conversion fails\n      */\n@@ -190,8 +194,8 @@ public static int stringToInt(String str, int defaultValue) {\n      *\n      * <p>First, the value is examined for a type qualifier on the end\n      * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts \n-     * trying to create succissively larger types from the type specified\n-     * until one is found that can hold the value.</p>\n+     * trying to create successively larger types from the type specified\n+     * until one is found that can represent the value.</p>\n      *\n      * <p>If a type specifier is not found, it will check for a decimal point\n      * and then try successively larger types from <code>Integer</code> to\n@@ -202,61 +206,66 @@ public static int stringToInt(String str, int defaultValue) {\n      * will be interpreted as a hexadecimal integer.  Values with leading\n      * <code>0</code>'s will not be interpreted as octal.</p>\n      *\n-     * @param val String containing a number\n+     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n+     *\n+     * <p>This method does not trim the input string, i.e., strings with leading\n+     * or trailing spaces will generate NumberFormatExceptions.</p>\n+     *\n+     * @param str  String containing a number, may be null\n      * @return Number created from the string\n      * @throws NumberFormatException if the value cannot be converted\n      */\n-    public static Number createNumber(String val) throws NumberFormatException {\n-        if (val == null) {\n+    public static Number createNumber(String str) throws NumberFormatException {\n+        if (str == null) {\n             return null;\n         }\n-        if (val.length() == 0) {\n+        if (str.length() == 0) {\n             throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n         }\n-        if (val.startsWith(\"--\")) {\n+        if (str.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear \n             // to be in specification of class. OS X Java parses it to \n             // a wrong value.\n             return null;\n         }\n-        if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n-            return createInteger(val);\n+        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n+            return createInteger(str);\n         }   \n-        char lastChar = val.charAt(val.length() - 1);\n+        char lastChar = str.charAt(str.length() - 1);\n         String mant;\n         String dec;\n         String exp;\n-        int decPos = val.indexOf('.');\n-        int expPos = val.indexOf('e') + val.indexOf('E') + 1;\n+        int decPos = str.indexOf('.');\n+        int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n \n         if (decPos > -1) {\n \n             if (expPos > -1) {\n                 if (expPos < decPos) {\n-                    throw new NumberFormatException(val + \" is not a valid number.\");\n+                    throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n-                dec = val.substring(decPos + 1, expPos);\n+                dec = str.substring(decPos + 1, expPos);\n             } else {\n-                dec = val.substring(decPos + 1);\n+                dec = str.substring(decPos + 1);\n             }\n-            mant = val.substring(0, decPos);\n+            mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = val.substring(0, expPos);\n+                mant = str.substring(0, expPos);\n             } else {\n-                mant = val;\n+                mant = str;\n             }\n             dec = null;\n         }\n         if (!Character.isDigit(lastChar)) {\n-            if (expPos > -1 && expPos < val.length() - 1) {\n-                exp = val.substring(expPos + 1, val.length() - 1);\n+            if (expPos > -1 && expPos < str.length() - 1) {\n+                exp = str.substring(expPos + 1, str.length() - 1);\n             } else {\n                 exp = null;\n             }\n             //Requesting a specific type..\n-            String numeric = val.substring(0, val.length() - 1);\n+            String numeric = str.substring(0, str.length() - 1);\n             boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n             switch (lastChar) {\n                 case 'l' :\n@@ -273,7 +282,7 @@ && isDigits(numeric.substring(1))\n                         return createBigInteger(numeric);\n \n                     }\n-                    throw new NumberFormatException(val + \" is not a valid number.\");\n+                    throw new NumberFormatException(str + \" is not a valid number.\");\n                 case 'f' :\n                 case 'F' :\n                     try {\n@@ -302,48 +311,48 @@ && isDigits(numeric.substring(1))\n                     }\n                     //Fall through\n                 default :\n-                    throw new NumberFormatException(val + \" is not a valid number.\");\n+                    throw new NumberFormatException(str + \" is not a valid number.\");\n \n             }\n         } else {\n             //User doesn't have a preference on the return type, so let's start\n             //small and go from there...\n-            if (expPos > -1 && expPos < val.length() - 1) {\n-                exp = val.substring(expPos + 1, val.length());\n+            if (expPos > -1 && expPos < str.length() - 1) {\n+                exp = str.substring(expPos + 1, str.length());\n             } else {\n                 exp = null;\n             }\n             if (dec == null && exp == null) {\n                 //Must be an int,long,bigint\n                 try {\n-                    return createInteger(val);\n+                    return createInteger(str);\n                 } catch (NumberFormatException nfe) {\n                 }\n                 try {\n-                    return createLong(val);\n+                    return createLong(str);\n                 } catch (NumberFormatException nfe) {\n                 }\n-                return createBigInteger(val);\n+                return createBigInteger(str);\n \n             } else {\n                 //Must be a float,double,BigDec\n                 boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n                 try {\n-                    Float f = createFloat(val);\n+                    Float f = createFloat(str);\n                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                         return f;\n                     }\n                 } catch (NumberFormatException nfe) {\n                 }\n                 try {\n-                    Double d = createDouble(val);\n+                    Double d = createDouble(str);\n                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                         return d;\n                     }\n                 } catch (NumberFormatException nfe) {\n                 }\n \n-                return createBigDecimal(val);\n+                return createBigDecimal(str);\n \n             }\n         }\n@@ -354,89 +363,119 @@ && isDigits(numeric.substring(1))\n      *\n      * <p>Returns <code>true</code> if s is <code>null</code>.</p>\n      * \n-     * @param s the String to check\n+     * @param str  the String to check\n      * @return if it is all zeros or <code>null</code>\n      */\n-    private static boolean isAllZeros(String s) {\n-        if (s == null) {\n+    private static boolean isAllZeros(String str) {\n+        if (str == null) {\n             return true;\n         }\n-        for (int i = s.length() - 1; i >= 0; i--) {\n-            if (s.charAt(i) != '0') {\n+        for (int i = str.length() - 1; i >= 0; i--) {\n+            if (str.charAt(i) != '0') {\n                 return false;\n             }\n         }\n-        return s.length() > 0;\n+        return str.length() > 0;\n     }\n \n     //-----------------------------------------------------------------------\n     /**\n      * <p>Convert a <code>String</code> to a <code>Float</code>.</p>\n+     *\n+     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n      * \n-     * @param val  a <code>String</code> to convert\n+     * @param str  a <code>String</code> to convert, may be null\n      * @return converted <code>Float</code>\n      * @throws NumberFormatException if the value cannot be converted\n      */\n-    public static Float createFloat(String val) {\n-        return Float.valueOf(val);\n+    public static Float createFloat(String str) {\n+        if (str == null) {\n+            return null;\n+        }\n+        return Float.valueOf(str);\n     }\n \n     /**\n      * <p>Convert a <code>String</code> to a <code>Double</code>.</p>\n      * \n-     * @param val  a <code>String</code> to convert\n+     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n+     *\n+     * @param str  a <code>String</code> to convert, may be null\n      * @return converted <code>Double</code>\n      * @throws NumberFormatException if the value cannot be converted\n      */\n-    public static Double createDouble(String val) {\n-        return Double.valueOf(val);\n+    public static Double createDouble(String str) {\n+        if (str == null) {\n+            return null;\n+        }\n+        return Double.valueOf(str);\n     }\n \n     /**\n      * <p>Convert a <code>String</code> to a <code>Integer</code>, handling\n      * hex and octal notations.</p>\n+     *\n+     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n      * \n-     * @param val  a <code>String</code> to convert\n+     * @param str  a <code>String</code> to convert, may be null\n      * @return converted <code>Integer</code>\n      * @throws NumberFormatException if the value cannot be converted\n      */\n-    public static Integer createInteger(String val) {\n+    public static Integer createInteger(String str) {\n         // decode() handles 0xAABD and 0777 (hex and octal) as well.\n-        return Integer.decode(val);\n+        if (str == null) {\n+            return null;\n+        }\n+        return Integer.decode(str);\n     }\n \n     /**\n      * <p>Convert a <code>String</code> to a <code>Long</code>.</p>\n      * \n-     * @param val  a <code>String</code> to convert\n+     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n+     *\n+     * @param str  a <code>String</code> to convert, may be null\n      * @return converted <code>Long</code>\n      * @throws NumberFormatException if the value cannot be converted\n      */\n-    public static Long createLong(String val) {\n-        return Long.valueOf(val);\n+    public static Long createLong(String str) {\n+        if (str == null) {\n+            return null;\n+        }\n+        return Long.valueOf(str);\n     }\n \n     /**\n      * <p>Convert a <code>String</code> to a <code>BigInteger</code>.</p>\n+     *\n+     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n      * \n-     * @param val  a <code>String</code> to convert\n+     * @param str  a <code>String</code> to convert, may be null\n      * @return converted <code>BigInteger</code>\n      * @throws NumberFormatException if the value cannot be converted\n      */\n-    public static BigInteger createBigInteger(String val) {\n-        BigInteger bi = new BigInteger(val);\n+    public static BigInteger createBigInteger(String str) {\n+        if (str == null) {\n+            return null;\n+        }\n+        BigInteger bi = new BigInteger(str);\n         return bi;\n     }\n \n     /**\n      * <p>Convert a <code>String</code> to a <code>BigDecimal</code>.</p>\n      * \n-     * @param val  a <code>String</code> to convert\n+     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n+     *\n+     * @param str  a <code>String</code> to convert, may be null\n      * @return converted <code>BigDecimal</code>\n      * @throws NumberFormatException if the value cannot be converted\n      */\n-    public static BigDecimal createBigDecimal(String val) {\n-        BigDecimal bd = new BigDecimal(val);\n+    public static BigDecimal createBigDecimal(String str) {\n+        if (str == null) {\n+            return null;\n+        }\n+        BigDecimal bd = new BigDecimal(str);\n         return bd;\n     }\n \n@@ -445,7 +484,7 @@ public static BigDecimal createBigDecimal(String val) {\n     /**\n      * <p>Returns the minimum value in an array.</p>\n      * \n-     * @param array  an array\n+     * @param array  an array, must not be null or empty\n      * @return the minimum value in the array\n      * @throws NullArgumentException if <code>array</code> is <code>null</code>\n      * @throws IllegalArgumentException if <code>array</code> is empty\n@@ -472,7 +511,7 @@ public static long min(long[] array) {\n     /**\n      * <p>Returns the minimum value in an array.</p>\n      * \n-     * @param array  an array\n+     * @param array  an array, must not be null or empty\n      * @return the minimum value in the array\n      * @throws NullArgumentException if <code>array</code> is <code>null</code>\n      * @throws IllegalArgumentException if <code>array</code> is empty\n@@ -499,7 +538,7 @@ public static int min(int[] array) {\n     /**\n      * <p>Returns the minimum value in an array.</p>\n      * \n-     * @param array  an array\n+     * @param array  an array, must not be null or empty\n      * @return the minimum value in the array\n      * @throws NullArgumentException if <code>array</code> is <code>null</code>\n      * @throws IllegalArgumentException if <code>array</code> is empty\n@@ -526,7 +565,7 @@ public static short min(short[] array) {\n      /**\n      * <p>Returns the minimum value in an array.</p>\n      * \n-     * @param array  an array\n+     * @param array  an array, must not be null or empty\n      * @return the minimum value in the array\n      * @throws NullArgumentException if <code>array</code> is <code>null</code>\n      * @throws IllegalArgumentException if <code>array</code> is empty\n@@ -553,7 +592,7 @@ public static double min(double[] array) {\n     /**\n      * <p>Returns the minimum value in an array.</p>\n      * \n-     * @param array  an array\n+     * @param array  an array, must not be null or empty\n      * @return the minimum value in the array\n      * @throws NullArgumentException if <code>array</code> is <code>null</code>\n      * @throws IllegalArgumentException if <code>array</code> is empty\n@@ -582,7 +621,7 @@ public static float min(float[] array) {\n     /**\n      * <p>Returns the maximum value in an array.</p>\n      * \n-     * @param array  an array\n+     * @param array  an array, must not be null or empty\n      * @return the minimum value in the array\n      * @throws NullArgumentException if <code>array</code> is <code>null</code>\n      * @throws IllegalArgumentException if <code>array</code> is empty\n@@ -609,7 +648,7 @@ public static long max(long[] array) {\n     /**\n      * <p>Returns the maximum value in an array.</p>\n      * \n-     * @param array  an array\n+     * @param array  an array, must not be null or empty\n      * @return the minimum value in the array\n      * @throws NullArgumentException if <code>array</code> is <code>null</code>\n      * @throws IllegalArgumentException if <code>array</code> is empty\n@@ -636,7 +675,7 @@ public static int max(int[] array) {\n     /**\n      * <p>Returns the maximum value in an array.</p>\n      * \n-     * @param array  an array\n+     * @param array  an array, must not be null or empty\n      * @return the minimum value in the array\n      * @throws NullArgumentException if <code>array</code> is <code>null</code>\n      * @throws IllegalArgumentException if <code>array</code> is empty\n@@ -663,7 +702,7 @@ public static short max(short[] array) {\n     /**\n      * <p>Returns the maximum value in an array.</p>\n      * \n-     * @param array  an array\n+     * @param array  an array, must not be null or empty\n      * @return the minimum value in the array\n      * @throws NullArgumentException if <code>array</code> is <code>null</code>\n      * @throws IllegalArgumentException if <code>array</code> is empty\n@@ -690,7 +729,7 @@ public static double max(double[] array) {\n     /**\n      * <p>Returns the maximum value in an array.</p>\n      * \n-     * @param array  an array\n+     * @param array  an array, must not be null or empty\n      * @return the minimum value in the array\n      * @throws NullArgumentException if <code>array</code> is <code>null</code>\n      * @throws IllegalArgumentException if <code>array</code> is empty\n",
      "files_name_in_blame_commit": [
        "NumberUtils.java",
        "NumberUtilsTest.java"
      ]
    }
  },
  "commits_modify_file_before_fix": {
    "size": 66
  }
}