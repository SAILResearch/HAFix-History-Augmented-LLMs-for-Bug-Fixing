{
  "id": "36",
  "blame_commit": {
    "commit": {
      "commit_id": "e17d5c54eebc1dace8466d08907995041c30e04e",
      "commit_message": "[CODEC-59] Add methods to Base64 which work with String instead of byte[]. Patch applied with one added test code line to keep line code coverage at 100%. Branch coverage up to 92% from 91%.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/codec/trunk@799800 13f79535-47bb-0310-9956-ffa450edef68",
      "commit_author": "Gary D. Gregory",
      "commit_date": "2009-08-01 04:15:09",
      "commit_parent": "9f243610fca08de0998ae66c55bb79eed3c45720"
    },
    "function": {
      "function_name": "encodeBase64String",
      "function_code_before": "",
      "function_code_after": "public static String encodeBase64String(byte[] binaryData) {\n    return StringUtils.newStringUtf8(encodeBase64(binaryData, true));\n}",
      "function_before_start_line": "",
      "function_before_end_line": "",
      "function_after_start_line": 644,
      "function_after_end_line": 646,
      "function_before_token_count": 0,
      "function_after_token_count": 22,
      "functions_name_modified_file": [
        "encodeBase64",
        "resizeBuffer",
        "setInitialBuffer",
        "decodeInteger",
        "encodeBase64URLSafe",
        "encodeBase64String",
        "decode",
        "isUrlSafe",
        "getEncodeLength",
        "containsBase64Byte",
        "encodeBase64URLSafeString",
        "decodeBase64",
        "encodeToString",
        "avail",
        "isArrayByteBase64",
        "Base64",
        "isBase64",
        "readResults",
        "isWhiteSpace",
        "encodeInteger",
        "toIntegerBytes",
        "hasData",
        "encode",
        "encodeBase64Chunked",
        "discardWhitespace",
        "reset"
      ],
      "functions_name_all_files": [
        "toString",
        "decode",
        "testTripletsChunked",
        "testIgnoringNonBase64InDecode",
        "testTriplets",
        "getBytesUsAscii",
        "testCodeInteger4",
        "encodeToString",
        "isArrayByteBase64",
        "newStringUsAscii",
        "getBytesIso8859_1",
        "testUUID",
        "isWhiteSpace",
        "getRandom",
        "newStringUtf16Le",
        "testPairs",
        "encode",
        "testChunkedEncodeMultipleOf76",
        "resizeBuffer",
        "testDecodePadOnlyChunked",
        "decodeInteger",
        "encodeBase64URLSafe",
        "testDecodePadMarkerIndex3",
        "getBytesUtf16",
        "testCodeIntegerEdgeCases",
        "getEncodeLength",
        "containsBase64Byte",
        "testKnownEncodings",
        "avail",
        "Base64",
        "isBase64",
        "testObjectDecodeWithValidParameter",
        "testConstructors",
        "testBase64",
        "testConstructor_Int_ByteArray_Boolean",
        "testNonBase64Test",
        "testSingletons",
        "newStringUtf16Be",
        "testIsArrayByteBase64",
        "testDecodeWithWhitespace",
        "newStringIso8859_1",
        "testDecodePadMarkerIndex2",
        "getSupportedBytes",
        "testDiscardWhitespace",
        "testCodeInteger3",
        "testByteToStringVariations",
        "getBytesUtf16Le",
        "isUrlSafe",
        "testRfc2045Section2Dot1CrLfDefinition",
        "testConstructor_Int_ByteArray_Boolean_UrlSafe",
        "testEmptyBase64",
        "encodeBase64URLSafeString",
        "testObjectEncodeWithValidParameter",
        "newStringUtf16",
        "testObjectEncodeWithInvalidParameter",
        "readResults",
        "Base64Test",
        "testStringToByteVariations",
        "testSingletonsChunked",
        "toIntegerBytes",
        "testEncodeDecodeRandom",
        "newStringUtf8",
        "newString",
        "testKnownDecodings",
        "newIllegalStateException",
        "testEncodeOverMaxSize",
        "encodeBase64",
        "setInitialBuffer",
        "testObjectDecodeWithInvalidParameter",
        "encodeBase64String",
        "testIsUrlSafe",
        "testCodeIntegerNull",
        "decodeBase64",
        "testEncodeDecodeSmall",
        "testRfc2045Section6Dot8ChunkSizeDefinition",
        "testUrlSafe",
        "testDecodePadOnly",
        "getBytesUtf8",
        "testCodec68",
        "encodeInteger",
        "getBytesUtf16Be",
        "hasData",
        "encodeBase64Chunked",
        "testCodeInteger2",
        "discardWhitespace",
        "testCodeInteger1",
        "reset"
      ],
      "functions_name_co_evolved_modified_file": [
        "encode",
        "decodeBase64",
        "encodeBase64URLSafeString",
        "encodeToString",
        "encodeBase64String",
        "decode",
        "reset"
      ],
      "functions_name_co_evolved_all_files": [
        "testBase64",
        "testEmptyBase64",
        "testByteToStringVariations",
        "newString",
        "encode",
        "testStringToByteVariations",
        "decodeBase64",
        "encodeBase64URLSafeString",
        "encodeToString",
        "testObjectDecodeWithInvalidParameter",
        "encodeBase64String",
        "decode",
        "reset",
        "getSupportedBytes"
      ]
    },
    "file": {
      "file_name": "Base64.java",
      "file_nloc": 417,
      "file_complexity": 121,
      "file_token_count": 3398,
      "file_before": "",
      "file_after": "",
      "file_patch": "@@ -540,7 +540,7 @@ public class Base64 implements BinaryEncoder, BinaryDecoder {\n             }\n             byte b = in[inPos++];\n             if (b == PAD) {\n-                // WE'RE DONE!!!!\n+                // We're done.\n                 eof = true;\n                 break;\n             } else {\n@@ -628,25 +628,49 @@ public class Base64 implements BinaryEncoder, BinaryDecoder {\n      * \n      * @param binaryData\n      *            binary data to encode\n-     * @return Base64 characters\n+     * @return byte[] containing Base64 characters in their UTF-8 representation.\n      */\n     public static byte[] encodeBase64(byte[] binaryData) {\n         return encodeBase64(binaryData, false);\n     }\n \n+    /**\n+     * Encodes binary data using the base64 algorithm into 76 character blocks separated by CRLF.\n+     *\n+     * @param binaryData\n+     *            binary data to encode\n+     * @return String containing Base64 characters.\n+     */    \n+    public static String encodeBase64String(byte[] binaryData) {\n+        return StringUtils.newStringUtf8(encodeBase64(binaryData, true));\n+    }\n+    \n     /**\n      * Encodes binary data using a URL-safe variation of the base64 algorithm but does not chunk the output. The\n      * url-safe variation emits - and _ instead of + and / characters.\n      * \n      * @param binaryData\n      *            binary data to encode\n-     * @return Base64 characters\n+     * @return byte[] containing Base64 characters in their UTF-8 representation.\n      * @since 1.4\n      */\n     public static byte[] encodeBase64URLSafe(byte[] binaryData) {\n         return encodeBase64(binaryData, false, true);\n     }\n \n+    /**\n+     * Encodes binary data using a URL-safe variation of the base64 algorithm but does not chunk the output. The\n+     * url-safe variation emits - and _ instead of + and / characters.\n+     *\n+     * @param binaryData\n+     *            binary data to encode\n+     * @return String containing Base64 characters\n+     * @since 1.4\n+     */    \n+    public static String encodeBase64URLSafeString(byte[] binaryData) {\n+        return StringUtils.newStringUtf8(encodeBase64(binaryData, false, true));\n+    }    \n+\n     /**\n      * Encodes binary data using the base64 algorithm and chunks the encoded output into 76 character blocks\n      * \n@@ -660,22 +684,35 @@ public class Base64 implements BinaryEncoder, BinaryDecoder {\n \n     /**\n      * Decodes an Object using the base64 algorithm. This method is provided in order to satisfy the requirements of the\n-     * Decoder interface, and will throw a DecoderException if the supplied object is not of type byte[].\n+     * Decoder interface, and will throw a DecoderException if the supplied object is not of type byte[] or String.\n      * \n      * @param pObject\n      *            Object to decode\n-     * @return An object (of type byte[]) containing the binary data which corresponds to the byte[] supplied.\n+     * @return An object (of type byte[]) containing the binary data which corresponds to the byte[] or String supplied.\n      * @throws DecoderException\n      *             if the parameter supplied is not of type byte[]\n      */\n-    public Object decode(Object pObject) throws DecoderException {\n+    public Object decode(Object pObject) throws DecoderException {        \n         if (pObject instanceof byte[]) {\n             return decode((byte[]) pObject);\n+        } else if (pObject instanceof String) {\n+            return decode((String) pObject);\n         } else {\n-            throw new DecoderException(\"Parameter supplied to Base64 decode is not a byte[]\");\n+            throw new DecoderException(\"Parameter supplied to Base64 decode is not a byte[] or a String\");\n         }\n     }\n \n+    /**\n+     * Decodes a String containing containing characters in the Base64 alphabet.\n+     *\n+     * @param pArray\n+     *            A String containing Base64 character data\n+     * @return a byte array containing binary data\n+     */\n+    public byte[] decode(String pArray) {\n+        return decode(StringUtils.getBytesUtf8(pArray));\n+    }\n+\n     /**\n      * Decodes a byte[] containing containing characters in the Base64 alphabet.\n      * \n@@ -684,6 +721,7 @@ public class Base64 implements BinaryEncoder, BinaryDecoder {\n      * @return a byte array containing binary data\n      */\n     public byte[] decode(byte[] pArray) {\n+        reset();\n         if (pArray == null || pArray.length == 0) {\n             return pArray;\n         }\n@@ -770,6 +808,17 @@ public class Base64 implements BinaryEncoder, BinaryDecoder {\n         return b64.encode(binaryData);\n     }\n \n+    /**\n+     * Decodes a Base64 String into octets\n+     *\n+     * @param base64String\n+     *            String containing Base64 data\n+     * @return Array containing decoded data.\n+     */\n+    public static byte[] decodeBase64(String base64String) {\n+        return new Base64().decode(base64String);\n+    }\n+\n     /**\n      * Decodes Base64 data into octets\n      * \n@@ -778,8 +827,7 @@ public class Base64 implements BinaryEncoder, BinaryDecoder {\n      * @return Array containing decoded data.\n      */\n     public static byte[] decodeBase64(byte[] base64Data) {\n-        Base64 b64 = new Base64();\n-        return b64.decode(base64Data);\n+        return new Base64().decode(base64Data);\n     }\n \n     /**\n@@ -847,6 +895,17 @@ public class Base64 implements BinaryEncoder, BinaryDecoder {\n         return encode((byte[]) pObject);\n     }\n \n+    /**\n+     * Encodes a byte[] containing binary data, into a String containing characters in the Base64 alphabet.\n+     *\n+     * @param pArray\n+     *            a byte array containing binary data\n+     * @return A String containing only Base64 character data\n+     */    \n+    public String encodeToString(byte[] pArray) {\n+        return StringUtils.newStringUtf8(encode(pArray));\n+    }\n+\n     /**\n      * Encodes a byte[] containing binary data, into a byte[] containing characters in the Base64 alphabet.\n      * \n@@ -855,6 +914,10 @@ public class Base64 implements BinaryEncoder, BinaryDecoder {\n      * @return A byte array containing only Base64 character data\n      */\n     public byte[] encode(byte[] pArray) {\n+        reset();        \n+        if (pArray == null || pArray.length == 0) {\n+            return pArray;\n+        }\n         long len = getEncodeLength(pArray, lineLength, lineSeparator);\n         byte[] buf = new byte[(int) len];\n         setInitialBuffer(buf, 0, buf.length);\n@@ -964,4 +1027,17 @@ public class Base64 implements BinaryEncoder, BinaryDecoder {\n         System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n         return resizedBytes;\n     }\n+\n+    /**\n+     * Resets this Base64 object to its initial newly constructed state.\n+     */\n+    private void reset() {\n+        buffer = null;\n+        pos = 0;\n+        readPos = 0;\n+        currentLinePos = 0;\n+        modulus = 0;\n+        eof = false;\n+    }\n+\n }\n",
      "files_name_in_blame_commit": [
        "Base64.java",
        "StringUtils.java",
        "Base64Test.java"
      ]
    }
  },
  "commits_modify_file_before_fix": {
    "size": 66
  }
}