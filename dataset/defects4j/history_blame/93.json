{
  "id": "93",
  "blame_commit": {
    "commit": {
      "commit_id": "76f73733677c71fbf53b7d73c149001d7eead327",
      "commit_message": "Added FieldElement.negate() and FieldElement.reciprocal() (MATH-686).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1180312 13f79535-47bb-0310-9956-ffa450edef68",
      "commit_author": "Sebastien Brisard",
      "commit_date": "2011-10-08 04:21:00",
      "commit_parent": "d0633b818e5f19812ee4a8ee1992b96d3516c60b"
    },
    "function": {
      "function_name": "reciprocal",
      "function_code_before": "",
      "function_code_after": "public Complex reciprocal() {\n    if (isNaN) {\n        return NaN;\n    }\n\n    if (real == 0.0 && imaginary == 0.0) {\n        return NaN;\n    }\n\n    if (isInfinite) {\n        return ZERO;\n    }\n\n    if (FastMath.abs(real) < FastMath.abs(imaginary)) {\n        double q = real / imaginary;\n        double scale = 1. / (real * q + imaginary);\n        return createComplex(scale * q, -scale);\n    } else {\n        double q = imaginary / real;\n        double scale = 1. / (imaginary * q + real);\n        return createComplex(scale, -scale * q);\n    }\n}",
      "function_before_start_line": "",
      "function_before_end_line": "",
      "function_after_start_line": 298,
      "function_after_end_line": 320,
      "function_before_token_count": 0,
      "function_after_token_count": 127,
      "functions_name_modified_file": [
        "reciprocal",
        "getArgument",
        "add",
        "cos",
        "toString",
        "readResolve",
        "valueOf",
        "conjugate",
        "hashCode",
        "isInfinite",
        "tan",
        "cosh",
        "isNaN",
        "Complex",
        "sqrt",
        "divide",
        "tanh",
        "atan",
        "asin",
        "abs",
        "getReal",
        "createComplex",
        "sqrt1z",
        "getImaginary",
        "sin",
        "log",
        "negate",
        "pow",
        "sinh",
        "subtract",
        "equals",
        "multiply",
        "getField",
        "exp",
        "nthRoot",
        "acos"
      ],
      "functions_name_all_files": [
        "getTwo",
        "strictlyNegative",
        "toString",
        "testPow",
        "classify",
        "testReciprocalReal",
        "testSerial",
        "valueOf",
        "testEqualsSame",
        "isInfinite",
        "testEqualsTrue",
        "testEqualsNull",
        "testDivideNaNInf",
        "testEqualsRealDifference",
        "compareTo",
        "testMultiplyInfInf",
        "testSqrt1z",
        "testTan",
        "testPowNaNExponent",
        "testSqrtInf",
        "testGetArgumentNaN",
        "testAsinNaN",
        "testpowNull",
        "testScalarPow",
        "testScalarPowInf",
        "testTanh",
        "testAbsNaN",
        "setUp",
        "testDoubleValue",
        "strictlyPositive",
        "testSqrtImaginaryNegative",
        "testMultiplyNaNInf",
        "remainder",
        "testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty",
        "trap",
        "testDivide",
        "testIntConstructor",
        "getReal",
        "testAtanInf",
        "testSubtract",
        "sqrt1z",
        "unequal",
        "toSplitDouble",
        "testExp",
        "testPowInf",
        "getRoundingMode",
        "testSinhInf",
        "testIntValue",
        "testAddInf",
        "negate",
        "testToString",
        "Dfp",
        "copysign",
        "multiply",
        "testDivideInf",
        "testPowZero",
        "dfp2string",
        "testMultiply",
        "testSqrtRealNegative",
        "BigReal",
        "tearDown",
        "testPower10K",
        "testNthRoot_cornercase_thirdRoot_realPartZero",
        "testEqualsAndHashCode",
        "log10",
        "bigDecimalValue",
        "testNthRoot_normal_fourthRoot",
        "testCompareTo",
        "testAtan",
        "testTanhCritical",
        "testLogZero",
        "testScalarSubtract",
        "testLongConstructor",
        "testReciprocalNaN",
        "testLogNaN",
        "testIssue567",
        "setScale",
        "testEqualsClass",
        "testCoshInf",
        "log10K",
        "testIsZero",
        "testMath221",
        "divide",
        "testSqrt",
        "atan",
        "trunc",
        "testPower10",
        "testSqrtRealPositive",
        "abs",
        "getScale",
        "testPowNaNBase",
        "testTanhInf",
        "getImaginary",
        "testSinh",
        "testLog10K",
        "testScalarSubtractNaN",
        "log",
        "testHashCode",
        "testSin",
        "sinh",
        "isZero",
        "testDivideZeroZero",
        "testSubtractNaN",
        "equals",
        "testSqrtImaginaryZero",
        "testAsinInf",
        "dfp2sci",
        "newInstance",
        "testLog10",
        "testDivideReal",
        "testScalarSubtractInf",
        "power10K",
        "testAcosNaN",
        "testDivideZero",
        "testExpNaN",
        "testScalarPowNaNExponent",
        "testCosNaN",
        "add",
        "cos",
        "power10",
        "testConjugateInfiinite",
        "testTanNaN",
        "testNthRoot_cornercase_NAN_Inf",
        "testByteConstructor",
        "testSignPredicates",
        "testTanhNaN",
        "negativeOrNull",
        "testTanInf",
        "testAbs",
        "testRound",
        "testAcos",
        "doubleValue",
        "shiftLeft",
        "tan",
        "testEqualsNaN",
        "dotrap",
        "testScalarAddNaN",
        "testRemainder",
        "cosh",
        "testScalarAddInf",
        "isNaN",
        "testFloor",
        "testSinNaN",
        "testReciprocalInf",
        "complement",
        "sqrt",
        "testNegateNaN",
        "testExpInf",
        "tanh",
        "testScalarAdd",
        "align",
        "testDivideInt",
        "testGetArgument",
        "testTanCritical",
        "rint",
        "getRadixDigits",
        "testConstructor",
        "testSqrtRealZero",
        "sin",
        "TestComplex",
        "testConjugate",
        "lessThan",
        "testScalarPowZero",
        "testCoshNaN",
        "testLog",
        "pow",
        "shiftRight",
        "subtract",
        "testCeil",
        "test",
        "testSinhNaN",
        "ceil",
        "getField",
        "testSqrtNaN",
        "intValue",
        "nthRoot",
        "greaterThan",
        "reciprocal",
        "compare",
        "testSubtractInf",
        "getArgument",
        "testNextAfter",
        "testReciprocalImaginary",
        "testScalarMultiplyNaN",
        "testCosInf",
        "testRint",
        "testAddNaN",
        "cmptst",
        "getZero",
        "testAsin",
        "testScalarPowNaNBase",
        "readResolve",
        "testBigDecimalValue",
        "conjugate",
        "testDivideNaN",
        "hashCode",
        "testNegate",
        "testScalarDivide",
        "testReciprocalZero",
        "testScalarMultiplyInf",
        "testCos",
        "testMultiplyNaN",
        "positiveOrNull",
        "round",
        "testDivideImaginary",
        "testReciprocal",
        "testSqrt1zNaN",
        "testSinInf",
        "testScalarDivideZero",
        "testConstructorNaN",
        "getOne",
        "Complex",
        "testAdd",
        "testNthRoot_normal_thirdRoot",
        "nextAfter",
        "testScalarDivideInf",
        "toDouble",
        "asin",
        "floor",
        "testScalarMultiply",
        "testEqualsImaginaryDifference",
        "testLogInf",
        "createComplex",
        "testAtanNaN",
        "testAcosInf",
        "testGetArgumentInf",
        "testCompare",
        "testScalarDivideNaN",
        "testAbsInfinite",
        "testAtanI",
        "testCosh",
        "testSqrtPolar",
        "setRoundingMode",
        "testConjugateNaN",
        "exp",
        "testCopySign",
        "acos"
      ],
      "functions_name_co_evolved_modified_file": [
        "reciprocal"
      ],
      "functions_name_co_evolved_all_files": [
        "reciprocal",
        "testNextAfter",
        "testReciprocalImaginary",
        "testReciprocalReal",
        "testSerial",
        "testBigDecimalValue",
        "testNegate",
        "testReciprocalZero",
        "testReciprocal",
        "testReciprocalNaN",
        "testReciprocalInf",
        "testAdd",
        "testDivideInt",
        "testDivide",
        "testConstructor",
        "testSubtract",
        "testCompare",
        "negate",
        "test",
        "testMultiply"
      ]
    },
    "file": {
      "file_name": "Complex.java",
      "file_nloc": 391,
      "file_complexity": 120,
      "file_token_count": 2579,
      "file_before": "",
      "file_after": "",
      "file_patch": "@@ -294,6 +294,31 @@ public class Complex implements FieldElement<Complex>, Serializable  {\n                              imaginary  / divisor);\n     }\n \n+    /** {@inheritDoc} */\n+    public Complex reciprocal() {\n+        if (isNaN) {\n+            return NaN;\n+        }\n+\n+        if (real == 0.0 && imaginary == 0.0) {\n+            return NaN;\n+        }\n+\n+        if (isInfinite) {\n+            return ZERO;\n+        }\n+\n+        if (FastMath.abs(real) < FastMath.abs(imaginary)) {\n+            double q = real / imaginary;\n+            double scale = 1. / (real * q + imaginary);\n+            return createComplex(scale * q, -scale);\n+        } else {\n+            double q = imaginary / real;\n+            double scale = 1. / (imaginary * q + real);\n+            return createComplex(scale, -scale * q);\n+        }\n+    }\n+\n     /**\n      * Test for the equality of two Complex objects.\n      * If both the real and imaginary parts of two complex numbers\n@@ -1192,4 +1217,5 @@ public class Complex implements FieldElement<Complex>, Serializable  {\n     public String toString() {\n         return \"(\" + real + \", \" + imaginary + \")\";\n     }\n+\n }\n",
      "files_name_in_blame_commit": [
        "Dfp.java",
        "BigRealTest.java",
        "DfpTest.java",
        "BigReal.java",
        "FieldElement.java",
        "Complex.java",
        "ComplexTest.java"
      ]
    }
  },
  "commits_modify_file_before_fix": {
    "size": 71
  }
}