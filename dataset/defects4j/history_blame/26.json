{
  "id": "26",
  "blame_commit": {
    "commit": {
      "commit_id": "5a3b4cb6b7e816aacd0ffd4c71e23da949fe360d",
      "commit_message": "improve validation for types that are resolved later.\n\nR=johnlenz\nDELTA=192  (166 added, 1 deleted, 25 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION=337976\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@486 b0f006be-c8cd-11de-a2e8-8d36a3108c74",
      "commit_author": "nicksantos@google.com",
      "commit_date": "2010-10-13 21:23:13",
      "commit_parent": "9d1e18e87a41f2a610ed70f3a1d57abbce7a1cd7"
    },
    "function": {
      "function_name": "replace",
      "function_code_before": "void replace() {\n  if (firstNode == null) {\n    // Don't touch the base case ('goog').\n    replacementNode = candidateDefinition;\n    return;\n  }\n\n  // Handle the case where there is a duplicate definition for an explicitly\n  // provided symbol.\n  if (candidateDefinition != null && explicitNode != null) {\n    explicitNode.detachFromParent();\n    compiler.reportCodeChange();\n\n    // Does this need a VAR keyword?\n    replacementNode = candidateDefinition;\n    if (NodeUtil.isExpressionNode(candidateDefinition)) {\n      candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);\n      Node assignNode = candidateDefinition.getFirstChild();\n      Node nameNode = assignNode.getFirstChild();\n      if (nameNode.getType() == Token.NAME) {\n        // Need to convert this assign to a var declaration.\n        Node valueNode = nameNode.getNext();\n        assignNode.removeChild(nameNode);\n        assignNode.removeChild(valueNode);\n        nameNode.addChildToFront(valueNode);\n        Node varNode = new Node(Token.VAR, nameNode);\n        varNode.copyInformationFrom(candidateDefinition);\n        candidateDefinition.getParent().replaceChild(\n            candidateDefinition, varNode);\n        nameNode.setJSDocInfo(assignNode.getJSDocInfo());\n        compiler.reportCodeChange();\n        replacementNode = varNode;\n      }\n    }\n  } else {\n    // Handle the case where there's not a duplicate definition.\n    replacementNode = createDeclarationNode();\n    if (firstModule == minimumModule) {\n      firstNode.getParent().addChildBefore(replacementNode, firstNode);\n    } else {\n      // In this case, the name was implicitly provided by two independent\n      // modules. We need to move this code up to a common module.\n      int indexOfDot = namespace.lastIndexOf('.');\n      if (indexOfDot == -1) {\n        // Any old place is fine.\n        compiler.getNodeForCodeInsertion(minimumModule)\n            .addChildToBack(replacementNode);\n      } else {\n        // Add it after the parent namespace.\n        ProvidedName parentName =\n            providedNames.get(namespace.substring(0, indexOfDot));\n        Preconditions.checkNotNull(parentName);\n        Preconditions.checkNotNull(parentName.replacementNode);\n        parentName.replacementNode.getParent().addChildAfter(\n            replacementNode, parentName.replacementNode);\n      }\n    }\n    if (explicitNode != null) {\n      explicitNode.detachFromParent();\n    }\n    compiler.reportCodeChange();\n  }\n}",
      "function_code_after": "void replace() {\n  if (firstNode == null) {\n    // Don't touch the base case ('goog').\n    replacementNode = candidateDefinition;\n    return;\n  }\n\n  // Handle the case where there is a duplicate definition for an explicitly\n  // provided symbol.\n  if (candidateDefinition != null && explicitNode != null) {\n    explicitNode.detachFromParent();\n    compiler.reportCodeChange();\n\n    // Does this need a VAR keyword?\n    replacementNode = candidateDefinition;\n    if (NodeUtil.isExpressionNode(candidateDefinition)) {\n      candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);\n      Node assignNode = candidateDefinition.getFirstChild();\n      Node nameNode = assignNode.getFirstChild();\n      if (nameNode.getType() == Token.NAME) {\n        // Need to convert this assign to a var declaration.\n        Node valueNode = nameNode.getNext();\n        assignNode.removeChild(nameNode);\n        assignNode.removeChild(valueNode);\n        nameNode.addChildToFront(valueNode);\n        Node varNode = new Node(Token.VAR, nameNode);\n        varNode.copyInformationFrom(candidateDefinition);\n        candidateDefinition.getParent().replaceChild(\n            candidateDefinition, varNode);\n        nameNode.setJSDocInfo(assignNode.getJSDocInfo());\n        compiler.reportCodeChange();\n        replacementNode = varNode;\n      }\n    }\n  } else {\n    // Handle the case where there's not a duplicate definition.\n    replacementNode = createDeclarationNode();\n    if (firstModule == minimumModule) {\n      firstNode.getParent().addChildBefore(replacementNode, firstNode);\n    } else {\n      // In this case, the name was implicitly provided by two independent\n      // modules. We need to move this code up to a common module.\n      int indexOfDot = namespace.indexOf('.');\n      if (indexOfDot == -1) {\n        // Any old place is fine.\n        compiler.getNodeForCodeInsertion(minimumModule)\n            .addChildToBack(replacementNode);\n      } else {\n        // Add it after the parent namespace.\n        ProvidedName parentName =\n            providedNames.get(namespace.substring(0, indexOfDot));\n        Preconditions.checkNotNull(parentName);\n        Preconditions.checkNotNull(parentName.replacementNode);\n        parentName.replacementNode.getParent().addChildAfter(\n            replacementNode, parentName.replacementNode);\n      }\n    }\n    if (explicitNode != null) {\n      explicitNode.detachFromParent();\n    }\n    compiler.reportCodeChange();\n  }\n}",
      "function_before_start_line": 747,
      "function_before_end_line": 809,
      "function_after_start_line": 747,
      "function_after_end_line": 809,
      "function_before_token_count": 322,
      "function_after_token_count": 322,
      "functions_name_modified_file": [
        "reportBadBaseClassUse",
        "addDefinition",
        "registerAnyProvidedPrefixes",
        "UnrecognizedRequire",
        "createNamespaceLiteral",
        "trySimplifyNewDate",
        "processSetCssNameMapping",
        "ProcessClosurePrimitives",
        "getExportedVariableNames",
        "getEnclosingDeclNameNode",
        "process",
        "processRequireCall",
        "replace",
        "isNamespacePlaceholder",
        "updateMinimumModule",
        "visit",
        "verifyArgument",
        "processProvideCall",
        "processBaseClassCall",
        "handleCandidateProvideDefinition",
        "makeVarDeclNode",
        "makeAssignmentExprNode",
        "addProvide",
        "ProvidedName",
        "isExplicitlyProvided",
        "verifyProvide",
        "processProvideFromPreviousPass",
        "createDeclarationNode"
      ],
      "functions_name_all_files": [
        "testScoping9",
        "testBadTemplateType5",
        "handleTypeCycle",
        "testNew13",
        "testParameterizedObject4",
        "testAdd7",
        "testTwoSeparateFieldsTwoTypes",
        "testAdd21",
        "testBitOperation7",
        "testUnknownConstructorInstanceType1",
        "canBeCalled",
        "testDuplicateStaticPropertyDecl6",
        "testNoTypeCheck3",
        "testBitOperation2",
        "testOr5",
        "testName5",
        "testDeclareBuiltInConstructor",
        "testFunctionMasksVariableBug",
        "testRemovalMultipleAssignment1",
        "testExtendFunction2",
        "testMultipleDeclarationError2",
        "testEnum32",
        "testTypeof",
        "testTypeCheck20",
        "testConstructorAlias7",
        "testHookRestrictsType2",
        "testCallDateConstructorAsFunction",
        "fromCode",
        "testMissingProperty26",
        "testPropertyInference3",
        "testBooleanNodeFalse",
        "getOrCreateConstructor",
        "testInheritanceCheck6",
        "resolveInternal",
        "testTypeOfReduction9",
        "parseAndTypeCheckWithScope",
        "testSheqRefinedScope",
        "inferInheritance",
        "getCode",
        "testExternInterfaceUnionWithCtor",
        "testTypeCheckNoDowncastToNumber",
        "testInstanceOfReduction2",
        "testIn7",
        "testComparison9",
        "isCheckedUnknownType",
        "testComparison7",
        "testConstructorType5",
        "testGetTypedPercent3",
        "testGoodCrossModuleRequire1",
        "testInnerFunction1",
        "testComparison11",
        "testParameterizedArray2",
        "testDfa5",
        "testThis5",
        "testDefinePropertyOnNullableObject2",
        "testFunctionType",
        "inferReturnType",
        "testMismatchingOverridingInferredPropertyBeforeDeclaredProperty4",
        "testInterfaceInheritanceCheck4",
        "testInstanceof6",
        "testLateExtends",
        "testControlFlowRestrictsType3",
        "testParameterizedObject2",
        "testInterfaceAssignment12",
        "parseAndTypeCheck",
        "handleCandidateProvideDefinition",
        "inferParameterTypes",
        "getRegion",
        "testFunctionArguments5",
        "testGoodExtends11",
        "testPropAccess3",
        "testBug592170",
        "apply",
        "testBooleanReduction5",
        "testGoodExtends10",
        "testForwardTypeDeclaration4",
        "testFunctionArguments3",
        "testRequireOfAdditionalProvide",
        "testInstanceof2",
        "testHigherOrderFunctions4",
        "testReorderedProvides2",
        "mapToString",
        "testAnd6",
        "testOldTypeDef3",
        "testNativeCast1",
        "testVar7",
        "testMissingProperty21",
        "isNominalType",
        "testStubFunctionDeclaration6",
        "testGlobalThis6",
        "testImplicitProvideInIndependentModules",
        "testDuplicateStaticPropertyDecl2",
        "testTypeCheck8",
        "testFunctionInference11",
        "testThis1",
        "testResolutionViaRegistry5",
        "testSuperClassDefinedAfterSubClass2",
        "testDfa11",
        "testForwardPropertyReference",
        "registerAnyProvidedPrefixes",
        "testConstructorAlias10",
        "inferTemplateTypeName",
        "testVar6",
        "testDfa7",
        "testOptionalArgFunctionParam2",
        "testName3",
        "testScopedConstructors2",
        "testTypeCheck22",
        "testComparison5",
        "testImplicitAndExplicitProvide",
        "reportError",
        "testInstanceof1",
        "testEnum23",
        "testFunctionArguments2",
        "testEnum8",
        "testBug901455",
        "testInferredParam5",
        "testInheritanceCheck1",
        "testInterfaceAssignment4",
        "testInferredReturn7",
        "testNoPersistentTypeInferenceForObjectProperties",
        "testEnum26",
        "testTypeOfReduction4",
        "testFunctionArguments11",
        "testTypeInferenceWithCast1",
        "isArrayType",
        "testComplexNamespace",
        "testScoping10",
        "testTypeCheck9",
        "replace",
        "testNullOr",
        "testNativeCast4",
        "testTypeCheck4",
        "testSwitchCase3",
        "testAssignInference",
        "testNoTypeCheck9",
        "getTypedefType",
        "testClosureInherits",
        "testGoodExtends4",
        "verifyArgument",
        "testComparison2",
        "testCall5",
        "addParameter",
        "testCall8",
        "testBadTemplateType2",
        "testBadTemplateType1",
        "testMethodInference8",
        "testAdd9",
        "testNew12",
        "testEnum35",
        "testDfa13",
        "testOptionalArgFunctionReturn",
        "testAbstractMethodHandling3",
        "testName4",
        "testInheritanceCheck10_2",
        "testInvalidBase3",
        "resolve",
        "testGlobalThis3",
        "testFunctionInference14",
        "testAddingMethodsUsingPrototypeIdiomSimpleNamespace",
        "testEnum21",
        "testVar13",
        "testEnum6",
        "testName2",
        "testVar2",
        "testTypeOfReduction15",
        "testValidSetCssNameMapping",
        "testRequireOfBaseGoog",
        "testInferredParam6",
        "testVar14",
        "testAdd5",
        "testClosure2",
        "testNew16",
        "testInterfaceAssignment1",
        "testStubFunctionDeclaration3",
        "testEnum15",
        "getGreatestSubtype",
        "testNestedCasts",
        "testFunctionArguments15",
        "trySimplifyNewDate",
        "testInnerFunction2",
        "testDoubleNestedInterface",
        "testFunctionInference2",
        "testVar9",
        "testCircularOldTypeDef",
        "testRemovalMultipleAssignmentInIf1",
        "isResolved",
        "getTypesUnderShallowEquality",
        "testSwitchCase6",
        "testAdd2",
        "isBooleanObjectType",
        "testSuperClassDefinedAfterSubClass1",
        "autoboxesTo",
        "fromReader",
        "testEnum20",
        "Comparator<JSType>",
        "testMissingProperty29",
        "testEnum38",
        "testFunctionInference19",
        "testImplicitCastNotInExterns",
        "testDontAddMethodsIfNoConstructor",
        "testControlFlowRestrictsType9",
        "reportWarning",
        "testBadImplementsNonObjectType",
        "isNamespacePlaceholder",
        "testFunctionLiteralDefinedThisArgument",
        "testNullAnd",
        "testValidBase4",
        "testNumericComparison1",
        "testPropertyUsedBeforeDefinition2",
        "testSupertypeReferenceOfSubtypeProperty",
        "testGoodExtends6",
        "testNew11",
        "testValidBase1",
        "testNativeCast3",
        "testDuplicateStaticPropertyDecl3",
        "testMissingProperty25",
        "testForEqualityHelper",
        "testNumericComparison4",
        "testFunctionArguments10",
        "testDuplicateStaticMethodDecl2",
        "testParameterizedArray4",
        "testEnum17",
        "testControlFlowRestrictsType6",
        "testIssue124b",
        "testFunctionInference20",
        "testInterfaceInheritanceCheck7",
        "testForwardTypeDeclaration1",
        "ProvidedName",
        "testScoping8",
        "testEnum10",
        "setCode",
        "testEnum1",
        "testOr3",
        "getReferenceName",
        "testDuplicateLocalVarDecl",
        "testStubConstructorImplementingInterface",
        "testInterfaceWithSupertypeImplementor",
        "testSuperInterface",
        "testControlFlowRestrictsType2",
        "testBadCrossModuleRequire",
        "testBadImplements2",
        "testInheritanceCheck9_2",
        "testAbstractMethodHandling2",
        "testValueOfComparison1",
        "testPropertyUsedBeforeDefinition1",
        "testFunctionArguments13",
        "testVar10",
        "testInheritanceCheck12",
        "testMissingProperty17",
        "resolveViaRegistry",
        "testVar3",
        "testFunctionInference4",
        "ProcessClosurePrimitivesTest",
        "hashCode",
        "createNamespaceLiteral",
        "testAnd1",
        "testFunctionCall5",
        "testNew4",
        "testTypeDef2",
        "testMissingProvides",
        "getLeastSupertype",
        "testBang1",
        "testPrintFunctionName2",
        "testFunctionInference12",
        "testIn1",
        "testAbstractMethodHandling6",
        "restrictByNotNullOrUndefined",
        "testEnum16",
        "testBooleanReduction2",
        "testBackwardsEnumUse1",
        "testBadImplements1",
        "testAddingMethodsUsingPrototypeIdiomComplexNamespace2",
        "testImplicitCast",
        "testReorderedProvides",
        "testTypeCheck16b",
        "testInvalidBase5",
        "testMissingProperty33",
        "testFunctionInference9",
        "testInnerFunction3",
        "isFunctionTypeDeclaration",
        "testClosure3",
        "setReferencedAndResolvedType",
        "testQualifiedNameInference4",
        "testBitOperation1",
        "testOverlappingAdditionalProvideAtEnd",
        "testInnerFunction5",
        "testSwitchCase1",
        "makeVarDeclNode",
        "testEnum30",
        "isTheObjectType",
        "safeResolve",
        "testIn3",
        "testRemovalOfProvidedObjLit",
        "testAdd11",
        "testSwitchCase4",
        "testStaticProperty",
        "isString",
        "differsFrom",
        "testVar4",
        "testNoTypeCheck7",
        "testTypeCheck17",
        "isStringValueType",
        "testBooleanPreservation2",
        "testInferredReturn2",
        "testCall6",
        "testInheritanceCheck10_1",
        "testInvalidBase2",
        "testBitOperation5",
        "testBug1943776",
        "testBadInterfaceExtends5",
        "testPrototypePropertyReference",
        "testInterfaceAssignment9",
        "testOptionalParameterComparedToUndefined",
        "testInstanceOfReduction1",
        "testForwardTypeDeclaration6",
        "testNameNode",
        "testUnknownType",
        "testSkipNativeFunctionMethod",
        "testDuplicateStaticPropertyDecl1",
        "testControlFlowRestrictsType5",
        "testBadExtends3",
        "testTypeInferenceWithCast4",
        "testMalformedOldTypeDef",
        "testBadInterfaceExtends2",
        "makeTypeCheck",
        "testTypeCheckBasicDowncast",
        "testMethodInference5",
        "testSwitchCase5",
        "testSetCssNameMappingNonStringValueReturnsError",
        "testVar11",
        "testFlowScopeBug2",
        "testConstructorType1",
        "testFunctionArguments4",
        "testTypeCheck5",
        "testFunctionInference3",
        "getRestrictedTypeGivenToBooleanOutcome",
        "testTypeInferenceWithClosure1",
        "testEnum39",
        "testGatherProperyWithoutAnnotation2",
        "testDfa9",
        "testNew1",
        "setUp",
        "testTypeOfReduction11",
        "testOr4",
        "isOptionalParameter",
        "getTypesUnderEquality",
        "resolveViaProperties",
        "testProvideOrder3b",
        "testMissingProperty18",
        "testGoodExtends7",
        "testAdd15",
        "testAdd12",
        "testInheritanceCheck9_3",
        "typeCheck",
        "testStringComparison2",
        "testTypeCheck19",
        "testEnum27",
        "testInterfaceAssignment6",
        "testHookRestrictsType4",
        "testGlobalThis1",
        "testParameterizedArray6",
        "testDfa2",
        "testTypeInferenceWithCast2",
        "testControlFlowRestrictsType1b",
        "testNumberAutoboxing",
        "testControlFlowRestrictsType1",
        "testGoodExtends9",
        "testFunctionInference10",
        "isNamedType",
        "testOptionalArgFunctionParam",
        "testBitOperation4",
        "testDfa4",
        "testInvalidBase9",
        "isNoObjectType",
        "testAnonymousType3",
        "testBang4",
        "testFunctionCall7",
        "testQualifiedNameReduction4",
        "testFunctionInference6",
        "testProvidedDeclaredFunctionError",
        "testBadImplementsAConstructor",
        "testQualifiedNameInference2",
        "testClosureTypes",
        "testOptionalUnknownNamedType",
        "isNumberObjectType",
        "testConstructorType6",
        "testNoRemovalFunction2",
        "testTypeCheck16a",
        "testAssignToUntypedVariable",
        "testControlFlowRestrictsType8",
        "testInferredReturn5",
        "testArrayAccess4",
        "testInferredParam3",
        "testWhileRestrictsType2",
        "ProcessClosurePrimitives",
        "isFunctionPrototypeType",
        "testEnum36",
        "testStaticMethodDeclaration3",
        "testConstructorType7",
        "testCast10",
        "isStringObjectType",
        "testBooleanNodeTrue",
        "testBug1942972",
        "testStringUnboxing",
        "testStubFunctionDeclaration2",
        "testMissingProperty27",
        "testBooleanUnboxing",
        "testHookRestrictsType1",
        "getJSDocInfo",
        "isFunctionType",
        "testBug911118",
        "testDirectPrototypeAssignment3",
        "testBitOperation3",
        "testFunctionInference13",
        "testHookRestrictsType5",
        "JSType",
        "testBooleanPreservation3",
        "testSwitchCase7",
        "testNew9",
        "testCall10",
        "testWarnDataPropertyOnInterface4",
        "testProvideErrorCases",
        "testAddDependency",
        "testBug930117",
        "testUnionTypeTwoFields",
        "testRequireErrorCases",
        "testSets",
        "testDirectPrototypeAssignment2",
        "testNew2",
        "testFunctionCall8",
        "testLateProvides",
        "testValidBase6",
        "testInterfaceAssignment5",
        "testConstructorAlias6",
        "testNamespacedConstructor",
        "testBadExtends1",
        "testAdd4",
        "testObjectPropertyTypeInferredInLocalScope2",
        "testFunctionCall2",
        "testFunctionInference8",
        "testErrorMismatchingPropertyOnInterface5",
        "testThis9",
        "testValidBase2",
        "testNoTypeCheck14",
        "processProvideFromPreviousPass",
        "testTypeCheck2",
        "TypePair",
        "testAssignToUntypedProperty",
        "testBug908701",
        "testFunctionCall6",
        "isNumber",
        "testNoTypeCheck8",
        "testOptionalArgFunctionParam4",
        "testResolvingNamedTypes",
        "testDuplicateStaticPropertyDecl7",
        "testBackwardsEnumUse4",
        "testQualifiedNameInference3",
        "testNew14",
        "testGlobalThis5",
        "testVar1",
        "testStringComparison5",
        "testParameterizedArray5",
        "testBang7",
        "getName",
        "testBooleanReduction6",
        "testAbstractMethodHandling1",
        "TypeCheckResult",
        "testCall1",
        "testMissingProperty31",
        "testInstanceof4",
        "testBackwardsEnumUse2",
        "testGoodExtends5",
        "testObjectLiteralDeclaration1",
        "fromGenerator",
        "testMissingProperty22",
        "testProvideInIndependentModules2b",
        "testQualifiedNameInference5",
        "testReturn5",
        "testCall2",
        "testTypeDef4",
        "testThis2",
        "testBang2",
        "testEnum25",
        "testThis4",
        "testDfa1",
        "testSkipNativeObjectMethod",
        "testGetTypedPercent4",
        "testInterfaceAssignment8",
        "testHookRestrictsType7",
        "canAssignTo",
        "testObjectLiteral",
        "testGoodExtends1",
        "testNoRemovalFunction1",
        "canTestForShallowEqualityWith",
        "handleUnresolvedType",
        "testSuperclassMismatch2",
        "inferReturnStatementsAsLastResort",
        "testBadInterfaceExtends3",
        "testBackwardsEnumUse3",
        "testMissingProperty13",
        "forceResolve",
        "testFunctionArguments8",
        "testDuplicateStaticPropertyDecl8",
        "testMethodInference9",
        "testClosure6",
        "testInnerFunction9",
        "testNoTypeCheck6",
        "testCast4",
        "testExtendBuiltInType2",
        "testMissingProperty23",
        "testInvalidProvide",
        "testDuplicateStaticPropertyDecl5",
        "testTypeCheck14",
        "testPropertyInference5",
        "testCast5",
        "testCallErrorConstructorAsFunction",
        "testCircularTypeDef",
        "testMissingProperty20",
        "testCast12",
        "Generated",
        "isConstructor",
        "testCast13",
        "fromFile",
        "testArrayAccess6",
        "testEnum28",
        "addDefinition",
        "isVoidType",
        "testTypeCheck6",
        "testComparison10",
        "testDuplicateStaticPropertyDecl9",
        "testBang6",
        "testMissingProperty5",
        "testSupertypeWithSameField",
        "testFunctionInference16",
        "isEmptyType",
        "testInvalidBase1",
        "testBooleanType",
        "processSetCssNameMapping",
        "testEnum7",
        "testOr2",
        "testInheritanceCheck9_1",
        "testLateRequire",
        "testConstructorAlias5",
        "testFunctionArguments16",
        "testMissingProperty14",
        "testPropertyInference1",
        "canTestForEqualityWith",
        "testInterfaceUnionWithCtor",
        "testInnerFunction8",
        "testReturn1",
        "testNumericComparison6",
        "testOptionalNullableArgFunctionParam3",
        "testInterfaceInheritanceCheck3",
        "isUnknownType",
        "isVarArgsParameter",
        "getOptions",
        "testBug1987544",
        "testGlobalThis2",
        "suppressMissingProperty",
        "testMismatchInvalidation",
        "testForwardTypeDeclaration3",
        "isBooleanValueType",
        "testTypeCheck10",
        "testNoPersistentTypeInferenceForFunctionProperties",
        "testProvideOrder4b",
        "testTypeOfReduction10",
        "testUndefinedNode",
        "testCast11",
        "testTypeCheck18",
        "testReturn3",
        "testEnum3",
        "testTypeInferenceWithClosure2",
        "testAdd17",
        "testInferredParam1",
        "testEnum",
        "testParameterizedArray1",
        "testUnionAndExternTypes",
        "testScoping11",
        "setOriginalPath",
        "toDebugHashCodeString",
        "testMismatchingOverridingInferredPropertyBeforeDeclaredProperty1",
        "testAdd6",
        "testMethodInference6",
        "testAliasedEnum1",
        "testName1",
        "testMalformedOldTypeDef2",
        "testMissingProperty2",
        "testInvalidBase6",
        "testProvideInIndependentModules1",
        "testResolutionViaRegistry4",
        "testRemovalOfRequires",
        "testComparison4",
        "testStubFunctionDeclaration9",
        "testMissingRequireWithAdditionalProvide",
        "testInterfaceInheritanceCheck2",
        "testBadImplementsNonInterfaceType",
        "testTypeOfReduction12",
        "testThis10",
        "isInterface",
        "testTypeCheckCustomExterns",
        "testAddingMethodsUsingPrototypeIdiomComplexNamespace",
        "testOptionalArgFunctionParam3",
        "testVar12",
        "testFunctionCall3",
        "testInheritanceCheck7",
        "matchesObjectContext",
        "testMissingProperty8",
        "testCall4",
        "matchesUint32Context",
        "testParameterizedObject1",
        "testAdd14",
        "hasReferenceName",
        "testUnusedTypeInExterns",
        "testEnum12",
        "testInferredParam2",
        "testDirectPrototypeAssignment1",
        "checkEnumElementCycle",
        "testNew5",
        "testCall11",
        "testConstructorAlias9",
        "getNativeType",
        "isRegexpType",
        "testBug1484445",
        "testAdd1",
        "getInstanceType",
        "testScoping2",
        "testBackwardsEnumUse5",
        "testAnd4",
        "testProvideAfterDeclarationError",
        "testInterfaceOfSuperclass",
        "testObjectPropertyTypeInferredInLocalScope1",
        "testExtendFunction1",
        "testVar8",
        "testUndefinedVar",
        "testScoping7",
        "testMismatchingOverridingInferredPropertyBeforeDeclaredProperty3",
        "testStringNode",
        "testMethodInference2",
        "testParameterizedArray7",
        "testTypeOfReduction8",
        "testQualifiedNameReduction2",
        "testIn2",
        "isEnumElementType",
        "testMissingProperty10",
        "testNativeCast2",
        "testAdd8",
        "testTypeCheckStandaloneAST",
        "testControlFlowRestrictsType1c",
        "testStubFunctionDeclaration8",
        "testThis6",
        "testSuperclassMismatch1",
        "testObjectLiteralNotRenamed",
        "testProvideInIndependentModules2",
        "testConstructorFields",
        "isEnumType",
        "testEnumStaticMethod2",
        "reportBadBaseClassUse",
        "testClosure1",
        "testGlobalThis4",
        "testNew6",
        "testDirectPrototypeAssign",
        "getTypedPercent",
        "testAbstractMethodHandling5",
        "testNestedFunctionInference1",
        "testNoTypeCheck2",
        "testInheritanceCheck10_3",
        "UnrecognizedRequire",
        "testBug2341812",
        "testTypeCheck15",
        "testNoTypeCheck1",
        "testAbstractMethodHandling4",
        "testTypeDef5",
        "setSourceNode",
        "isNumberValueType",
        "testBadConstructorCall",
        "testUntypedExterns",
        "testConstructorAlias1",
        "testOptionalArgFunctionParamError",
        "testCast15",
        "testMethodInference4",
        "testInvalidBase8",
        "testFunctionInference1",
        "testProvideOrder3a",
        "testBooleanReduction3",
        "testErrorMismatchingPropertyOnInterface6",
        "testTypeCheck11",
        "maybeSetBaseType",
        "testBadExtends2",
        "testValidBase3",
        "testMultipleProvides",
        "isOrdinaryFunction",
        "testAnd2",
        "testRemovalMultipleAssignment4",
        "testTwoInterfacesWithSomeInheritance",
        "testFunctionArguments12",
        "testValueOfComparison2",
        "testIn5",
        "visit",
        "testScoping1",
        "testConstructorAlias8",
        "testPropertyInference6",
        "testInheritanceCheck13",
        "testForwardTypeDeclaration2",
        "testTypeDef1",
        "testComparison12",
        "testInvalidBase7",
        "testAssign1",
        "testIssue86",
        "testInterfaceAssignment13",
        "testInterfaceAssignment10",
        "testCallArrayConstructorAsFunction",
        "hasSourceInMemory",
        "testMultipleInterfaces",
        "testPrintFunctionName1",
        "testClosure5",
        "inferThisType",
        "testInterfaceAssignment2",
        "testSuperclassMatchWithMixin",
        "testMismatchingOverridingInferredPropertyBeforeDeclaredProperty2",
        "testInitialTypingScope",
        "testEnum29",
        "testEnum37",
        "getTypesUnderShallowInequality",
        "testTypeCheck21",
        "testNew8",
        "testUnknownConstructorInstanceType2",
        "testNew7",
        "testMethodInference7",
        "testQualifiedNameInference1",
        "testGoodExtends2",
        "testDuplicateTypeDef",
        "testExtendBuiltInType1",
        "testNoTypeCheck4",
        "OnDisk",
        "testClosureTypesMultipleWarnings",
        "isTemplateType",
        "testTypeCheck1",
        "testStaticMethodDeclaration2",
        "testReturn2",
        "testThis8",
        "testInheritanceCheck4",
        "testDfa6",
        "testBadTemplateType3",
        "testInheritanceCheck14",
        "testGoodImplements1",
        "testOptionalNullableArgFunctionParam",
        "testBug1940769",
        "testVar5",
        "testMissingProperty16",
        "testSimpleAdditionalProvideAtEnd",
        "testMissingProperty19",
        "getExportedVariableNames",
        "testDfa8",
        "testAliasedEnum3",
        "testPrototypeAndInstance",
        "testCustomInherits",
        "testDuplicateStaticMethodDecl4",
        "testBooleanPreservation4",
        "matchesStringContext",
        "testStubFunctionDeclaration1",
        "testEnum2",
        "testThis7",
        "testAnonymousType2",
        "testFunctionLiteralUndefinedThisArgument",
        "testTypeOfReduction6",
        "testComparison6",
        "testHook",
        "testAnonymousType1",
        "testErrorMismatchingPropertyOnInterface4",
        "testMissingProperty4",
        "isNoType",
        "testFunctionInference5",
        "isDateType",
        "testBug909000",
        "testPrototypeLoop",
        "testMissingProperty7",
        "testMissingProperty9",
        "testNew10",
        "testAnd3",
        "testMethodInference1",
        "isInstanceType",
        "testQualifiedNameReduction1",
        "testBackwardsConstructor2",
        "testAdd18",
        "setResolvedTypeInternal",
        "testClosure7",
        "testScoping4",
        "testAddingMethodsUsingPrototypeIdiomComplexNamespace1",
        "testTypeRedefinition",
        "clearCachedSource",
        "testConstructorAlias4",
        "testEnum14",
        "testAdd3",
        "getProcessor",
        "testStaticMethodDeclaration1",
        "testEnum18",
        "testInferredReturn6",
        "testFunctionArguments6",
        "testInheritanceCheck5",
        "testCall7",
        "testTypeDef3",
        "isEquivalentTo",
        "testGenericRelationalExpression",
        "testAdd13",
        "testStaticDataPropertyOnNestedInterface",
        "testMultipleDeclarationError1",
        "testSimpleDottedAdditionalProvide",
        "testGoodImplements2",
        "fromInputStream",
        "DisambiguatePropertiesTest",
        "testSwitchCase2",
        "testNoTypeCheck10",
        "testStubFunctionDeclaration5",
        "testIn6",
        "testInheritanceCheck3",
        "testMissingProperty6",
        "testTypeOfReduction7",
        "testAddingMethodsPrototypeIdiomAndObjectLiteralSimpleNamespace",
        "checkObjectType",
        "testForwardTypeDeclaration5",
        "Preloaded",
        "testTypeCheck23",
        "testAssign2",
        "testBitOperation6",
        "testComparison13",
        "testAddMethodsPrototypeTwoWays",
        "testBang5",
        "testInferredReturn4",
        "testNoForwardTypeDeclarationAndNoBraces",
        "testRemovalMultipleAssignment2",
        "process",
        "testArrayAccess8",
        "testCast9",
        "getCodeNoCache",
        "getNumRepetitions",
        "testMissingProperty30",
        "testSuperclassMatch",
        "testAliasedEnum4",
        "testScopedConstructors",
        "updateMinimumModule",
        "testControlFlowRestrictsType1a",
        "testFunctionAssignement",
        "unboxesTo",
        "testOr1",
        "testAnnotatedPropertyOnInterface1",
        "testAddSingletonGetter",
        "isNullType",
        "testTwoFields",
        "testTypeCheck7",
        "testResolutionViaRegistry2",
        "testScoping3",
        "testGoodExtends12",
        "testEnum9",
        "testGetprop1",
        "testBug1859535",
        "testNew3",
        "testMissingProperty32",
        "testTypeOfReduction5",
        "testArrayAccess3",
        "testReturn4",
        "testInterfaceInheritanceCheck6",
        "testDuplicateOldTypeDef",
        "testDuplicateStaticMethodDecl5",
        "isUnionType",
        "testProvideOrder4a",
        "testPropertyInference2",
        "testInnerFunction7",
        "testStringComparison3",
        "clearResolved",
        "testBadInterfaceExtends4",
        "testImplicitProvideInIndependentModules3",
        "testCall3",
        "buildAndRegister",
        "lookupViaProperties",
        "testEnumStaticMethod1",
        "testUnionType",
        "toString",
        "testInheritanceCheck2",
        "testBug1940591",
        "testInterfaceInstantiation",
        "testQualifiedNameInference6",
        "testNumberUnboxing",
        "testTypeInferenceWithCast5",
        "testBooleanAutoboxing",
        "testInvalidBase4",
        "testForEquality",
        "testConstructorAlias3",
        "testInstanceOfReduction3",
        "testInterfaceExtends",
        "testNumberNode",
        "testPropertyInference4",
        "testEnum34",
        "testScopedConstructors1",
        "testBadInterfaceExtends1",
        "testUnresolvedType",
        "testFunctionArguments1",
        "testOverriddenReturn1",
        "testFunctionInference17",
        "testMissingProperty1",
        "testDeclaredNativeTypeEquality",
        "testAdd19",
        "testTypeInferenceWithCast3",
        "testProvideInIndependentModules3",
        "testHigherOrderFunctions3",
        "getCharset",
        "testIssue124",
        "testRemovalMultipleAssignmentInIf2",
        "dereference",
        "testInnerFunction6",
        "testHookRestrictsType3",
        "testEnum19",
        "testNew15",
        "testMultipleDeclarationError3",
        "testFunctionArguments7",
        "isSubtype",
        "testWhileRestrictsType1",
        "testDataPropertyOnInterface2",
        "isRecordType",
        "getLine",
        "addProvide",
        "testMissingProperty3",
        "testObjectPropertyTypeInferredInLocalScope3",
        "testInnerFunction4",
        "testGoodCrossModuleRequire2",
        "matchesInt32Context",
        "verifyProvide",
        "testDfa3",
        "testFunctionCall1",
        "testStringAutoboxing",
        "testEnum40",
        "testParameterizedObject3",
        "testGoodExtends3",
        "testBooleanReduction1",
        "testCast14",
        "testConstructorType2",
        "NamedType",
        "testRemovalMultipleAssignment3",
        "testResolutionViaRegistry3",
        "testInferredParam4",
        "getTypesUnderInequality",
        "testRemovalMultipleAssignmentInIf4",
        "inferFromOverriddenFunction",
        "isNullable",
        "testAdd20",
        "testUnknownConstructorInstanceType3",
        "testEnum5",
        "testPropAccess2",
        "testFunctionInference7",
        "testReturn8",
        "testPropertyTypeOfUnionType",
        "isAllType",
        "testStringFunction",
        "testNumericComparison2",
        "testDuplicateStaticMethodDecl3",
        "testStubFunctionDeclaration7",
        "testFlowScopeBug1",
        "testStringComparison6",
        "testScopedType",
        "isEquivalent",
        "testAliasedEnum2",
        "testInterfaceAssignment11",
        "processRequireCall",
        "testTypeOfReduction2",
        "testArrayAccess1",
        "forgiveUnknownNames",
        "testCast2",
        "testWarnDataPropertyOnInterface3",
        "testOverriddenReturn2",
        "testStringComparison4",
        "testInterfaceAssignment3",
        "testInvalidatingInterface",
        "testTypeOfReduction1",
        "testTypeOfReduction13",
        "testControlFlowRestrictsType7",
        "testSimpleProvides",
        "testValueTypeBuiltInPrototypePropertyType",
        "testBitOperation9",
        "testImplicitCastSubclassAccess",
        "testAnnotatedPropertyOnInterface2",
        "testInferredReturn3",
        "processProvideCall",
        "getCodeReader",
        "testInterfaceInheritanceCheck11",
        "testGatherProperyWithoutAnnotation1",
        "makeAssignmentExprNode",
        "testCast",
        "testNoForwardTypeDeclaration",
        "testDefinePropertyOnNullableObject1",
        "testInheritanceCheck8",
        "testTypeCheck13",
        "testUnknownPrototypeChain",
        "testDuplicateStaticMethodDecl1",
        "testNoTypeCheck13",
        "testBackwardsConstructor1",
        "equals",
        "isExplicitlyProvided",
        "testInstanceof3",
        "testEnum31",
        "testAssign4",
        "createDeclarationNode",
        "testStubFunctionDeclaration10",
        "testCast6",
        "testIn4",
        "testBooleanPreservation1",
        "testTypeOfReduction3",
        "testGetTypedPercent2",
        "testBadCast",
        "testBadTemplateType4",
        "testTypeCheckDefaultExterns",
        "testArrayAccess7",
        "testInterfaceNonEmptyFunction",
        "testBadExtends4",
        "testBang3",
        "testOverlappingDottedAdditionalProvide",
        "testAssign3",
        "SourceFile",
        "testMissingProperty15",
        "testProvideInIndependentModules3b",
        "testEnum13",
        "testEnum4",
        "matchesNumberContext",
        "testInterfacePropertyNotImplemented",
        "testOldTypeDef2",
        "testFunctionArguments14",
        "testVar15",
        "testOldTypeDef1",
        "testTypeCheck12",
        "testFunctionCall4",
        "testMissingProperty28",
        "testProvideOrder2",
        "testNamedType",
        "testConstructorType4",
        "testPrototypePropertyTypes",
        "FunctionTypeBuilder",
        "testTypeCheck24",
        "getEnclosingDeclNameNode",
        "testBooleanReduction7",
        "testAnd7",
        "testFunctionArguments9",
        "testStubFunctionDeclaration4",
        "testControlFlowRestrictsType4",
        "testBitOperation8",
        "testCast7",
        "testConstructorType3",
        "testInterfaceInheritanceCheck5",
        "testMissingProperty34",
        "testComparison3",
        "setCharset",
        "getReferencedType",
        "testTypeOfReduction14",
        "testInterfaceInheritanceCheck8",
        "testOptionalArgFunctionReturn2",
        "testStringComparison1",
        "testFunctionInference18",
        "processBaseClassCall",
        "testExtendNativeType",
        "testConstructorAlias2",
        "testInterfaceAssignment7",
        "testOneType",
        "testInterface",
        "testAnd5",
        "testArrayAccess2",
        "testAnnotatedPropertyOnInterface4",
        "testPropAccess",
        "testRemovalMultipleAssignmentInIf3",
        "testNewDateGoogNowSimplification",
        "testPropertyInference8",
        "getOriginalPath",
        "testReturn7",
        "testTypes",
        "testImplicitProvideInIndependentModules2",
        "testHigherOrderFunctions2",
        "testEnum24",
        "findPropertyType",
        "testValidBase5",
        "testEnum11",
        "testUnionTypeInvalidation",
        "testTypeCheck16",
        "testScoping6",
        "testThis3",
        "testCast3",
        "setValidator",
        "testOptionalAllType",
        "testScoping5",
        "testDfa12",
        "testOverlappingAdditionalProvide",
        "testActiveXObject",
        "testNoTypeCheck12",
        "testAdd16",
        "testWarnUnannotatedPropertyOnInterface5",
        "testHigherOrderFunctions1",
        "testDeterministicNaming",
        "testComparison8",
        "testCast8",
        "testIgnoreUnknownType",
        "testSimpleAdditionalProvide",
        "testResolutionViaRegistry1",
        "testAliasedEnum5",
        "testAnnotatedPropertyOnInterface3",
        "testMissingProperty11",
        "testQualifiedNameReduction3",
        "testPropertyInferredPropagation",
        "testWarnUnannotatedPropertyOnInterface6",
        "testInferredReturn1",
        "isObject",
        "testSubtypesWithSameField",
        "testNoTypeCheck5",
        "testInferredReturn8",
        "testNumericComparison5",
        "testDuplicateStaticPropertyDecl4",
        "testEnum22",
        "testTypedExterns",
        "testMethodInference3",
        "testGoodImplements3",
        "testHookRestrictsType6",
        "testInterfaceInheritanceCheck1",
        "testMissingProperty24",
        "testProvideOrder1",
        "testGetTypedPercent1",
        "testSwitchCase8",
        "testCall9",
        "testAdd10",
        "testOptionalNullableArgFunctionParam2",
        "testValueOfComparison3",
        "testParameterizedArray3",
        "testNoTypeCheck11",
        "testBug2335992",
        "testInterfacePropertyNotImplemented2",
        "runFindHighestTypeInChain",
        "testMinimalConstructorAnnotation",
        "testMissingProperty12",
        "testBooleanReduction4",
        "testPropertyInference7",
        "testPropAccess4",
        "testGoodExtends8",
        "testReturn6",
        "toObjectType",
        "testFunctionInference15",
        "testBug908625",
        "testUnionOfFunctionAndType",
        "testTwoTypes",
        "testInstanceof5",
        "testNumericComparison3",
        "testDfa10",
        "testClosure4"
      ],
      "functions_name_co_evolved_modified_file": [
        "replace"
      ],
      "functions_name_co_evolved_all_files": [
        "testClosureTypes",
        "setValidator",
        "toString",
        "testClosureTypesMultipleWarnings",
        "testForwardTypeDeclaration6",
        "testBadExtends4",
        "testProvideInIndependentModules4",
        "testInheritanceCheck14",
        "testForwardTypeDeclaration5",
        "inferInheritance",
        "testUnresolvedType",
        "replace",
        "handleUnresolvedType",
        "testPrototypeLoop",
        "setReferencedAndResolvedType",
        "testGoodExtends12",
        "apply",
        "testForwardTypeDeclaration4",
        "testForwardTypeDeclaration1"
      ]
    },
    "file": {
      "file_name": "ProcessClosurePrimitives.java",
      "file_nloc": 615,
      "file_complexity": 152,
      "file_token_count": 4136,
      "file_before": "",
      "file_after": "",
      "file_patch": "@@ -786,7 +786,7 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n         } else {\n           // In this case, the name was implicitly provided by two independent\n           // modules. We need to move this code up to a common module.\n-          int indexOfDot = namespace.lastIndexOf('.');\n+          int indexOfDot = namespace.indexOf('.');\n           if (indexOfDot == -1) {\n             // Any old place is fine.\n             compiler.getNodeForCodeInsertion(minimumModule)\n",
      "files_name_in_blame_commit": [
        "ProcessClosurePrimitivesTest.java",
        "ProcessClosurePrimitives.java",
        "TypeCheckTest.java",
        "SourceFile.java",
        "JSType.java",
        "LooseTypeCheckTest.java",
        "FunctionTypeBuilder.java",
        "NamedType.java",
        "DisambiguatePropertiesTest.java"
      ]
    }
  },
  "commits_modify_file_before_fix": {
    "size": 24
  }
}