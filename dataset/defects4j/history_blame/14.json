{
  "id": "14",
  "blame_commit": {
    "commit": {
      "commit_id": "1a7fbd18b47c102152869c3b046b65ff0f12fc43",
      "commit_message": "Allow more folding of Token.ADD.\n\nR=acleung\nDELTA=160  (107 added, 4 deleted, 49 changed)\n\nHi Jason!\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION=453\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@764 b0f006be-c8cd-11de-a2e8-8d36a3108c74",
      "commit_author": "johnlenz@google.com",
      "commit_date": "2011-02-07 22:59:16",
      "commit_parent": "915f3c76062ddc6c9d1cc2c6e8e40aedac9089ed"
    },
    "function": {
      "function_name": "mayBeString",
      "function_code_before": "",
      "function_code_after": "static boolean mayBeString(Node n, boolean recurse) {\n  if (recurse) {\n    return valueCheck(n, MAY_BE_STRING_PREDICATE);\n  } else {\n    return mayBeStringHelper(n);\n  }\n}",
      "function_before_start_line": "",
      "function_before_end_line": "",
      "function_after_start_line": 1223,
      "function_after_end_line": 1229,
      "function_before_token_count": 0,
      "function_after_token_count": 33,
      "functions_name_modified_file": [
        "isGetProp",
        "isStatement",
        "isTryFinallyNode",
        "checkForStateChangeHelper",
        "getStringValue",
        "getArgumentForCallOrNew",
        "hasFinally",
        "isLiteralValue",
        "getAddingRoot",
        "referencesThis",
        "redeclareVarsInsideBranch",
        "maybeAddFinally",
        "constructorCallHasSideEffects",
        "getNthSibling",
        "isObjectCallMethod",
        "isConstantName",
        "valueCheck",
        "opToStr",
        "isExpressionNode",
        "isName",
        "copyNameAnnotations",
        "newUndefinedNode",
        "isConstantByConvention",
        "containsType",
        "isSimpleFunctionObjectCall",
        "newFunctionNode",
        "hasCatchHandler",
        "isBooleanResultHelper",
        "isStrWhiteSpaceChar",
        "getSourceName",
        "isValidDefineValue",
        "containsFunction",
        "isStatementBlock",
        "isBooleanResult",
        "isFunctionObjectApply",
        "apply",
        "getCatchBlock",
        "isExprAssign",
        "isCallOrNew",
        "getExpressionBooleanValue",
        "getArgumentForFunction",
        "isNumericResultHelper",
        "setDebugInformation",
        "getNodeTypeReferenceCount",
        "isAssociative",
        "getBooleanValue",
        "isFunctionObjectCallOrApply",
        "newQualifiedNameNode",
        "isVarArgsFunction",
        "isCall",
        "getNumberValue",
        "isLatin",
        "isLhs",
        "isHoistedFunctionDeclaration",
        "isSwitchCase",
        "newName",
        "isNull",
        "newCallNode",
        "isEmptyFunctionExpression",
        "mayHaveSideEffects",
        "isFunctionExpression",
        "getOpFromAssignmentOp",
        "evaluatesToLocalValue",
        "visit",
        "getLoopCodeBlock",
        "getObjectLitKeyTypeFromValueType",
        "tryMergeBlock",
        "getVarsDeclaredInBranch",
        "isValidPropertyName",
        "isFunction",
        "isForIn",
        "callHasLocalResult",
        "getPrototypePropertyName",
        "isControlStructureCodeBlock",
        "isFunctionObjectCall",
        "isEmptyBlock",
        "isPrototypePropertyDeclaration",
        "isImmutableValue",
        "isControlStructure",
        "isUndefined",
        "getPrototypeClassName",
        "MatchNodeType",
        "getCount",
        "isWithinLoop",
        "getNameReferenceCount",
        "trimJsWhiteSpace",
        "isVar",
        "isLoopStructure",
        "isReferenceName",
        "opToStrNoFail",
        "isExprCall",
        "isPrototypeProperty",
        "isObjectLitKey",
        "getFunctionName",
        "getFunctionInfo",
        "getFnParameters",
        "getFunctionBody",
        "isSimpleOperatorType",
        "isLabelName",
        "isNumericResult",
        "getRootOfQualifiedName",
        "isAssign",
        "functionCallHasSideEffects",
        "isCommutative",
        "isTryCatchNodeContainer",
        "NodeUtil",
        "getObjectLitKeyName",
        "getNearestFunctionName",
        "visitPreOrder",
        "mayEffectMutableState",
        "newExpr",
        "isToStringMethodCall",
        "mayBeString",
        "mayBeStringHelper",
        "visitPostOrder",
        "canBeSideEffected",
        "isNew",
        "isVarDeclaration",
        "isThis",
        "isGet",
        "nodeTypeMayHaveSideEffects",
        "has",
        "newVarNode",
        "newHasLocalResult",
        "isAssignmentOp",
        "isSimpleOperator",
        "getInfoForNameNode",
        "removeChild",
        "isGetOrSetKey",
        "isFunctionDeclaration",
        "isString",
        "getConditionExpression",
        "precedence",
        "isNameReferenced",
        "containsCall",
        "MatchNameNode",
        "getAssignedValue"
      ],
      "functions_name_all_files": [
        "isGetProp",
        "isStatement",
        "isTryFinallyNode",
        "testFoldBitShiftsStringCompare",
        "testMayHaveSideEffects",
        "checkForStateChangeHelper",
        "getStringValue",
        "getArgumentForCallOrNew",
        "testContainsFunctionDeclaration",
        "hasFinally",
        "tryFoldKnownStringMethods",
        "isLiteralValue",
        "testGetFunctionName",
        "getAddingRoot",
        "testFoldArithmetic3",
        "tryReduceOperandsForOp",
        "assertSameResultsOrUncollapsed",
        "testFoldTypeof",
        "referencesThis",
        "redeclareVarsInsideBranch",
        "testIsNameReferenceCount",
        "maybeAddFinally",
        "constructorCallHasSideEffects",
        "getNthSibling",
        "testLocalValue",
        "isObjectCallMethod",
        "testRemoveTryChild1",
        "isConstantName",
        "tryFoldAddConstantString",
        "compareAsNumbers",
        "testFoldComplex",
        "valueCheck",
        "opToStr",
        "isExpressionNode",
        "isName",
        "copyNameAnnotations",
        "newUndefinedNode",
        "isConstantByConvention",
        "tryFoldAssign",
        "testFoldStringLength",
        "testRemoveLabelChild1",
        "setUp",
        "assertSameResults",
        "containsType",
        "isSimpleFunctionObjectCall",
        "optimizeSubtree",
        "assertBooleanFalse",
        "testContainsType",
        "testAssignOps",
        "assertNotSameResults",
        "testFoldStringSubstr",
        "testGetFunctionName2",
        "newFunctionNode",
        "hasCatchHandler",
        "isBooleanResultHelper",
        "isStrWhiteSpaceChar",
        "getSourceName",
        "assertExpressionBooleanTrue",
        "testRemoveForChild",
        "testGetNumberValue",
        "testFoldLiteralsTypeMismatches",
        "testFoldLiteralsAsNumbers",
        "isValidDefineValue",
        "tryFoldCtorCall",
        "containsFunction",
        "isStatementBlock",
        "print",
        "isBooleanResult",
        "isFunctionObjectApply",
        "tryConvertOperandsToNumber",
        "apply",
        "testMergeBlock3",
        "testStringJoinAdd",
        "getCatchBlock",
        "testRegExpSideEffect",
        "isExprAssign",
        "fold",
        "isCallOrNew",
        "getExpressionBooleanValue",
        "getArgumentForFunction",
        "isNumericResultHelper",
        "testGetNameReferenceCount",
        "assertResultString",
        "setDebugInformation",
        "tryFoldArithmeticOp",
        "getNodeTypeReferenceCount",
        "isAssociative",
        "tryFoldLeftChildOp",
        "testGetBooleanValue",
        "testFoldSimpleArithmeticOp",
        "getBooleanValue",
        "isFunctionObjectCallOrApply",
        "testRemoveTryChild3",
        "testIsObjectLiteralKey1",
        "assertBooleanTrue",
        "testValidDefine",
        "testFoldStringSubstring",
        "testFoldArithmeticStringComp",
        "newQualifiedNameNode",
        "isVarArgsFunction",
        "testFoldInstanceOf",
        "isCall",
        "getNumberValue",
        "tryFoldAdd",
        "testFoldComparison",
        "testIsFunctionExpression",
        "testIsFunctionExpression2",
        "testStringAdd",
        "isLatin",
        "isLhs",
        "testFoldingAdd",
        "assertExpressionBooleanFalse",
        "assertNodeNames",
        "testFoldBitwiseOp2",
        "inForcedStringContext",
        "isHoistedFunctionDeclaration",
        "findParentOfFuncDescendant",
        "isSwitchCase",
        "parseExpr",
        "newName",
        "isNull",
        "newCallNode",
        "testGetNearestFunctionName",
        "isEmptyFunctionExpression",
        "testNewFunctionNode",
        "mayHaveSideEffects",
        "testFoldLogicalOp",
        "tryConvertToNumber",
        "tryFoldTypeof",
        "testRemoveLabelChild2",
        "testFoldBitwiseOp",
        "testGetFunctionName5",
        "tryFoldStringSubstring",
        "tryFoldInForcedStringContext",
        "isFunctionExpression",
        "getOpFromAssignmentOp",
        "evaluatesToLocalValue",
        "visit",
        "testMayBeString",
        "getLoopCodeBlock",
        "assertMutableState",
        "getObjectLitKeyTypeFromValueType",
        "testCallSideEffects",
        "tryMergeBlock",
        "PeepholeFoldConstantsTest",
        "getVarsDeclaredInBranch",
        "isValidPropertyName",
        "tryFoldKnownMethods",
        "isFunction",
        "testUndefinedComparison3",
        "testFoldLeftChildConcat",
        "assertExpressionBooleanUnknown",
        "isForIn",
        "callHasLocalResult",
        "getPrototypePropertyName",
        "isControlStructureCodeBlock",
        "tryFoldGetElem",
        "tryFoldBinaryOperator",
        "isFunctionObjectCall",
        "testIsObjectLiteralKey",
        "isEmptyBlock",
        "testFoldBitShifts",
        "isPrototypePropertyDeclaration",
        "isImmutableValue",
        "isControlStructure",
        "isUndefined",
        "getPrototypeClassName",
        "MatchNodeType",
        "getCount",
        "tryFoldGetProp",
        "assertBooleanUnknown",
        "isWithinLoop",
        "getNameReferenceCount",
        "assertNotLiteral",
        "testReferencesThis",
        "testFoldingMixTypes",
        "testInvertibleOperators",
        "trimJsWhiteSpace",
        "isVar",
        "isLoopStructure",
        "isReferenceName",
        "testFoldArrayLength",
        "opToStrNoFail",
        "isExprCall",
        "isPrototypeProperty",
        "tryFoldChildAddString",
        "isObjectLitKey",
        "testRemoveVarChild",
        "testRemoveTryChild2",
        "getFunctionName",
        "testStringIndexOf",
        "getFunctionInfo",
        "getFnParameters",
        "testGetExpressionBooleanValue",
        "assertLiteralButNotImmutable",
        "testLocalValue1",
        "testUndefinedComparison1",
        "getFunctionBody",
        "isSimpleOperatorType",
        "testLocalValue2",
        "isLabelName",
        "tryFoldAndOr",
        "assertSideEffect",
        "testGetFunctionName1",
        "isNumericResult",
        "getRootOfQualifiedName",
        "testRemoveTryChild5",
        "testGetSourceName",
        "testIsLiteralOrConstValue",
        "tryFoldArrayJoin",
        "testGetFunctionName3",
        "getFuncChild",
        "testIsLabelName",
        "testStringJoinAdd_b1992789",
        "testFoldLeftChildOp",
        "isAssign",
        "functionCallHasSideEffects",
        "isCommutative",
        "isTryCatchNodeContainer",
        "testMayEffectMutableState",
        "NodeUtil",
        "getObjectLitKeyName",
        "getFunctionNode",
        "getNearestFunctionName",
        "testGetStringValue",
        "visitPreOrder",
        "mayEffectMutableState",
        "testMergeBlock2",
        "newExpr",
        "getProcessor",
        "testFoldArithmetic",
        "isToStringMethodCall",
        "mayBeString",
        "testFoldBitwiseOpStringCompare",
        "testIsBooleanResult",
        "testUndefinedComparison4",
        "mayBeStringHelper",
        "visitPostOrder",
        "testGetFunctionName4",
        "performArithmeticOp",
        "testUndefinedComparison2",
        "testFoldArithmetic2",
        "testGetNodeTypeReferenceCount",
        "tryFoldInstanceof",
        "testMergeBlock1",
        "canBeSideEffected",
        "testRemoveChildBlock",
        "testFunctionName",
        "isNew",
        "isVarDeclaration",
        "isThis",
        "testObjectMethodSideEffects",
        "testCommutativeOperators",
        "isGet",
        "nodeTypeMayHaveSideEffects",
        "testUnaryOpsStringCompare",
        "testGetVarsDeclaredInBranch",
        "has",
        "testRemoveTryChild4",
        "assertContainsAnonFunc",
        "newVarNode",
        "testUnaryOps",
        "process",
        "parse",
        "testFoldGetElem",
        "printHelper",
        "getNumRepetitions",
        "newHasLocalResult",
        "testValidDefineValue",
        "testFoldArithmeticInfinity",
        "isAssignmentOp",
        "testFoldConstructor",
        "isSimpleOperator",
        "testFoldComparison2",
        "tryFoldShift",
        "compareToUndefined",
        "getInfoForNameNode",
        "tryFoldStringIndexOf",
        "testFoldAdd1",
        "testFoldLeft",
        "removeChild",
        "testIsControlStructureCodeBlock",
        "isGetOrSetKey",
        "testIsFunctionExpression1",
        "isFunctionDeclaration",
        "isString",
        "tryFoldComparison",
        "tryFoldStringSubstr",
        "testDivision",
        "testFoldLiteralNames",
        "getNode",
        "join",
        "getConditionExpression",
        "precedence",
        "isNameReferenced",
        "containsCall",
        "assertLiteralAndImmutable",
        "MatchNameNode",
        "testIsNumbericResult",
        "foldSame",
        "tryFoldUnaryOperator",
        "getAssignedValue"
      ],
      "functions_name_co_evolved_modified_file": [
        "isNumericResultHelper",
        "mayBeStringHelper",
        "apply",
        "isNumericResult",
        "isBooleanResultHelper",
        "valueCheck",
        "mayBeString",
        "isBooleanResult"
      ],
      "functions_name_co_evolved_all_files": [
        "mayBeStringHelper",
        "tryFoldLeftChildOp",
        "performArithmeticOp",
        "mayBeString",
        "tryFoldAdd",
        "tryFoldChildAddString",
        "tryFoldAddConstantString",
        "valueCheck",
        "tryFoldLeftChildAdd",
        "isNumericResult",
        "testMayBeString",
        "isBooleanResultHelper",
        "testFoldLeft",
        "isBooleanResult",
        "testFoldLeftChildConcat",
        "apply",
        "tryFoldAddConstant",
        "testIsNumbericResult",
        "isNumericResultHelper",
        "testIsBooleanResult"
      ]
    },
    "file": {
      "file_name": "NodeUtil.java",
      "file_nloc": 1806,
      "file_complexity": 801,
      "file_token_count": 11384,
      "file_before": "",
      "file_after": "",
      "file_patch": "@@ -1074,13 +1074,48 @@ public final class NodeUtil {\n     }\n   }\n \n+  /**\n+   * Apply the supplied predicate against the potential\n+   * all possible result of the expression.\n+   */\n+  static boolean valueCheck(Node n, Predicate<Node> p) {\n+    switch (n.getType()) {\n+      case Token.ASSIGN:\n+      case Token.COMMA:\n+        return valueCheck(n.getLastChild(), p);\n+      case Token.AND:\n+      case Token.OR:\n+        return valueCheck(n.getFirstChild(), p)\n+            && valueCheck(n.getLastChild(), p);\n+      case Token.HOOK:\n+        return valueCheck(n.getFirstChild().getNext(), p)\n+            && valueCheck(n.getLastChild(), p);\n+      default:\n+        return p.apply(n);\n+    }\n+  }\n+\n+  static class NumbericResultPredicate implements Predicate<Node> {\n+    public boolean apply(Node n) {\n+      return isNumericResultHelper(n);\n+    }\n+  }\n+\n+  static final NumbericResultPredicate NUMBERIC_RESULT_PREDICATE =\n+      new NumbericResultPredicate();\n+\n   /**\n    * Returns true if the result of node evaluation is always a number\n    */\n   static boolean isNumericResult(Node n) {\n+    return valueCheck(n, NUMBERIC_RESULT_PREDICATE);\n+  }\n+\n+  static boolean isNumericResultHelper(Node n) {\n     switch (n.getType()) {\n-      // NOTE: ADD is deliberately excluded as it may produce\n-      // a string.\n+      case Token.ADD:\n+        return !mayBeString(n.getFirstChild())\n+            && !mayBeString(n.getLastChild());\n       case Token.BITNOT:\n       case Token.BITOR:\n       case Token.BITXOR:\n@@ -1112,10 +1147,23 @@ public final class NodeUtil {\n     }\n   }\n \n+  static class BooleanResultPredicate implements Predicate<Node> {\n+    public boolean apply(Node n) {\n+      return isBooleanResultHelper(n);\n+    }\n+  }\n+\n+  static final BooleanResultPredicate BOOLEAN_RESULT_PREDICATE =\n+      new BooleanResultPredicate();\n+\n   /**\n    * @return Whether the result of node evaluation is always a boolean\n    */\n   static boolean isBooleanResult(Node n) {\n+    return valueCheck(n, BOOLEAN_RESULT_PREDICATE);\n+  }\n+\n+  static boolean isBooleanResultHelper(Node n) {\n     // TODO(johnlenz): Add a recursive option to recurse into\n     // AND, OR, HOOK, COMMA and ASSIGN, like \"getExpressionBooleanValue\".\n     switch (n.getType()) {\n@@ -1156,10 +1204,31 @@ public final class NodeUtil {\n     return n.getType() == Token.NULL;\n   }\n \n+  static class MayBeStringResultPredicate implements Predicate<Node> {\n+    public boolean apply(Node n) {\n+      return mayBeStringHelper(n);\n+    }\n+  }\n+\n+  static final MayBeStringResultPredicate MAY_BE_STRING_PREDICATE =\n+      new MayBeStringResultPredicate();\n+\n   /**\n    * @returns Whether the results is possibly a string.\n    */\n   static boolean mayBeString(Node n) {\n+    return mayBeString(n, true);\n+  }\n+\n+  static boolean mayBeString(Node n, boolean recurse) {\n+    if (recurse) {\n+      return valueCheck(n, MAY_BE_STRING_PREDICATE);\n+    } else {\n+      return mayBeStringHelper(n);\n+    }\n+  }\n+\n+  static boolean mayBeStringHelper(Node n) {\n     return !isNumericResult(n) && !isBooleanResult(n)\n         && !isUndefined(n) && !isNull(n);\n   }\n",
      "files_name_in_blame_commit": [
        "PeepholeFoldConstantsTest.java",
        "NodeUtilTest.java",
        "NodeUtil.java",
        "PeepholeFoldConstants.java"
      ]
    }
  },
  "commits_modify_file_before_fix": {
    "size": 137
  }
}