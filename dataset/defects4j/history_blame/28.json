{
  "id": "28",
  "blame_commit": {
    "commit": {
      "commit_id": "87071ddf324c3885361f0375b84e15c7cd62283d",
      "commit_message": "The error level shouldn't effect compiler output. Fixes issue 1079",
      "commit_author": "Nick Santos",
      "commit_date": "2013-10-03 01:14:57",
      "commit_parent": "f081cda16ed33d28c6768c67ba55c0e6e4ddc63a"
    },
    "function": {
      "function_name": "processRequireCall",
      "function_code_before": "private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n  Node left = n.getFirstChild();\n  Node arg = left.getNext();\n  if (verifyLastArgumentIsString(t, left, arg)) {\n    String ns = arg.getString();\n    ProvidedName provided = providedNames.get(ns);\n    if (provided == null || !provided.isExplicitlyProvided()) {\n      unrecognizedRequires.add(\n          new UnrecognizedRequire(n, ns, t.getSourceName()));\n    } else {\n      JSModule providedModule = provided.explicitModule;\n\n      // This must be non-null, because there was an explicit provide.\n      Preconditions.checkNotNull(providedModule);\n\n      JSModule module = t.getModule();\n      if (moduleGraph != null &&\n          module != providedModule &&\n          !moduleGraph.dependsOn(module, providedModule)) {\n        compiler.report(\n            t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n                providedModule.getName(),\n                module.getName()));\n      }\n    }\n\n    maybeAddToSymbolTable(left);\n    maybeAddStringNodeToSymbolTable(arg);\n\n    // Requires should be removed before runtime.  The one\n    // exception is if the type has not been provided yet and\n    // errors for broken requires are turned off, in which case,\n    // we will be doing a later pass that may error, so we can\n    // leave this here this time and let it error next time if it\n    // is still not provided.\n    if (provided != null || requiresLevel.isOn()) {\n      parent.detachFromParent();\n      compiler.reportCodeChange();\n    }\n  }\n}",
      "function_code_after": "private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n  Node left = n.getFirstChild();\n  Node arg = left.getNext();\n  if (verifyLastArgumentIsString(t, left, arg)) {\n    String ns = arg.getString();\n    ProvidedName provided = providedNames.get(ns);\n    if (provided == null || !provided.isExplicitlyProvided()) {\n      unrecognizedRequires.add(\n          new UnrecognizedRequire(n, ns, t.getSourceName()));\n    } else {\n      JSModule providedModule = provided.explicitModule;\n\n      // This must be non-null, because there was an explicit provide.\n      Preconditions.checkNotNull(providedModule);\n\n      JSModule module = t.getModule();\n      if (moduleGraph != null &&\n          module != providedModule &&\n          !moduleGraph.dependsOn(module, providedModule)) {\n        compiler.report(\n            t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n                providedModule.getName(),\n                module.getName()));\n      }\n    }\n\n    maybeAddToSymbolTable(left);\n    maybeAddStringNodeToSymbolTable(arg);\n\n    // Requires should be removed before runtime.  The one\n    // exception is if the type has not been provided yet, in which case,\n    // we will be doing a later pass that may error, so we can\n    // leave this here this time and let it error next time if it\n    // is still not provided.\n    if (provided != null) {\n      parent.detachFromParent();\n      compiler.reportCodeChange();\n    }\n  }\n}",
      "function_before_start_line": 295,
      "function_before_end_line": 335,
      "function_after_start_line": 295,
      "function_after_end_line": 334,
      "function_before_token_count": 209,
      "function_after_token_count": 203,
      "functions_name_modified_file": [
        "reportBadBaseClassUse",
        "addDefinition",
        "registerAnyProvidedPrefixes",
        "UnrecognizedRequire",
        "createNamespaceLiteral",
        "processSetCssNameMapping",
        "verifyOfType",
        "hotSwapScript",
        "ProcessClosurePrimitives",
        "getExportedVariableNames",
        "setSourceInfo",
        "getEnclosingDeclNameNode",
        "process",
        "processRequireCall",
        "verifyIsLast",
        "maybeAddToSymbolTable",
        "replace",
        "isNamespacePlaceholder",
        "updateMinimumModule",
        "visit",
        "verifyNotNull",
        "verifySetCssNameMapping",
        "processProvideCall",
        "verifyDefine",
        "getProvideStringNode",
        "processBaseClassCall",
        "verifyLastArgumentIsString",
        "handleCandidateProvideDefinition",
        "makeVarDeclNode",
        "makeAssignmentExprNode",
        "maybeAddStringNodeToSymbolTable",
        "processDefineCall",
        "getSourceInfoOffset",
        "addProvide",
        "ProvidedName",
        "replaceGoogDefines",
        "handleTypedefDefinition",
        "isExplicitlyProvided",
        "verifyProvide",
        "processProvideFromPreviousPass",
        "createDeclarationNode",
        "createConstantJsDoc"
      ],
      "functions_name_all_files": [
        "reportBadBaseClassUse",
        "addDefinition",
        "registerAnyProvidedPrefixes",
        "UnrecognizedRequire",
        "createNamespaceLiteral",
        "processSetCssNameMapping",
        "verifyOfType",
        "hotSwapScript",
        "ProcessClosurePrimitives",
        "getExportedVariableNames",
        "setSourceInfo",
        "getEnclosingDeclNameNode",
        "process",
        "processRequireCall",
        "verifyIsLast",
        "maybeAddToSymbolTable",
        "replace",
        "isNamespacePlaceholder",
        "updateMinimumModule",
        "visit",
        "verifyNotNull",
        "verifySetCssNameMapping",
        "processProvideCall",
        "verifyDefine",
        "getProvideStringNode",
        "processBaseClassCall",
        "verifyLastArgumentIsString",
        "handleCandidateProvideDefinition",
        "makeVarDeclNode",
        "makeAssignmentExprNode",
        "maybeAddStringNodeToSymbolTable",
        "processDefineCall",
        "getSourceInfoOffset",
        "addProvide",
        "ProvidedName",
        "replaceGoogDefines",
        "handleTypedefDefinition",
        "isExplicitlyProvided",
        "verifyProvide",
        "processProvideFromPreviousPass",
        "createDeclarationNode",
        "createConstantJsDoc"
      ],
      "functions_name_co_evolved_modified_file": [
        "processRequireCall"
      ],
      "functions_name_co_evolved_all_files": [
        "processRequireCall"
      ]
    },
    "file": {
      "file_name": "ProcessClosurePrimitives.java",
      "file_nloc": 844,
      "file_complexity": 200,
      "file_token_count": 5558,
      "file_before": "",
      "file_after": "",
      "file_patch": "@@ -322,12 +322,11 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n       maybeAddStringNodeToSymbolTable(arg);\n \n       // Requires should be removed before runtime.  The one\n-      // exception is if the type has not been provided yet and\n-      // errors for broken requires are turned off, in which case,\n+      // exception is if the type has not been provided yet, in which case,\n       // we will be doing a later pass that may error, so we can\n       // leave this here this time and let it error next time if it\n       // is still not provided.\n-      if (provided != null || requiresLevel.isOn()) {\n+      if (provided != null) {\n         parent.detachFromParent();\n         compiler.reportCodeChange();\n       }\n",
      "files_name_in_blame_commit": [
        "ProcessClosurePrimitives.java"
      ]
    }
  },
  "commits_modify_file_before_fix": {
    "size": 63
  }
}