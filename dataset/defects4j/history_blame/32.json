{
  "id": "32",
  "blame_commit": {
    "commit": {
      "commit_id": "b5a15f856546dca1c5d923db54d5a5bc301c8e98",
      "commit_message": "Automated g4 rollback\n\n*** Reason for rollback ***\n\nbreaks tests\n\n*** Original change description ***\n\nAdd a heuristic for figuring out the type of an inferred variable\nthat is read across multiple scopes. This isn't perfect, but it should\ncatch a lot of common cases.\nFixes issue 726\n\nTested:\nyes\n\nDELTA=249  (9 added, 221 deleted, 19 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION=5333\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2132 b0f006be-c8cd-11de-a2e8-8d36a3108c74",
      "commit_author": "nicksantos@google.com",
      "commit_date": "2012-08-09 02:01:44",
      "commit_parent": "81af563b02f3b2694a227963a1d5a8dede7eefbd"
    },
    "function": {
      "function_name": "visit",
      "function_code_before": "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (t.inGlobalScope()) {\n    return;\n  }\n\n  if (n.isReturn() && n.getFirstChild() != null) {\n    data.get(t.getScopeRoot()).recordNonEmptyReturn();\n  }\n\n  if (t.getScopeDepth() <= 1) {\n    // The first-order function analyzer looks at two types of variables:\n    //\n    // 1) Local variables that are assigned in inner scopes (\"escaped vars\")\n    //\n    // 2) Local variables that are assigned more than once.\n    //\n    // We treat all global variables as escaped by default, so there's\n    // no reason to do this extra computation for them.\n    return;\n  }\n\n  if (n.isName() && NodeUtil.isLValue(n) &&\n      // Be careful of bleeding functions, which create variables\n      // in the inner scope, not the scope where the name appears.\n      !NodeUtil.isBleedingFunctionName(n)) {\n    String name = n.getString();\n    Scope scope = t.getScope();\n    Var var = scope.getVar(name);\n    if (var != null) {\n      Scope ownerScope = var.getScope();\n      if (ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode()).recordAssignedName(name);\n      }\n\n      if (scope != ownerScope && ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode()).recordEscapedVarName(name);\n      }\n    }\n  } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&\n      NodeUtil.isLValue(n)) {\n    String name = NodeUtil.getRootOfQualifiedName(n).getString();\n    Scope scope = t.getScope();\n    Var var = scope.getVar(name);\n    if (var != null) {\n      Scope ownerScope = var.getScope();\n      if (scope != ownerScope && ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode())\n            .recordEscapedQualifiedName(n.getQualifiedName());\n      }\n    }\n  }\n}",
      "function_code_after": "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (t.inGlobalScope()) {\n    return;\n  }\n\n  if (n.isReturn() && n.getFirstChild() != null) {\n    data.get(t.getScopeRoot()).recordNonEmptyReturn();\n  }\n\n  if (t.getScopeDepth() <= 2) {\n    // We only need to worry about escaped variables at depth 3.\n    // An variable escaped at depth 2 is, by definition, a global variable.\n    // We treat all global variables as escaped by default, so there's\n    // no reason to do this extra computation for them.\n    return;\n  }\n\n  if (n.isName() && NodeUtil.isLValue(n)) {\n    String name = n.getString();\n    Scope scope = t.getScope();\n    Var var = scope.getVar(name);\n    if (var != null) {\n      Scope ownerScope = var.getScope();\n      if (scope != ownerScope && ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode()).recordEscapedVarName(name);\n      }\n    }\n  } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&\n      NodeUtil.isLValue(n)) {\n    String name = NodeUtil.getRootOfQualifiedName(n).getString();\n    Scope scope = t.getScope();\n    Var var = scope.getVar(name);\n    if (var != null) {\n      Scope ownerScope = var.getScope();\n      if (scope != ownerScope && ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode())\n            .recordEscapedQualifiedName(n.getQualifiedName());\n      }\n    }\n  }\n}",
      "function_before_start_line": 1985,
      "function_before_end_line": 2036,
      "function_after_start_line": 1975,
      "function_after_end_line": 2015,
      "function_before_token_count": 306,
      "function_after_token_count": 272,
      "functions_name_modified_file": [
        "DiscoverEnumsAndTypedefs",
        "defineName",
        "CollectProperties",
        "FirstOrderFunctionAnalyzer",
        "declareNativeFunctionType",
        "getFunctionType",
        "findOverriddenFunction",
        "checkForTypedef",
        "AbstractScopeBuilder",
        "declareNativeValueType",
        "GlobalScopeBuilder",
        "attachLiteralTypes",
        "processObjectLitProperties",
        "getQnameRootScope",
        "getObjectSlot",
        "shouldTraverse",
        "applyDelegateRelationship",
        "isQualifiedNameInferred",
        "declareArguments",
        "process",
        "patchGlobalScope",
        "DeferredSetType",
        "StubDeclaration",
        "createEnumTypeFromNodes",
        "handleFunctionInputs",
        "getNativeType",
        "resolveTypes",
        "shouldUseFunctionLiteralType",
        "defineSlot",
        "assertDefinitionNode",
        "visit",
        "TypedScopeCreator",
        "build",
        "identifyNameNode",
        "getDeclaredType",
        "defineVar",
        "createScope",
        "maybeDeclareQualifiedName",
        "defineCatch",
        "getDeclaredTypeInAnnotation",
        "isQnameRootedInGlobalScope",
        "checkForClassDefiningCalls",
        "resolve",
        "defineFunctionLiteral",
        "checkForCallingConventionDefiningCalls",
        "declareNativeType",
        "setDeferredType",
        "resolveStubDeclarations",
        "defineObjectLiteral",
        "enterScope",
        "getFunctionAnalysisResults",
        "LocalScopeBuilder",
        "createFunctionTypeFromNodes",
        "createInitialScope",
        "maybeCollectMember"
      ],
      "functions_name_all_files": [
        "getDeclaration",
        "testScoping9",
        "testExtendFunction2",
        "testParameterizedObject4",
        "testExtendedInterfacePropertiesCompatibility4",
        "testBitOperation2",
        "testOr5",
        "testName5",
        "isUnflowable",
        "testTypeof",
        "getArgumentsVar",
        "hasMoreTagsToResolve",
        "testConstructorAlias7",
        "testCallDateConstructorAsFunction",
        "referencesThis",
        "getOrCreateConstructor",
        "testThis14",
        "testInheritanceCheck6",
        "inferInheritance",
        "shouldUseFunctionLiteralType",
        "testComparison11",
        "testParameterizedArray2",
        "inferReturnType",
        "testLateExtends",
        "testThisTypeOfFunction4",
        "testParameterizedObject2",
        "isValidDefineValue",
        "TypeInference",
        "isStatementBlock",
        "parseAndTypeCheck",
        "inferParameterTypes",
        "testBooleanReduction5",
        "testForwardTypeDeclaration4",
        "testLends10",
        "isValidSimpleName",
        "testIssue700",
        "resolveStubDeclarations",
        "isVarOrSimpleAssignLhs",
        "testFunctionInference11",
        "testThis1",
        "testInheritanceCheck15",
        "testSuperClassDefinedAfterSubClass2",
        "testDfa11",
        "traverseCall",
        "testScopedConstructors2",
        "reportError",
        "testEnum23",
        "testInferredParam5",
        "testNoPersistentTypeInferenceForObjectProperties",
        "testFunctionArguments11",
        "testScoping10",
        "testNativeCast4",
        "testAssignInference",
        "testInheritanceCheck10_2",
        "testVar13",
        "Var",
        "DiscoverEnumsAndTypedefs",
        "MatchNodeType",
        "testVar14",
        "testNestedCasts",
        "trimJsWhiteSpace",
        "testInnerFunction2",
        "testFunctionInference2",
        "testDoubleNestedInterface",
        "testQualifiedNameInference10",
        "testAdd2",
        "testEnum20",
        "DeferredSetType",
        "testBackwardsTypedefUse2",
        "testDuplicateInstanceMethod2",
        "testGoodExtends6",
        "identifyNameNode",
        "testDuplicateStaticPropertyDecl3",
        "testDuplicateInstanceMethod3",
        "testEnum17",
        "testInterfaceInheritanceCheck7",
        "testScoping8",
        "testEnum1",
        "testStubConstructorImplementingInterface",
        "testControlFlowRestrictsType2",
        "testAbstractMethodHandling2",
        "testVar10",
        "declareNativeFunctionType",
        "testVar3",
        "mayBeFromExterns",
        "applyDelegateRelationship",
        "testInnerFunction5",
        "testAdd11",
        "testInferredReturn2",
        "testInheritanceCheck10_1",
        "testTemplateType2",
        "testBug1943776",
        "testBadInterfaceExtends5",
        "getStringValue",
        "testNameNode",
        "testTypeCheckBasicDowncast",
        "testConstructorType1",
        "maybeAddFinally",
        "testTypeCheck5",
        "testQualifiedNameReduction10",
        "testTypeInferenceWithClosure1",
        "testOverriddenParams2",
        "testEnum39",
        "setUp",
        "isSymmetricOperation",
        "testOr4",
        "isOptionalParameter",
        "testMultipleExtendsInterface5",
        "testInheritanceCheck9_3",
        "getArrayElementStringValue",
        "traverseAnd",
        "setType",
        "testStringComparison2",
        "testInterfaceAssignment6",
        "testGlobalThis1",
        "testHookRestrictsType4",
        "testDfa2",
        "testTypeInferenceWithCast2",
        "testFunctionInference10",
        "getAllSymbols",
        "testBang4",
        "testBug1942972",
        "testStringUnboxing",
        "testBooleanUnboxing",
        "testDirectPrototypeAssignment3",
        "testBug911118",
        "testFunctionInference13",
        "testCall10",
        "testGoodExtends13",
        "testBug930117",
        "testFunctionCall8",
        "testConstructorAlias6",
        "testObjectPropertyTypeInferredInLocalScope2",
        "isForIn",
        "defineFunctionLiteral",
        "testAssignToUntypedProperty",
        "testBug908701",
        "testNoTypeCheck8",
        "testOptionalArgFunctionParam4",
        "testNew14",
        "testVar1",
        "testParameterizedArray5",
        "markEscaped",
        "testBooleanReduction6",
        "TypeCheckResult",
        "testMissingProperty22",
        "testBang2",
        "backwardsInferenceFromCallSite",
        "testIssue725",
        "testObjectLiteral",
        "testBackwardsEnumUse3",
        "testNoTypeCheck6",
        "flowThrough",
        "testCast5",
        "testPropertyInference5",
        "testCircularTypeDef",
        "undeclare",
        "testEnum28",
        "testComparison10",
        "testMissingProperty5",
        "testFunctionInference16",
        "testInheritanceCheck9_1",
        "isVarDeclaration",
        "has",
        "testReturn1",
        "testOptionalNullableArgFunctionParam3",
        "isVarArgsParameter",
        "testBug1987544",
        "testForwardTypeDeclaration3",
        "testNoPersistentTypeInferenceForFunctionProperties",
        "testTypeCheck10",
        "testDuplicateInstanceMethod4",
        "testUndefinedNode",
        "testTypeCheck18",
        "testTypeInferenceWithClosure2",
        "testThis12",
        "testPropertyInference10",
        "testAdd6",
        "testMissingProperty2",
        "testObjectLiteralDeclaration7",
        "testComparison4",
        "testStubFunctionDeclaration9",
        "testRecordType8",
        "testAddingMethodsUsingPrototypeIdiomComplexNamespace",
        "testFunctionCall3",
        "testMissingProperty8",
        "testCall4",
        "constructorCallHasSideEffects",
        "testParameterizedObject1",
        "testRecordType2",
        "testDirectPrototypeAssignment1",
        "testNew5",
        "testBug1484445",
        "testMismatchingOverridingInferredPropertyBeforeDeclaredProperty3",
        "testObjLitDef2b",
        "traverseShortCircuitingBinOp",
        "testTypeOfReduction8",
        "testIn2",
        "testMissingProperty10",
        "testTypeCheckStandaloneAST",
        "testEnumStaticMethod2",
        "testClosure1",
        "isFunctionObjectCallOrApply",
        "testNestedFunctionInference1",
        "getVars",
        "AbstractScopeBuilder",
        "testCast15",
        "testInterfaceInheritanceCheck12",
        "isSwitchCase",
        "traverseAssign",
        "testErrorMismatchingPropertyOnInterface6",
        "maybeSetBaseType",
        "testIn5",
        "testScoping1",
        "testExtendedInterfacePropertiesCompatibility7",
        "testComparison12",
        "testIssue86",
        "traverseCatch",
        "testSuperclassMatchWithMixin",
        "testEnum37",
        "isFunctionObjectCall",
        "testBackwardsTypedefUse8",
        "getBestJSDocInfo",
        "isPrototypePropertyDeclaration",
        "testNew7",
        "testMethodInference7",
        "testDuplicateTypeDef",
        "testGoodExtends2",
        "testStaticMethodDeclaration2",
        "testReturn2",
        "testDfa6",
        "isLoopStructure",
        "testVar5",
        "testDuplicateStaticMethodDecl4",
        "testThis7",
        "testTypeOfReduction6",
        "testErrorMismatchingPropertyOnInterface4",
        "getSymbol",
        "testFunctionInference5",
        "testBug909000",
        "testMissingProperty7",
        "testMethodInference1",
        "testQualifiedNameReduction1",
        "getInput",
        "testNew17",
        "testBackwardsTypedefUse9",
        "getDeclaredTypeInAnnotation",
        "testConstructorAlias4",
        "testEnum14",
        "isTypeInferred",
        "defineObjectLiteral",
        "testAdd3",
        "testStaticMethodDeclaration1",
        "testFunctionArguments6",
        "testInheritanceCheck5",
        "ensurePropertyDefined",
        "resolveType",
        "testStaticDataPropertyOnNestedInterface",
        "testInheritanceCheck3",
        "testIn6",
        "testInferredReturn4",
        "testNoForwardTypeDeclarationAndNoBraces",
        "newBooleanOutcomePair",
        "testSuperclassMatch",
        "testResolutionViaRegistry2",
        "testQualifiedNameReduction8",
        "removeChild",
        "testInterfaceInheritanceCheck6",
        "testForIn2",
        "testStringComparison3",
        "testObjLitDef1a",
        "testCall3",
        "isStatement",
        "testCast16",
        "testQualifiedNameReduction5a",
        "testBooleanAutoboxing",
        "attachLiteralTypes",
        "getNthSibling",
        "testInterfaceExtends",
        "valueCheck",
        "testEnum34",
        "testHookRestrictsType3",
        "testNew15",
        "testWhileRestrictsType1",
        "testDataPropertyOnInterface2",
        "testMissingProperty3",
        "getFunctionAnalysisResults",
        "testLends7",
        "testAnonymousPrototype1",
        "testThis13",
        "inferFromOverriddenFunction",
        "setContents",
        "testUnknownConstructorInstanceType3",
        "testUnionTemplateThisType",
        "testPropertyTypeOfUnionType",
        "GlobalScopeBuilder",
        "testStubFunctionDeclaration7",
        "testNumericComparison2",
        "testFlowScopeBug1",
        "testInterfaceAssignment11",
        "testTypeOfReduction2",
        "testDeleteOperator2",
        "testTypeOfReduction13",
        "evaluatesToLocalValue",
        "testGoogBind2",
        "testNoForwardTypeDeclaration",
        "testDefinePropertyOnNullableObject1",
        "testScoping12",
        "testCast6",
        "AstFunctionContents",
        "testOverriddenProperty5",
        "getStringNumberValue",
        "testTypeOfReduction3",
        "getParent",
        "testPrototypePropertyTypes",
        "FunctionTypeBuilder",
        "testControlFlowRestrictsType4",
        "getFunctionName",
        "testFunctionArguments9",
        "testStubFunctionDeclaration4",
        "testInterfaceInheritanceCheck5",
        "testMissingProperty34",
        "testTypeOfReduction14",
        "getPropertyType",
        "testOptionalArgFunctionReturn2",
        "testStringComparison1",
        "getDeclaredType",
        "NodeUtil",
        "testArrayAccess2",
        "testReturn7",
        "declareNativeType",
        "mayEffectMutableState",
        "testFunctionInference23",
        "testEnum42",
        "TemplateTypeReplacer",
        "CollectProperties",
        "testExtendedInterfacePropertiesCompatibility3",
        "testMultipleExtendsInterface4",
        "testNoTypeCheck12",
        "isGet",
        "shouldTraverse",
        "testCast8",
        "newVarNode",
        "testQualifiedNameReduction3",
        "testPropertyInferredPropagation",
        "testInferredReturn1",
        "traverseObjectLiteral",
        "testNumericComparison5",
        "testMethodInference3",
        "testSwitchCase8",
        "testBug2335992",
        "testForwardTypeDeclaration7",
        "testPropAccess4",
        "testQualifiedNameReduction9",
        "precedence",
        "containsCall",
        "MatchNameNode",
        "testRecordType4",
        "isAddedAsNumber",
        "testBitOperation7",
        "testAdd7",
        "testUnknownConstructorInstanceType1",
        "testAdd21",
        "testNoTypeCheck3",
        "testTypeCheck20",
        "updateBind",
        "testPropertyInference3",
        "testTypeOfReduction9",
        "testGoodExtends16",
        "testFunctionType",
        "testInstanceof6",
        "isFunctionObjectApply",
        "testGoodExtends10",
        "testFunctionArguments3",
        "getCatchBlock",
        "testOverriddenParams6",
        "maybeCollectMember",
        "testForwardPropertyReference",
        "getFunctionType",
        "inferTemplateTypeName",
        "testVar6",
        "testLends8",
        "disable_testBackwardsInferenceGoogArrayFilter1",
        "testComparison5",
        "testInterfacePropertyOverride2",
        "testFunctionArguments2",
        "testInheritanceCheck16",
        "testNullOr",
        "getVarIterable",
        "testNoTypeCheck9",
        "testSwitchCase3",
        "testComparison2",
        "testCall8",
        "testMethodInference8",
        "getSourceFile",
        "testAddingMethodsUsingPrototypeIdiomSimpleNamespace",
        "testName2",
        "isImmutableValue",
        "testTypeOfReduction15",
        "getInputName",
        "testAdd5",
        "tightenTypesAfterAssertions",
        "testClosure2",
        "testInterfaceAssignment1",
        "testStubFunctionDeclaration3",
        "isExprCall",
        "isObjectLitKey",
        "testFunctionInference19",
        "testImplicitCastNotInExterns",
        "testDontAddMethodsIfNoConstructor",
        "reportWarning",
        "getSourceNode",
        "testNumericComparison1",
        "getScope",
        "testParameterizedArray4",
        "testInheritanceCheck9_2",
        "testExtendedInterfacePropertiesCompatibility6",
        "testPropertyUsedBeforeDefinition1",
        "hashCode",
        "testFunctionCall5",
        "testNew4",
        "testExtendedInterfacePropertiesCompatibility5",
        "testFunctionInference12",
        "testIn1",
        "testEnum16",
        "testAddingMethodsUsingPrototypeIdiomComplexNamespace2",
        "testMissingProperty33",
        "testInnerFunction3",
        "isFunctionTypeDeclaration",
        "testQualifiedNameInference4",
        "getFunctionParameters",
        "testSwitchCase4",
        "testBackwardsTypedefUse1",
        "Scope",
        "testCall6",
        "testBitOperation5",
        "testBackwardsInferenceGoogArrayFilter3",
        "testOptionalParameterComparedToUndefined",
        "isDeclared",
        "testControlFlowRestrictsType5",
        "testBadExtends3",
        "testTypeInferenceWithCast4",
        "makeTypeCheck",
        "testMultipleExtendsInterface2",
        "traverseWithinShortCircuitingBinOp",
        "testNew18",
        "isValidQualifiedName",
        "testBadImplements5",
        "testTypeCheck19",
        "ensurePropertyDeclared",
        "testGoodExtends9",
        "testQualifiedNameReduction4",
        "testFunctionInference6",
        "testClosureTypes",
        "testOptionalUnknownNamedType",
        "testOverriddenProperty3",
        "newQualifiedNameNode",
        "testLends2",
        "testIssue259",
        "testCast10",
        "testStubFunctionDeclaration2",
        "testMissingProperty27",
        "getJSDocInfo",
        "testHookRestrictsType5",
        "testSwitchCase7",
        "getOpFromAssignmentOp",
        "resolvedTemplateType",
        "testNew2",
        "testInterfaceAssignment5",
        "testAdd4",
        "testFunctionCall2",
        "testDuplicateRecordFields1",
        "testLends9",
        "isControlStructureCodeBlock",
        "testFunctionCall6",
        "testQualifiedNameInference3",
        "isUndefined",
        "testDuplicateRecordFields2",
        "testBang7",
        "getName",
        "testCall1",
        "testInstanceof4",
        "testBackwardsEnumUse2",
        "testGoodExtends5",
        "testReturn5",
        "testCall2",
        "testTypeDef4",
        "testEnum25",
        "testThis4",
        "testGetTypedPercent4",
        "testHookRestrictsType7",
        "testSuperclassMismatch2",
        "testIssue765",
        "testMissingProperty13",
        "testMethodInference9",
        "testInnerFunction9",
        "getInputId",
        "createScope",
        "testDuplicateStaticPropertyDecl5",
        "testBadImplements3",
        "testMissingProperty20",
        "testComparison14",
        "testDuplicateStaticPropertyDecl9",
        "getDeclarativelyUnboundVarsWithoutTypes",
        "testMissingProperty14",
        "ensurePropertyDeclaredHelper",
        "nodeTypeMayHaveSideEffects",
        "testInnerFunction8",
        "testGlobalThis2",
        "resolveTypes",
        "testRecordType3",
        "isRelationalOperation",
        "testCast11",
        "testReturn3",
        "testEnum3",
        "testQualifiedNameInference13",
        "testParameterizedArray1",
        "testAliasedEnum1",
        "testName1",
        "isTryFinallyNode",
        "testFunctionLiteralDefinedThisArgument2",
        "testBadImplementsNonInterfaceType",
        "testTypeOfReduction12",
        "testThis10",
        "testOptionalArgFunctionParam3",
        "hasFinally",
        "testInferredParam2",
        "testAdd14",
        "testEnum12",
        "isConstantName",
        "getBooleanOutcomePair",
        "testCall11",
        "testAdd1",
        "getInstanceType",
        "getOutcomeFlowScope",
        "testMissingProperty36",
        "testUndefinedVar",
        "testStringNode",
        "testParameterizedArray7",
        "testNativeCast2",
        "testAdd8",
        "branchedFlowThrough",
        "testDirectPrototypeAssign",
        "testArrayAccess9",
        "getRValueOfLValue",
        "traverseHook",
        "testAbstractMethodHandling4",
        "testTypeDef5",
        "testBadConstructorCall",
        "isExpressionResultUsed",
        "getInverseOperator",
        "testMethodInference4",
        "isExtern",
        "testBooleanReduction3",
        "testTypeCheck11",
        "testTypeof2",
        "testBadExtends2",
        "testForwardTypeDeclaration2",
        "visit",
        "testConstructorAlias8",
        "testPropertyInference6",
        "testGetprop3",
        "testInterfaceAssignment10",
        "inferThisType",
        "testEnum29",
        "testMultipleExtendsInterface3",
        "LocalScopeBuilder",
        "testTypeof3",
        "isStatementParent",
        "testExtendBuiltInType1",
        "updateScopeForTypeChange",
        "testNoTypeCheck4",
        "testTypeCheck1",
        "testOverriddenProperty6",
        "testExtendedInterfacePropertiesCompatibility2",
        "testBug1940769",
        "testMissingProperty16",
        "arrayToString",
        "testDfa8",
        "testMultipleExtendsInterfaceAssignment",
        "testMissingProperty40",
        "testBooleanPreservation4",
        "getReferences",
        "testReflectObject2",
        "recordNonEmptyReturn",
        "testPrototypeLoop",
        "testNew10",
        "testIssue368",
        "testAnd3",
        "testQualifiedNameReduction6",
        "testAdd18",
        "testAddingMethodsUsingPrototypeIdiomComplexNamespace1",
        "getNearestFunctionName",
        "testBackwardsTypedefUse4",
        "testRecordType5",
        "testInferredReturn6",
        "isToStringMethodCall",
        "testObjectLiteralDeclaration5",
        "testCall7",
        "testAdd13",
        "testGoodImplements2",
        "traverseGetProp",
        "testTypeOfReduction7",
        "checkObjectType",
        "testFunctionBind3",
        "testBitOperation6",
        "testTypeCheck23",
        "testComparison13",
        "testAddMethodsPrototypeTwoWays",
        "testIssue669",
        "testLocallyInferredGlobalProperty1",
        "assertDefinitionNode",
        "redeclareSimpleVar",
        "testAddSingletonGetter",
        "testGoodExtends12",
        "testEnum9",
        "getTypeOfThis",
        "testNew3",
        "testArrayAccess3",
        "testIssue635",
        "testPropertyInference2",
        "testParameterizedObject5",
        "testBadInterfaceExtends4",
        "buildAndRegister",
        "FirstOrderFunctionAnalyzer",
        "testInterfaceInstantiation",
        "testQualifiedNameInference6",
        "testNumberUnboxing",
        "testTypeInferenceWithCast5",
        "testConstructorAlias3",
        "testGetprop2",
        "testNumberNode",
        "testBadInterfaceExtends1",
        "testOverriddenReturn1",
        "isSimpleFunctionObjectCall",
        "testMissingProperty1",
        "testForIn4",
        "testAdd19",
        "testHigherOrderFunctions3",
        "hasCatchHandler",
        "testInnerFunction6",
        "testRecordType7",
        "testFunctionCall1",
        "testEnum40",
        "testGlobalThis8",
        "testPropAccess2",
        "testFunctionInference7",
        "testExternFunctionType",
        "testDuplicateStaticMethodDecl3",
        "isHoistedFunctionDeclaration",
        "testDuplicateInstanceMethod5",
        "isEmptyFunctionExpression",
        "getBestLValueOwner",
        "testInterfaceAssignment3",
        "getLoopCodeBlock",
        "testConstructorType8",
        "updateTypeOfParameters",
        "testNoTypeCheck13",
        "testBackwardsConstructor1",
        "traverseOr",
        "checkForClassDefiningCalls",
        "testBooleanPreservation1",
        "getPrototypeClassName",
        "testTypeCheckDefaultExterns",
        "testInterfaceNonEmptyFunction",
        "testMissingProperty15",
        "testEnum13",
        "testInterfacePropertyNotImplemented",
        "testMissingProperty28",
        "opToStrNoFail",
        "testAnd7",
        "testGlobalThis9",
        "testBitOperation8",
        "testComparison3",
        "testInterfaceInheritanceCheck8",
        "testFunctionInference18",
        "isCommutative",
        "testInterfaceAssignment7",
        "testAnnotatedPropertyOnInterface4",
        "testAnd5",
        "testPropertyInference8",
        "visitPreOrder",
        "testControlFlowRestrictsType11",
        "testEnum24",
        "testOverriddenParams4",
        "testEnum11",
        "mayBeStringHelper",
        "testCast3",
        "testOptionalAllType",
        "testDuplicateStaticPropertyDec20",
        "testActiveXObject",
        "testResolutionViaRegistry1",
        "testAliasedEnum5",
        "testMissingProperty11",
        "testWarnUnannotatedPropertyOnInterface6",
        "testNoTypeCheck5",
        "testDuplicateStaticPropertyDecl4",
        "testInterfaceInheritanceCheck1",
        "testQualifiedNameInference8",
        "testCall9",
        "testOptionalNullableArgFunctionParam2",
        "testMinimalConstructorAnnotation",
        "testPropertyInference7",
        "testGoodExtends8",
        "testFunctionInference15",
        "testUnionOfFunctionAndType",
        "Predicate<Var>",
        "testDfa10",
        "testUndeclaredGlobalProperty1",
        "testNew13",
        "checkForStateChangeHelper",
        "testDuplicateStaticPropertyDecl6",
        "testMissingProperty26",
        "getSlot",
        "testSheqRefinedScope",
        "testTypeCheckNoDowncastToNumber",
        "testGetTypedPercent3",
        "testIn7",
        "testDfa5",
        "testThis5",
        "testDefinePropertyOnNullableObject2",
        "isBooleanResultHelper",
        "getSourceName",
        "testGoodExtends11",
        "getBooleanOutcomes",
        "testBug592170",
        "testPropAccess3",
        "apply",
        "testNativeCast1",
        "isNullOrUndefined",
        "getArgumentForFunction",
        "testGlobalThis6",
        "testDuplicateStaticPropertyDecl2",
        "testDfa7",
        "testOptionalArgFunctionParam2",
        "testName3",
        "testEnum8",
        "testBug901455",
        "get",
        "testTypeOfReduction4",
        "testTypeInferenceWithCast1",
        "testComplexNamespace",
        "testTypeCheck9",
        "testTypeCheck4",
        "testGoodExtends4",
        "testAdd9",
        "testEnum35",
        "testAbstractMethodHandling3",
        "testForIn1",
        "getPrototypePropertyName",
        "callHasLocalResult",
        "defineCatch",
        "testGlobalThis3",
        "testEnum6",
        "testVar2",
        "isControlStructure",
        "testInferredParam6",
        "isReferenceName",
        "checkForTypedef",
        "testMultipleExtendsInterfaceParamPass",
        "testMissingProperty29",
        "testSuperClassDefinedAfterSubClass1",
        "traverseChildren",
        "testControlFlowRestrictsType9",
        "testBadImplementsNonObjectType",
        "testFunctionLiteralDefinedThisArgument",
        "testNullAnd",
        "getRootOfQualifiedName",
        "testPropertyUsedBeforeDefinition2",
        "testNew11",
        "testMissingProperty25",
        "testControlFlowRestrictsType6",
        "testNumericComparison4",
        "testIssue124b",
        "testFunctionInference20",
        "testEnum10",
        "testOr3",
        "testDuplicateLocalVarDecl",
        "testOverriddenProperty1",
        "testEnum41",
        "testBadImplements2",
        "testUndeclaredGlobalProperty2",
        "testFunctionArguments13",
        "testPropertyInference9",
        "testAnd1",
        "canBeSideEffected",
        "testThis11",
        "testBooleanReduction2",
        "testImplicitCast",
        "getVar",
        "testIssue537c",
        "isSimpleOperator",
        "testClosure3",
        "testSwitchCase1",
        "isGetOrSetKey",
        "testVar4",
        "testTypeCheck17",
        "testPrototypePropertyReference",
        "testInterfaceAssignment9",
        "declare",
        "getArgumentForCallOrNew",
        "testMissingProperty37",
        "testDuplicateStaticPropertyDecl1",
        "testBadInterfaceExtends2",
        "testSwitchCase5",
        "testMethodInference5",
        "redeclareVarsInsideBranch",
        "testVar11",
        "testFlowScopeBug2",
        "getObjectSlot",
        "testLends4",
        "testTypeOfReduction11",
        "isBottom",
        "testAdd15",
        "testAdd12",
        "testControlFlowRestrictsType1",
        "testDfa4",
        "testFunctionCall7",
        "testQualifiedNameInference2",
        "testInheritanceCheck17",
        "testAssignToUntypedVariable",
        "testControlFlowRestrictsType8",
        "testArrayAccess4",
        "testInferredParam3",
        "testWhileRestrictsType2",
        "isLatin",
        "testEnum36",
        "testStaticMethodDeclaration3",
        "testConstructorType7",
        "testHookRestrictsType1",
        "testDataPropertyOnInterface4",
        "mayHaveSideEffects",
        "testNew9",
        "testBooleanPreservation3",
        "testGlobalThis2b",
        "testNamespacedConstructor",
        "recordEscapedVarName",
        "testNoTypeCheck14",
        "testMultipleExtendsInterface6",
        "testForIn5",
        "testResolvingNamedTypes",
        "testGenerics1",
        "testStringComparison5",
        "testAbstractMethodHandling1",
        "testObjectLiteralDeclaration1",
        "testQualifiedNameInference5",
        "testThis2",
        "getImpureBooleanValue",
        "testInterfaceAssignment8",
        "testControlFlowRestrictsType10",
        "testGoodExtends1",
        "testFunctionArguments8",
        "testDuplicateStaticPropertyDecl8",
        "testClosure6",
        "build",
        "isTryCatchNodeContainer",
        "testMissingProperty23",
        "testComparison15",
        "testTypeCheck14",
        "maybeDeclareQualifiedName",
        "testCallErrorConstructorAsFunction",
        "getEscapedQualifiedNames",
        "testCast12",
        "testInterfacePropertyOverride1",
        "testCast13",
        "testArrayAccess6",
        "testTypeCheck6",
        "testBooleanType",
        "testConstructorAlias5",
        "testPropertyInference1",
        "testAnonymousPrototype2",
        "testInterfaceInheritanceCheck3",
        "testBadImplements6",
        "testTypeCheckCustomExterns2",
        "traverseGetElem",
        "testInferredParam1",
        "testBackwardsTypedefUse10",
        "getType",
        "disable_testBadTemplateType4",
        "testMismatchingOverridingInferredPropertyBeforeDeclaredProperty1",
        "getNode",
        "testResolutionViaRegistry4",
        "testTypeCheckCustomExterns",
        "testForwardTypeDeclaration10",
        "patchGlobalScope",
        "handleFunctionInputs",
        "testFunctionInference21",
        "testScoping2",
        "testAnd4",
        "TypedScopeCreator",
        "testExtendFunction1",
        "testScoping7",
        "testMethodInference2",
        "testObjLitDef5",
        "testMultipleExtendsInterface1",
        "testStubFunctionDeclaration8",
        "testThis6",
        "testSuperclassMismatch1",
        "testGlobalThis4",
        "testNew6",
        "getTypedPercent",
        "testBug2341812",
        "testGoodImplements5",
        "disable_testBadTemplateType5",
        "testNoTypeCheck1",
        "testConstructorAlias1",
        "testOptionalArgFunctionParamError",
        "declareArguments",
        "createEnumTypeFromNodes",
        "newCallNode",
        "testForIn3",
        "testAnd2",
        "testBackwardsInferenceGoogArrayFilter2",
        "testAssign1",
        "getVarsDeclaredInBranch",
        "testIssue301",
        "testPrintFunctionName1",
        "testClosure5",
        "testMismatchingOverridingInferredPropertyBeforeDeclaredProperty2",
        "testInterfaceInheritanceCheck9",
        "testTypeCheck21",
        "testInnerFunction10",
        "traverseAdd",
        "testNew8",
        "testUnknownConstructorInstanceType2",
        "testBackwardsInferenceGoogArrayFilter4",
        "isWithinLoop",
        "testInheritanceCheck4",
        "testMissingProperty19",
        "testAliasedEnum3",
        "testStubFunctionDeclaration1",
        "testEnum2",
        "testAnonymousType2",
        "testComparison6",
        "testMissingProperty4",
        "testHigherOrderFunctions5",
        "testMissingProperty9",
        "testBackwardsConstructor2",
        "testScoping4",
        "testEnum18",
        "mayBeString",
        "testTypeDef3",
        "testFunctionBind2",
        "disable_testFunctionLiteralUndefinedThisArgument",
        "testSwitchCase2",
        "testNoTypeCheck10",
        "testStubFunctionDeclaration5",
        "testAddingMethodsPrototypeIdiomAndObjectLiteralSimpleNamespace",
        "testForwardTypeDeclaration5",
        "testDuplicateInstanceMethod1",
        "testAliasedEnum4",
        "isAssignmentOp",
        "testFunctionAssignement",
        "testOr1",
        "getBestLValue",
        "testDataPropertyOnInterface1",
        "narrowScope",
        "testGoodExtends17",
        "testBug1859535",
        "testReturn4",
        "testDuplicateStaticMethodDecl5",
        "testQualifiedNameInference9",
        "testEnumStaticMethod1",
        "testFunctionBind1",
        "toString",
        "testBug1940591",
        "testIssue537a",
        "testDeleteOperator1",
        "isObjectCallMethod",
        "testInstanceOfReduction3",
        "copyNameAnnotations",
        "isConstantByConvention",
        "newUndefinedNode",
        "testScopedConstructors1",
        "testFunctionArguments1",
        "testIssue124",
        "testMissingProperty35",
        "testEnum19",
        "testFunctionArguments7",
        "testObjectPropertyTypeInferredInLocalScope3",
        "testInnerFunction4",
        "testGetTypedPercent5",
        "testGoodExtends3",
        "testBackwardsTypedefUse3",
        "testConstructorType2",
        "testInferredParam4",
        "testResolutionViaRegistry3",
        "getNumberValue",
        "testArrayAccess1",
        "testStringComparison4",
        "traverseNew",
        "testGoogBind1",
        "testValueTypeBuiltInPrototypePropertyType",
        "testQualifiedNameReduction5c",
        "testBadMultipleExtendsClass",
        "testImplicitCastSubclassAccess",
        "testInferredReturn3",
        "testAnnotatedPropertyOnInterface2",
        "tryMergeBlock",
        "testGatherProperyWithoutAnnotation1",
        "testInheritanceCheck8",
        "testTypeCheck13",
        "testUnknownPrototypeChain",
        "testDuplicateStaticMethodDecl1",
        "equals",
        "testInstanceof3",
        "testIn4",
        "defineName",
        "testArrayAccess7",
        "getParentNode",
        "getGlobalScope",
        "testBadExtends4",
        "getPureBooleanValue",
        "testAssign3",
        "testFunctionArguments14",
        "testVar15",
        "testTypeCheck12",
        "testConstructorType4",
        "isPrototypeProperty",
        "testObjectLiteralDeclaration3",
        "testCast7",
        "isSimpleOperatorType",
        "isLValue",
        "getInitialValue",
        "testPropAccess",
        "testHigherOrderFunctions2",
        "dereferencePointer",
        "visitPostOrder",
        "testThis3",
        "BooleanOutcomePair",
        "testGoodImplements7",
        "isDefine",
        "testAdd16",
        "testComparison8",
        "isNoShadow",
        "isQualifiedNameInferred",
        "testOverriddenProperty4",
        "maybeResolveTemplatedType",
        "testHookRestrictsType6",
        "testGoodImplements3",
        "testGetTypedPercent1",
        "testAdd10",
        "testParameterizedArray3",
        "testNoTypeCheck11",
        "testInterfacePropertyNotImplemented2",
        "getJSType",
        "testBooleanReduction4",
        "testReturn6",
        "testBug908625",
        "enterScope",
        "checkForCallingConventionDefiningCalls",
        "isNameReferenced",
        "testInstanceof5",
        "isLocal",
        "testNumericComparison3",
        "testExtendedInterfacePropertiesCompatibility8",
        "testFunctionMasksVariableBug",
        "testDeclareBuiltInConstructor",
        "testInterfaceInheritanceCheck10",
        "testEnum32",
        "testHookRestrictsType2",
        "getEscapedVarNames",
        "testBooleanNodeFalse",
        "parseAndTypeCheckWithScope",
        "testInstanceOfReduction2",
        "testComparison9",
        "testQualifiedNameInference7",
        "traverseReturn",
        "testComparison7",
        "testConstructorType5",
        "testInnerFunction1",
        "testInterfaceInheritanceCheck4",
        "testMismatchingOverridingInferredPropertyBeforeDeclaredProperty4",
        "testBadImplements4",
        "testControlFlowRestrictsType3",
        "testInterfaceAssignment12",
        "testFunctionArguments5",
        "testPropertyCanBeDefinedInObject",
        "testInstanceof2",
        "testHigherOrderFunctions4",
        "testAnd6",
        "testMissingProperty21",
        "testLends3",
        "testVar7",
        "testStubFunctionDeclaration6",
        "testIssue688",
        "setDebugInformation",
        "testTypeCheck8",
        "isAssociative",
        "testResolutionViaRegistry5",
        "testConstructorType9",
        "testConstructorAlias10",
        "isVarArgsFunction",
        "booleanNode",
        "testTypeCheck22",
        "testInstanceof1",
        "testInheritanceCheck1",
        "testInterfaceAssignment4",
        "testInferredReturn7",
        "testEnum26",
        "testCall5",
        "addParameter",
        "testNew12",
        "testDfa13",
        "testOptionalArgFunctionReturn",
        "testName4",
        "traverseArrayLiteral",
        "resolve",
        "isEmptyBlock",
        "testFunctionInference14",
        "testEnum21",
        "getCount",
        "testNew16",
        "getNameReferenceCount",
        "testEnum15",
        "testFunctionArguments15",
        "testVar9",
        "testSwitchCase6",
        "testIssue380",
        "testEnum38",
        "isExecutedExactlyOnce",
        "getFunctionBody",
        "getBestLValueName",
        "testGoodExtends15",
        "Arguments",
        "testThisTypeOfFunction2",
        "testNativeCast3",
        "testFunctionArguments10",
        "getObjectLitKeyName",
        "getOwnSlot",
        "testDuplicateStaticMethodDecl2",
        "testForwardTypeDeclaration1",
        "isConst",
        "testValueOfComparison1",
        "testInheritanceCheck12",
        "testMissingProperty17",
        "getRootNode",
        "testFunctionInference4",
        "testTypeDef2",
        "testBang1",
        "testPrintFunctionName2",
        "testObjLitDef3a",
        "testAbstractMethodHandling6",
        "testBackwardsEnumUse1",
        "testBadImplements1",
        "getFunctionJSDocInfo",
        "isMarkedEscaped",
        "testQualifiedNameInference12",
        "defineSlot",
        "testFunctionInference9",
        "testBitOperation1",
        "testEnum30",
        "testIn3",
        "testMissingProperty42",
        "testNoTypeCheck7",
        "testBooleanPreservation2",
        "getAssignedValue",
        "testLends11",
        "testInstanceOfReduction1",
        "testForwardTypeDeclaration6",
        "isLiteralValue",
        "testGetTypedPercent6",
        "testTypeInferenceWithNoEntry1",
        "getQnameRootScope",
        "testFunctionArguments4",
        "testFunctionInference3",
        "getParentScope",
        "traverseName",
        "testGatherProperyWithoutAnnotation2",
        "testGoodImplements6",
        "testDfa9",
        "testNew1",
        "mayHaveSingleThrow",
        "testMissingProperty18",
        "testGoodExtends7",
        "testForwardTypeDeclaration8",
        "typeCheck",
        "testRecordType1",
        "testEnum27",
        "testParameterizedArray6",
        "testNumberAutoboxing",
        "isBooleanResult",
        "defineVar",
        "testOptionalArgFunctionParam",
        "testObjLitDef2a",
        "caseTemplateType",
        "testBitOperation4",
        "testAnonymousType3",
        "testBadImplementsAConstructor",
        "isNumericResultHelper",
        "getScopeDeclaredIn",
        "getNodeTypeReferenceCount",
        "testIssue483",
        "testConstructorType6",
        "testInferredReturn5",
        "mayHaveNonEmptyReturns",
        "testObjectLiteralDeclaration2",
        "testObjLitDef1b",
        "testBooleanNodeTrue",
        "testBitOperation3",
        "testWarnDataPropertyOnInterface4",
        "testDirectPrototypeAssignment2",
        "testOverriddenProperty2",
        "testIssue783",
        "testBadExtends1",
        "testLends1",
        "testFunctionInference8",
        "testErrorMismatchingPropertyOnInterface5",
        "testThis9",
        "testTypeCheck2",
        "testRecordType6",
        "testDuplicateStaticPropertyDecl7",
        "testBackwardsEnumUse4",
        "testGlobalThis5",
        "testMissingProperty31",
        "testIssue537d",
        "testExtendedInterfacePropertiesCompatibility1",
        "processObjectLitProperties",
        "maybeResolveTemplateTypeFromNodes",
        "testDfa1",
        "testBadInterfaceExtends3",
        "testOverriddenParams1",
        "testExtendBuiltInType2",
        "testCast4",
        "testTypeInferenceWithNoEntry2",
        "testObjLitDef4",
        "testBang6",
        "testEnum7",
        "testOr2",
        "testFunctionArguments16",
        "testNumericComparison6",
        "suppressMissingProperty",
        "testOverriddenParams3",
        "testTypeOfReduction10",
        "testAdd17",
        "testScoping11",
        "testMethodInference6",
        "testInterfaceInheritanceCheck2",
        "findOverriddenFunction",
        "testVar12",
        "testInheritanceCheck7",
        "testInterfaceInheritanceCheck13",
        "testConstructorAlias9",
        "testOverriddenParams5",
        "getNativeType",
        "testBackwardsEnumUse5",
        "testObjectPropertyTypeInferredInLocalScope1",
        "isStrWhiteSpaceChar",
        "testIssue586",
        "testVar8",
        "testQualifiedNameReduction2",
        "testThisTypeOfFunction1",
        "isExprAssign",
        "createInitialScope",
        "testBackwardsTypedefUse7",
        "testAbstractMethodHandling5",
        "testTemplateType1",
        "testNoTypeCheck2",
        "testInheritanceCheck10_3",
        "testTypeCheck15",
        "inferPropertyTypesToMatchConstraint",
        "testMissingProperty39",
        "testFunctionInference1",
        "newName",
        "testObjectLiteralDeclaration4",
        "getJoinedFlowScope",
        "getNameNode",
        "isFunctionExpression",
        "testFunctionArguments12",
        "testValueOfComparison2",
        "testInheritanceCheck13",
        "testTypeDef1",
        "getObjectLitKeyTypeFromValueType",
        "testDuplicateInstanceMethod6",
        "isValidPropertyName",
        "testInterfaceAssignment13",
        "testCallArrayConstructorAsFunction",
        "testInterfaceAssignment2",
        "testInitialTypingScope",
        "testLends6",
        "testBackwardsTypedefUse6",
        "testQualifiedNameInference1",
        "testClosureTypesMultipleWarnings",
        "testThis8",
        "testFunctionLiteralUnreadNullThisArgument",
        "testInheritanceCheck14",
        "testGoodImplements1",
        "testOptionalNullableArgFunctionParam",
        "numberNode",
        "StubDeclaration",
        "testHook",
        "testAnonymousType1",
        "traverse",
        "testClosure7",
        "testTypeRedefinition",
        "recordEscapedQualifiedName",
        "setDeferredType",
        "newExpr",
        "testGenericRelationalExpression",
        "createInitialEstimateLattice",
        "testMissingProperty6",
        "testAssign2",
        "testBang5",
        "process",
        "testArrayAccess8",
        "testReflectObject1",
        "testCast9",
        "testMissingProperty30",
        "testQualifiedNameInference11",
        "testAnnotatedPropertyOnInterface1",
        "testScoping3",
        "testGetprop1",
        "testMissingProperty32",
        "testTypeOfReduction5",
        "isFunctionDeclaration",
        "getDepth",
        "testInnerFunction7",
        "getConditionExpression",
        "createFunctionTypeFromNodes",
        "testGoodImplements4",
        "testObjectLiteralDeclaration6",
        "testFunctionBind5",
        "testInheritanceCheck2",
        "testCast17",
        "getAddingRoot",
        "testObjLitDef3b",
        "testIssue537b",
        "testQualifiedNameReduction7",
        "testThisTypeOfFunction3",
        "opToStr",
        "testPropertyInference4",
        "containsType",
        "testFunctionInference17",
        "testDeclaredNativeTypeEquality",
        "testTypeInferenceWithCast3",
        "containsFunction",
        "testGoodExtends14",
        "testFunctionInference22",
        "testDfa3",
        "testStringAutoboxing",
        "testParameterizedObject3",
        "testFunctionBind4",
        "isCallOrNew",
        "testBooleanReduction1",
        "testCast14",
        "testAdd20",
        "testEnum5",
        "testReturn8",
        "declareNativeValueType",
        "testLends5",
        "testStringComparison6",
        "testAliasedEnum2",
        "testOverriddenReturn2",
        "testCast2",
        "testWarnDataPropertyOnInterface3",
        "testControlFlowRestrictsType7",
        "testTypeOfReduction1",
        "isGlobal",
        "testInnerFunction11",
        "testMissingProperty41",
        "testBitOperation9",
        "testInterfaceExtendsResolution",
        "testInterfaceInheritanceCheck11",
        "testAssign4",
        "testEnum31",
        "testStubFunctionDeclaration10",
        "testGetTypedPercent2",
        "testBang3",
        "testEnum4",
        "inferTemplatedTypesForCall",
        "testQualifiedNameReduction5b",
        "testFunctionCall4",
        "getVarCount",
        "testDataPropertyOnInterface3",
        "testTypeCheck24",
        "testBooleanReduction7",
        "testConstructorType3",
        "isNumericResult",
        "testUpdateParameterTypeOnClosure",
        "functionCallHasSideEffects",
        "testConstructorAlias2",
        "createEntryLattice",
        "testTypes",
        "testTypeCheck16",
        "testScoping6",
        "testScoping5",
        "testDfa12",
        "testForwardTypeDeclaration9",
        "testWarnUnannotatedPropertyOnInterface5",
        "testHigherOrderFunctions1",
        "testAnnotatedPropertyOnInterface3",
        "testMissingProperty38",
        "testInferredReturn8",
        "newHasLocalResult",
        "testEnum22",
        "testMissingProperty24",
        "testValueOfComparison3",
        "testMissingProperty12",
        "testGlobalThis7",
        "isQnameRootedInGlobalScope",
        "inferTemplateTypesFromParameters",
        "isBleedingFunction",
        "testQualifiedNameReduction7a",
        "testClosure4"
      ],
      "functions_name_co_evolved_modified_file": [
        "visit",
        "build"
      ],
      "functions_name_co_evolved_all_files": [
        "getAssignedNameCounts",
        "recordAssignedName",
        "getOwnSlot",
        "getSlot",
        "isBleedingFunctionName",
        "traverseName",
        "visit",
        "testIssue726",
        "build",
        "isMarkedAssignedExactlyOnce",
        "markAssignedExactlyOnce"
      ]
    },
    "file": {
      "file_name": "TypedScopeCreator.java",
      "file_nloc": 1323,
      "file_complexity": 395,
      "file_token_count": 9271,
      "file_before": "",
      "file_after": "",
      "file_patch": "@@ -51,7 +51,6 @@ import com.google.common.base.Preconditions;\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.Lists;\n import com.google.common.collect.Maps;\n-import com.google.common.collect.Multiset;\n import com.google.javascript.jscomp.CodingConvention.DelegateRelationship;\n import com.google.javascript.jscomp.CodingConvention.ObjectLiteralCast;\n import com.google.javascript.jscomp.CodingConvention.SubclassRelationship;\n@@ -1872,15 +1871,6 @@ final class TypedScopeCreator implements ScopeCreator {\n           Preconditions.checkState(v.getScope() == scope);\n           v.markEscaped();\n         }\n-\n-        for (Multiset.Entry<String> entry :\n-                 contents.getAssignedNameCounts().entrySet()) {\n-          Var v = scope.getVar(entry.getElement());\n-          Preconditions.checkState(v.getScope() == scope);\n-          if (entry.getCount() == 1) {\n-            v.markAssignedExactlyOnce();\n-          }\n-        }\n       }\n     }\n \n@@ -1991,31 +1981,20 @@ final class TypedScopeCreator implements ScopeCreator {\n         data.get(t.getScopeRoot()).recordNonEmptyReturn();\n       }\n \n-      if (t.getScopeDepth() <= 1) {\n-        // The first-order function analyzer looks at two types of variables:\n-        //\n-        // 1) Local variables that are assigned in inner scopes (\"escaped vars\")\n-        //\n-        // 2) Local variables that are assigned more than once.\n-        //\n+      if (t.getScopeDepth() <= 2) {\n+        // We only need to worry about escaped variables at depth 3.\n+        // An variable escaped at depth 2 is, by definition, a global variable.\n         // We treat all global variables as escaped by default, so there's\n         // no reason to do this extra computation for them.\n         return;\n       }\n \n-      if (n.isName() && NodeUtil.isLValue(n) &&\n-          // Be careful of bleeding functions, which create variables\n-          // in the inner scope, not the scope where the name appears.\n-          !NodeUtil.isBleedingFunctionName(n)) {\n+      if (n.isName() && NodeUtil.isLValue(n)) {\n         String name = n.getString();\n         Scope scope = t.getScope();\n         Var var = scope.getVar(name);\n         if (var != null) {\n           Scope ownerScope = var.getScope();\n-          if (ownerScope.isLocal()) {\n-            data.get(ownerScope.getRootNode()).recordAssignedName(name);\n-          }\n-\n           if (scope != ownerScope && ownerScope.isLocal()) {\n             data.get(ownerScope.getRootNode()).recordEscapedVarName(name);\n           }\n",
      "files_name_in_blame_commit": [
        "TypedScopeCreator.java",
        "TypeCheckTest.java",
        "Scope.java",
        "TypeInference.java",
        "FunctionTypeBuilder.java",
        "NodeUtil.java"
      ]
    }
  },
  "commits_modify_file_before_fix": {
    "size": 104
  }
}