{
  "id": "41",
  "blame_commit": {
    "commit": {
      "commit_id": "6c9fa119f5488b12020c9c64455efdd56d9c89e1",
      "commit_message": "Add since tags for 3.2\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/collections/trunk@348013 13f79535-47bb-0310-9956-ffa450edef68",
      "commit_author": "Stephen Colebourne",
      "commit_date": "2005-11-21 23:24:45",
      "commit_parent": "2724728c2c875c22e093503b893c873eb1e5c1a6"
    },
    "function": {
      "function_name": "removeAll",
      "function_code_before": "public static Collection removeAll(Collection collection, Collection remove) {\n    return ListUtils.retainAll(collection, remove);\n}",
      "function_code_after": "public static Collection removeAll(Collection collection, Collection remove) {\n    return ListUtils.retainAll(collection, remove);\n}",
      "function_before_start_line": 1202,
      "function_before_end_line": 1204,
      "function_after_start_line": 1120,
      "function_after_end_line": 1122,
      "function_before_token_count": 20,
      "function_after_token_count": 20,
      "functions_name_modified_file": [
        "addIgnoreNull",
        "isProperSubCollection",
        "addAll",
        "intersection",
        "isSubCollection",
        "isNotEmpty",
        "typedCollection",
        "select",
        "isEqualCollection",
        "getCardinalityMap",
        "reverseArray",
        "get",
        "collect",
        "find",
        "filter",
        "isFull",
        "size",
        "removeAll",
        "isEmpty",
        "selectRejected",
        "countMatches",
        "index",
        "CollectionUtils",
        "retainAll",
        "forAllDo",
        "cardinality",
        "sizeIsEmpty",
        "transformedCollection",
        "subtract",
        "synchronizedCollection",
        "predicatedCollection",
        "transform",
        "unmodifiableCollection",
        "exists",
        "union",
        "getFreq",
        "disjunction",
        "containsAny",
        "maxSize"
      ],
      "functions_name_all_files": [
        "predicatedList",
        "IteratorUtils",
        "checkModCount",
        "BufferUtils",
        "unmodifiableListIterator",
        "createSubListListIterator",
        "hasPrevious",
        "removeNode",
        "getCardinalityMap",
        "putAll",
        "nextToken",
        "collect",
        "hasNext",
        "find",
        "PropertiesTokenizer",
        "maxSize",
        "filteredIterator",
        "blockingBuffer",
        "endsWithSlash",
        "removeAll",
        "getVector",
        "getKeys",
        "setInclude",
        "synchronizedList",
        "nodeChanged",
        "forAllDo",
        "cardinality",
        "subMap",
        "init",
        "transformedCollection",
        "emptyListIterator",
        "countPreceding",
        "getByte",
        "readObject",
        "union",
        "typedCollection",
        "getFreq",
        "addProperty",
        "emptyIterator",
        "lazyList",
        "remove",
        "toArray",
        "addPropertyDirect",
        "getStringArray",
        "unmodifiableIterator",
        "addIgnoreNull",
        "isEqualList",
        "intersection",
        "hashCodeForList",
        "getList",
        "getShort",
        "Cursor",
        "close",
        "clearProperty",
        "get",
        "hasMoreTokens",
        "nextIndex",
        "filter",
        "addNode",
        "isFull",
        "transformValue",
        "put",
        "selectRejected",
        "subset",
        "CollectionUtils",
        "broadcastNodeRemoved",
        "getInclude",
        "transformedBuffer",
        "isSetValueChecking",
        "sizeIsEmpty",
        "transform",
        "readProperty",
        "registerCursor",
        "filteredListIterator",
        "unmodifiableCollection",
        "exists",
        "addPropertyInternal",
        "containsAny",
        "collatedIterator",
        "decorateTransform",
        "emptyOrderedIterator",
        "escape",
        "emptyOrderedMapIterator",
        "add",
        "unregisterCursor",
        "isProperSubCollection",
        "toListIterator",
        "transformKey",
        "select",
        "arrayIterator",
        "removeAllNodes",
        "TransformedMap",
        "display",
        "lastKey",
        "getInteger",
        "interpolate",
        "singletonIterator",
        "broadcastNodeInserted",
        "asIterator",
        "listIterator",
        "combine",
        "chainedIterator",
        "typedList",
        "cursor",
        "getSortedMap",
        "typedBuffer",
        "SubCursor",
        "decorate",
        "headMap",
        "checkSetValue",
        "index",
        "transformMap",
        "iterator",
        "retainAll",
        "getString",
        "getLong",
        "fixedSizeList",
        "singletonListIterator",
        "nodeInserted",
        "getDouble",
        "transformedIterator",
        "getInt",
        "BlockingBuffer",
        "updateNode",
        "subtract",
        "synchronizedCollection",
        "emptyMapIterator",
        "objectGraphIterator",
        "unmodifiableBuffer",
        "timeoutBuffer",
        "isInitialized",
        "asEnumeration",
        "firstKey",
        "getBoolean",
        "unmodifiableMapIterator",
        "TransformedSortedMap",
        "ListUtils",
        "unescape",
        "addAll",
        "loopingIterator",
        "tailMap",
        "isSubCollection",
        "isNotEmpty",
        "broadcastNodeChanged",
        "CursorableLinkedList",
        "getFloat",
        "transformedList",
        "toList",
        "isEqualCollection",
        "reverseArray",
        "predicatedBuffer",
        "convertProperties",
        "testBoolean",
        "unmodifiableList",
        "size",
        "ExtendedProperties",
        "getProperty",
        "isEmpty",
        "loopingListIterator",
        "interpolateHelper",
        "countMatches",
        "getIterator",
        "setProperty",
        "synchronizedBuffer",
        "getProperties",
        "sum",
        "arrayListIterator",
        "load",
        "comparator",
        "PropertiesReader",
        "predicatedCollection",
        "writeObject",
        "nodeRemoved",
        "disjunction",
        "save"
      ],
      "functions_name_co_evolved_modified_file": [
        "removeAll",
        "retainAll"
      ],
      "functions_name_co_evolved_all_files": [
        "removeAll",
        "retainAll"
      ]
    },
    "file": {
      "file_name": "CollectionUtils.java",
      "file_nloc": 531,
      "file_complexity": 168,
      "file_token_count": 3821,
      "file_before": "",
      "file_after": "",
      "file_patch": "@@ -643,6 +643,7 @@ public class CollectionUtils {\n      * @param object  the object to add, if null it will not be added\n      * @return true if the collection changed\n      * @throws NullPointerException if the collection is null\n+     * @since Commons Collections 3.2\n      */\n     public static boolean addIgnoreNull(Collection collection, Object object) {\n         return (object == null ? false : collection.add(object));\n@@ -1080,6 +1081,46 @@ public class CollectionUtils {\n         }\n     }\n \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Returns a collection containing all the elements in <code>collection</code>\n+     * that are also in <code>retain</code>. The cardinality of an element <code>e</code>\n+     * in the returned collection is the same as the cardinality of <code>e</code>\n+     * in <code>collection</code> unless <code>retain</code> does not contain <code>e</code>, in which\n+     * case the cardinality is zero. This method is useful if you do not wish to modify\n+     * the collection <code>c</code> and thus cannot call <code>c.retainAll(retain);</code>.\n+     * \n+     * @param collection  the collection whose contents are the target of the #retailAll operation\n+     * @param retain  the collection containing the elements to be retained in the returned collection\n+     * @return a <code>Collection</code> containing all the elements of <code>collection</code>\n+     * that occur at least once in <code>retain</code>.\n+     * @throws NullPointerException if either parameter is null\n+     * @since Commons Collections 3.2\n+     */\n+    public static Collection retainAll(Collection collection, Collection retain) {\n+        return ListUtils.retainAll(collection, retain);\n+    }\n+\n+    /**\n+     * Removes the elements in <code>remove</code> from <code>collection</code>. That is, this\n+     * method returns a collection containing all the elements in <code>c</code>\n+     * that are not in <code>remove</code>. The cardinality of an element <code>e</code>\n+     * in the returned collection is the same as the cardinality of <code>e</code>\n+     * in <code>collection</code> unless <code>remove</code> contains <code>e</code>, in which\n+     * case the cardinality is zero. This method is useful if you do not wish to modify\n+     * the collection <code>c</code> and thus cannot call <code>collection.removeAll(remove);</code>.\n+     * \n+     * @param collection  the collection from which items are removed (in the returned collection)\n+     * @param remove  the items to be removed from the returned <code>collection</code>\n+     * @return a <code>Collection</code> containing all the elements of <code>collection</code> except\n+     * any elements that also occur in <code>remove</code>.\n+     * @throws NullPointerException if either parameter is null\n+     * @since Commons Collections 3.2\n+     */\n+    public static Collection removeAll(Collection collection, Collection remove) {\n+        return ListUtils.retainAll(collection, remove);\n+    }\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Returns a synchronized collection backed by the given collection.\n@@ -1165,42 +1206,5 @@ public class CollectionUtils {\n     public static Collection transformedCollection(Collection collection, Transformer transformer) {\n         return TransformedCollection.decorate(collection, transformer);\n     }\n-   \n-    /**\n-     * Returns a collection containing all the elements in <code>collection</code>\n-     * that are also in <code>retain</code>. The cardinality of an element <code>e</code>\n-     * in the returned collection is the same as the cardinality of <code>e</code>\n-     * in <code>collection</code> unless <code>retain</code> does not contain <code>e</code>, in which\n-     * case the cardinality is zero. This method is useful if you do not wish to modify\n-     * the collection <code>c</code> and thus cannot call <code>c.retainAll(retain);</code>.\n-     * \n-     * @param collection  the collection whose contents are the target of the #retailAll operation\n-     * @param retain  the collection containing the elements to be retained in the returned collection\n-     * @return a <code>Collection</code> containing all the elements of <code>collection</code>\n-     * that occur at least once in <code>retain</code>.\n-     * @throws NullPointerException if either parameter is null\n-     */\n-    public static Collection retainAll(Collection collection, Collection retain) {\n-        return ListUtils.retainAll(collection, retain);\n-    }\n-\n-    /**\n-     * Removes the elements in <code>remove</code> from <code>collection</code>. That is, this\n-     * method returns a collection containing all the elements in <code>c</code>\n-     * that are not in <code>remove</code>. The cardinality of an element <code>e</code>\n-     * in the returned collection is the same as the cardinality of <code>e</code>\n-     * in <code>collection</code> unless <code>remove</code> contains <code>e</code>, in which\n-     * case the cardinality is zero. This method is useful if you do not wish to modify\n-     * the collection <code>c</code> and thus cannot call <code>collection.removeAll(remove);</code>.\n-     * \n-     * @param collection  the collection from which items are removed (in the returned collection)\n-     * @param remove  the items to be removed from the returned <code>collection</code>\n-     * @return a <code>Collection</code> containing all the elements of <code>collection</code> except\n-     * any elements that also occur in <code>remove</code>.\n-     * @throws NullPointerException if either parameter is null\n-     */\n-    public static Collection removeAll(Collection collection, Collection remove) {\n-        return ListUtils.retainAll(collection, remove);\n-    }\n \n }\n",
      "files_name_in_blame_commit": [
        "BlockingBuffer.java",
        "CursorableLinkedList.java",
        "ExtendedProperties.java",
        "CollectionUtils.java",
        "BufferUtils.java",
        "TransformedSortedMap.java",
        "TransformedMap.java",
        "ListUtils.java",
        "IteratorUtils.java"
      ]
    }
  },
  "commits_modify_file_before_fix": {
    "size": 69
  }
}