{
  "id": "39",
  "blame_commit": {
    "commit": {
      "commit_id": "453c56cff0dbbc0ecefaa7f20b8df6d11d6d12ec",
      "commit_message": "[CODEC-136] Use Charset objects when possible, create Charsets for required character encodings.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/codec/trunk@1306366 13f79535-47bb-0310-9956-ffa450edef68",
      "commit_author": "Gary D. Gregory",
      "commit_date": "2012-03-28 14:22:17",
      "commit_parent": "65d05e0fd832de4fd148ad4668c3a4d110488cb8"
    },
    "function": {
      "function_name": "",
      "function_code_before": "",
      "function_code_after": "",
      "function_before_start_line": "",
      "function_before_end_line": "",
      "function_after_start_line": "",
      "function_after_end_line": "",
      "function_before_token_count": 0,
      "function_after_token_count": 0,
      "functions_name_modified_file": [
        "getBytesUtf16Be",
        "newStringUtf16Be",
        "getBytesUsAscii",
        "newStringUtf8",
        "getBytes",
        "getBytesUnchecked",
        "newString",
        "getBytesIso8859_1",
        "newStringIso8859_1",
        "getBytesUtf16Le",
        "newIllegalStateException",
        "getBytesUtf8",
        "newStringUtf16Le",
        "newStringUsAscii",
        "newStringUtf16",
        "getBytesUtf16"
      ],
      "functions_name_all_files": [
        "getBytesUtf16Le",
        "getBytesUtf16",
        "getBytesUsAscii",
        "getBytes",
        "testUtf8",
        "newStringUtf16",
        "newStringUsAscii",
        "testUtf16Le",
        "testUsAscii",
        "getBytesUnchecked",
        "getBytesIso8859_1",
        "getBytesUtf8",
        "testUtf16",
        "testIso8859_1",
        "newStringUtf16Le",
        "getBytesUtf16Be",
        "newStringUtf16Be",
        "newStringUtf8",
        "newString",
        "newStringIso8859_1",
        "newIllegalStateException",
        "testUtf16Be"
      ],
      "functions_name_co_evolved_modified_file": [
        "getBytesUtf16Be",
        "newStringUtf16Be",
        "getBytesUsAscii",
        "newStringUtf8",
        "getBytes",
        "newString",
        "getBytesUnchecked",
        "getBytesIso8859_1",
        "newStringIso8859_1",
        "getBytesUtf16Le",
        "getBytesUtf16",
        "newIllegalStateException",
        "getBytesUtf8",
        "newStringUtf16Le",
        "newStringUtf16",
        "newStringUsAscii"
      ],
      "functions_name_co_evolved_all_files": [
        "getBytesUtf16Le",
        "getBytesUtf16",
        "getBytesUsAscii",
        "getBytes",
        "testUtf8",
        "newStringUtf16",
        "newStringUsAscii",
        "testUtf16Le",
        "testUsAscii",
        "getBytesUnchecked",
        "getBytesIso8859_1",
        "getBytesUtf8",
        "testUtf16",
        "testIso8859_1",
        "newStringUtf16Le",
        "getBytesUtf16Be",
        "newStringUtf16Be",
        "newStringUtf8",
        "newString",
        "newStringIso8859_1",
        "newIllegalStateException",
        "testUtf16Be"
      ]
    },
    "file": {
      "file_name": "StringUtils.java",
      "file_nloc": 75,
      "file_complexity": 23,
      "file_token_count": 520,
      "file_before": "",
      "file_after": "",
      "file_patch": "@@ -18,8 +18,10 @@\n package org.apache.commons.codec.binary;\n \n import java.io.UnsupportedEncodingException;\n+import java.nio.charset.Charset;\n \n import org.apache.commons.codec.CharEncoding;\n+import org.apache.commons.codec.Charsets;\n \n /**\n  * Converts String to and from bytes using the encodings required by the Java specification. These encodings are specified in <a\n@@ -33,6 +35,22 @@ import org.apache.commons.codec.CharEncoding;\n  */\n public class StringUtils {\n \n+    /**\n+     * Calls {@link String#getBytes(Charset)} \n+     * \n+     * @param string\n+     *            The string to encode (if null, return null).\n+     * @param charset\n+     *            The {@link Charset} to encode the {@code String}\n+     * @return the encoded bytes\n+     */\n+    private static byte[] getBytes(String string, Charset charset) {\n+        if (string == null) {\n+            return null;\n+        }\n+        return string.getBytes(charset);\n+    }\n+\n     /**\n      * Encodes the given string into a sequence of bytes using the ISO-8859-1 charset, storing the result into a new\n      * byte array.\n@@ -40,29 +58,64 @@ public class StringUtils {\n      * @param string\n      *            the String to encode, may be <code>null</code>\n      * @return encoded bytes, or <code>null</code> if the input string was <code>null</code>\n-     * @throws IllegalStateException\n-     *             Thrown when the charset is missing, which should be never according the the Java specification.\n+     * @throws NullPointerException\n+     *             Thrown if {@link Charsets#ISO_8859_1} is not initialized, which should never happen since it is\n+     *             required by the Java platform specification.\n+     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException\n      * @see <a href=\"http://download.oracle.com/javase/1.5.0/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n      * @see #getBytesUnchecked(String, String)\n      */\n     public static byte[] getBytesIso8859_1(String string) {\n-        return StringUtils.getBytesUnchecked(string, CharEncoding.ISO_8859_1);\n+        return getBytes(string, Charsets.ISO_8859_1);\n     }\n \n+\n     /**\n-     * Encodes the given string into a sequence of bytes using the US-ASCII charset, storing the result into a new byte\n+     * Encodes the given string into a sequence of bytes using the named charset, storing the result into a new byte\n      * array.\n+     * <p>\n+     * This method catches {@link UnsupportedEncodingException} and rethrows it as {@link IllegalStateException}, which\n+     * should never happen for a required charset name. Use this method when the encoding is required to be in the JRE.\n+     * </p>\n      * \n      * @param string\n      *            the String to encode, may be <code>null</code>\n+     * @param charsetName\n+     *            The name of a required {@link java.nio.charset.Charset}\n      * @return encoded bytes, or <code>null</code> if the input string was <code>null</code>\n      * @throws IllegalStateException\n-     *             Thrown when the charset is missing, which should be never according the the Java specification.\n+     *             Thrown when a {@link UnsupportedEncodingException} is caught, which should never happen for a\n+     *             required charset name.\n+     * @see CharEncoding\n+     * @see String#getBytes(String)\n+     */\n+    public static byte[] getBytesUnchecked(String string, String charsetName) {\n+        if (string == null) {\n+            return null;\n+        }\n+        try {\n+            return string.getBytes(charsetName);\n+        } catch (UnsupportedEncodingException e) {\n+            throw StringUtils.newIllegalStateException(charsetName, e);\n+        }\n+    }\n+\n+    /**\n+     * Encodes the given string into a sequence of bytes using the US-ASCII charset, storing the result into a new byte\n+     * array.\n+     * \n+     * @param string\n+     *            the String to encode, may be <code>null</code>\n+     * @return encoded bytes, or <code>null</code> if the input string was <code>null</code>\n+     * @throws NullPointerException\n+     *             Thrown if {@link Charsets#US_ASCII} is not initialized, which should never happen since it is\n+     *             required by the Java platform specification.\n+     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException\n      * @see <a href=\"http://download.oracle.com/javase/1.5.0/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n      * @see #getBytesUnchecked(String, String)\n      */\n     public static byte[] getBytesUsAscii(String string) {\n-        return StringUtils.getBytesUnchecked(string, CharEncoding.US_ASCII);\n+        return getBytes(string, Charsets.US_ASCII);\n     }\n \n     /**\n@@ -72,13 +125,15 @@ public class StringUtils {\n      * @param string\n      *            the String to encode, may be <code>null</code>\n      * @return encoded bytes, or <code>null</code> if the input string was <code>null</code>\n-     * @throws IllegalStateException\n-     *             Thrown when the charset is missing, which should be never according the the Java specification.\n+     * @throws NullPointerException\n+     *             Thrown if {@link Charsets#UTF_16} is not initialized, which should never happen since it is\n+     *             required by the Java platform specification.\n+     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException\n      * @see <a href=\"http://download.oracle.com/javase/1.5.0/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n      * @see #getBytesUnchecked(String, String)\n      */\n     public static byte[] getBytesUtf16(String string) {\n-        return StringUtils.getBytesUnchecked(string, CharEncoding.UTF_16);\n+        return getBytes(string, Charsets.UTF_16);\n     }\n \n     /**\n@@ -88,13 +143,15 @@ public class StringUtils {\n      * @param string\n      *            the String to encode, may be <code>null</code>\n      * @return encoded bytes, or <code>null</code> if the input string was <code>null</code>\n-     * @throws IllegalStateException\n-     *             Thrown when the charset is missing, which should be never according the the Java specification.\n+     * @throws NullPointerException\n+     *             Thrown if {@link Charsets#UTF_16BE} is not initialized, which should never happen since it is\n+     *             required by the Java platform specification.\n+     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException\n      * @see <a href=\"http://download.oracle.com/javase/1.5.0/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n      * @see #getBytesUnchecked(String, String)\n      */\n     public static byte[] getBytesUtf16Be(String string) {\n-        return StringUtils.getBytesUnchecked(string, CharEncoding.UTF_16BE);\n+        return getBytes(string, Charsets.UTF_16BE);\n     }\n \n     /**\n@@ -104,13 +161,15 @@ public class StringUtils {\n      * @param string\n      *            the String to encode, may be <code>null</code>\n      * @return encoded bytes, or <code>null</code> if the input string was <code>null</code>\n-     * @throws IllegalStateException\n-     *             Thrown when the charset is missing, which should be never according the the Java specification.\n+     * @throws NullPointerException\n+     *             Thrown if {@link Charsets#UTF_16LE} is not initialized, which should never happen since it is\n+     *             required by the Java platform specification.\n+     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException\n      * @see <a href=\"http://download.oracle.com/javase/1.5.0/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n      * @see #getBytesUnchecked(String, String)\n      */\n     public static byte[] getBytesUtf16Le(String string) {\n-        return StringUtils.getBytesUnchecked(string, CharEncoding.UTF_16LE);\n+        return getBytes(string, Charsets.UTF_16LE);\n     }\n \n     /**\n@@ -120,47 +179,36 @@ public class StringUtils {\n      * @param string\n      *            the String to encode, may be <code>null</code>\n      * @return encoded bytes, or <code>null</code> if the input string was <code>null</code>\n-     * @throws IllegalStateException\n-     *             Thrown when the charset is missing, which should be never according the the Java specification.\n+     * @throws NullPointerException\n+     *             Thrown if {@link Charsets#UTF_8} is not initialized, which should never happen since it is\n+     *             required by the Java platform specification.\n+     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException\n      * @see <a href=\"http://download.oracle.com/javase/1.5.0/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n      * @see #getBytesUnchecked(String, String)\n      */\n     public static byte[] getBytesUtf8(String string) {\n-        return StringUtils.getBytesUnchecked(string, CharEncoding.UTF_8);\n+        return getBytes(string, Charsets.UTF_8);\n+    }\n+\n+    private static IllegalStateException newIllegalStateException(String charsetName, UnsupportedEncodingException e) {\n+        return new IllegalStateException(charsetName + \": \" + e);\n     }\n \n     /**\n-     * Encodes the given string into a sequence of bytes using the named charset, storing the result into a new byte\n-     * array.\n-     * <p>\n-     * This method catches {@link UnsupportedEncodingException} and rethrows it as {@link IllegalStateException}, which\n-     * should never happen for a required charset name. Use this method when the encoding is required to be in the JRE.\n-     * </p>\n+     * Constructs a new <code>String</code> by decoding the specified array of bytes using the given charset.\n      * \n-     * @param string\n-     *            the String to encode, may be <code>null</code>\n-     * @param charsetName\n-     *            The name of a required {@link java.nio.charset.Charset}\n-     * @return encoded bytes, or <code>null</code> if the input string was <code>null</code>\n-     * @throws IllegalStateException\n-     *             Thrown when a {@link UnsupportedEncodingException} is caught, which should never happen for a\n-     *             required charset name.\n-     * @see CharEncoding\n-     * @see String#getBytes(String)\n+     * @param bytes\n+     *            The bytes to be decoded into characters\n+     * @param charset\n+     *            The {@link Charset} to encode the {@code String}\n+     * @return A new <code>String</code> decoded from the specified array of bytes using the given charset,\n+     *         or <code>null</code> if the input byte array was <code>null</code>.\n+     * @throws NullPointerException\n+     *             Thrown if {@link Charsets#UTF_8} is not initialized, which should never happen since it is\n+     *             required by the Java platform specification.\n      */\n-    public static byte[] getBytesUnchecked(String string, String charsetName) {\n-        if (string == null) {\n-            return null;\n-        }\n-        try {\n-            return string.getBytes(charsetName);\n-        } catch (UnsupportedEncodingException e) {\n-            throw StringUtils.newIllegalStateException(charsetName, e);\n-        }\n-    }\n-\n-    private static IllegalStateException newIllegalStateException(String charsetName, UnsupportedEncodingException e) {\n-        return new IllegalStateException(charsetName + \": \" + e);\n+    private static String newString(byte[] bytes, Charset charset) {\n+        return bytes == null ? null : new String(bytes, charset);\n     }\n \n     /**\n@@ -198,14 +246,15 @@ public class StringUtils {\n      * \n      * @param bytes\n      *            The bytes to be decoded into characters, may be <code>null</code>\n-     * @return A new <code>String</code> decoded from the specified array of bytes using the ISO-8859-1 charset,\n-     *         or <code>null</code> if the input byte array was <code>null</code>.\n-     * @throws IllegalStateException\n-     *             Thrown when a {@link UnsupportedEncodingException} is caught, which should never happen since the\n-     *             charset is required.\n+     * @return A new <code>String</code> decoded from the specified array of bytes using the ISO-8859-1 charset, or\n+     *         <code>null</code> if the input byte array was <code>null</code>.\n+     * @throws NullPointerException\n+     *             Thrown if {@link Charsets#ISO_8859_1} is not initialized, which should never happen since it is\n+     *             required by the Java platform specification.\n+     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException\n      */\n     public static String newStringIso8859_1(byte[] bytes) {\n-        return StringUtils.newString(bytes, CharEncoding.ISO_8859_1);\n+        return new String(bytes, Charsets.ISO_8859_1);\n     }\n \n     /**\n@@ -215,12 +264,13 @@ public class StringUtils {\n      *            The bytes to be decoded into characters\n      * @return A new <code>String</code> decoded from the specified array of bytes using the US-ASCII charset,\n      *         or <code>null</code> if the input byte array was <code>null</code>.\n-     * @throws IllegalStateException\n-     *             Thrown when a {@link UnsupportedEncodingException} is caught, which should never happen since the\n-     *             charset is required.\n+     * @throws NullPointerException\n+     *             Thrown if {@link Charsets#US_ASCII} is not initialized, which should never happen since it is\n+     *             required by the Java platform specification.\n+     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException\n      */\n     public static String newStringUsAscii(byte[] bytes) {\n-        return StringUtils.newString(bytes, CharEncoding.US_ASCII);\n+        return new String(bytes, Charsets.US_ASCII);\n     }\n \n     /**\n@@ -230,12 +280,13 @@ public class StringUtils {\n      *            The bytes to be decoded into characters\n      * @return A new <code>String</code> decoded from the specified array of bytes using the UTF-16 charset\n      *         or <code>null</code> if the input byte array was <code>null</code>.\n-     * @throws IllegalStateException\n-     *             Thrown when a {@link UnsupportedEncodingException} is caught, which should never happen since the\n-     *             charset is required.\n+     * @throws NullPointerException\n+     *             Thrown if {@link Charsets#UTF_16} is not initialized, which should never happen since it is\n+     *             required by the Java platform specification.\n+     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException\n      */\n     public static String newStringUtf16(byte[] bytes) {\n-        return StringUtils.newString(bytes, CharEncoding.UTF_16);\n+        return new String(bytes, Charsets.UTF_16);\n     }\n \n     /**\n@@ -245,12 +296,13 @@ public class StringUtils {\n      *            The bytes to be decoded into characters\n      * @return A new <code>String</code> decoded from the specified array of bytes using the UTF-16BE charset,\n      *         or <code>null</code> if the input byte array was <code>null</code>.\n-     * @throws IllegalStateException\n-     *             Thrown when a {@link UnsupportedEncodingException} is caught, which should never happen since the\n-     *             charset is required.\n+     * @throws NullPointerException\n+     *             Thrown if {@link Charsets#UTF_16BE} is not initialized, which should never happen since it is\n+     *             required by the Java platform specification.\n+     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException\n      */\n     public static String newStringUtf16Be(byte[] bytes) {\n-        return StringUtils.newString(bytes, CharEncoding.UTF_16BE);\n+        return new String(bytes, Charsets.UTF_16BE);\n     }\n \n     /**\n@@ -260,12 +312,13 @@ public class StringUtils {\n      *            The bytes to be decoded into characters\n      * @return A new <code>String</code> decoded from the specified array of bytes using the UTF-16LE charset,\n      *         or <code>null</code> if the input byte array was <code>null</code>.\n-     * @throws IllegalStateException\n-     *             Thrown when a {@link UnsupportedEncodingException} is caught, which should never happen since the\n-     *             charset is required.\n+     * @throws NullPointerException\n+     *             Thrown if {@link Charsets#UTF_16LE} is not initialized, which should never happen since it is\n+     *             required by the Java platform specification.\n+     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException\n      */\n     public static String newStringUtf16Le(byte[] bytes) {\n-        return StringUtils.newString(bytes, CharEncoding.UTF_16LE);\n+        return new String(bytes, Charsets.UTF_16LE);\n     }\n \n     /**\n@@ -275,12 +328,13 @@ public class StringUtils {\n      *            The bytes to be decoded into characters\n      * @return A new <code>String</code> decoded from the specified array of bytes using the UTF-8 charset,\n      *         or <code>null</code> if the input byte array was <code>null</code>.\n-     * @throws IllegalStateException\n-     *             Thrown when a {@link UnsupportedEncodingException} is caught, which should never happen since the\n-     *             charset is required.\n+     * @throws NullPointerException\n+     *             Thrown if {@link Charsets#UTF_8} is not initialized, which should never happen since it is\n+     *             required by the Java platform specification.\n+     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException\n      */\n     public static String newStringUtf8(byte[] bytes) {\n-        return StringUtils.newString(bytes, CharEncoding.UTF_8);\n+        return newString(bytes, Charsets.UTF_8);\n     }\n \n }\n",
      "files_name_in_blame_commit": [
        "CharsetsTest.java",
        "Charsets.java",
        "StringUtils.java"
      ]
    }
  },
  "commits_modify_file_before_fix": {
    "size": 36
  }
}