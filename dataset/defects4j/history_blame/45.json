{
  "id": "45",
  "blame_commit": {
    "commit": {
      "commit_id": "e33d42eb606710e7cc9ba820d25f725428d4a709",
      "commit_message": "Add LZMA support to 7z - I don't think this adds support for compressed headers\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/branches/LZMA@1491216 13f79535-47bb-0310-9956-ffa450edef68",
      "commit_author": "Stefan Bodewig",
      "commit_date": "2013-06-09 13:34:26",
      "commit_parent": "3a84f16feb83ad3f4fc2b22a47d97c22e501132b"
    },
    "function": {
      "function_name": "",
      "function_code_before": "",
      "function_code_after": "",
      "function_before_start_line": "",
      "function_before_end_line": "",
      "function_after_start_line": "",
      "function_after_end_line": "",
      "function_before_token_count": 0,
      "function_after_token_count": 0,
      "functions_name_modified_file": [
        "decode",
        "addDecoder",
        "CoderId"
      ],
      "functions_name_all_files": [
        "checkHelloWorld",
        "CoderId",
        "test7zUnarchive",
        "testHelloWorldHeaderCompressionOffLZMA2",
        "testHelloWorldHeaderCompressionOffCopy",
        "addDecoder",
        "testAllEmptyFilesArchive",
        "decode"
      ],
      "functions_name_co_evolved_modified_file": [
        "decode"
      ],
      "functions_name_co_evolved_all_files": [
        "decode",
        "test7zUnarchive"
      ]
    },
    "file": {
      "file_name": "Coders.java",
      "file_nloc": 179,
      "file_complexity": 23,
      "file_token_count": 1342,
      "file_before": "",
      "file_after": "",
      "file_patch": "@@ -31,6 +31,7 @@\n import javax.crypto.spec.SecretKeySpec;\n \n import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;\n+import org.tukaani.xz.LZMAInputStream;\n import org.tukaani.xz.LZMA2InputStream;\n \n class Coders {\n@@ -47,6 +48,7 @@ static InputStream addDecoder(final InputStream is,\n     \n     static CoderId[] coderTable = new CoderId[] {\n         new CoderId(new byte[] { (byte)0x00 }, new CopyDecoder()),\n+        new CoderId(new byte[] { (byte)0x03, (byte)0x01, (byte)0x01 }, new LZMADecoder()),\n         new CoderId(new byte[] { (byte)0x21 }, new LZMA2Decoder()),\n         // FIXME: gives corrupt output\n         //new CoderId(new byte[] { (byte)0x04, (byte)0x01, (byte)0x08 }, new DeflateDecoder()),\n@@ -98,6 +100,22 @@ InputStream decode(final InputStream in, final Coder coder,\n         }\n     }\n     \n+    static class LZMADecoder extends CoderBase {\n+        @Override\n+        InputStream decode(final InputStream in, final Coder coder,\n+                String password) throws IOException {\n+            byte propsByte = coder.properties[0];\n+            long dictSize = coder.properties[1];\n+            for (int i = 1; i < 4; i++) {\n+                dictSize |= (coder.properties[i + 1] << (8 * i));\n+            }\n+            if (dictSize > LZMAInputStream.DICT_SIZE_MAX) {\n+                throw new IOException(\"Dictionary larger than 4GiB maximum size\");\n+            }\n+            return new LZMAInputStream(in, -1, propsByte, (int) dictSize);\n+        }\n+    }\n+    \n //    static class DeflateDecoder extends CoderBase {\n //        @Override\n //        InputStream decode(final InputStream in, final Coder coder, final String password)\n",
      "files_name_in_blame_commit": [
        "SevenZFileTest.java",
        "Coders.java"
      ]
    }
  },
  "commits_modify_file_before_fix": {
    "size": 13
  }
}