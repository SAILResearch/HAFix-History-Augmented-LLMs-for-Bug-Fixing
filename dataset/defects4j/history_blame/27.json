{
  "id": "27",
  "blame_commit": {
    "commit": {
      "commit_id": "1be1c2636ef14071afa7da5cb8988972bd90149f",
      "commit_message": "Fix getGreatestSubtype for UnionTypes by always returning the meet of\nthe two types. (Andrew)\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@112 b0f006be-c8cd-11de-a2e8-8d36a3108c74",
      "commit_author": "Nicholas.J.Santos",
      "commit_date": "2010-02-22 19:05:09",
      "commit_parent": "0f655dc72070acbdcc5fe3a1aecf91c11955c37b"
    },
    "function": {
      "function_name": "meet",
      "function_code_before": "",
      "function_code_after": "JSType meet(JSType that) {\n  UnionTypeBuilder builder = new UnionTypeBuilder(registry);\n  for (JSType alternate : alternates) {\n    if (alternate.isSubtype(that)) {\n      builder.addAlternate(alternate);\n    }\n  }\n\n  if (that instanceof UnionType) {\n    for (JSType otherAlternate : ((UnionType) that).alternates) {\n      if (otherAlternate.isSubtype(this)) {\n        builder.addAlternate(otherAlternate);\n      }\n    }\n  } else if (that.isSubtype(this)) {\n    builder.addAlternate(that);\n  }\n  JSType result = builder.build();\n  if (result != null) {\n    return result;\n  } else if (this.isObject() && that.isObject()) {\n    return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n  } else {\n    return getNativeType(JSTypeNative.NO_TYPE);\n  }\n}",
      "function_before_start_line": "",
      "function_before_end_line": "",
      "function_after_start_line": 274,
      "function_after_end_line": 299,
      "function_before_token_count": 0,
      "function_after_token_count": 160,
      "functions_name_modified_file": [
        "getAlternates",
        "toString",
        "canBeCalled",
        "getTypesUnderInequality",
        "UnionType",
        "isNullable",
        "hashCode",
        "matchesNumberContext",
        "matchesObjectContext",
        "meet",
        "getLeastSupertype",
        "testForEquality",
        "getRestrictedTypeGivenToBooleanOutcome",
        "restrictByNotNullOrUndefined",
        "resolveInternal",
        "getRestrictedUnion",
        "isUnknownType",
        "matchesStringContext",
        "forgiveUnknownNames",
        "isObject",
        "canAssignTo",
        "getTypesUnderEquality",
        "contains",
        "visit",
        "getPossibleToBooleanOutcomes",
        "isSubtype",
        "isUnionType",
        "equals",
        "getTypesUnderShallowInequality",
        "findPropertyType"
      ],
      "functions_name_all_files": [
        "testFunctionPrototypeAndImplicitPrototype1",
        "testUnionType",
        "toString",
        "testRecordTypeGreatestSubType5",
        "testSubclassOfUnresolvedNamedType",
        "canBeCalled",
        "isInterface",
        "UnionType",
        "testNumberObjectType",
        "testRecordTypeGreatestSubType8",
        "testUnknownType",
        "testApplyOfDateMethod",
        "testCanTestForEqualityWithCornerCases",
        "testReflexivityOfGreatestSubtype",
        "testGetTypesUnderEquality4",
        "matchesObjectContext",
        "testStringValueType",
        "testSubtypingUnionTypes",
        "testRecordSubtypeChain",
        "testForEquality",
        "matchesUint32Context",
        "getRestrictedTypeGivenToBooleanOutcome",
        "testSubtypingDerivedExtendsNamedBaseType",
        "assertReturnTypeEquals",
        "resolveInternal",
        "testSubtypingMostGeneralFunction",
        "testGreatestSubtypeSimpleTypes",
        "setUp",
        "testRecordAndObjectChain3",
        "getNativeType",
        "isRegexpType",
        "isCheckedUnknownType",
        "getTypesUnderEquality",
        "testCreateRecordType",
        "testGetRestrictedUnion1",
        "testNoType",
        "testSpecialUnionCanAssignTo",
        "testStringObjectType",
        "testFunctionType",
        "assertTypeCanAssignToItself",
        "dereference",
        "testSymmetryOfGreatestSubtype",
        "testForwardDeclaredNamedTypeEquals",
        "testSubtypingFunctionFixedArgs",
        "testGetTypesUnderInequality",
        "isNamedType",
        "isSubtype",
        "testBug904123",
        "testNamedTypeHasOwnProperty",
        "isRecordType",
        "testGetAndSetJSDocInfoWithNoType",
        "testCreateUnionType",
        "isEnumElementType",
        "testBooleanObjectType",
        "matchesInt32Context",
        "testSubtypingFunctionMultipleFixedArgs",
        "isNoObjectType",
        "testObjectTypePropertiesCountWithShadowing",
        "isNominalType",
        "isEnumType",
        "testHasOwnProperty",
        "testBug903110",
        "isNumberObjectType",
        "testImplementingType",
        "testLeastSupertypeUnresolvedNamedType3",
        "testRecordTypeGreatestSubType6",
        "testGetRestrictedUnion2",
        "testCreateObjectType",
        "testGetTypesUnderEquality5",
        "getTypesUnderInequality",
        "testGreatestSubtypeUnionTypes4",
        "testObjectTypePropertiesCount",
        "verifySubtypeChain",
        "isNullable",
        "testInterfaceInstanceSubtypeChain",
        "testNoObjectType",
        "testConstructorWithArgSubtypeChain",
        "assertPropertyTypeDeclared",
        "testFunctionPrototypeAndImplicitPrototype2",
        "isFunctionPrototypeType",
        "isAllType",
        "testGetTypesUnderInequality2",
        "isNumberValueType",
        "testRecordTypeLeastSuperType2",
        "isStringObjectType",
        "testGoodSetPrototypeBasedOn",
        "forgiveUnknownNames",
        "testFunctionCyclycity",
        "getJSDocInfo",
        "isArrayType",
        "isFunctionType",
        "testNamedTypeEquals2",
        "testWeirdBug",
        "JSType",
        "isOrdinaryFunction",
        "testGetPropertyNames",
        "testTheObjectType",
        "testGetTypesUnderInequality3",
        "visit",
        "testGoogBar",
        "testFunctionSubTypeRelationships",
        "testSubtypingFunctionVariableArgsBoth",
        "testGetTypeUnderEquality1",
        "testRecordTypeGreatestSubType3",
        "testRestrictedTypeGivenToBoolean",
        "testObjectGetSubTypes",
        "testNumberValueType",
        "testSubtypingObjectTopOfObjects",
        "testRecordAndObjectChain2",
        "testDateType",
        "testLeastSupertypeUnresolvedNamedType2",
        "equals",
        "testRegisterPropertyMemoization",
        "resolve",
        "testGreatestSubtypeUnionTypes2",
        "assertPropertyTypeInferred",
        "getTypesUnderShallowInequality",
        "TypePair",
        "testCreateOptionalType",
        "testGreatestSubtypeUnionTypes1",
        "testRecordTypeLeastSuperType1",
        "isNumber",
        "testRecordTypeGreatestSubType7",
        "testInstanceFunctionChaining",
        "testSubtypingFunctionPrototypeType",
        "getTypesToTestForSymmetry",
        "isTemplateType",
        "getGreatestSubtype",
        "matchesNumberContext",
        "meet",
        "testLeastSupertypeUnresolvedNamedType",
        "testStringEnumType",
        "isResolved",
        "getTypesUnderShallowEquality",
        "isBooleanObjectType",
        "autoboxesTo",
        "Comparator<JSType>",
        "assertPropertyTypeUnknown",
        "testReflexivityOfLeastSupertype",
        "matchesStringContext",
        "testGreatestSubtypeUnionTypes3",
        "canAssignTo",
        "testJSDocOnPrototypeProperty",
        "testGetTypeUnderEquality",
        "canTestForShallowEqualityWith",
        "isNoType",
        "contains",
        "testSubtypingFunctionVariableArgsOneOnly",
        "isDateType",
        "testInvalidSetPrototypeBasedOn",
        "testCreateAnonymousObjectType",
        "getPossibleToBooleanOutcomes",
        "isInstanceType",
        "testRecordTypeGreatestSubType4",
        "setResolvedTypeInternal",
        "testForwardDeclaredNamedType",
        "testRecordTypeGreatestSubType2",
        "testRecordTypeSubtypingWithInferredProperties",
        "isConstructor",
        "testEnumElementType",
        "testNamedTypeEquals",
        "testRegExpType",
        "testRecordTypeGreatestSubType1",
        "findPropertyType",
        "testEnumType",
        "testEnumTypeChain",
        "testGoogBarSubtypeChain",
        "testGetTypesUnderInequality1",
        "testObjectTypeIsPropertyInExterns",
        "compare",
        "isVoidType",
        "getAlternates",
        "testSubtypingSimpleTypes",
        "testGetTypesUnderEquality2",
        "testGetTypesUnderEquality6",
        "testGetTypesUnderInequality4",
        "testAllType",
        "isEmptyType",
        "hashCode",
        "testRecordType",
        "testGetAndSetJSDocInfoWithNamedType",
        "testNullType",
        "testRecordTypeLeastSuperType3",
        "testCallOfDateMethod",
        "getLeastSupertype",
        "testNullableNamedTypeChain",
        "testFunctionSubtypeChain",
        "testNamedGoogBar",
        "canTestForEqualityWith",
        "testSymmetryOfLeastSupertype",
        "restrictByNotNullOrUndefined",
        "testObjectType",
        "testRegisterProperty",
        "getRestrictedUnion",
        "isUnknownType",
        "isObject",
        "testNamedSubtypeChain",
        "testFunctionTypeRelationships",
        "testSubtypingFunctionFixedArgsNotMatching",
        "assertUnionContains",
        "isBooleanValueType",
        "unboxesTo",
        "testFunctionTypeRepresentation",
        "isNullType",
        "testGreatestSubtypeWithProperty",
        "testBooleanValueType",
        "testStringObjectEnumType",
        "testDefineProperties",
        "testGetAndSetJSDocInfoWithObjectTypes",
        "isTheObjectType",
        "safeResolve",
        "testConstructorSubtypeChain",
        "testArrayType",
        "testPrototypeChaining",
        "isString",
        "differsFrom",
        "isUnionType",
        "testUniversalConstructorType",
        "testUnionWithUnknown",
        "toObjectType",
        "isStringValueType",
        "testTestForEquality",
        "testGetTypesUnderEquality3",
        "testRecordTypeSubtyping",
        "testVoidType",
        "clearResolved",
        "testFunctionInstanceType",
        "testRecordTypeLeastSuperType4"
      ],
      "functions_name_co_evolved_modified_file": [
        "getGreatestSubtype",
        "meet"
      ],
      "functions_name_co_evolved_all_files": [
        "testGetTypesUnderInequality4",
        "testBug903110",
        "testGetRestrictedUnion2",
        "testUnionType",
        "testGreatestSubtypeUnionTypes4",
        "getGreatestSubtype",
        "testCanTestForEqualityWithCornerCases",
        "testSubtypingUnionTypes",
        "meet",
        "testGetTypesUnderInequality2",
        "setUp",
        "testGreatestSubtypeUnionTypes3",
        "testGetRestrictedUnion1",
        "testGetTypesUnderInequality3",
        "testSpecialUnionCanAssignTo",
        "assertTypeCanAssignToItself",
        "testGreatestSubtypeWithProperty",
        "testCreateUnionType",
        "testUnionWithUnknown",
        "testGreatestSubtypeUnionTypes2",
        "testGreatestSubtypeUnionTypes1",
        "testGetTypesUnderInequality1"
      ]
    },
    "file": {
      "file_name": "UnionType.java",
      "file_nloc": 319,
      "file_complexity": 91,
      "file_token_count": 1699,
      "file_before": "",
      "file_after": "",
      "file_patch": "@@ -271,28 +271,31 @@ public class UnionType extends JSType {\n     return getLeastSupertype(this, that);\n   }\n \n-  @Override\n-  public JSType getGreatestSubtype(JSType that) {\n-    if (that instanceof UnionType) {\n-      return meet((UnionType) that);\n-    }\n-    return getGreatestSubtype(this, that);\n-  }\n-\n-  private JSType meet(UnionType that) {\n+  JSType meet(JSType that) {\n     UnionTypeBuilder builder = new UnionTypeBuilder(registry);\n     for (JSType alternate : alternates) {\n       if (alternate.isSubtype(that)) {\n         builder.addAlternate(alternate);\n       }\n     }\n-    for (JSType otherAlternate : that.alternates) {\n-      if (otherAlternate.isSubtype(this)) {\n-        builder.addAlternate(otherAlternate);\n+\n+    if (that instanceof UnionType) {\n+      for (JSType otherAlternate : ((UnionType) that).alternates) {\n+        if (otherAlternate.isSubtype(this)) {\n+          builder.addAlternate(otherAlternate);\n+        }\n       }\n+    } else if (that.isSubtype(this)) {\n+      builder.addAlternate(that);\n     }\n     JSType result = builder.build();\n-    return result == null ? getNativeType(JSTypeNative.NO_TYPE) : result;\n+    if (result != null) {\n+      return result;\n+    } else if (this.isObject() && that.isObject()) {\n+      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n+    } else {\n+      return getNativeType(JSTypeNative.NO_TYPE);\n+    }\n   }\n \n   /**\n",
      "files_name_in_blame_commit": [
        "UnionTypeTest.java",
        "JSTypeTest.java",
        "UnionType.java",
        "JSType.java"
      ]
    }
  },
  "commits_modify_file_before_fix": {
    "size": 5
  }
}