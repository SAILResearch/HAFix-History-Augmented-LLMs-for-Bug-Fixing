{
  "id": "99",
  "blame_commit": {
    "commit": {
      "commit_id": "e082a039f895458c231226e66f39e39cbf3b5ef2",
      "commit_message": "Added Genetic Algorithm implementation.\nJIRA: MATH-207\nContributed by David Stefka\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@784604 13f79535-47bb-0310-9956-ffa450edef68",
      "commit_author": "Phil Steitz",
      "commit_date": "2009-06-14 19:04:32",
      "commit_parent": "496d85cf172c8340c6d29a12fe5cfc6e0777319b"
    },
    "function": {
      "function_name": "iterator",
      "function_code_before": "",
      "function_code_after": "public Iterator<Chromosome> iterator() {        \n    return chromosomes.iterator();\n}",
      "function_before_start_line": "",
      "function_before_end_line": "",
      "function_after_start_line": 147,
      "function_after_end_line": 149,
      "function_before_token_count": 0,
      "function_after_token_count": 12,
      "functions_name_modified_file": [
        "getFittestChromosome",
        "getPopulationLimit",
        "toString",
        "setPopulationLimit",
        "getChromosomes",
        "addChromosome",
        "ListPopulation",
        "iterator",
        "setChromosomes",
        "getPopulationSize"
      ],
      "functions_name_all_files": [
        "comparatorPermutation",
        "getCrossoverPolicy",
        "getFirst",
        "toString",
        "getNumGenerations",
        "getRepresentation",
        "RandomKey",
        "decode",
        "getSelectionPolicy",
        "compareTo",
        "testIsSame",
        "searchForFitnessUpdate",
        "testFitnessCaching",
        "testIdentityPermutation",
        "InvalidRepresentationException",
        "getPopulationLimit",
        "testRandomConstructor",
        "testConstructor1",
        "ListPopulation",
        "GeneticAlgorithm",
        "mutate",
        "testSelect",
        "AbstractListChromosome",
        "addChromosome",
        "fitness",
        "getElitismRate",
        "testInducedPermutation",
        "getLength",
        "testCompareTo",
        "testConstructor2",
        "DummyRandomKey",
        "TournamentSelection",
        "testCrossover",
        "getPopulationSize",
        "randomPopulation",
        "tournament",
        "isSatisfied",
        "getMutationRate",
        "getFittestChromosome",
        "baseSequence",
        "testMutate",
        "newFixedLengthChromosome",
        "MinPermutations",
        "getRandomGenerator",
        "BinaryChromosome",
        "testGetFittestChromosome",
        "decodeGeneric",
        "evolve",
        "testRandomPermutation",
        "select",
        "inducedPermutation",
        "getChromosomes",
        "DummyChromosome",
        "testComparatorPermutation",
        "iterator",
        "ChromosomePair",
        "crossover",
        "getCrossoverRate",
        "test",
        "checkValidity",
        "identityPermutation",
        "setArity",
        "randomPermutation",
        "setPopulationLimit",
        "setElitismRate",
        "setRandomGenerator",
        "DummyBinaryChromosome",
        "for",
        "testNextGeneration",
        "ElitisticListPopulation",
        "randomBinaryRepresentation",
        "getMutationPolicy",
        "getFitness",
        "setChromosomes",
        "getSecond",
        "FindOnes",
        "testFindSameChromosome",
        "testIsSatisfied",
        "testInvalidConstructor",
        "testDecode",
        "getArity",
        "FixedGenerationCount",
        "testEqualRepr",
        "isSame",
        "findSameChromosome",
        "nextGeneration",
        "DummyCountingBinaryChromosome"
      ],
      "functions_name_co_evolved_modified_file": [
        "getPopulationLimit",
        "getFittestChromosome",
        "toString",
        "setPopulationLimit",
        "getChromosomes",
        "addChromosome",
        "ListPopulation",
        "iterator",
        "setChromosomes",
        "getPopulationSize"
      ],
      "functions_name_co_evolved_all_files": [
        "comparatorPermutation",
        "getCrossoverPolicy",
        "toString",
        "getNumGenerations",
        "getRepresentation",
        "RandomKey",
        "decode",
        "getSelectionPolicy",
        "compareTo",
        "testIsSame",
        "searchForFitnessUpdate",
        "testFitnessCaching",
        "testIdentityPermutation",
        "InvalidRepresentationException",
        "setMutationPolicy",
        "getPopulationLimit",
        "testRandomConstructor",
        "testConstructor1",
        "ListPopulation",
        "GeneticAlgorithm",
        "mutate",
        "testSelect",
        "AbstractListChromosome",
        "addChromosome",
        "fitness",
        "getElitismRate",
        "testInducedPermutation",
        "getLength",
        "testCompareTo",
        "testConstructor2",
        "DummyRandomKey",
        "TournamentSelection",
        "testCrossover",
        "getPopulationSize",
        "randomPopulation",
        "setMutationRate",
        "tournament",
        "isSatisfied",
        "getMutationRate",
        "getFittestChromosome",
        "baseSequence",
        "testMutate",
        "newFixedLengthChromosome",
        "MinPermutations",
        "getRandomGenerator",
        "BinaryChromosome",
        "testGetFittestChromosome",
        "decodeGeneric",
        "setCrossoverRate",
        "testRandomPermutation",
        "select",
        "inducedPermutation",
        "getChromosomes",
        "setSelectionPolicy",
        "DummyChromosome",
        "testComparatorPermutation",
        "iterator",
        "ChromosomePair",
        "crossover",
        "getCrossoverRate",
        "test",
        "setCrossoverPolicy",
        "checkValidity",
        "identityPermutation",
        "setArity",
        "randomPermutation",
        "setPopulationLimit",
        "setElitismRate",
        "setRandomGenerator",
        "DummyBinaryChromosome",
        "testNextGeneration",
        "for",
        "ElitisticListPopulation",
        "randomBinaryRepresentation",
        "getMutationPolicy",
        "getFitness",
        "setChromosomes",
        "FindOnes",
        "testFindSameChromosome",
        "testIsSatisfied",
        "testInvalidConstructor",
        "testDecode",
        "getArity",
        "FixedGenerationCount",
        "testEqualRepr",
        "isSame",
        "findSameChromosome",
        "nextGeneration",
        "DummyCountingBinaryChromosome"
      ]
    },
    "file": {
      "file_name": "ListPopulation.java",
      "file_nloc": 59,
      "file_complexity": 16,
      "file_token_count": 330,
      "file_before": "",
      "file_after": "",
      "file_patch": "@@ -0,0 +1,150 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.genetics;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+/**\n+ * Population of chromosomes represented by a {@link List}.\n+ *\n+ * @since 2.0\n+ * @version $Revision:$ $Date:$\n+ */\n+public abstract class ListPopulation implements Population {\n+    \n+    /** List of chromosomes */\n+    private List<Chromosome> chromosomes;\n+    \n+    /** maximial size of the population */\n+    private int populationLimit;\n+    \n+    \n+    /**\n+     * Creates a new ListPopulation instance.\n+     * \n+     * @param chromosomes list of chromosomes in the population\n+     * @param populationLimit maximal size of the population\n+     */\n+    public ListPopulation (List<Chromosome> chromosomes, int populationLimit) {\n+        if (chromosomes.size() > populationLimit) {\n+            throw new IllegalArgumentException(\"List of chromosomes bigger than maxPopulationSize.\");\n+        }\n+        if (populationLimit < 0) {\n+            throw new IllegalArgumentException(\"Population limit has to be >= 0\");\n+        }\n+            \n+        this.chromosomes = chromosomes;\n+        this.populationLimit = populationLimit;\n+    }\n+    \n+    /**\n+     * Creates a new ListPopulation instance and initializes its inner\n+     * chromosome list.\n+     * \n+     * @param populationLimit maximal size of the population\n+     */\n+    public ListPopulation (int populationLimit) {\n+        if (populationLimit < 0) {\n+            throw new IllegalArgumentException(\"Population limit has to be >= 0\");\n+        }\n+        this.populationLimit = populationLimit;\n+        this.chromosomes = new ArrayList<Chromosome>(populationLimit);\n+    }\n+\n+    /**\n+     * Sets the list of chromosomes.\n+     * @param chromosomes the list of chromosomes\n+     */\n+    public void setChromosomes(List<Chromosome> chromosomes) {\n+        this.chromosomes = chromosomes;\n+    }\n+    \n+    /**\n+     * Access the list of chromosomes.\n+     * @return the list of chromosomes\n+     */\n+    public List<Chromosome> getChromosomes() {\n+        return chromosomes;\n+    }\n+\n+    /**\n+     * Add the given chromosome to the population.\n+     * @param chromosome the chromosome to add.\n+     */\n+    public void addChromosome(Chromosome chromosome) {\n+        this.chromosomes.add(chromosome);\n+    }\n+\n+    /**\n+     * Access the fittest chromosome in this population.\n+     * @return the fittest chromosome.\n+     */\n+    public Chromosome getFittestChromosome() {\n+        // best so far\n+        Chromosome bestChromosome = this.chromosomes.get(0);    \n+        for (Chromosome chromosome : this.chromosomes) {\n+            if (chromosome.compareTo(bestChromosome) > 0) {\n+                // better chromosome found\n+                bestChromosome = chromosome;\n+            }\n+        }\n+        return bestChromosome;\n+    }\n+    \n+    /**\n+     * Access the maximum population size.\n+     * @return the maximum population size.\n+     */\n+    public int getPopulationLimit() {\n+        return this.populationLimit;\n+    }\n+    \n+    /**\n+     * Sets the maximal population size.\n+     * @param populationLimit maximal population size.\n+     */\n+    public void setPopulationLimit(int populationLimit) {\n+        this.populationLimit = populationLimit;\n+    }\n+\n+    /**\n+     * Access the current population size.\n+     * @return the current population size.\n+     */\n+    public int getPopulationSize() {        \n+        return this.chromosomes.size();\n+    }\n+    \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public String toString() {\n+        return this.chromosomes.toString();\n+    }\n+    \n+    /**\n+     * Chromosome list iterator\n+     * \n+     * @return chromosome iterator\n+     */\n+    public Iterator<Chromosome> iterator() {        \n+        return chromosomes.iterator();\n+    }\n+}\n",
      "files_name_in_blame_commit": [
        "OnePointCrossover.java",
        "BinaryMutation.java",
        "GeneticAlgorithm.java",
        "RandomKeyTest.java",
        "TournamentSelection.java",
        "AbstractListChromosome.java",
        "ChromosomePair.java",
        "PermutationChromosome.java",
        "ChromosomeTest.java",
        "MutationPolicy.java",
        "BinaryMutationTest.java",
        "ListPopulationTest.java",
        "FixedGenerationCount.java",
        "DummyRandomKey.java",
        "FixedGenerationCountTest.java",
        "Chromosome.java",
        "FitnessCachingTest.java",
        "GeneticAlgorithmTestPermutations.java",
        "OnePointCrossoverTest.java",
        "ListPopulation.java",
        "Fitness.java",
        "StoppingCondition.java",
        "CrossoverPolicy.java",
        "RandomKeyMutation.java",
        "TournamentSelectionTest.java",
        "Population.java",
        "BinaryChromosome.java",
        "RandomKeyMutationTest.java",
        "BinaryChromosomeTest.java",
        "InvalidRepresentationException.java",
        "DummyBinaryChromosome.java",
        "GeneticAlgorithmTestBinary.java",
        "ElitisticListPopulation.java",
        "RandomKey.java",
        "SelectionPolicy.java",
        "ElitisticListPopulationTest.java"
      ]
    }
  },
  "commits_modify_file_before_fix": {
    "size": 15
  }
}