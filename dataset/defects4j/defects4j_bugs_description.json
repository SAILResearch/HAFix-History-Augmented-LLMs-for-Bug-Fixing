{
  "1": {
    "description": "#983 Potential NPE in AbstractCategoryItemRender.getLegendItems()\nSetting up a working copy of the current JFreeChart trunk in Eclipse I got a warning about a null pointer access in this bit of code from AbstractCategoryItemRender.java:\npublic LegendItemCollection getLegendItems() {\nLegendItemCollection result = new LegendItemCollection();\nif (this.plot == null) {\nreturn result;\n}\nint index = this.plot.getIndexOf(this);\nCategoryDataset dataset = this.plot.getDataset(index);\nif (dataset != null) {\nreturn result;\n}\nint seriesCount = dataset.getRowCount();\n...\n}\nThe warning is in the last code line where seriesCount is assigned. The variable dataset is guaranteed to be null in this location, I suppose that the check before that should actually read \"if (dataset == null)\", not \"if (dataset != null)\".\nThis is trunk as of 2010-02-08.",
    "desc_source": "sourceforge"
  },
  "2": {
    "description": "2007-12-19  David Gilbert  <david.gilbert@object-refinery.com>\n\n    * source/org/jfree/data/time/Week.java\n    (Week(Date, TimeZone)): Hand on the zone,\n    * tests/org/jfree/data/time/junit/WeekTests.java\n    (testBug1448828): Control the default locale,\n    (testBug1498805): Likewise,\n    (testGetFirstMillisecondWithTimeZone): Control the default locale, and\n    modify expected result accordingly,\n    (testGetLastMillisecondWithTimeZone): Likewise.",
    "desc_source": "commit_msg"
  },
  "3": {
    "description": "#818 Error on TimeSeries createCopy() method\nThe test case at the end fails with :\njava.lang.IllegalArgumentException: Requires start <= end.\nThe problem is in that the int start and end indexes corresponding to given timePeriod are computed incorectly. Here I would expect an empty serie to be returned, not an exception. This is with jfreechart 1.0.7\npublic class foo {\nstatic public void main(String args[]) {\n        TimeSeries foo = new TimeSeries(\"foo\",Day.class);\n        foo.add(new Day(19,4,2005),1);\n        foo.add(new Day(25,5,2005),1);\n        foo.add(new Day(28,5,2005),1);\n        foo.add(new Day(30,5,2005),1);\n        foo.add(new Day(1,6,2005),1);\n        foo.add(new Day(3,6,2005),1);\n        foo.add(new Day(19,8,2005),1);\n        foo.add(new Day(31,1,2006),1);\n    try \\{\n        TimeSeries bar = foo.createCopy\\(new Day\\(1,12,2005\\),new Day\\(18,1,2006\\)\\);\n    \\} catch \\(CloneNotSupportedException e\\) \\{\n\n        e.printStackTrace\\(\\);\n\n}\n}",
    "desc_source": "sourceforge"
  },
  "4": {
    "description": "2007-12-04  David Gilbert  <david.gilbert@object-refinery.com>\n\n    * source/org/jfree/chart/imagemap/DynamicDriveToolTipFragmentGenerator.java\n    (generateToolTipFragment): Escape text,\n    * source/org/jfree/chart/imagemap/OverLIBToolTipFragmentGenerator.java\n    (generateToolTipFragment): Likewise,\n    * source/org/jfree/chart/imagemap/StandardToolTipFragmentGenerator.java\n    (generateToolTipFragment): Likewise,\n    * source/org/jfree/chart/imagemap/StandardURLTagFragmentGenerator.java\n    (generateURLFragment): Likewise.",
    "desc_source": "commit_msg"
  },
  "5": {
    "description": "#213 Fix for MultiplePiePlot\nWhen dataset is passed into constructor for MultiplePiePlot, the dataset is not wired to a listener, as it would be if setDataset is called.",
    "desc_source": "sourceforge"
  },
  "6": {
    "description": "2008-04-08  David Gilbert  <david.gilbert@object-refinery.com>\n\n    * source/org/jfree/chart/block/BorderArrangement.java\n    (arrangeFF): Check for negative width remaining.",
    "desc_source": "commit_msg"
  },
  "7": {
    "description": "2007-10-08\tDavid Gilbert  <david.gilbert@object-refinery.com>\n\n\t* source/org/jfree/chart/plot/ValueMarker.java\n\t(ValueMarker(double, Paint, Stroke, Paint, Stroke, float)): Fixed call\n\tto super,\n\t* tests/org/jfree/chart/plot/junit/ValueMarkerTests.java\n\t(test1808376): New test method.",
    "desc_source": "commit_msg"
  },
  "8": {
    "description": "2007-09-26  David Gilbert  <david.gilbert@object-refinery.com>\n\n\t* source/org/jfree/chart/renderer/GrayPaintScale.java\n\t(getPaint): Use constrained value to calculate gray scale value,\n\t* tests/org/jfree/chart/renderer/junit/GrayPaintScaleTests.java\n\t(testConstructor): New test method,\n\t(testGetPaint): Likewise.",
    "desc_source": "commit_msg"
  },
  "9": {
    "description": "HelpFormatter wraps incorrectly on every line beyond the first\nThe method findWrapPos(...) in the HelpFormatter is a couple of bugs in the way that it deals with the \"startPos\" variable.  This causes it to format every line beyond the first line by \"startPos\" to many characters, beyond the specified width.  \n\nTo see this, create an option with a long description, and then use the help formatter to print it.  The first line will be the correct length.  The 2nd, 3rd, etc lines will all be too long.\n\nI don't have a patch (sorry) - but here is a corrected version of the method.\n\nI fixed it in two places - both were using \"width + startPos\" when they should have been using width.\n\n{code}\n protected int findWrapPos(String text, int width, int startPos)\n    {\n        int pos = -1;\n\n        // the line ends before the max wrap pos or a new line char found\n        if (((pos = text.indexOf('\\n', startPos)) != -1 && pos <= width)\n            || ((pos = text.indexOf('\\t', startPos)) != -1 && pos <= width))\n        {\n            return pos+1;\n        }\n        else if ((width) >= text.length())\n        {\n            return -1;\n        }\n\n\n        // look for the last whitespace character before startPos+width\n        pos = width;\n\n        char c;\n\n        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')\n               && (c != '\\n') && (c != '\\r'))\n        {\n            --pos;\n        }\n\n        // if we found it - just return\n        if (pos > startPos)\n        {\n            return pos;\n        }\n        \n        // must look for the first whitespace chearacter after startPos \n        // + width\n        pos = startPos + width;\n\n        while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')\n               && (c != '\\n') && (c != '\\r'))\n        {\n            ++pos;\n        }\n\n        return (pos == text.length())        ? (-1) : pos;\n    }\n{code}",
    "desc_source": "jira"
  },
  "10": {
    "description": "PosixParser interupts \"-target opt\" as \"-t arget opt\"\nThis was posted on the Commons-Developer list and confirmed as a bug.\n\n> Is this a bug?  Or am I using this incorrectly?\n> I have an option with short and long values.  Given code that is \n> essentially what is below, with a PosixParser I see results as \n> follows:\n> \n> A command line with just \"-t\" prints out the results of the catch \n> block\n> (OK)\n> A command line with just \"-target\" prints out the results of the catch\n> block (OK)\n> A command line with just \"-t foobar.com\" prints out \"processing selected\n> target: foobar.com\" (OK)\n> A command line with just \"-target foobar.com\" prints out \"processing\n> selected target: arget\" (ERROR?)\n> \n> ======================================================================\n> ==\n> =======================\n>   private static final String OPTION_TARGET = \"t\";\n>   private static final String OPTION_TARGET_LONG = \"target\";\n>   // ...\n>   Option generateTarget = new Option(OPTION_TARGET, \n>                                      OPTION_TARGET_LONG, \n>                                      true, \n>                                      \"Generate files for the specified\n> target machine\");\n>   // ...\n>   try {\n>         parsedLine = parser.parse(cmdLineOpts, args);\n>       } catch (ParseException pe) {\n>         System.out.println(\"Invalid command: \" + pe.getMessage() +\n> \"\\n\");\n>         HelpFormatter hf = new HelpFormatter();\n>         hf.printHelp(USAGE, cmdLineOpts);\n>         System.exit(-1);\n>       }\n> \n>   if (parsedLine.hasOption(OPTION_TARGET)) {\n>     System.out.println(\"processing selected target: \" +\n> parsedLine.getOptionValue(OPTION_TARGET));        \n>   }\n\nIt is a bug but it is due to well defined behaviour (so that makes me feel a\nlittle better about myself ;).  To support *special* \n(well I call them special anyway) like -Dsystem.property=value we need to be\nable to examine the first character of an option.  If the first character is\nitself defined as an Option then the remainder of the token is used as the\nvalue, e.g. 'D' is the token, it is an option so 'system.property=value' is the\nargument value for that option.  This is the behaviour that we are seeing for\nyour example.  \n't' is the token, it is an options so 'arget' is the argument value.  \n\nI suppose a solution to this could be to have a way to specify properties for\nparsers.  In this case 'posix.special.option == true' for turning \non *special* options. I'll have a look into this and let you know.\n\nJust to keep track of this and to get you used to how we operate, can you log a\nbug in bugzilla for this.\n\nThanks,\n-John K",
    "desc_source": "jira"
  },
  "11": {
    "description": "infinite loop in the wrapping code of HelpFormatter\nIf there is not enough space to display a word on a single line, HelpFormatter goes into a infinite loops until the JVM crashes with an OutOfMemoryError.\n\nTest case:\n\n{code}\nOptions options = new Options();\noptions.addOption(\"h\", \"help\", false, \"This is a looooong description\");\n\nHelpFormatter formatter = new HelpFormatter();\nformatter.setWidth(20);\nformatter.printHelp(\"app\", options); // hang & crash\n{code}\n\nAn helpful exception indicating the insufficient width would be more appropriate than an OutOfMemoryError.",
    "desc_source": "jira"
  },
  "12": {
    "description": "Default options may be partially processed\nThe Properties instance passed to the Parser.parse() method to initialize the default options may be partially processed. This happens when the properties contains an option that doesn't accept arguments and has a default value that isn't evaluated to \"true\". When this case occurs the processing of the properties is stopped and the remaining options are never handled.\n\nThis is caused by the break statement in Parser.processProperties(Properties), a continue statement should have been used instead.\n\nThe related test in ValueTest is also wrong, there are two assertions that need to be changed:\n\n{code}\nOptions opts = new Options();\nopts.addOption(\"a\", false, \"toggle -a\");\nopts.addOption(\"c\", \"c\", false, \"toggle -c\");\nopts.addOption(OptionBuilder.hasOptionalArg().create('e'));\n\nproperties = new Properties();\nproperties.setProperty( \"a\", \"false\" );\nproperties.setProperty( \"c\", \"no\" );\nproperties.setProperty( \"e\", \"0\" );\n\ncmd = parser.parse(opts, null, properties);\nassertTrue( !cmd.hasOption(\"a\") );\nassertTrue( !cmd.hasOption(\"c\") );\nassertTrue( !cmd.hasOption(\"e\") ); // Wrong, this option accepts an argument and should receive the value \"0\"\n{code}\n\n and the second one:\n\n{code}\nproperties = new Properties();\nproperties.setProperty( \"a\", \"just a string\" );\nproperties.setProperty( \"e\", \"\" );\n\ncmd = parser.parse(opts, null, properties);\nassertTrue( !cmd.hasOption(\"a\") );\nassertTrue( !cmd.hasOption(\"c\") );\nassertTrue( !cmd.hasOption(\"e\") ); // Wrong, this option accepts an argument and should receive an empty string as value\n{code}\n",
    "desc_source": "jira"
  },
  "13": {
    "description": "TypeHandler should throw ParseException for an unsupported class\nJavaDoc for TypeHandler states that createValue will\r\n{noformat}\r\n* @throws ParseException if the value creation for the given object type failedtype{noformat}\r\n\u00a0However createValue(String str, Class<?> clazz) will return null if the clazz is unknown.",
    "desc_source": "jira"
  },
  "14": {
    "description": "Wrong code generated if mixing types in ternary operator\n<b>What steps will reproduce the problem?</b>\n1. Use Google Closure Compiler to compile this code:\r\n\r\n    var a =(Math.random()&gt;0.5? '1' : 2 ) + 3 + 4;\r\n\r\nYou can either simple or advanced. It doesn't matter\r\n\r\n\r\n<b>What is the expected output? What do you see instead?</b>\n\r\nI'm seeing this as a result:\r\n    var a = (0.5 &lt; Math.random() ? 1 : 2) + 7;\r\n\r\nThis is obviously wrong as the '1' string literal got converted to a number, and 3+4 got combined into 7 while that's not ok as '1' + 3 + 4 = '134', not '17'.\r\n\r\n<b>What version of the product are you using? On what operating system?</b>\n\r\n\r\n<b>Please provide any additional information below.</b>\n\r\nSeems like this issue happens only when you are mixing types together. If both 1 and 2 are string literals or if they are both numbers it won't happen. I was also a little surprised to see this happening in simple mode as it actually breaks the behavior.",
    "desc_source": "google"
  },
  "15": {
    "description": "bogus 'missing return' warning\nThe following sample code compiles with &quot;Missing return statement. Function expected to return boolean.&quot; warning:\r\n\r\n/**\r\n * @return {boolean}\r\n */\r\nfunction fb(a)\r\n{\r\n    try\r\n    {\r\n        alert(a);      // Some method, which can throw\r\n        if (a &gt; 0)\r\n            return false;\r\n    }\r\n    finally\r\n    {\r\n        a = 5;\r\n    }\r\n    \r\n    return true;\r\n}",
    "desc_source": "google"
  },
  "16": {
    "description": "Dependency sorting with closurePass set to false no longer works.\n<b>What steps will reproduce the problem?</b>\n\r\n1. Instantiate new instance of Compiler\r\n\r\n2. Set closurePass to false to prevent goog.require/goog.provide removal.\r\ncompilerOptions.setClosurePass(false);\r\n\r\n3. Turn dependency sorting on.\r\nDependencyOptions dependencyOptions = new DependencyOptions();\r\ndependencyOptions.setDependencySorting(true);\r\n\r\n4. Compile js code\r\n\r\n\r\nWhat is the expected output? \r\nDependent files should be sorted and concatenated in their dependent order.\r\n\r\nWhat do you see instead?\r\nDependent files are not sorted.\r\n\r\n<b>What version of the product are you using? On what operating system?</b>\n&gt; r1824\r\nmac OS 10.7\r\n\r\n\r\n<b>Please provide any additional information below.</b>\nThis worked in the r1810 release. However, it looks like this was changed in r1824. The compiler now expects closurePass to be true for dependency sorting to work.\r\nhttp://code.google.com/p/closure-compiler/source/detail?path=/trunk/src/com/google/javascript/jscomp/Compiler.java&amp;r=1824\r\n\r\nWhat we are looking for is a way to sort dependencies and concatenate all files in their dependent order without removing the goog.require/goog.provide js calls. Turning closurePass to true causes the goog calls to be replaced. We use this methodology in local development to test our JS code.\r\n\r\nThanks!",
    "desc_source": "google"
  },
  "17": {
    "description": "Identifier minus a negative number needs a space between the \"-\"s\n<b>What steps will reproduce the problem?</b>\n1. Compile the attached file with      java -jar build/compiler.jar --compilation_level ADVANCED_OPTIMIZATIONS --js bulletfail.js --js_output_file cc.js\r\n2. Try to run the file in a JS engine, for example           node cc.js\r\n\r\n<b>What is the expected output? What do you see instead?</b>\n\r\nThe file does not parse properly, because it contains\r\n\r\n  g--0.0\r\n\r\nThis is subtraction of a negative number, but it looks like JS engines interpret it as decrementing g, and then fail to parse the 0.0. (g- -0.0, with a space, would parse ok.)\r\n\r\n<b>What version of the product are you using? On what operating system?</b>\n\r\nTrunk closure compiler on Ubuntu\r\n\r\n<b>Please provide any additional information below.</b>",
    "desc_source": "google"
  },
  "18": {
    "description": "Converts string properties into numbers in literal object definitions\n<b>What steps will reproduce the problem?</b>\n1. Minimize the following script:\r\n\r\nvar lit = {&quot;0102&quot;:&quot;Zero One Zero Two&quot;};\r\nalert(lit[&quot;0102&quot;]);\r\n\r\n<b>What is the expected output? What do you see instead?</b>\n\r\nExpected:\r\nvar lit={&quot;0102&quot;:&quot;Zero One Zero Two&quot;};alert(lit[&quot;0102&quot;]);\r\n\r\nActual:\r\nvar lit={102:&quot;Zero One Zero Two&quot;};alert(lit[&quot;0102&quot;]);\r\n\r\n<b>What version of the product are you using? On what operating system?</b>\n\r\nr1459\r\n\r\n<b>Please provide any additional information below.</b>",
    "desc_source": "google"
  },
  "19": {
    "description": "Column-indicating caret is sometimes not in error output\nFor some reason, the caret doesn't always show up in the output when there are errors.\r\n\r\nWhen test.js looks like this:\r\n\r\n\r\n&gt;alert(1;\r\n\r\n\r\n, the output is this:\r\n\r\n\r\n&gt;java -jar compiler.jar --js test.js\r\ntest.js:1: ERROR - Parse error. missing ) after argument list\r\n\r\n1 error(s), 0 warning(s)\r\n\r\n\r\nHowever, when test.js looks like this (notice the line break after the semicolon):\r\n\r\n\r\n&gt;alert(1;\r\n&gt;\r\n\r\n\r\n, the output is this:\r\n\r\n\r\n&gt;java -jar compiler.jar --js test.js\r\ntest.js:1: ERROR - Parse error. missing ) after argument list\r\nalert(1;\r\n        ^\r\n\r\n1 error(s), 0 warning(s)\r\n\r\n\r\nThat's the simplest reproduction of the problem that I could come up with, but I just encountered the problem in a file with ~100 LOC in it. This is the first time I believe I've run into the problem, but when it happens, my error parser fails and it becomes a pain to track down the raw output to find the actual problem.\r\n\r\nTested against r1171, committed 6/10 08:06. The problem is present going back to at least r1000, so this isn't a new issue.",
    "desc_source": "google"
  },
  "20": {
    "description": "String escaping mishandles null byte\n<b>What steps will reproduce the problem?</b>\n1. Run:\r\nvar x = &quot;\\u00003&quot;; if (x.length &lt; 2) { alert(&quot;fail&quot;); } else { alert(&quot;win&quot;); }\r\n2. Compile and run\r\n\r\n<b>What is the expected output? What do you see instead?</b>\n&quot;win&quot; is expected. &quot;fail&quot; is observed\r\n\r\n<b>What version of the product are you using? On what operating system?</b>\nr1167 on OS x 10.6\r\n\r\n<b>Please provide any additional information below.</b>\nThe problem is here: http://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/javascript/jscomp/CodeGenerator.java#1015\r\n\r\nHere's a patch that fixes it:\r\n$ svn diff\r\nIndex: src/com/google/javascript/jscomp/CodeGenerator.java\r\n===================================================================\r\n--- src/com/google/javascript/jscomp/CodeGenerator.java\t(revision 1167)\r\n+++ src/com/google/javascript/jscomp/CodeGenerator.java\t(working copy)\r\n@@ -1012,7 +1012,7 @@\r\n     for (int i = 0; i &lt; s.length(); i++) {\r\n       char c = s.charAt(i);\r\n       switch (c) {\r\n-        case '\\0': sb.append(&quot;\\\\0&quot;); break;\r\n+        case '\\0': sb.append(&quot;\\\\000&quot;); break;\r\n         case '\\n': sb.append(&quot;\\\\n&quot;); break;\r\n         case '\\r': sb.append(&quot;\\\\r&quot;); break;\r\n         case '\\t': sb.append(&quot;\\\\t&quot;); break;\r\n\r\nYou could also lookahead and output &quot;\\\\000&quot; only if the following char is 0-7 (octal valid) and otherwise output &quot;\\\\0&quot;. Is 2 bytes worth the complexity?",
    "desc_source": "google"
  },
  "21": {
    "description": "Advanced compilations renames a function and then deletes it, leaving a reference to a renamed but non-existent function\nIf we provide the below code to advanced:\r\n\r\n\r\nfunction A() {\r\nthis._x = 1;\r\n}\r\n\r\nA.prototype['func1'] = // done to save public reference to func1\r\nA.prototype.func1 = function() {\r\n  this._x = 2;\r\n  this.func2();\r\n}\r\n\r\nA.prototype.func2 = function() {\r\n  this._x = 3;\r\n  this.func3();\r\n}\r\n\r\nwindow['A'] = A;\r\n\r\n\r\nWe get the output:\r\n\r\n\r\nfunction a() {\r\n  this.a = 1\r\n}\r\na.prototype.func1 = a.prototype.b = function() {\r\n  this.a = 2;\r\n  this.c() // Problem!\r\n};\r\nwindow.A = a;\r\n\r\n\r\nSo the compiler emits no errors, and renames 'func2' to 'c' but ends up throwing away the definition of that function!\r\n\r\nThe problem arises when I use:\r\n\r\nA.prototype['func1'] = // done to save public reference to func1\r\nA.prototype.func1 = function() {\r\n...\r\n}\r\n\r\nThe ['func1'] line is apparently enough to save the reference correctly, but also has the side effect of causing the function innards to do the wrong thing.\r\n\r\nI can of course instead write it as:\r\n\r\nA.prototype['func1'] = A.prototype.func1;\r\nA.prototype.func1 = function() {\r\n  this._x = 2;\r\n  this.func2();\r\n}\r\n\r\nIn which case Advanced will compile correctly and the results will also be valid.\r\n\r\nfunction a() {\r\n  this.a = 1\r\n}\r\na.prototype.func1 = a.prototype.b;\r\na.prototype.b = function() {\r\n  this.a = 2;\r\n  this.a = 3 // func2, correctly minified\r\n};\r\nwindow.A = a;\r\n\r\n\r\nFor now I can just use the expected way of declaring that func1 export, but since the compiler returns with no errors or warnings and creates a function with no definition, it seems worth reporting.",
    "desc_source": "google"
  },
  "22": {
    "description": "unexpected typed coverage of less than 100%\n<b>What steps will reproduce the problem?</b>\n1. Create JavaScript file:\r\n/*global window*/\r\n/*jslint sub: true*/\r\n/**\r\n * @constructor\r\n * @param {!Element} element\r\n */\r\nfunction Example(element) {\r\n    /**\r\n     * @param {!string} ns\r\n     * @param {!string} name\r\n     * @return {undefined}\r\n     */\r\n    this.appendElement = function appendElement(ns, name) {\r\n        var e = element.ownerDocument.createElementNS(ns, name);\r\n        element.appendChild(e);\r\n    };\r\n}\r\nwindow[&quot;Example&quot;] = Example;\r\n2. compile it:\r\njava -jar compiler.jar --jscomp_error checkTypes --summary_detail_level 3 --js v.js --js_output_file compiled.js\r\n3. observe the outcome:\r\n0 error(s), 0 warning(s), 73.7% typed\r\n\r\n<b>What is the expected output? What do you see instead?</b>\nThis was expected:\r\n0 error(s), 0 warning(s), 100% typed\r\n\r\n<b>What version of the product are you using? On what operating system?</b>\nClosure Compiler Version: 964, Built on: 2011/04/05 14:31 on GNU/Linux.\r\n\r\n<b>Please provide any additional information below.</b>",
    "desc_source": "google"
  },
  "23": {
    "description": "no warnings when @private prop is redeclared on subclass\n<b>What steps will reproduce the problem?</b>\n/** @constructor */ function Foo() { /** @private */ this.x_ = 3; }\r\n\r\nthen, in a separate file:\r\n/** @constructor \r\n * @extends {Foo} */ function SubFoo() { /** @private */ this.x_ = 3; }\r\n\r\nthen, compile with --jscomp_error=visibility\r\n\r\nExpected: You should get an error.\r\nActual: No error.\r\n\r\nYou get an error as appropriate if the second @private annotation is removed.",
    "desc_source": "google"
  },
  "24": {
    "description": "Codepoint U+007f appears raw in output\n<b>What steps will reproduce the problem?</b>\n1. Open http://closure-compiler.appspot.com/home in your browser\r\n2. Enter the source code: alert('\\x7f')\r\n3. Hit the &quot;Compile&quot; button.\r\n\r\nWhat is the expected output?\r\nalert(&quot;\\x7f&quot;)\r\n\r\nWhat do you see instead?\r\nalert(&quot;\u007f&quot;);\r\n\r\n\r\n<b>What version of the product are you using? On what operating system?</b>\nThe version live on 11 April 2011.\r\n\r\n<b>Please provide any additional information below.</b>\nCodepoint U+007f is a delete control character and is the only non-printable ASCII codepoint that is not &lt;= U+0020.  http://www.fileformat.info/info/unicode/char/7f/index.htm\r\n\r\nIt should probably not appear raw in emitted source code because, it can confuse encoders.",
    "desc_source": "google"
  },
  "25": {
    "description": "side-effects analysis incorrectly removing function calls with side effects\nSample Code:\r\n---\r\n/** @constructor */\r\nfunction Foo() {\r\n  var self = this;\r\n  window.setTimeout(function() {\r\n    window.location = self.location;\r\n  }, 0);\r\n}\r\n\r\nFoo.prototype.setLocation = function(loc) {\r\n  this.location = loc;\r\n};\r\n\r\n(new Foo()).setLocation('http://www.google.com/');\r\n---\r\n\r\nThe setLocation call will get removed in advanced mode.",
    "desc_source": "google"
  },
  "26": {
    "description": "bug with implicit namespaces across modules\nIf there are three modules, the latter two of which depend on the root module:\r\n\r\n// Module A\r\ngoog.provide('apps');\r\n\r\n// Module B\r\ngoog.provide('apps.foo.bar.B');\r\n\r\n// Module C\r\ngoog.provide('apps.foo.bar.C');\r\n\r\nand this is compiled in SIMPLE_OPTIMIZATIONS mode, the following code will be produced:\r\n\r\n// Module A\r\nvar apps={};apps.foo.bar={};apps.foo={};\r\n\r\n// Module B\r\napps.foo.bar.B={};\r\n\r\n// Module C\r\napps.foo.bar.C={};\r\n\r\nThis will result in a runtime error in Module A because apps.foo.bar is assigned before apps.foo.\r\n\r\nThe patch for the fix (with regression test) is available at:\r\nhttp://codereview.appspot.com/2416041",
    "desc_source": "google"
  },
  "27": {
    "description": "Typos in externs/html5.js\nLine 354:\r\nCanvasRenderingContext2D.prototype.globalCompositingOperation;\r\n\r\nLine 366:\r\nCanvasRenderingContext2D.prototype.mitreLimit;\r\n\r\nThey should be globalCompositeOperation and miterLimit, respectively.",
    "desc_source": "google"
  },
  "28": {
    "description": "Bug in require calls processing\nThe Problem\r\n\r\nProcessClosurePrimitives pass has a bug in processRequireCall method.\r\nThe method processes goog.require calls. If a require symbol is invalid i.e is not provided anywhere, the method collects it for further error reporting. If the require symbol is valid, the method removes it from the ast.\r\n\r\nAll invalid require calls must be left for further using/checking of the code! The related comment in the code confirms this.\r\n\r\nNevertheless, the second condition (requiresLevel.isOn() -&gt; see source code) is invalid and always causes removing of the requires when we want to check these requires.\r\n\r\nIn any case, the method should not use the requiresLevel to decide if we need removing. The requiresLevel should be used to check if we need error reporting. \r\n\r\nThe Solution\r\n\r\nRemove the condition.\r\nPlease see the attached patch.",
    "desc_source": "google"
  },
  "29": {
    "description": "Crash on the web closure compiler\nWith the web application (http://closure-compiler.appspot.com/home)\r\n\r\nConfig:\r\n\r\n// ==ClosureCompiler==\r\n// @output_file_name default.js\r\n// @compilation_level ADVANCED_OPTIMIZATIONS\r\n// ==/ClosureCompiler==\r\n\r\n\r\nCode:\r\n\r\nvar g=function(m){return m*Math.random()|0},d=document,h=d.getElementById('h'),c=d.getElementById('c'),l;\r\n(l=function(){requestAnimationFrame(l);h.style.textShadow=&quot;0 0 1px #000,&quot;+(g(10)-5)+&quot;px &quot;+(g(10)-5)+&quot;px 0 #888,0 0 180px rgb(&quot;+g(255)+&quot;,&quot;+g(255)+&quot;,&quot;+g(255)+&quot;)&quot;})();\r\nd.addEventListener('mousemove',function(v){c.style.marginTop=(v.pageY/10+15|0)+'px'})\r\n\r\n\r\nCause:\r\n\r\nvar l; // D\u00e9clare l variable\r\n\r\n// Store function in l var and call\r\n(l = function(){ ... })       ();\r\n\r\n\r\nCrash repport: (long)\r\n\r\n23: java.lang.RuntimeException: INTERNAL COMPILER ERROR.\r\nPlease report this problem.\r\nUnexpected variable l\r\n  Node(NAME l): Input_0:2:36\r\n(l=function(){requestAnimationFrame(l);h.style.textShadow=&quot;0 0 1px #000,&quot;+(g(10)-5)+&quot;px &quot;+(g(10)-5)+&quot;px 0 #888,0 0 180px rgb(&quot;+g(255)+&quot;,&quot;+g(255)+&quot;,&quot;+g(255)+&quot;)&quot;})();\r\n  Parent(CALL): Input_0:2:14\r\n(l=function(){requestAnimationFrame(l);h.style.textShadow=&quot;0 0 1px #000,&quot;+(g(10)-5)+&quot;px &quot;+(g(10)-5)+&quot;px 0 #888,0 0 180px rgb(&quot;+g(255)+&quot;,&quot;+g(255)+&quot;,&quot;+g(255)+&quot;)&quot;})();\r\n\r\n\tat com.google.javascript.jscomp.VarCheck.visit(VarCheck.java:159)\r\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:544)\r\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:538)\r\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:538)\r\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:538)\r\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:538)\r\n\tat com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:318)\r\n\tat com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:507)\r\n\tat com.google.javascript.jscomp.VarCheck.process(VarCheck.java:102)\r\n\tat com.google.javascript.jscomp.PhaseOptimizer$NamedPass.process(PhaseOptimizer.java:271)\r\n\tat com.google.javascript.jscomp.PhaseOptimizer.process(PhaseOptimizer.java:215)\r\n\tat com.google.javascript.jscomp.Compiler.optimize(Compiler.java:1918)\r\n\tat com.google.javascript.jscomp.Compiler.compileInternal(Compiler.java:751)\r\n\tat com.google.javascript.jscomp.Compiler.access$000(Compiler.java:85)\r\n\tat com.google.javascript.jscomp.Compiler$2.call(Compiler.java:652)\r\n\tat com.google.javascript.jscomp.Compiler$2.call(Compiler.java:649)\r\n\tat com.google.javascript.jscomp.Compiler.runInCompilerThread(Compiler.java:709)\r\n\tat com.google.javascript.jscomp.Compiler.compile(Compiler.java:649)\r\n\tat com.google.javascript.jscomp.Compiler.compile(Compiler.java:605)\r\n\tat com.google.javascript.jscomp.webservice.backend.CompilerInvokerImpl.compile(CompilerInvokerImpl.java:47)\r\n\tat com.google.javascript.jscomp.webservice.backend.ServerController.executeRequest(ServerController.java:174)\r\n\tat com.google.javascript.jscomp.webservice.backend.CompilationRequestHandler.serviceParsedRequest(CompilationRequestHandler.java:180)\r\n\tat com.google.javascript.jscomp.webservice.backend.CompilationRequestHandler.service(CompilationRequestHandler.java:162)\r\n\tat com.google.javascript.jscomp.webservice.frontend.CompilationServlet.doPost(CompilationServlet.java:83)\r\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:637)\r\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:717)\r\n\tat org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:511)\r\n\tat org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1166)\r\n\tat com.google.apphosting.utils.servlet.ParseBlobUploadFilter.doFilter(ParseBlobUploadFilter.java:125)\r\n\tat org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157)\r\n\tat com.google.apphosting.runtime.jetty.SaveSessionFilter.doFilter(SaveSessionFilter.java:35)\r\n\tat org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157)\r\n\tat com.google.apphosting.utils.servlet.JdbcMySqlConnectionCleanupFilter.doFilter(JdbcMySqlConnectionCleanupFilter.java:60)\r\n\tat org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157)\r\n\tat com.google.apphosting.utils.servlet.TransactionCleanupFilter.doFilter(TransactionCleanupFilter.java:43)\r\n\tat org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157)\r\n\tat org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:388)\r\n\tat org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216)\r\n\tat org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:182)\r\n\tat org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765)\r\n\tat org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:418)\r\n\tat com.google.apphosting.runtime.jetty.AppVersionHandlerMap.handle(AppVersionHandlerMap.java:266)\r\n\tat org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)\r\n\tat org.mortbay.jetty.Server.handle(Server.java:326)\r\n\tat org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:542)\r\n\tat org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:923)\r\n\tat com.google.apphosting.runtime.jetty.RpcRequestParser.parseAvailable(RpcRequestParser.java:76)\r\n\tat org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404)\r\n\tat com.google.apphosting.runtime.jetty.JettyServletEngineAdapter.serviceRequest(JettyServletEngineAdapter.java:146)\r\n\tat com.google.apphosting.runtime.JavaRuntime$RequestRunnable.run(JavaRuntime.java:439)\r\n\tat com.google.tracing.TraceContext$TraceContextRunnable.runInContext(TraceContext.java:435)\r\n\tat com.google.tracing.TraceContext$TraceContextRunnable$1.run(TraceContext.java:442)\r\n\tat com.google.tracing.CurrentContext.runInContext(CurrentContext.java:186)\r\n\tat com.google.tracing.TraceContext$AbstractTraceContextCallback.runInInheritedContextNoUnref(TraceContext.java:306)\r\n\tat com.google.tracing.TraceContext$AbstractTraceContextCallback.runInInheritedContext(TraceContext.java:298)\r\n\tat com.google.tracing.TraceContext$TraceContextRunnable.run(TraceContext.java:439)\r\n\tat com.google.apphosting.runtime.ThreadGroupPool$PoolEntry.run(ThreadGroupPool.java:251)\r\n\tat java.lang.Thread.run(Thread.java:722)\r\nCaused by: java.lang.IllegalStateException: Unexpected variable l\r\n\t... 58 more\r\n\r\nOriginal Post Data: \r\noutput_format=json&amp;output_info=compiled_code&amp;output_info=warnings&amp;output_info=errors&amp;output_info=statistics&amp;compilation_level=ADVANCED_OPTIMIZATIONS&amp;warning_level=verbose&amp;output_file_name=default.js&amp;js_code=var%20g%3Dfunction(m)%7Breturn%20m*Math.random()%7C0%7D%2Cd%3Ddocument%2Ch%3Dd.getElementById('h')%2Cc%3Dd.getElementById('c')%2Cl%3B%0A(l%3Dfunction()%7BrequestAnimationFrame(l)%3Bh.style.textShadow%3D%220%200%201px%20%23000%2C%22%2B(g(10)-5)%2B%22px%20%22%2B(g(10)-5)%2B%22px%200%20%23888%2C0%200%20180px%20rgb(%22%2Bg(255)%2B%22%2C%22%2Bg(255)%2B%22%2C%22%2Bg(255)%2B%22)%22%7D)()%3B%0Ad.addEventListener('mousemove'%2Cfunction(v)%7Bc.style.marginTop%3D(v.pageY%2F10%2B15%7C0)%2B'px'%7D)",
    "desc_source": "google"
  },
  "30": {
    "description": "IllegalStateException at com.google.javascript.rhino.jstype.FunctionType.getInstanceType\n&gt; What steps will reproduce the problem?\r\n1. Unpack attached test case.\r\n2. Ensure make, wget, unzip, and java are on your PATH\r\n3. make prep (or just set up the build manually, it's not complicated)\r\n4. make crash\r\n\r\n&gt; What is the expected output? What do you see instead?\r\nExpected output: either successful compilation, or a compilation error.\r\nActual output: \r\n$ java \\\r\n\t  -jar ./compiler.jar \\\r\n\t  --js crash.js \\\r\n\t  --warning_level=VERBOSE \\\r\n\t  --compilation_level=SIMPLE_OPTIMIZATIONS\r\njava.lang.RuntimeException: java.lang.IllegalStateException\r\n\tat com.google.javascript.jscomp.Compiler.runInCompilerThread(Compiler.java:715)\r\n\tat com.google.javascript.jscomp.Compiler.compile(Compiler.java:647)\r\n\tat com.google.javascript.jscomp.Compiler.compile(Compiler.java:603)\r\n\tat com.google.javascript.jscomp.AbstractCommandLineRunner.doRun(AbstractCommandLineRunner.java:783)\r\n\tat com.google.javascript.jscomp.AbstractCommandLineRunner.run(AbstractCommandLineRunner.java:379)\r\n\tat com.google.javascript.jscomp.CommandLineRunner.main(CommandLineRunner.java:972)\r\nCaused by: java.lang.IllegalStateException\r\n\tat com.google.common.base.Preconditions.checkState(Preconditions.java:133)\r\n\tat com.google.javascript.rhino.jstype.FunctionType.getInstanceType(FunctionType.java:1071)\r\n\tat com.google.javascript.jscomp.TypeCheck.visitNew(TypeCheck.java:1567)\r\n\tat com.google.javascript.jscomp.TypeCheck.visit(TypeCheck.java:569)\r\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:534)\r\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:528)\r\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:528)\r\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:528)\r\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:528)\r\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:528)\r\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:528)\r\n\tat com.google.javascript.jscomp.NodeTraversal.traverseFunction(NodeTraversal.java:569)\r\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:522)\r\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:528)\r\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:528)\r\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:528)\r\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:528)\r\n\tat com.google.javascript.jscomp.NodeTraversal.traverseWithScope(NodeTraversal.java:353)\r\n\tat com.google.javascript.jscomp.TypeCheck.check(TypeCheck.java:400)\r\n\tat com.google.javascript.jscomp.TypeCheck.process(TypeCheck.java:371)\r\n\tat com.google.javascript.jscomp.DefaultPassConfig$30$1.process(DefaultPassConfig.java:1237)\r\n\tat com.google.javascript.jscomp.PhaseOptimizer$NamedPass.process(PhaseOptimizer.java:293)\r\n\tat com.google.javascript.jscomp.PhaseOptimizer.process(PhaseOptimizer.java:237)\r\n\tat com.google.javascript.jscomp.Compiler.check(Compiler.java:830)\r\n\tat com.google.javascript.jscomp.Compiler.compileInternal(Compiler.java:742)\r\n\tat com.google.javascript.jscomp.Compiler.access$000(Compiler.java:83)\r\n\tat com.google.javascript.jscomp.Compiler$2.call(Compiler.java:650)\r\n\tat com.google.javascript.jscomp.Compiler$2.call(Compiler.java:647)\r\n\tat com.google.javascript.jscomp.Compiler$3.call(Compiler.java:677)\r\n\tat java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)\r\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:138)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:895)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:918)\r\n\tat java.lang.Thread.run(Thread.java:680)\r\nmake: *** [crash] Error 254\r\n\r\n&gt; What version of the product are you using? On what operating system?\r\nclosure-compiler release 20130411.  I have also encountered this error on earlier versions of closure-compiler, but the above repro recipe uses 20130411.  I'm currently testing on OS X but this probably happens on other platforms too.\r\n\r\n&gt; Please provide any additional information below.\r\n\r\nHere's the contents of crash.js (included in the attached archive):\r\n\r\n-----begin snip-----\r\nvar test = {};\r\n\r\n/**\r\n * @interface\r\n */\r\ntest.T = function() {};\r\n\r\n/**\r\n * @constructor\r\n * @implements {test.T}\r\n */\r\ntest.A = function() {};\r\n\r\n/**\r\n * @constructor\r\n * @implements {test.T}\r\n */\r\ntest.B = function() {};\r\n\r\n/**\r\n * @constructor\r\n */\r\ntest.X = function() {\r\n    this.type = test.A;\r\n    this.t = this.f();\r\n};\r\n\r\n/**\r\n * @return {test.T}\r\n */\r\ntest.X.prototype.f = function() {\r\n    if (this.type === test.A) {\r\n        return new test.A();\r\n    } else if (this.type === test.B) {\r\n        return new test.B();\r\n    }\r\n};\r\n-----end snip-----",
    "desc_source": "google"
  },
  "31": {
    "description": "arguments is moved to another scope\nUsing ADVANCED_OPTIMIZATIONS with CompilerOptions.collapsePropertiesOnExternTypes = true a script I used broke, it was something like:\r\n\r\nfunction () {\r\n  return function () {\r\n    var arg = arguments;\r\n    setTimeout(function() { alert(args); }, 0);\r\n  }\r\n}\r\n\r\nUnfortunately it was rewritten to:\r\n\r\nfunction () {\r\n  return function () {\r\n    setTimeout(function() { alert(arguments); }, 0);\r\n  }\r\n}\r\n\r\narguments should not be collapsed.",
    "desc_source": "google"
  },
  "32": {
    "description": "Wrong argument count error not reported on this aliasing (on function with @this annotation)\nThe following code (attached as test2-1.js) when compiled with:\r\njava -jar build/compiler.jar --compilation_level=ADVANCED_OPTIMIZATIONS --jscomp_error=accessControls --jscomp_error=checkTypes --jscomp_error=checkVars --jscomp_error=uselessCode --jscomp_off=globalThis --js ~/Desktop/test2.js \r\n\r\ncorrectly fails with:\r\n\r\n/Users/dolapo/Desktop/test2.js:28: ERROR - Function Person.prototype.getName: called with 1 argument(s). Function requires at least 0 argument(s) and no more than 0 argument(s).\r\n\r\nHowever, if the say function is modified such that this is aliased and the function is called within a setTimeout (test2-2.js), the error is not caught\r\n\r\n\r\n\r\n\r\n\r\ntest2-1.js:\r\nvar makeClass = function(protoMethods) {\r\n  var clazz = function() {\r\n    this.initialize.apply(this, arguments);\r\n  }\r\n  for (var i in protoMethods) {\r\n    clazz.prototype[i] = protoMethods[i];\r\n  }\r\n\r\n  return clazz;\r\n}\r\n\r\n/** @constructor */\r\nvar Person = function(name){};\r\nPerson = makeClass(/** @lends Person.prototype */ {\r\n  /** @this {Person} */\r\n  initialize: function(name) {\r\n    this.name = name;\r\n  },\r\n\r\n  /** @this {Person} */\r\n  getName: function() { return this.name; },\r\n\r\n  /**\r\n   * @param {string} message\r\n   * @this {Person}\r\n   */\r\n  say: function(message) {\r\n    window.console.log(this.getName(1) + ' says: ' + message);\r\n  }\r\n});\r\n\r\n\r\nvar joe = new Person('joe');\r\njoe.say('hi');\r\nvar jane = new Person('jane');\r\njane.say('hello');\r\n\r\n\r\n\r\ntest2-2.js:\r\n\r\nvar makeClass = function(protoMethods) {\r\n  var clazz = function() {\r\n    this.initialize.apply(this, arguments);\r\n  }\r\n  for (var i in protoMethods) {\r\n    clazz.prototype[i] = protoMethods[i];\r\n  }\r\n\r\n  return clazz;\r\n}\r\n\r\n/** @constructor */\r\nvar Person = function(name){};\r\nPerson = makeClass(/** @lends Person.prototype */ {\r\n  /** @this {Person} */\r\n  initialize: function(name) {\r\n    this.name = name;\r\n  },\r\n\r\n  /** @this {Person} */\r\n  getName: function() { return this.name; },\r\n\r\n  /**\r\n   * @param {string} message\r\n   * @this {Person}\r\n   */\r\n  say: function(message) {\r\n    // window.console.log(this.getName(1) + ' says: ' + message);\r\n    var self = this;\r\n    setTimeout(function() {\r\n      window.console.log(self.getName(1) + ' says: ' + message);\r\n    }, 500); \r\n  }\r\n});\r\n\r\n\r\nvar joe = new Person('joe');\r\njoe.say('hi');\r\nvar jane = new Person('jane');\r\njane.say('hello');",
    "desc_source": "google"
  },
  "33": {
    "description": "Base64 bug with empty input (new byte[0])\nBase64.encode(new byte[0]) doesn't return an empty byte array back!  It returns CRLF.",
    "desc_source": "jira"
  },
  "34": {
    "description": "Double Metaphone bugs in alternative encoding\nThe new test case (CODEC-83) has highlighted a number of issues with the \"alternative\" encoding in the Double Metaphone implementation\n\n1) Bug in the handleG method when \"G\" is followed by \"IER\" \n *  The alternative encoding of \"Angier\" results in \"ANKR\" rather than \"ANJR\"\n *  The alternative encoding of \"rogier\" results in \"RKR\" rather than \"RJR\"\n\nThe problem is in the handleG() method and is caused by the wrong length (4 instead of 3) being used in the contains() method:\n\n{code}\n } else if (contains(value, index + 1, 4, \"IER\")) {\n{code}\n\n...this should be\n\n{code}\n } else if (contains(value, index + 1, 3, \"IER\")) {\n{code}\n\n\n2)  Bug in the handleL method\n * The alternative encoding of \"cabrillo\" results in \"KPRL \" rather than \"KPR\"\n\nThe problem is that the first thing this method does is append an \"L\" to both primary & alternative encoding. When the conditionL0() method returns true then the \"L\" should not be appended for the alternative encoding\n\n{code}\nresult.append('L');\nif (charAt(value, index + 1) == 'L') {\n    if (conditionL0(value, index)) {\n        result.appendAlternate(' ');\n    }\n    index += 2;\n} else {\n    index++;\n}\nreturn index;\n{code}\n\nSuggest refeactoring this to\n\n{code}\nif (charAt(value, index + 1) == 'L') {\n    if (conditionL0(value, index)) {\n        result.appendPrimary('L');\n    } else {\n        result.append('L');\n    }\n    index += 2;\n} else {\n    result.append('L');\n    index++;\n}\nreturn index;\n{code}\n\n3) Bug in the conditionL0() method for words ending in \"AS\" and \"OS\"\n * The alternative encoding of \"gallegos\" results in \"KLKS\" rather than \"KKS\"\n\nThe problem is caused by the wrong start position being used in the contains() method, which means its not checking the last two characters of the word but checks the previous & current position instead:\n\n{code}\n        } else if ((contains(value, index - 1, 2, \"AS\", \"OS\") || \n{code}\n\n...this should be\n\n{code}\n        } else if ((contains(value, value.length() - 2, 2, \"AS\", \"OS\") || \n{code}\n\nI'll attach a patch for review",
    "desc_source": "jira"
  },
  "35": {
    "description": "new Base64().encode() appends a CRLF, and chunks results into 76 character lines\nThe instance encode() method (e.g. new Base64().encode()) appends a CRLF.  Actually it's fully chunking the output into 76 character lines.  Commons-Codec-1.3 did not do this.  The static Base64.encodeBase64() method behaves the same in both 1.3 and 1.4, so this problem only affects the instance encode() method.\n\n\n{code}\nimport org.apache.commons.codec.binary.*;\n\npublic class B64 {\n\n  public static void main(String[] args) throws Exception {\n    Base64 b64 = new Base64();\n\n    String s1 = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";\n    String s2 = \"aaaaaaaaaa\";\n    String s3 = \"a\";\n    \n    byte[] b1 = s1.getBytes(\"UTF-8\");\n    byte[] b2 = s2.getBytes(\"UTF-8\");\n    byte[] b3 = s3.getBytes(\"UTF-8\");\n\n    byte[] result;\n    result = Base64.encodeBase64(b1);\n    System.out.println(\"[\" + new String(result, \"UTF-8\") + \"]\");\n    result = b64.encode(b1);\n    System.out.println(\"[\" + new String(result, \"UTF-8\") + \"]\");\n\n    result = Base64.encodeBase64(b2);\n    System.out.println(\"[\" + new String(result, \"UTF-8\") + \"]\");\n    result = b64.encode(b2);\n    System.out.println(\"[\" + new String(result, \"UTF-8\") + \"]\");\n\n    result = Base64.encodeBase64(b3);\n    System.out.println(\"[\" + new String(result, \"UTF-8\") + \"]\");\n    result = b64.encode(b3);\n    System.out.println(\"[\" + new String(result, \"UTF-8\") + \"]\");\n\n  }\n}\n{code}\n\n\nHere's my output:\n\n{noformat}\n$ java -cp commons-codec-1.3.jar:. B64\n[YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYQ==]\n[YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYQ==]\n[YWFhYWFhYWFhYQ==]\n[YWFhYWFhYWFhYQ==]\n[YQ==]\n[YQ==]\n\n\n$ java -cp commons-codec-1.4.jar:. B64\n[YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYQ==]\n[YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\nYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYQ==\n]\n[YWFhYWFhYWFhYQ==]\n[YWFhYWFhYWFhYQ==\n]\n[YQ==]\n[YQ==\n]\n{noformat}\n",
    "desc_source": "jira"
  },
  "36": {
    "description": "Base64.encodeBase64String() shouldn't chunk\nBase64.encodeBase64String() shouldn't chunk.\n\nChange this:\n\n{code}\npublic static String encodeBase64String(byte[] binaryData) {\n    return StringUtils.newStringUtf8(encodeBase64(binaryData, true));\n}\n{code}\n\nTo this:\n\n{code}\npublic static String encodeBase64String(byte[] binaryData) {\n    return StringUtils.newStringUtf8(encodeBase64(binaryData, false));\n}\n{code}\n\n\n\nThis will fix the following tests ggregory added a few minutes ago:\n\n        //assertEquals(\"Zg==\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"f\")));\n        //assertEquals(\"Zm8=\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"fo\")));\n        //assertEquals(\"Zm9v\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"foo\")));\n        //assertEquals(\"Zm9vYg==\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"foob\")));\n        //assertEquals(\"Zm9vYmE=\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"fooba\")));\n        //assertEquals(\"Zm9vYmFy\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"foobar\")));\n\n",
    "desc_source": "jira"
  },
  "37": {
    "description": "Base64.encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) throws IAE for valid maxResultSize if isChunked is false\nIf isChunked is false, Base64.encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) throws IAE for valid maxResultSize.\n\nTest case and fix will be applied shortly.",
    "desc_source": "jira"
  },
  "38": {
    "description": "Caverphone encodes names starting and ending with \"mb\" incorrectly.\nCaverphone encode names starting and ending with \"mb\" incorrectly.\n\nAccording to the spec:\n\"If the name ends with mb make it m2\".\n\nThis has been coded as:\n\"If the name _starts_ with mb make it m2\".",
    "desc_source": "jira"
  },
  "39": {
    "description": "StringUtils.newStringxxx(null) should return null, not NPE\nMethod calls such as StringUtils.newStringIso8859_1(null) should return null, not NPE.\n\nIt looks like this capability was lost with the fix for CODEC-136, i.e.\nhttp://svn.apache.org/viewvc?rev=1306366&view=rev\n\nSeveral methods were changed from\n\n{code}\nreturn StringUtils.newString(bytes, CharEncoding.xxx);\nto\nreturn new String(bytes, Charsets.xxx);\n{code}\n\nThe new code should have been:\n\n{code}\nreturn newString(bytes, Charsets.xxx);\n{code}\n\nThe newString method handles null input.\n\nThere were no tests for null input so the change in behaviour was missed.\n",
    "desc_source": "jira"
  },
  "40": {
    "description": "StringUtils.equals(CharSequence cs1, CharSequence cs2) can fail with String Index OBE\nStringUtils.equals(CharSequence cs1, CharSequence cs2) fails with String Index OBE if the two sequences are different lengths.",
    "desc_source": "jira"
  },
  "41": {
    "description": "COLLECTIONS-219 - CollectionUtils - Fix removeAll() method which was completely broken\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/collections/trunk@428130 13f79535-47bb-0310-9956-ffa450edef68",
    "desc_source": "commit_msg"
  },
  "42": {
    "description": "Applying the patch from Alexander Borovsky for COLLECTIONS-271\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/collections/trunk@637503 13f79535-47bb-0310-9956-ffa450edef68",
    "desc_source": "commit_msg"
  },
  "43": {
    "description": "MultiKey subclassing has deserialization problem since COLLECTIONS-266: either declare protected readResolve() or MultiKey must be final\nMultiKey from collections 4 provides a transient hashCode and a *private* readResolve to resolve COLLECTIONS-266: Issue with MultiKey when serialized/deserialized via RMI.\n\nUnfortunately the solution does not work in case of *subclassing*: readResolve in MultiKey should be declared *protected* readResolve() to be called during deserialization of the subclass. Otherwise MultiKey must be final to avoid such subclassing.\n\n*Testcase*:\n{code:java|title=MultiKeySerializationTest.java}\npackage de.ivu.test.common.collections4;\n\nimport static org.junit.Assert.assertEquals;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\n\nimport org.apache.commons.collections4.keyvalue.MultiKey;\nimport org.junit.Test;\n\npublic class MultiKeySerializationTest {\n\n    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testReadResolveEqualHashCode()\n            throws IOException, ClassNotFoundException {\n        class MultiKey2<A, B>\n                extends MultiKey {\n\n            private static final long serialVersionUID = 1928896152249821416L;\n\n            public MultiKey2(A key1, B key2) {\n                super(key1, key2);\n            }\n\n            public A getFirst() {\n                return (A) getKey(0);\n            }\n\n            public B getSecond() {\n                return (B) getKey(1);\n            }\n            \n            // FIXME: MultiKey should either declare protected readResolve() or must be final.\n        }\n        MultiKey2<String, String> one = new MultiKey2<>(\"bla\", \"blub\");\n        System.out.println(one.hashCode());\n        ByteArrayOutputStream byteOut = new ByteArrayOutputStream();\n        ObjectOutputStream out = new ObjectOutputStream(byteOut);\n        out.writeObject(one);\n        out.close();\n        byte[] serialized = byteOut.toByteArray();\n        ByteArrayInputStream byteIn = new ByteArrayInputStream(serialized);\n        ObjectInputStream in = new ObjectInputStream(byteIn);\n        MultiKey2<String, String> two = (MultiKey2<String, String>) in.readObject();\n        System.out.println(two.hashCode());\n        assertEquals(\"hashCode must be equal - please check for protected readResolve in MultiKey*\", one.hashCode(),\n            two.hashCode());\n    }\n}\n{code}\n\n*Fix:*\n{code:java|title=MultiKey.java}\n@@ -274,7 +274,7 @@\n      * only stable for the same process).\n      * @return the instance with recalculated hash code\n      */\n-    private Object readResolve() {\n+    protected Object readResolve() {\n         calculateHashCode(keys);\n         return this;\n     }\n{code}",
    "desc_source": "jira"
  },
  "44": {
    "description": "ZipException on reading valid zip64 file\nZipFile zip = new ZipFile(new File(\"ordertest-64.zip\")); throws ZipException \"central directory zip64 extended information extra field's length doesn't match central directory data.  Expected length 16 but is 28\".\n\nThe archive was created by using DotNetZip-WinFormsTool uzing zip64 flag (forces always to make zip64 archives).\n\nZip file is tested from the console: $zip -T ordertest-64.zip\n\nOutput:\ntest of ordertest-64.zip OK\n\nI can open the archive with FileRoller without problem on my machine, browse and extract it.\n",
    "desc_source": "jira"
  },
  "45": {
    "description": "7z: 16 MB dictionary is too big\nI created an archiv with 7zip 9.20 containing the compress-1.7-src directory. Also tried it with 1.6 version and directory. I \n\ndownloaded the zip file and reziped it as 7z. The standard setting where used:\nCompression level: normal\nCompression method: lzma2\nDictionary size: 16 MB\nWord size: 32\nSolid Block size: 2 GB\n\nI get an exception if I try to open the file with the simple line of code:\nSevenZFile input = new SevenZFile(new File(arcName));\n\nMaybe it is a bug in the tukaani library, but I do not know how to report it to them.\nThe exception thrown:\n\norg.tukaani.xz.UnsupportedOptionsException: LZMA dictionary is too big for this implementation\n\tat org.tukaani.xz.LZMAInputStream.initialize(Unknown Source)\n\tat org.tukaani.xz.LZMAInputStream.<init>(Unknown Source)\n\tat org.apache.commons.compress.archivers.sevenz.Coders$LZMADecoder.decode(Coders.java:117)\n\tat org.apache.commons.compress.archivers.sevenz.Coders.addDecoder(Coders.java:48)\n\tat org.apache.commons.compress.archivers.sevenz.SevenZFile.readEncodedHeader(SevenZFile.java:278)\n\tat org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeaders(SevenZFile.java:190)\n\tat org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SevenZFile.java:94)\n\tat org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SevenZFile.java:116)\n\tat compress.SevenZipError.main(SevenZipError.java:28)",
    "desc_source": "jira"
  },
  "46": {
    "description": "PAX header entry name ending with / causes problems\nThere seems to be a problem when a PAX header entry (link flag is 'x') has a name ending with \"/\". The {{TarArchiveEntry.isDirectory()}} check ends up returning {{true}} because of the trailing slash which means no content can be read from the entry. PAX header parsing effectively finds nothing and the stream is not advanced; this leaves the stream in a bad state as the next entry's header is actually read from the header contents.\n\nIf the name is modified to remove the trailing slash when the link flag indicates a PAX header everything seems to work fine. That would be one potential fix in {{parseTarHeader}}. Changing {{isDirectory}} to return {{false}} if {{isPaxHeader}} is {{true}} (before the trailing \"/\" check) would probably also fix the issue (though I can't verify that in the debugger like I can with changing the name).\n\nSo far I have only seen this when using Docker to save images that contain a yum database. For example:\n{noformat}\ndocker pull centos:latest && docker save centos:latest | tar x --include \"*/layer.tar\"\n{noformat}\nWill produce at least one \"layer.tar\" that exhibits this issue. If I come across a smaller TAR for testing I will attach it.",
    "desc_source": "jira"
  },
  "47": {
    "description": "CSVParser: getHeaderMap throws NPE \ntitle nearly says it all :-) \n\nGiven a CSVParser parser, the following line throws an NPE:\n\n{code}\nMap<String, Integer> header = parser.getHeaderMap();\n{code}\n\nStacktrace: \n\n{noformat}\nCaused by: java.lang.NullPointerException\nat java.util.HashMap.<init>(HashMap.java:318)\nat java.util.LinkedHashMap.<init>(LinkedHashMap.java:212)\nat org.apache.commons.csv.CSVParser.getHeaderMap(CSVParser.java:288)\n{noformat}\n\nhappens if the format doesn't have a headerMap.\n\nto fix, check if the parser's headerMap is null before trying to create the returned map:\n\n{code}\npublic Map<String, Integer> getHeaderMap() {\n    return this.headerMap != null ?\n       new LinkedHashMap<String, Integer>(this.headerMap)\n       : null;\n}\n\n{code}\n",
    "desc_source": "jira"
  },
  "48": {
    "description": "NullPointerException when empty header string and and null string of \"\"\nWhen setting the format to have a nullString of \"\" and having an empty header value, a nullPointerException is thrown.",
    "desc_source": "jira"
  },
  "49": {
    "description": "Negative numeric values in the first column are always quoted in minimal mode\nNegative Numeric values are always quoted in minimal mode if (and only if) they are in the first column.\n\ni.e.\nlong,lat,data\n\"-92.222\",43.333,3\n\nLooking at the code, this is by design but seem to be for an unknown reason.\n\nFrom v1.2 CSVPrinter line 230:\n\n// TODO where did this rule come from?\nif (newRecord && (c < '0' || (c > '9' && c < 'A') || (c > 'Z' && c < 'a') || (c > 'z'))) {\n    quote = true;\n} else ...\n   \n\nI propose this rule to either be remove or at a minimum be changed to:\n// TODO where did this rule come from?\nif (newRecord && (c !='-' && c < '0' || (c > '9' && c < 'A') || (c > 'Z' && c < 'a') || (c > 'z'))) {\n    quote = true;\n} else ...\n   \n\n",
    "desc_source": "jira"
  },
  "50": {
    "description": "Negative zero\nHi,\r\n\r\nI have been cross testing various json parsers looking for those that expose the lexical of json numbers and not only their bound java.lang.Number. Because of the lazy parsing done by gson with `LazilyParsedNumber`,  that keeps the lexical, all my roundtrip tests pass apart one: the lexical  `-0` that is treated as it were `0`\r\n\r\nI read some threads about negative zero: \r\nhttps://www.ietf.org/mail-archive/web/json/current/msg03668.html\r\nhttps://www.ietf.org/mail-archive/web/json/current/msg01520.html\r\nhttps://www.ietf.org/mail-archive/web/json/current/msg01523.html\r\nhttps://www.ietf.org/mail-archive/web/json/current/msg01525.html\r\n\r\nI created this issue thinking that `-0` is a float, the same as `-0.0`, since a signed zero makes sense only in floating point numbers and also because in Java only Double/Float preserve sign of zero.  This would have the implication that `-0` could not be validated by jsonschema `type` `integer` , and that a jsonschema implementation would have the need to know if a `-0` is present in json data, but probably this is not the case.\r\n\r\nAfter I started to (re)consider that `-0` could be an integer, only that seems that in no programming language there is an integer that preserves sign for zero.\r\n\r\nIn any case, differentiating between `0` and `-0`  at lexical level would allow a client of gson to be able to refuse the value `-0`.\r\n\r\nGson could easily support differentiating between `0` and `-0`: in code `-0` is [treated as an integer (PEEKED_LONG) in JsonReader](https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/stream/JsonReader.java#L731) so its value is stored in a Java `long` that cannot represent negative zero. I noted that `-0.0` roundtrips correctly because is treated as a PEEKED_NUMBER that is kept as a Java String. So the case of `-0` could be trapped and treated as `-0.0`, as a PEEKED_NUMBER, in this way the `toString()` method of `LazilyParsedNumber` will return `-0` and gson will be able to roundtrip any valid number value found in source, only clients using `Number.toString()` will notice any difference.\r\n\r\nMy proposal is to change [this code](https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/stream/JsonReader.java#L731)  from\r\n\r\n          if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || negative)) {\r\n    \r\nto \r\n\r\n          if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value!=0 || false==negative) && (value != Long.MIN_VALUE || negative)) {\r\n    \r\n\r\nThanks,\r\nMichele\r\n\n",
    "desc_source": "github_issue"
  },
  "51": {
    "description": "JsonWriter#value(java.lang.Number) can be lenient, but JsonWriter#value(double) can't,\nIn lenient mode, JsonWriter#value(java.lang.Number) can write pseudo-numeric values like `NaN`, `Infinity`, `-Infinity`:\r\n```java\r\n    if (!lenient\r\n        && (string.equals(\"-Infinity\") || string.equals(\"Infinity\") || string.equals(\"NaN\"))) {\r\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\r\n    }\r\n```\r\n\r\nBut JsonWriter#value(double) behaves in different way: \r\n```java\r\n    if (Double.isNaN(value) || Double.isInfinite(value)) {\r\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\r\n    }\r\n```\r\n\r\nSo, while working with streaming, it's impossible to write semi-numeric value without boxing a double (e. g. `out.value((Number) Double.valueOf(Double.NaN))`).\r\n\r\nI think, this should be possible, because boxing gives worse performance.\n",
    "desc_source": "github_issue"
  },
  "52": {
    "description": "An exception is thrown for a valid JsonPointer expression\nJson-Patch project leader has noted me that there is a bug on JsonPointer implementation and I have decided to investigate.\n\nBasically if you do something like `JsonPointer.compile(\"/1e0\");` it throws a NumberFormatExpcetion which is not true. This is because this piece of code:\n\n``` java\nprivate final static int _parseInt(String str)\n    {\n        final int len = str.length();\n        if (len == 0) {\n            return -1;\n        }\n        for (int i = 0; i < len; ++i) {\n            char c = str.charAt(i++);\n            if (c > '9' || c < '0') {\n                return -1;\n            }\n        }\n        // for now, we'll assume 32-bit indexes are fine\n        return NumberInput.parseInt(str);\n    }\n```\n\nWhen they found a number it interprets the segment as integer but in reality it should be the whole expression. For this reason I think that the condition should be changed to the inverse condition  (if it doesn't found any char then it is a number.\n\nIf you want I can send you a PR as well.\n\nAlex.\n\n",
    "desc_source": "github_issue"
  },
  "53": {
    "description": "Inconsistent TextBuffer#getTextBuffer behavior\nHi, I'm using 2.4.2. While I'm working on CBORParser, I noticed that CBORParser#getTextCharacters() returns sometimes `null` sometimes `[]` (empty array) when it's parsing empty string `\"\"`.\n\nWhile debugging, I noticed that TextBuffer#getTextBuffer behaves inconsistently.\n\n```\nTextBuffer buffer = new TextBuffer(new BufferRecycler());\nbuffer.resetWithEmpty();\nbuffer.getTextBuffer(); // returns null\nbuffer.contentsAsString(); // returns empty string \"\"\nbuffer.getTextBuffer(); // returns empty array []\n```\n\nI think getTextBuffer should return the same value. Not sure which (`null` or `[]`) is expected though.\n\n",
    "desc_source": "github_issue"
  },
  "54": {
    "description": "Fix ArrayIndexOutofBoundsException found by LGTM.com\nSeen on LGTM.com [here](https://lgtm.com/projects/g/FasterXML/jackson-core/alerts/?mode=tree)\r\n\r\nAs `codes.length == maxCode` so if `i == maxCode` an `ArrayIndexOutOfBoundsException` is thrown. This happens when `ALLOW_UNQUOTED_FIELD_NAMES` is enabled and character `256` is found as part of a field name after needing to consume more data from the reader.\r\n\r\nA gist containing code to trigger this path can be found [here](https://gist.github.com/aeyerstaylor/90128cca75e69303254a0d5a5dbe6762). I could find any tests for this class but if there is a place to add tests I can add the example as a test.\r\n\r\n_(Full disclosure: I'm part of the company behind LGTM.com)_\n",
    "desc_source": "github_issue"
  },
  "55": {
    "description": "Annotation bundles ignored when added to Mixin\nWhen updating from v 2.4.4 to 2.5.\\* it appears as though annotation bundles created with `@JacksonAnnotationsInside` are ignored when placed on a mixin.  Moving the annotation bundel to the actual class seems to resolve the issue.  Below is a simple test that attempts to rename a property.  I have more complicated test cases that are also failing but this should provide some context.\n\n``` java\npublic class Fun {\n\n    @Test\n    public void test() throws JsonProcessingException {\n        ObjectMapper mapper = new ObjectMapper().addMixIn(Foo.class, FooMixin.class);\n        String result = mapper.writeValueAsString(new Foo(\"result\"));\n        Assert.assertEquals(\"{\\\"bar\\\":\\\"result\\\"}\", result);\n    }\n\n    @Target(value={ ElementType.CONSTRUCTOR, ElementType.FIELD, ElementType.METHOD })\n    @Retention(value=RetentionPolicy.RUNTIME)\n    @JacksonAnnotationsInside\n    @JsonProperty(\"bar\")\n    public @interface ExposeStuff {\n\n    }\n\n    public abstract class FooMixin {\n        @ExposeStuff\n        public abstract String getStuff();\n    }\n\n    public class Foo {\n\n        private String stuff;\n\n        Foo(String stuff) {\n            this.stuff = stuff;\n        }\n\n        public String getStuff() {\n            return stuff;\n        }\n    }\n}\n```\n\nI'm expecting the \"stuff\" property to be serialized as \"bar\".\n\nI apologize I haven't been able to identify the culprit (and perhaps it's in my usage).  Let me know your thoughts. I'm always happy to provide more details!\n\n",
    "desc_source": "github_issue"
  },
  "56": {
    "description": "readTree does not work with defaultTyping enabled but no type info provided\nI have enabled `defaultTyping`, and serialized `Foo` entity with no type info. I'm trying to read json as a tree with `mapper.readTree(json)`, and it throws an exception \n\n``` java\nException in thread \"main\" com.fasterxml.jackson.databind.JsonMappingException: \nUnexpected token (START_OBJECT), expected START_ARRAY: need JSON Array to contain As.WRAPPER_ARRAY \ntype information for class com.fasterxml.jackson.databind.JsonNode\n at [Source: {\n  \"bar\" : \"bar\"\n}; line: 1, column: 1]\n    at com.fasterxml.jackson.databind.JsonMappingException.from(JsonMappingException.java:148)\n    at com.fasterxml.jackson.databind.DeserializationContext.wrongTokenException(DeserializationContext.java:927)\n    at com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer._locateTypeId(AsArrayTypeDeserializer.java:127)\n    at com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer._deserialize(AsArrayTypeDeserializer.java:93)\n    at com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer.deserializeTypedFromAny(AsArrayTypeDeserializer.java:68)\n    at com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer.deserializeWithType(JsonNodeDeserializer.java:144)\n    at com.fasterxml.jackson.databind.deser.std.JsonNodeDeserializer.deserializeWithType(JsonNodeDeserializer.java:14)\n    at com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.deserialize(TypeWrappedDeserializer.java:42)\n    at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:3562)\n    at com.fasterxml.jackson.databind.ObjectMapper.readTree(ObjectMapper.java:2136)\n    at test.App.main(App.java:23)\n```\n\nHowever, if I disable `defaultTyping`, the same code works fine. So, `readTree(json)` does not actually need type info for the root element, because it works when `defaultTyping` is disabled (i.e. `{\"bar\" : \"bar\"}`), but it throws the exception when `defaultTyping` is enabled, that's why it looks like a bug. The same thing happens for `valueToTree(foo)`. \nJackson version is `2.5.3`\nFull code is provided.\n\n``` java\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.MapperFeature;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.SerializationFeature;\nimport java.io.IOException;\n\npublic class App {\n    public static void main(String[] args) throws IOException {\n        ObjectMapper mapper = new ObjectMapper()\n                .enableDefaultTyping() // works fine with disableDefaultTyping()\n                .enable(MapperFeature.AUTO_DETECT_GETTERS)\n                .enable(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)\n                .disable(MapperFeature.USE_GETTERS_AS_SETTERS)\n                .disable(MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS)\n                .enable(SerializationFeature.INDENT_OUTPUT)\n                .disable(SerializationFeature.FAIL_ON_EMPTY_BEANS);\n\n        Foo foo = new Foo(\"bar\");\n        String serialized = mapper.writeValueAsString(foo); // {\"bar\" : \"bar\"}\n\n        JsonNode jsonNode = mapper.readTree(serialized); // exception here\n        JsonNode node = mapper.valueToTree(foo); // and here\n    }\n\n    public static class Foo {\n        private String bar;\n\n        public Foo() {\n        }\n\n        public Foo(String bar) {\n            this.bar = bar;\n        }\n\n        public String getBar() {\n            return bar;\n        }\n\n        public void setBar(String bar) {\n            this.bar = bar;\n        }\n    }\n}\n```\n\n",
    "desc_source": "github_issue"
  },
  "57": {
    "description": "Problem deserializing External Type Id if type id comes before POJO\n(note: seems to be similar or related to https://github.com/FasterXML/jackson-module-afterburner/issues/58)\n\nWith 2.6, looks like handling of External Type Id is broken in some rare (?) cases; existing unit tests did not catch this. At this point I am speculating this is due to some refactoring, or change to use more efficient 'nextFieldName()' method.\n\n",
    "desc_source": "github_issue"
  },
  "58": {
    "description": "Regression in 2.7.0-rc2, for schema/introspection for `BigDecimal`\n(found via Avro module, but surprisingly json schema module has not test to catch it)\n\nLooks like schema type for `BigDecimal` is not correctly produced, due to an error in refactoring (made to simplify introspection for simple serializers): it is seen as `BigInteger` (and for Avro, for example, results in `long` getting written).\n\n",
    "desc_source": "github_issue"
  },
  "59": {
    "description": "Field in base class is not recognized, when using `@JsonType.defaultImpl`\nWhen deserializing JSON to Java POJOS, a field inherited from a base class is not recognized. Here is the stack:\n\n```\ncom.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field \"name\" (class org.apache.calcite.model.JsonMapSchema), not marked as ignorable (2 known properties: \"functions\", \"tables\"])\n at [Source: {\n  version: '1.0',\n   schemas: [\n     {\n       name: 'FoodMart',\n       tables: [\n         {\n           name: 'time_by_day',\n           columns: [\n             {\n               name: 'time_id'\n             }\n           ]\n         },\n         {\n           name: 'sales_fact_1997',\n           columns: [\n             {\n               name: 'time_id'\n             }\n           ]\n         }\n       ]\n     }\n   ]\n}; line: 24, column: 7] (through reference chain: org.apache.calcite.model.JsonRoot[\"schemas\"]->java.util.ArrayList[0]->org.apache.calcite.model.JsonMapSchema[\"name\"])\n\n    at com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException.from(UnrecognizedPropertyException.java:62)\n    at com.fasterxml.jackson.databind.DeserializationContext.reportUnknownProperty(DeserializationContext.java:855)\n    at com.fasterxml.jackson.databind.deser.std.StdDeserializer.handleUnknownProperty(StdDeserializer.java:1083)\n    at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.handleUnknownProperty(BeanDeserializerBase.java:1389)\n    at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.handleUnknownVanilla(BeanDeserializerBase.java:1367)\n    at com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:266)\n    at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeOther(BeanDeserializer.java:163)\n    at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:135)\n    at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer._deserializeTypedUsingDefaultImpl(AsPropertyTypeDeserializer.java:136)\n    at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer.deserializeTypedFromObject(AsPropertyTypeDeserializer.java:99)\n    at com.fasterxml.jackson.databind.deser.AbstractDeserializer.deserializeWithType(AbstractDeserializer.java:142)\n    at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:279)\n    at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:249)\n    at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:26)\n    at com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:490)\n    at com.fasterxml.jackson.databind.deser.impl.FieldProperty.deserializeAndSet(FieldProperty.java:101)\n    at com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:260)\n    at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:125)\n    at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:3788)\n    at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2779)\n    at org.apache.calcite.test.ModelTest.testRead(ModelTest.java:58)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:483)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:137)\n    at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:69)\n    at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:234)\n    at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:74)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:483)\n    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144)\n```\n\nMy `JsonMapSchema` class has a base class `JsonSchema` and it has a public field `name`. See https://github.com/apache/calcite/blob/master/core/src/test/java/org/apache/calcite/test/ModelTest.java.\n\nI have an application that worked in 2.6.3, fails in 2.7.0, so I suspect this is a regression. \n\n",
    "desc_source": "github_issue"
  },
  "60": {
    "description": "Incorrect signature for generic type via `JavaType.getGenericSignature\n(see https://github.com/FasterXML/jackson-modules-base/issues/8 for background)\n\nIt looks like generic signature generation is missing one closing `>` character to produce:\n\n```\n()Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/String;;\n```\n\ninstead of expected\n\n```\n()Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/String;>;\n```\n\nthat is, closing '>' is missing.\n\n",
    "desc_source": "github_issue"
  },
  "61": {
    "description": "`ObjectReader.readValues()` ignores offset and length when reading an array\nObjectReader.readValues ignores offset and length when reading an array. If _dataFormatReaders it will always use the full array:\n\nhttps://github.com/FasterXML/jackson-databind/blob/2.7/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java#L1435\n\n",
    "desc_source": "github_issue"
  },
  "62": {
    "description": "`ACCEPT_CASE_INSENSITIVE_PROPERTIES` fails with `@JsonUnwrapped`\n(note: moved from https://github.com/FasterXML/jackson-dataformat-csv/issues/133)\r\n\r\nWhen trying to deserialize type like:\r\n\r\n```java\r\npublic class Person {\r\n  @JsonUnwrapped(prefix = \"businessAddress.\")\r\n  public Address businessAddress;\r\n}\r\n\r\npublic class Address {\r\n  public String street;\r\n  public String addon;\r\n  public String zip = \"\";\r\n  public String town;    \r\n  public String country;\r\n}\r\n```\r\n\r\nwith case-insensitive mapper (`mapper.enable(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES);`) I get exception:\r\n\r\n```\r\njava.util.NoSuchElementException: No entry 'businessAddress' found, can't remove\r\n\tat com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap.remove(BeanPropertyMap.java:447)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializerBase.resolve(BeanDeserializerBase.java:534)\r\n\tat com.fasterxml.jackson.databind.deser.DeserializerCache._createAndCache2(DeserializerCache.java:293)\r\n   ...\r\n```\r\n\n",
    "desc_source": "github_issue"
  },
  "63": {
    "description": "Missing `KeyDeserializer` for `CharSequence`\nLooks like use of nominal Map key type of `CharSequence` does not work yet (as of 2.7.8 / 2.8.6).\r\nThis is something that is needed to work with certain frameworks, such as Avro's generated POJOs.\r\n\r\n\n",
    "desc_source": "github_issue"
  },
  "64": {
    "description": "`JsonIgnoreProperties.allowSetters` is not working in Jackson 2.8\n```\r\n@JsonIgnoreProperties(value = { \"password\" }, ignoreUnknown = true, allowSetters = true)\r\npublic class JsonTest {\r\n\tprivate String username;\r\n\tprivate String password;\r\n\r\n\tpublic JsonTest() {\r\n\t\tsuper();\r\n\t\t// TODO Auto-generated constructor stub\r\n\t}\r\n\r\n\tpublic JsonTest(String username, String password) {\r\n\t\tsuper();\r\n\t\tthis.username = username;\r\n\t\tthis.password = password;\r\n\t}\r\n\r\n\tpublic String getUsername() {\r\n\t\treturn username;\r\n\t}\r\n\r\n\tpublic void setUsername(String username) {\r\n\t\tthis.username = username;\r\n\t}\r\n\r\n\tpublic String getPassword() {\r\n\t\treturn password;\r\n\t}\r\n\r\n\tpublic void setPassword(String password) {\r\n\t\tthis.password = password;\r\n\t}\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tObjectMapper mapper = new ObjectMapper();\r\n\r\n\t\tJsonTest json = new JsonTest(\"user\", \"password\");\r\n\r\n\t\ttry {\r\n\t\t\tSystem.out.println(mapper.writeValueAsString(json));\r\n\t\t} catch (JsonProcessingException e) {\r\n\t\t\t// TODO Auto-generated catch block\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\r\n\t\tString jsonString = \"{ \\\"username\\\":\\\"username\\\",\\\"password\\\":\\\"password\\\" }\";\r\n\t\ttry {\r\n\t\t\tjson = mapper.readValue(jsonString, JsonTest.class);\r\n\r\n\t\t\tSystem.out.println(json.getPassword());\r\n\t\t} catch (IOException e) {\r\n\t\t\t// TODO Auto-generated catch block\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\r\n\t}\r\n}\r\n```\r\n\r\nthe version is 2.8.7.\r\nthe password cannot deserialize.\r\nthe output is:\r\n{\"username\":\"user\"}\r\nnull\n",
    "desc_source": "github_issue"
  },
  "65": {
    "description": "Implicit constructor property names are not renamed properly with `PropertyNamingStrategy`\n(note: spin-off from https://github.com/FasterXML/jackson-modules-java8/issues/67)\r\n\r\nLooks like something with linking of creator properties (constructor arguments for annotated/discovered constructor) to \"regular\" properties does not work when using `PropertyNamingStrategy`. Apparently this was working better until 2.9.1, but broke with 2.9.2.\r\n\r\n\n",
    "desc_source": "github_issue"
  },
  "66": {
    "description": "`DeserializationProblemHandler.handleUnknownTypeId()` returning `Void.class`, enableDefaultTyping causing NPE\nReturning Void.class from com.fasterxml.jackson.databind.deser.HandleUnknowTypeIdTest.testDeserializationWithDeserializationProblemHandler().new DeserializationProblemHandler() {...}.handleUnknownTypeId(DeserializationContext, JavaType, String, TypeIdResolver, String) is causing a NPE in jackson 2.9. I'll provide a pull request illustrating the issue in a test. \n",
    "desc_source": "github_issue"
  },
  "67": {
    "description": "`@JacksonXmlRootElement` malfunction when using it with multiple `XmlMapper`s and disabling annotations\nFound this in version 2.9.4 running some tests that go back and forth serializing with an XML mapper that uses annotations, and another one that ignores them. May be related to issue #171 and the cache of class annotations.\r\n\r\nWhen running this code, the second print statement should use the annotation's localName but it instead uses the class name.\r\n\r\n```\r\n@JacksonXmlRootElement(localName = \"myname\")\r\npublic class XMLTest {\r\n\r\n    public static void main(String[] s) throws Exception {\r\n\r\n        final ObjectMapper xmlMapper = new XmlMapper();\r\n        final ObjectMapper noAnnotationsXmlMapper = xmlMapper.copy()\r\n                .configure(MapperFeature.USE_ANNOTATIONS, false)\r\n                .configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false);\r\n\r\n        System.out.println(noAnnotationsXmlMapper.writeValueAsString(new XMLTest()));\r\n        System.out.println(xmlMapper.writeValueAsString(new XMLTest()));\r\n\r\n    }\r\n\r\n}\r\n```\r\n\r\nOutput:\r\n\r\n```\r\n<XMLTest/>\r\n<XMLTest/>\r\n```\n",
    "desc_source": "github_issue"
  },
  "68": {
    "description": "Element.clone() wrongly shared a same classNames Set instance\nIn the clone() method of Node, the Object.clone() is called, if the original element's classNames Set had been initialized before clone, the original classNames Set will be set to the new cloned Element instance due to the JDK's clone mechanism. Thus, the old element and the newly cloned Element will share a same classNames Set instance.\n\n",
    "desc_source": "github_issue"
  },
  "69": {
    "description": "Parser error on commented CDATA\nJsoup gives the following error when trying to parse this HTML: https://gist.github.com/felipehummel/6122799\n\n```\njava.lang.ArrayIndexOutOfBoundsException: 8666\n    at org.jsoup.parser.CharacterReader.nextIndexOf(CharacterReader.java:92)\n    at org.jsoup.parser.CharacterReader.consumeTo(CharacterReader.java:112)\n    at org.jsoup.parser.TokeniserState$67.read(TokeniserState.java:1789)\n    at org.jsoup.parser.Tokeniser.read(Tokeniser.java:42)\n    at org.jsoup.parser.TreeBuilder.runParser(TreeBuilder.java:47)\n    at org.jsoup.parser.TreeBuilder.parse(TreeBuilder.java:41)\n    at org.jsoup.parser.HtmlTreeBuilder.parse(HtmlTreeBuilder.java:37)\n    at org.jsoup.parser.Parser.parse(Parser.java:90)\n    at org.jsoup.Jsoup.parse(Jsoup.java:58)\n...\n```\n\nThe HTML is from a entry in a RSS feed. If I remove the line:\n\n```\n// ]]\n```\n\nor just the \n      ]]\n\nThen it parses the HTML nicely.\n\nDoes this syntax error should really throw an exception or it should be silently ignored?\n\n",
    "desc_source": "github_issue"
  },
  "70": {
    "description": "Whitespaces are discared in Element.html() method\nHi,\nI'm trying to make an exact copy of a document (changing just a couple of attributes and appending a few nodes) and the trim() inside the Element.html() is killing me.\nI'm using Parsers.xml() and no prettyPrint.\n\nI think this trim should be enabled for prettyPrint only.\n\n",
    "desc_source": "github_issue"
  },
  "71": {
    "description": "Unexpected behavior in elementSiblingIndex\nThe documentation for elementSiblingIndex states \"Get the list index of this element in its element sibling list. I.e. if this is the first element sibling, returns 0\".\n\nThis would imply that if\n\n```\nn=myElem.elementSiblingIndex();\n```\n\nthen\n\n```\nmyElem.parent().children().get(n)==myElem.  \n```\n\nHowever, this is not how elementSiblingIndex behaves. What is guaranteed is that\n\n```\nmyElem.parent().children().get(n).equals(myElem).  \n```\n\nFor example, if both row 2 and row 5 of a table are\n\n```\n<tr><td>Cell1</td><td>Cell2</td></tr>\n```\n\nthen the Element object associated with both rows will have the same `elementSiblingIndex()`.\n\n",
    "desc_source": "github_issue"
  },
  "72": {
    "description": "Fix table insertion into TH tags\n\nFixes #575",
    "desc_source": "commit_msg"
  },
  "73": {
    "description": "EscapeMode.xhtml no longer falls back to numeric escapes - Can cause '?' replacement in output\nI've been using EscapeMode.xhtml with JSoup to avoid encoding things which don't (from my perspective) need to be encoded, like egrave in a UTF-8 document for example.\n\nWhile upgrading from JSoup 1.7.2 to 1.8.1 however, I've noticed a problem with a shift-jis related test I have. Here's a simplified/reduced version.\n\n```\npackage test;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.InputStream;\nimport java.nio.charset.Charset;\n\nimport org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.nodes.Entities.EscapeMode;\nimport org.junit.Assert;\nimport org.junit.Test;\n\npublic class ShiftJisTest {\n\n    @Test\n    public void testShiftJisRoundtrip() throws Exception {\n        String input = \n            \"<html>\"\n          +   \"<head>\"\n          +     \"<meta http-equiv=\\\"content-type\\\" content=\\\"text/html; charset=Shift_JIS\\\" />\"\n          +   \"</head>\"\n          +   \"<body>\"\n          +     \"before&nbsp;after\"\n          +   \"</body>\"\n          + \"</html>\";\n        InputStream is = new ByteArrayInputStream(input.getBytes(Charset.forName(\"ASCII\")));\n\n        Document doc = Jsoup.parse(is, null, \"http://example.com\");\n        doc.outputSettings().escapeMode(EscapeMode.xhtml);\n\n        String output = new String(doc.html().getBytes(doc.outputSettings().charset()), doc.outputSettings().charset());\n\n        System.out.println(output);\n\n        Assert.assertFalse(\"Should not have contained a '?'.\", output.contains(\"?\"));\n        Assert.assertTrue(\"Should have contained a '&#xa0;' or a '&nbsp;'.\", \n            output.contains(\"&#xa0;\") || output.contains(\"&nbsp;\"));\n    }\n\n}\n```\n\nUnder JSoup 1.7.2, the body of the output in this test is \"before&#xa0;after\" (which looks as expected when rendered in Firefox), where as under 1.8.1 it is \"before?after\".\n\nI assume the issue here is that I've asked JSoup to escape only XHTML characters (i.e. not nbsp), and it's producing a charset where (I assume) there's no character to represent 'non-breaking space'.\n\nThe upshot of this is that, as a result of upgrading JSoup, I end up with '?' replaced in for what used to be shown as a non breaking space.\n\nIt seems like the old behaviour was to fall back to providing an escaped numeric character (odd if there's no valid character for that in Shift_JIS, but it still rendered correctly). From my perspective, the old behaviour was better - Is there any way it can be reinstated (or an escape mode provided for it)?\n\nObviously using EscapeMode.base instead of EscapeMode.xhtml is a possible workaround, however I would really prefer not to have characters unnecessarily escaped if possible.\n\n",
    "desc_source": "github_issue"
  },
  "74": {
    "description": "Jsoup not retaining &lt in data attributes\nJsoup not retaining &lt in data attributes value if there is &lt;\n\nIn the example below &amp;lt; is converted to < in the output after parsing. \nPlease let me know how to retain it. \nExample:\nhttp://notes.io/Gww\n@uggedal \n@krystiangor \n@tc \n@bbeck \n\n",
    "desc_source": "github_issue"
  },
  "75": {
    "description": "Problem in reading XML file containing Japanese tag names\nHello,\nI have XML file containing Japanese tag names and values.\nJSOUP is not parsing this Japanese tags.\nI am using JSOUP library (version: 1.8.3).\nPlease help me to solve this issue.\n\n---\n\ne.g. ( XML File to reproduce problem )\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<\u9032\u6357\u63a8\u79fb\u30b0\u30e9\u30d5>\n    <\u958b\u59cb\u4e88\u5b9a\u51e1\u4f8b\u540d \u8868\u793a\u72b6\u614b=\"0\" \u7dda\u8272=\"00CED1\">&amp;#9312;&amp;#35373;&amp;#35336; &amp;#38283;&amp;#22987;&amp;#20104;&amp;#23450;</\u958b\u59cb\u4e88\u5b9a\u51e1\u4f8b\u540d>\n## </\u9032\u6357\u63a8\u79fb\u30b0\u30e9\u30d5>\n\n//// ***\\*  Source Code  ******\nDocument doc = Jsoup.parse(XMLString.toString(),\"UTF-8\",Parser.xmlParser());\nElements objElementCollection = doc.getAllElements();\n\nint iElementsSize=objElementCollection.size();\n\nfor(Element objCurrent : objElementCollection)\n{\n        String szTag=objCurrent.tagName();\n\n```\n    for (TextNode tnTextNode : objCurrent.textNodes()) \n    {\n        String szVal=tnTextNode.text();\n    }\n```\n\n}\n\n",
    "desc_source": "github_issue"
  },
  "76": {
    "description": "removeIgnoreCase ConcurrentModificationException\nWhen testing out the removeIgnoreCase method, I'm now seeing a ConcurrentModificationException with code like: element.select(\"abc\").first().removeAttr(\"attr1\").removeAttr(\"attr2\");\n\nIt appears to be due to using a foreach loop over the LinkedHashMap to do the removal. Changing to do the removal directly with an iterator fixes this issue.\nLike so:\n\n```\nfor (Iterator<Map.Entry<String, Attribute>> iter = attributes.entrySet().iterator(); iter.hasNext();) {\n            Map.Entry<String, Attribute> entry = iter.next();\n            if (entry.getKey().equalsIgnoreCase(\"key1\")) {\n                iter.remove();\n            }\n        }\n```\n\n",
    "desc_source": "github_issue"
  },
  "77": {
    "description": "Unexpected case sensitivity for CSS class selector\nHi,\r\ni use JSoup version 1.10.2 and noticed an unexpected case sensitivity for a CSS class selector. I tried to parse the following HTML document with capitalized class attributes:\r\n\r\n```html\r\n<!DOCTYPE HTML PUBLIC '-//W3C//DTD HTML 4.01 Transitional//EN' 'http://www.w3.org/TR/html4/loose.dtd'>\r\n<HTML>\r\n  <HEAD>\r\n    <FORM Method='POST' name='Form' Action='Action'>\r\n      <TABLE Class='Lst'>\r\n        <TR Class='Lst'>\r\n          <TH Class='Lst'>Header 1</TH>\r\n          <TH Class='Lst'>Header 2</TH>\r\n          <TH Class='Lst'>Header 3</TH>\r\n        </TR>\r\n        <TR Class='Lst1'>\r\n          <TD Class='Lst'>Cell 1</TD>\r\n          <TD Class='Lst'>Cell 2</TD>\r\n          <TD Class='Lst'>Cell 3</TD>\r\n        </TR>\r\n      </TABLE>\r\n    </FORM>\r\n  </BODY>\r\n</HTML>\r\n```\r\n\r\nI wanted to select the table using the selector _\"html > body > form table.Lst\"_ because I expected it to choose the table with the class attribute \"Lst\", but that did not work. The selector _\"html > body > form table[class=Lst]\"_ works. Is this a bug?\r\n\r\nHere is the parser code:\r\n\r\n```java\r\ntry {\r\n  final String htmlStr = \"<!DOCTYPE HTML PUBLIC '-//W3C//DTD HTML 4.01 Transitional//EN' 'http://www.w3.org/TR/html4/loose.dtd'>\\n\"\r\n      + \"<HTML>\\n\"\r\n      + \"  <HEAD>\\n\"\r\n      + \"    <FORM Method='POST' name='Form' Action='Action'>\\n\"\r\n      + \"      <TABLE Class='Lst'>\\n\"\r\n      + \"        <TR Class='Lst'>\\n\"\r\n      + \"          <TH Class='Lst'>Header 1</TH>\\n\"\r\n      + \"          <TH Class='Lst'>Header 2</TH>\\n\"\r\n      + \"          <TH Class='Lst'>Header 3</TH>\\n\"\r\n      + \"        </TR>\\n\"\r\n      + \"        <TR Class='Lst1'>\\n\"\r\n      + \"          <TD Class='Lst'>Cell 1</TD>\\n\"\r\n      + \"          <TD Class='Lst'>Cell 2</TD>\\n\"\r\n      + \"          <TD Class='Lst'>Cell 3</TD>\\n\"\r\n      + \"        </TR>\\n\"\r\n      + \"      </TABLE>\\n\"\r\n      + \"    </FORM>\\n\"\r\n      + \"  </BODY>\\n\"\r\n      + \"</HTML>\";\r\n  final Document htmlDoc = Jsoup.parse(htmlStr,\r\n      \"\");\r\n\r\n  final Element tableNotOk = htmlDoc.select(\"html > body > form table.Lst\")\r\n      .first();\r\n  final Element tableOk = htmlDoc.select(\"html > body > form table[class=Lst]\")\r\n      .first();\r\n\r\n  Logger.getLogger(this.getClass().getName())\r\n      .log(Level.INFO,\r\n          \"tableNotOk found: ''{0}'', tableOk found: ''{1}''\",\r\n          new Object[]{(tableNotOk != null), (tableOk != null)});\r\n\r\n} catch (UnsupportedCharsetException | ParseException | Selector.SelectorParseException ex) {\r\n  Logger.getLogger(this.getClass().getName())\r\n      .log(Level.SEVERE,\r\n          null,\r\n          ex);\r\n}\r\n```\r\n\n",
    "desc_source": "github_issue"
  },
  "78": {
    "description": "Wrong parsing of case sensitive HTML \nExecuting : \r\n\r\n            String xml=\"<r><X>A</X><y>B</y></r>\";\r\n\t\tParser parser = Parser.htmlParser();\r\n\t\tparser.settings(ParseSettings.preserveCase);\r\n\t\torg.jsoup.nodes.Document _doc = parser.parseInput(xml, \"/\");\r\n\r\n\r\nResults in : \r\n&lt;html&gt;\r\n &lt;head&gt;&lt;/head&gt;\r\n &lt;body&gt;\r\n  &lt;r&gt;\r\n   &lt;X&gt;\r\n    A\r\n    &lt;y&gt;\r\n     B\r\n    &lt;/y&gt;\r\n   &lt;/X&gt;\r\n  &lt;/r&gt;\r\n &lt;/body&gt;\r\n&lt;/html&gt;\r\n\r\nManual hacking : remove all .toLowerCase() invocations from Token.java (normalName=...)\r\n\r\n\r\n\n",
    "desc_source": "github_issue"
  },
  "79": {
    "description": "xmlParser() with ParseSettings.htmlDefault does not put end tag to lower case\n```java\r\n@Test public void test() {\r\n    Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);\r\n    Document document = Jsoup.parse(\"<div>test</DIV><p></p>\", \"\", parser);\r\n    assertEquals(\"<div>\\n test\\n</div>\\n<p></p>\", document.toString()); // fail -> toString() = \"<div>\\n test\\n <p></p>\\n</div>\"\r\n}\r\n\r\n@Test public void test1() {\r\n    Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);\r\n    Document document = Jsoup.parse(\"<DIV>test</div><p></p>\", \"\", parser);\r\n    assertEquals(\"<div>\\n test\\n</div>\\n<p></p>\", document.toString()); // pass\r\n}\r\n```\n",
    "desc_source": "github_issue"
  },
  "80": {
    "description": "Jsoup 1.11.3: IndexOutOfBoundsException\nHi, I am using Jsoup 1.11.3. While trying to parse HTML content, I'm getting IndexOutOfBoundsException.\r\n\r\nI am using such Jsoup call as this is the only way to parse iframe content.\r\n\r\nJsoup call:\r\n\r\n`Jsoup.parse(html, \"\", Parser.xmlParser())`\r\n\r\nHTML is here:  https://files.fm/u/v43yemgb. I can't add it to the body as it's huge.\n",
    "desc_source": "github_issue"
  },
  "81": {
    "description": "Attribute.getValue() broken for empty attributes since 1.11.1\n```\r\n        Document doc = Jsoup.parse(\"<div hidden>\");\r\n        Attributes attributes = doc.body().child(0).attributes();\r\n        System.out.println(String.format(\"Attr: '%s', value: '%s'\", \"hidden\",\r\n                attributes.get(\"hidden\")));\r\n\r\n        Attribute first = attributes.iterator().next();\r\n        System.out.println(String.format(\"Attr: '%s', value: '%s'\",\r\n                first.getKey(), first.getValue()));\r\n```\r\n\r\nExpected output, as in 1.10.x\r\n```\r\nAttr: 'hidden', value: ''\r\nAttr: 'hidden', value: ''\r\n```\r\n\r\nOutput in 1.11.1-1.11.3:\r\n```\r\nAttr: 'hidden', value: ''\r\nAttr: 'hidden', value: 'null'\r\n```\r\n\n",
    "desc_source": "github_issue"
  },
  "82": {
    "description": "Binary operators behaviour involving node-sets is incorrect\nAccording to XPath specification:\n\"If both objects to be compared are node-sets, then the comparison will be true if and only if there is a node in the first node-set and a node in the second node-set such that the result of performing the comparison on the string-values of the two nodes is true. If one object to be compared is a node-set and the other is a number, then the comparison will be true if and only if there is a node in the node-set such that the result of performing the comparison on the number to be compared and on the result of converting the string-value of that node to a number using the number function is true.\"\n\nBut following example illustrates, that this is not a JXPath behaviour:\n\n\n        JXPathContext pathContext = JXPathContext\n                .newContext(DocumentBuilderFactory.newInstance()\n                        .newDocumentBuilder().parse(\n                                new InputSource(new StringReader(\n                                        \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\r\\n\"\n                                                + \"<doc/>\"))));\n        Boolean result = (Boolean) pathContext.getValue(\"2.0 > child1\",\n                Boolean.class);\n        assertFalse(result.booleanValue());\n\n\"child1\" is not found - right operand node set is empty, but result is TRUE, instead of FALSE.\n\nPlease, check greaterThan(), lesserThan(), etc methods of org.apache.xpath.objects.XObject for possible solution :)",
    "desc_source": "jira"
  },
  "83": {
    "description": "StringIndexOutOfBoundsException in CharSequenceTranslator\nI found that there is bad surrogate pair handling in the CharSequenceTranslator\n\nThis is a simple test case for this problem.\n\\uD83D\\uDE30 is a surrogate pair.\n\n{code:java}\n@Test\npublic void testEscapeSurrogatePairs() throws Exception {\n    assertEquals(\"\\uD83D\\uDE30\", StringEscapeUtils.escapeCsv(\"\\uD83D\\uDE30\"));\n}\n{code}\n\nYou'll get the exception as shown below.\n\n{code}\njava.lang.StringIndexOutOfBoundsException: String index out of range: 2\n\tat java.lang.String.charAt(String.java:658)\n\tat java.lang.Character.codePointAt(Character.java:4668)\n\tat org.apache.commons.lang3.text.translate.CharSequenceTranslator.translate(CharSequenceTranslator.java:95)\n\tat org.apache.commons.lang3.text.translate.CharSequenceTranslator.translate(CharSequenceTranslator.java:59)\n\tat org.apache.commons.lang3.StringEscapeUtils.escapeCsv(StringEscapeUtils.java:556)\n{code}\n\nPatch attached, the method affected:\n# public final void translate(CharSequence input, Writer out) throws IOException",
    "desc_source": "jira"
  },
  "84": {
    "description": "NumberUtils does not handle upper-case hex: 0X and -0X\nNumberUtils.createNumber() should work equally for 0x1234 and 0X1234; currently 0X1234 generates a NumberFormatException\n\nInteger.decode() handles both upper and lower case hex.",
    "desc_source": "jira"
  },
  "85": {
    "description": "DateUtils.isSameLocalTime does not work correct\nHi, I think I found a bug in the DateUtils class in the method isSameLocalTime.\n\nExample: \nCalendar a = Calendar.getInstance();\na.setTimeInMillis(1297364400000L);\n\nCalendar b = Calendar.getInstance();\nb.setTimeInMillis(1297321200000L);\n\nAssert.assertFalse(DateUtils.isSameLocalTime(a, b));\n\nThis is because the method compares \ncal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) \n\nbut I think it has to be \ncal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY)\n\n\n\t",
    "desc_source": "jira"
  },
  "86": {
    "description": "NumberUtils.isNumber(String)  is not right when the String is \"1.1L\"\n\"1.1L\"  is not a Java Number . but NumberUtils.isNumber(String) return true.\n\nperhaps change:\n{code:java}\n            if (chars[i] == 'l'\n                || chars[i] == 'L') {\n                // not allowing L with an exponent\n                return foundDigit && !hasExp;\n            }\n{code}\nto:\n{code:java}\n            if (chars[i] == 'l'\n                || chars[i] == 'L') {\n                // not allowing L with an exponent\n                return foundDigit && !hasExp && !hasDecPoint;\n            }\n{code}",
    "desc_source": "jira"
  },
  "87": {
    "description": "FastDateFormat.format() outputs incorrect week of year because locale isn't respected\nFastDateFormat apparently doesn't respect the locale it was sent on creation when outputting week in year (e.g. \"ww\") in format(). It seems to use the settings of the system locale for firstDayOfWeek and minimalDaysInFirstWeek, which (depending on the year) may result in the incorrect week number being output.\n\nHere is a simple test program to demonstrate the problem by comparing with SimpleDateFormat, which gets the week number right:\n{code}\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Locale;\nimport java.text.SimpleDateFormat;\n\nimport org.apache.commons.lang.time.FastDateFormat;\n\npublic class FastDateFormatWeekBugDemo {\n    public static void main(String[] args) {\n        Locale.setDefault(new Locale(\"en\", \"US\"));\n        Locale locale = new Locale(\"sv\", \"SE\");\n\n        Calendar cal = Calendar.getInstance(); // setting locale here doesn't change outcome\n        cal.set(2010, 0, 1, 12, 0, 0);\n        Date d = cal.getTime();\n        System.out.println(\"Target date: \" + d);\n\n        FastDateFormat fdf = FastDateFormat.getInstance(\"EEEE', week 'ww\", locale);\n        SimpleDateFormat sdf = new SimpleDateFormat(\"EEEE', week 'ww\", locale);\n        System.out.println(\"FastDateFormat:   \" + fdf.format(d)); // will output \"FastDateFormat:   fredag, week 01\"\n        System.out.println(\"SimpleDateFormat: \" + sdf.format(d)); // will output \"SimpleDateFormat: fredag, week 53\"\n    }\n}\n{code}\nIf sv/SE is passed to Locale.setDefault() instead of en/US, both FastDateFormat and SimpleDateFormat output the correct week number.\n",
    "desc_source": "jira"
  },
  "88": {
    "description": "SystemUtils.getJavaVersionAsFloat throws StringIndexOutOfBoundsException on Android runtime/Dalvik VM\nCan be replicated in the Android emulator quite easily.\n\nStack trace:\n\n{noformat}\n\nat org.apache.commons.lang.builder.ToStringBuilder.<clinit>(ToStringBuilder.java:98)\nE/AndroidRuntime( 1681): \t... 17 more\nE/AndroidRuntime( 1681): Caused by: java.lang.ExceptionInInitializerError\nE/AndroidRuntime( 1681): \tat org.apache.commons.lang.builder.ToStringStyle$MultiLineToStringStyle.<init>(ToStringStyle.java:2276)\nE/AndroidRuntime( 1681): \tat org.apache.commons.lang.builder.ToStringStyle.<clinit>(ToStringStyle.java:94)\nE/AndroidRuntime( 1681): \t... 18 more\nE/AndroidRuntime( 1681): Caused by: java.lang.StringIndexOutOfBoundsException\nE/AndroidRuntime( 1681): \tat java.lang.String.substring(String.java:1571)\nE/AndroidRuntime( 1681): \tat org.apache.commons.lang.SystemUtils.getJavaVersionAsFloat(SystemUtils.java:1153)\nE/AndroidRuntime( 1681): \tat org.apache.commons.lang.SystemUtils.<clinit>(SystemUtils.java:818)\n{noformat}",
    "desc_source": "jira"
  },
  "89": {
    "description": "ClassUtils.toClass(Object[]) throws NPE on null array element\nsee summary",
    "desc_source": "jira"
  },
  "90": {
    "description": "NullPointerException in isAvailableLocale(Locale)\nFindBugs pointed out:\n\n   UwF: Field not initialized in constructor: org.apache.commons.lang.LocaleUtils.cAvailableLocaleSet\n\ncAvailableSet is used directly once in the source - and if availableLocaleSet() hasn't been called it will cause a NullPointerException.",
    "desc_source": "jira"
  },
  "91": {
    "description": "Bug in method appendFixedWidthPadRight of class StrBuilder causes an ArrayIndexOutOfBoundsException\nThere's a bug in method appendFixedWidthPadRight of class StrBuilder:\n\npublic StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) {\n        if (width > 0) {\n            ensureCapacity(size + width);\n            String str = (obj == null ? getNullText() : obj.toString());\n            int strLen = str.length();\n            if (strLen >= width) {\n ==>            str.getChars(0, strLen, buffer, size);   <==== BUG: it should be str.getChars(0, width, buffer, size);\n            } else {\n                int padLen = width - strLen;\n                str.getChars(0, strLen, buffer, size);\n                for (int i = 0; i < padLen; i++) {\n                    buffer[size + strLen + i] = padChar;\n                }\n            }\n            size += width;\n        }\n        return this;\n    }\n\nThis is causing an ArrayIndexOutOfBoundsException, so this method is unusable when strLen > width.\n\nIt's counterpart method appendFixedWidthPadLeft seems to be ok.",
    "desc_source": "jira"
  },
  "92": {
    "description": "HypergeometricDistribution.sample suffers from integer overflow\nHi, I have an application which broke when ported from commons math 2.2 to 3.2. It looks like the HypergeometricDistribution.sample() method doesn't work as well as it used to with large integer values -- the example code below should return a sample between 0 and 50, but usually returns -50.\n\n{code}\nimport org.apache.commons.math3.distribution.HypergeometricDistribution;\n\npublic class Foo {\n  public static void main(String[] args) {\n    HypergeometricDistribution a = new HypergeometricDistribution(\n        43130568, 42976365, 50);\n    System.out.printf(\"%d %d%n\", a.getSupportLowerBound(), a.getSupportUpperBound()); // Prints \"0 50\"\n    System.out.printf(\"%d%n\",a.sample());                                             // Prints \"-50\"\n  }\n}\n{code}\n\nIn the debugger, I traced it as far as an integer overflow in HypergeometricDistribution.getNumericalMean() -- instead of doing\n{code}\nreturn (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();\n{code}\nit could do:\n{code}\nreturn getSampleSize() * ((double) getNumberOfSuccesses() / (double) getPopulationSize());\n{code}\nThis seemed to fix it, based on a quick test.",
    "desc_source": "jira"
  },
  "93": {
    "description": "Complex.ZERO.reciprocal() returns NaN but should return INF.\nComplex.ZERO.reciprocal() returns NaN but should return INF.\n\nClass: org.apache.commons.math3.complex.Complex;\nMethod: reciprocal()\n@version $Id: Complex.java 1416643 2012-12-03 19:37:14Z tn $\n",
    "desc_source": "jira"
  },
  "94": {
    "description": "MultivariateNormalDistribution.density(double[]) returns wrong value when the dimension is odd\nTo reproduce:\n{code}\nAssert.assertEquals(0.398942280401433, new MultivariateNormalDistribution(new double[]{0}, new double[][]{{1}}).density(new double[]{0}), 1e-15);\n{code}",
    "desc_source": "jira"
  },
  "95": {
    "description": "Fraction percentageValue rare overflow\nThe percentageValue() method of the Fraction class works by first multiplying the Fraction by 100, then converting the Fraction to a double. This causes overflows when the numerator is greater than Integer.MAX_VALUE/100, even when the value of the fraction is far below this value.\n\nThe patch changes the method to first convert to a double value, and then multiply this value by 100 - the result should be the same, but with less overflows. An addition to the test for the method that covers this bug is also included.",
    "desc_source": "jira"
  },
  "96": {
    "description": "Mann-Whitney U Test Suffers From Integer Overflow With Large Data Sets\nWhen performing a Mann-Whitney U Test on large data sets (the attached test uses two 1500 element sets), intermediate integer values used in calculateAsymptoticPValue can overflow, leading to invalid results, such as p-values of NaN, or incorrect calculations.\n\nAttached is a patch, including a test, and a fix, which modifies the affected code to use doubles",
    "desc_source": "jira"
  },
  "97": {
    "description": "BSPTree class and recovery of a Euclidean 3D BRep\nNew to the work here. Thanks for your efforts on this code.\n\nI create a BSPTree from a BoundaryRep (Brep) my test Brep is a cube as represented by a float array containing 8 3D points in(x,y,z) order and an array of indices (12 triplets for the 12 faces of the cube). I construct a BSPMesh() as shown in the code below. I can construct the PolyhedronsSet() but have problems extracting the faces from the BSPTree to reconstruct the BRep. The attached code (BSPMesh2.java) shows that a small change to 1 of the vertex positions causes/corrects the problem.\n\nAny ideas?\n",
    "desc_source": "jira"
  },
  "98": {
    "description": "SimplexSolver gives bad results\nMethode SimplexSolver.optimeze(...) gives bad results with commons-math3-3.0\nin a simple test problem. It works well in commons-math-2.2. ",
    "desc_source": "jira"
  },
  "99": {
    "description": "ListPopulation Iterator allows you to remove chromosomes from the population.\nCalling the iterator method of ListPopulation returns an iterator of the protected modifiable list. Before returning the iterator we should wrap it in an unmodifiable list.",
    "desc_source": "jira"
  },
  "100": {
    "description": "One of Variance.evaluate() methods does not work correctly\nThe method org.apache.commons.math.stat.descriptive.moment.Variance.evaluate(double[] values, double[] weights, double mean, int begin, int length) does not work properly. Looks loke it ignores the length parameter and grabs the whole dataset.\nSimilar method in Mean class seems to work.\nI did not check other methods taking the part of the array; they may have the same problem.\n\nWorkaround: I had to shrink my arrays and use the method without the length.",
    "desc_source": "jira"
  },
  "101": {
    "description": "Truncation issue in KMeansPlusPlusClusterer\nThe for loop inside KMeansPlusPlusClusterer.chooseInitialClusters defines a variable\n  int sum = 0;\nThis variable should have type double, rather than int.  Using an int causes the method to truncate the distances between points to (square roots of) integers.  It's especially bad when the distances between points are typically less than 1.\n\nAs an aside, in version 2.2, this bug manifested itself by making the clusterer return empty clusters.  I wonder if the EmptyClusterStrategy would still be necessary if this bug were fixed.",
    "desc_source": "jira"
  },
  "102": {
    "description": "FastMath.max(50.0f, -50.0f) => -50.0f; should be +50.0f\nFastMath.max(50.0f, -50.0f) => -50.0f; should be +50.0f.\n\nThis is because the wrong variable is returned.\n\nThe bug was not detected by the test case \"testMinMaxFloat()\" because that has a bug too - it tests doubles, not floats.",
    "desc_source": "jira"
  },
  "103": {
    "description": "NaN in \"equals\" methods\nIn \"MathUtils\", some \"equals\" methods will return true if both argument are NaN.\nUnless I'm mistaken, this contradicts the IEEE standard.\n\nIf nobody objects, I'm going to make the changes.\n",
    "desc_source": "jira"
  },
  "104": {
    "description": "PearsonsCorrelation.getCorrelationPValues() precision limited by machine epsilon\nSimilar to the issue described in MATH-201, using PearsonsCorrelation.getCorrelationPValues() with many treatments results in p-values that are continuous down to 2.2e-16 but that drop to 0 after that.\n\nIn MATH-201, the problem was described as such:\n> So in essence, the p-value returned by TTestImpl.tTest() is:\n> \n> 1.0 - (cumulativeProbability(t) - cumulativeProbabily(-t))\n> \n> For large-ish t-statistics, cumulativeProbabilty(-t) can get quite small, and cumulativeProbabilty(t) can get very close to 1.0. When \n> cumulativeProbability(-t) is less than the machine epsilon, we get p-values equal to zero because:\n> \n> 1.0 - 1.0 + 0.0 = 0.0\n\nThe solution in MATH-201 was to modify the p-value calculation to this:\n> p = 2.0 * cumulativeProbability(-t)\n\nHere, the problem is similar.  From PearsonsCorrelation.getCorrelationPValues():\n  p = 2 * (1 - tDistribution.cumulativeProbability(t));\n\nDirectly calculating the p-value using identical code as PearsonsCorrelation.getCorrelationPValues(), but with the following change seems to solve the problem:\n  p = 2 * (tDistribution.cumulativeProbability(-t));\n\n\n\n\n",
    "desc_source": "jira"
  },
  "105": {
    "description": "BisectionSolver.solve(final UnivariateRealFunction f, double min, double max, double initial) throws NullPointerException\nMethod \n\n    BisectionSolver.solve(final UnivariateRealFunction f, double min, double max, double initial)  \n\ninvokes \n\n    BisectionSolver.solve(double min, double max) \n\nwhich throws NullPointerException, as member variable\n\n    UnivariateRealSolverImpl.f \n\nis null.\n\nInstead the method:\n\n    BisectionSolver.solve(final UnivariateRealFunction f, double min, double max)\n\nshould be called.\n\nSteps to reproduce:\n\ninvoke:\n\n     new BisectionSolver().solve(someUnivariateFunctionImpl, 0.0, 1.0, 0.5);\n\nNullPointerException will be thrown.\n\n\n",
    "desc_source": "jira"
  },
  "106": {
    "description": "In stat.Frequency, getPct(Object) uses getCumPct(Comparable) instead of getPct(Comparable) \nDrop in Replacement of 1.2 with 2.0 not possible because all getPct calls will be cummulative without code change\n\nFrequency.java\n\n   /**\n      * Returns the percentage of values that are equal to v\n     * @deprecated replaced by {@link #getPct(Comparable)} as of 2.0\n     */\n    @Deprecated\n    public double getPct(Object v) {\n        return getCumPct((Comparable<?>) v);\n    }",
    "desc_source": "jira"
  },
  "107": {
    "description": "wrong result in eigen decomposition\nSome results computed by EigenDecompositionImpl are wrong. The following case computed by Fortran Lapack fails with version 2.0\n{code}\n    public void testMathpbx02() {\n\n        double[] mainTridiagonal = {\n        \t  7484.860960227216, 18405.28129035345, 13855.225609560746,\n        \t 10016.708722343366, 559.8117399576674, 6750.190788301587, \n        \t    71.21428769782159\n        };\n        double[] secondaryTridiagonal = {\n        \t -4175.088570476366,1975.7955858241994,5193.178422374075, \n        \t  1995.286659169179,75.34535882933804,-234.0808002076056\n        };\n\n        // the reference values have been computed using routine DSTEMR\n        // from the fortran library LAPACK version 3.2.1\n        double[] refEigenValues = {\n        \t\t20654.744890306974412,16828.208208485466457,\n        \t\t6893.155912634994820,6757.083016675340332,\n        \t\t5887.799885688558788,64.309089923240379,\n        \t\t57.992628792736340\n        };\n        RealVector[] refEigenVectors = {\n        \t\tnew ArrayRealVector(new double[] {-0.270356342026904, 0.852811091326997, 0.399639490702077, 0.198794657813990, 0.019739323307666, 0.000106983022327, -0.000001216636321}),\n        \t\tnew ArrayRealVector(new double[] {0.179995273578326,-0.402807848153042,0.701870993525734,0.555058211014888,0.068079148898236,0.000509139115227,-0.000007112235617}),\n        \t\tnew ArrayRealVector(new double[] {-0.399582721284727,-0.056629954519333,-0.514406488522827,0.711168164518580,0.225548081276367,0.125943999652923,-0.004321507456014}),\n        \t\tnew ArrayRealVector(new double[] {0.058515721572821,0.010200130057739,0.063516274916536,-0.090696087449378,-0.017148420432597,0.991318870265707,-0.034707338554096}),\n        \t\tnew ArrayRealVector(new double[] {0.855205995537564,0.327134656629775,-0.265382397060548,0.282690729026706,0.105736068025572,-0.009138126622039,0.000367751821196}),\n        \t\tnew ArrayRealVector(new double[] {-0.002913069901144,-0.005177515777101,0.041906334478672,-0.109315918416258,0.436192305456741,0.026307315639535,0.891797507436344}),\n        \t\tnew ArrayRealVector(new double[] {-0.005738311176435,-0.010207611670378,0.082662420517928,-0.215733886094368,0.861606487840411,-0.025478530652759,-0.451080697503958})\n        };\n\n        // the following line triggers the exception\n        EigenDecomposition decomposition =\n            new EigenDecompositionImpl(mainTridiagonal, secondaryTridiagonal, MathUtils.SAFE_MIN);\n\n        double[] eigenValues = decomposition.getRealEigenvalues();\n        for (int i = 0; i < refEigenValues.length; ++i) {\n            assertEquals(refEigenValues[i], eigenValues[i], 1.0e-3);\n            if (refEigenVectors[i].dotProduct(decomposition.getEigenvector(i)) < 0) {\n                assertEquals(0, refEigenVectors[i].add(decomposition.getEigenvector(i)).getNorm(), 1.0e-5);\n            } else {\n                assertEquals(0, refEigenVectors[i].subtract(decomposition.getEigenvector(i)).getNorm(), 1.0e-5);\n            }\n        }\n\n    }\n{code}",
    "desc_source": "jira"
  },
  "108": {
    "description": "bug in inverseCumulativeProbability() for Normal Distribution\n\n * @version $Revision: 617953 $ $Date: 2008-02-02 22:54:00 -0700 (Sat, 02 Feb 2008) $\n */\npublic class NormalDistributionImpl extends AbstractContinuousDistribution \n\n\n * @version $Revision: 506600 $ $Date: 2007-02-12 12:35:59 -0700 (Mon, 12 Feb 2007) $\n */\npublic abstract class AbstractContinuousDistribution\n\n\nThis code:\n\n        \tDistributionFactory factory = app.getDistributionFactory();\n        \tNormalDistribution normal = factory.createNormalDistribution(0,1);\n        \tdouble result = normal.inverseCumulativeProbability(0.9772498680518209);\n\ngives the exception below. It should return (approx) 2.0000...\n\nnormal.inverseCumulativeProbability(0.977249868051820); works fine\n\nThese also give errors:\n0.9986501019683698 (should return 3.0000...)\n0.9999683287581673 (should return 4.0000...)\n\norg.apache.commons.math.MathException: Number of iterations=1, maximum iterations=2,147,483,647, initial=1, lower bound=0, upper bound=179,769,313,486,231,570,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000, final a value=0, final b value=2, f(a)=-0.477, f(b)=0\n\tat org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:103)\n\tat org.apache.commons.math.distribution.NormalDistributionImpl.inverseCumulativeProbability(NormalDistributionImpl.java:145)\n\n\n",
    "desc_source": "jira"
  },
  "109": {
    "description": "MathUtils.gcd(u, v) fails when u and v both contain a high power of 2\nThe test at the beginning of MathUtils.gcd(u, v) for arguments equal to zero fails when u and v contain high enough powers of 2 so that their product overflows to zero.\n\n        assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));\n\nFix: Replace the test at the start of MathUtils.gcd()\n\n        if (u * v == 0) {\n\nby\n\n        if (u == 0 || v == 0) {\n",
    "desc_source": "jira"
  },
  "110": {
    "description": "Result of multiplying and equals for complex numbers is wrong\nHi.\n\nThe bug relates on complex numbers.\nThe methods \"multiply\" and \"equals\" of the class Complex are involved.\n\nmathematic background:  (0,i) * (-1,0i) = (0,-i).\n\nlittle java program + output that shows the bug:\n-----------------------------------------------------------------------\n{code}\nimport org.apache.commons.math.complex.*;\npublic class TestProg {\n        public static void main(String[] args) {\n\n                ComplexFormat f = new ComplexFormat();\n                Complex c1 = new Complex(0,1);\n                Complex c2 = new Complex(-1,0);\n\n                Complex res = c1.multiply(c2);\n                Complex comp = new Complex(0,-1);\n\n                System.out.println(\"res:  \"+f.format(res));\n                System.out.println(\"comp: \"+f.format(comp));\n\n                System.out.println(\"res=comp: \"+res.equals(comp));\n        }\n}\n{code}\n-----------------------------------------------------------------------\n\nres:  -0 - 1i\ncomp: 0 - 1i\nres=comp: false\n\n-----------------------------------------------------------------------\n\nI think the \"equals\" should return \"true\".\nThe problem could either be the \"multiply\" method that gives (-0,-1i) instead of (0,-1i),\nor if you think thats right, the equals method has to be modified.\n\nGood Luck\nDieter",
    "desc_source": "jira"
  },
  "111": {
    "description": "[math]  SimpleRegression getSumSquaredErrors\ngetSumSquaredErrors returns -ve value. See test below:\n\npublic void testSimpleRegression() {\n\t\tdouble[] y = {  8915.102, 8919.302, 8923.502};\n\t\tdouble[] x = { 1.107178495, 1.107264895, 1.107351295};\n\t\tdouble[] x2 = { 1.107178495E2, 1.107264895E2, 1.107351295E2};\n\t\tSimpleRegression reg = new SimpleRegression();\n\t\tfor (int i = 0; i < x.length; i++) {\n\t\t\treg.addData(x[i],y[i]);\n\t\t}\n\t\tassertTrue(reg.getSumSquaredErrors() >= 0.0); // OK\n\t\treg.clear();\n\t\tfor (int i = 0; i < x.length; i++) {\n\t\t\treg.addData(x2[i],y[i]);\n\t\t}\n\t\tassertTrue(reg.getSumSquaredErrors() >= 0.0); // FAIL\n\t\t\n\t}",
    "desc_source": "jira"
  },
  "112": {
    "description": "1.10 regression (StackOverflowError) with interface where generic type has itself as upper bound\nAdd this to `GenericMetadataSupportTest`:\n\n``` java\n    interface GenericsSelfReference<T extends GenericsSelfReference<T>> {\n        T self();\n    }\n\n    @Test\n    public void typeVariable_of_self_type() {\n        GenericMetadataSupport genericMetadata = inferFrom(GenericsSelfReference.class).resolveGenericReturnType(firstNamedMethod(\"self\", GenericsSelfReference.class));\n\n        assertThat(genericMetadata.rawType()).isEqualTo(GenericsSelfReference.class);\n    }\n```\n\nIt fails on master and 1.10.8 with this:\n\n```\njava.lang.StackOverflowError\n    at sun.reflect.generics.reflectiveObjects.TypeVariableImpl.hashCode(TypeVariableImpl.java:201)\n    at java.util.HashMap.hash(HashMap.java:338)\n    at java.util.HashMap.get(HashMap.java:556)\n    at org.mockito.internal.util.reflection.GenericMetadataSupport.getActualTypeArgumentFor(GenericMetadataSupport.java:193)\n    at org.mockito.internal.util.reflection.GenericMetadataSupport.getActualTypeArgumentFor(GenericMetadataSupport.java:196)\n    at org.mockito.internal.util.reflection.GenericMetadataSupport.getActualTypeArgumentFor(GenericMetadataSupport.java:196)\n```\n\nIt worked on 1.9.5. May be caused by the changes in ab9e9f3 (cc @bric3).\n\n(Also note that while the above interface looks strange, it is commonly used for builder hierarchies, where base class methods want to return this with a more specific type.)\n\n",
    "desc_source": "github_issue"
  },
  "113": {
    "description": "Fixes #228: fixed a verify() call example in @Captor javadoc\n\n",
    "desc_source": "github_issue"
  },
  "114": {
    "description": "Source files should not be put in binary JAR \nSource files (`*.java`) should not be put into binary `mockito-core.jar`. It stupefies Idea to show decompiled file even when source jar is available.\n\n",
    "desc_source": "github_issue"
  },
  "115": {
    "description": "Generate change list separated by types using labels\nAs discussed on the mailing list instead of one big list of \"Improvements\" the change list for the release is divided into change types based on labels. It is required to specify which labels should be considered separately. Some other labels can be excluded (like \"question\" or \"refactoring\").\n\n```\nnew ReleaseNotesBuilderFactory(project)\n(...)\n    .showSeparatelyChangesWithLabelMappings([\"enhancement\": \"Improvements\", \"bug\": \"Fixed bugs\", \"doc\": \"Documentation\"])\n    .ignoreChangesWithLabels([\"refactoring\", \"invalid\", \"question\", \"wontfix\", \"duplicate\"])\n```\n\nThere is also `headerForOtherChanges` method to override default \"Other\" header.\n\nI changed internally `Improvement` to `Change` to better give meaning of change, but it is done in a separate commit, so can be easily reverted/amended if you don't like it (or have a better name).\n\nSample changelog generated for current release. Number of issues is the same as with the old mechanism. Many of them are placed in \"Other\" section as don't have labels assigned.\n- Changes: 20\n  - Improvements: 11\n    - Improved the javadoc example of custom Answer implementation [(#22)](https://github.com/mockito/mockito/pull/22)\n    - Avoided classloader issue when testing in Eclipse plugins environment [(#24)](https://github.com/mockito/mockito/pull/24)\n    - Removed .java files from main mockito jar artifacts [(#28)](https://github.com/mockito/mockito/pull/28)\n    - Smarter constructor injection by choosing \"biggest\" constructor instead of the default one [(#29)](https://github.com/mockito/mockito/pull/29)\n    - Deep stub style mocks can be serialized [(#30)](https://github.com/mockito/mockito/pull/30)\n    - Fixed the behavior of compareTo method of the mock objects [(#32)](https://github.com/mockito/mockito/pull/32)\n    - New \"MockingDetails.getInvocations\" method for inspecting what happened with the mock [(#10)](https://github.com/mockito/mockito/pull/10)\n    - Mock serialization/deserialization across classloader/JVM [(#5)](https://github.com/mockito/mockito/pull/5)\n    - Improved MockitoTestNGListener by making it reset argument captors before each test [(#6)](https://github.com/mockito/mockito/pull/6)\n    - Improve NoInteractionsWanted report to include the name of the mock [(#63)](https://github.com/mockito/mockito/pull/63)\n    - New \"getArgumentAt\" method for convenient implementation of custom Answers [(#41)](https://github.com/mockito/mockito/pull/41)\n  - Fixed bugs: 1\n    - Allow calling real implementation of jdk8 extension methods [(#39)](https://github.com/mockito/mockito/pull/39)\n  - Documentation: 0\n  - Other: 8\n    - Fixed wrong javadoc for AdditionalAnswers [(#56)](https://github.com/mockito/mockito/pull/56)\n    - Added useful links to README.md [(#58)](https://github.com/mockito/mockito/pull/58)\n    - Deprecated timeout().never(), in line with timeout().atMost() [(#14)](https://github.com/mockito/mockito/pull/14)\n    - Verification with timout measures time more more accurately [(#15)](https://github.com/mockito/mockito/pull/15)\n    - New \"then\" method for BDD-style interaction testing [(#38)](https://github.com/mockito/mockito/pull/38)\n    - Enabled continuous integration with Travis CI and coverage tracking with coveralls [(#18)](https://github.com/mockito/mockito/pull/18)\n    - Coveralls coverage tracking tool allows Mockito source code preview [(#62)](https://github.com/mockito/mockito/pull/62)\n    - Improved behavior of EqualsWithDelta with regards to null handling [(#21)](https://github.com/mockito/mockito/pull/21)\n\nI have to take a look why some labelled issues were ommited (in both mechanisms).\n\nWhat do you think about that?\n\n",
    "desc_source": "github_issue"
  },
  "116": {
    "description": "Constructing invalid Partials\nPartials can be constructed by invoking a constructor `Partial(DateTimeFieldType[], int[])` or by merging together a set of partials using `with`, each constructed by calling `Partial(DateTimeFieldType, int)`, e.g.:\n\n``` java\nPartial a = new Partial(new DateTimeFieldType[] { year(), hourOfDay() }, new int[] { 1, 1});\nPartial b = new Partial(year(), 1).with(hourOfDay(), 1);\nassert(a == b);\n```\n\nHowever, the above doesn't work in all cases:\n\n``` java\nnew Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1}); // throws Types array must not contain duplicate\nnew Partial(clockhourOfDay(), 1).with(hourOfDay(), 1); // #<Partial [clockhourOfDay=1, hourOfDay=1]>\n```\n\nI suppose the Partials should not allow to be constructed in either case. Is that right?\n\nThere's also a related issue (probably stems from the fact that the Partial is invalid):\n\n``` java\nnew Partial(clockhourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay() ,1).with(clockhourOfDay(), 1)) // throws objects must have matching field types\n```\n\n",
    "desc_source": "github_issue"
  },
  "117": {
    "description": "#148 DateTimeFormatter.parseInto broken when no year in format\nIn Joda Time 2.0, the default year was set to 2000 so that Feb 29 could be parsed correctly. However, parseInto now overwrites the given instant's year with 2000 (or whatever iDefaultYear is set to). The correct behavior would seem to be to use the given instant's year instead of iDefaultYear.\nThis does mean that Feb 29 might not be parseable if the instant's year is not a leap year, but in this case the caller asked for that in a sense.",
    "desc_source": "sourceforge"
  },
  "118": {
    "description": "#124 Inconsistent interpretation of ambiguous time during DST\nThe inconsistency appears for timezone Europe/London.\nConsider the following code\n\u2026\n        DateTime britishDate    = new DateTime(2011, 10, 30, 1, 59, 0, 0, DateTimeZone.forID(\"Europe/London\"));\n        DateTime norwDate       = new DateTime(2011, 10, 30, 2, 59, 0, 0, DateTimeZone.forID(\"Europe/Oslo\"));\n        DateTime finnishDate    = new DateTime(2011, 10, 30, 3, 59, 0, 0, DateTimeZone.forID(\"Europe/Helsinki\"));\n    System.out.println(britishDate);\n    System.out.println(norwDate);\n    System.out.println(finnishDate);\n\n\u2026\nThese three DateTime objects should all represent the same moment in time even if they are ambiguous. And using jodatime 1.6.2 this is the case. The code produces the following output:\n2011-10-30T01:59:00.000Z\n2011-10-30T02:59:00.000+01:00\n2011-10-30T03:59:00.000+02:00\nUsing jodatime 2.0 however, the output is:\n2011-10-30T01:59:00.000Z\n2011-10-30T02:59:00.000+02:00\n2011-10-30T03:59:00.000+03:00\nwhich IMO is wrong for Europe/London. Correct output should have been \n2011-10-30T01:59:00.000+01:00\nThe release notes for 2.0 states that: \n\"Now, it always returns the earlier instant (summer time) during an overlap. \u2026\"",
    "desc_source": "sourceforge"
  }
}