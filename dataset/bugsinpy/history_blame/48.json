{
  "id": "48",
  "blame_commit": {
    "commit": {
      "commit_id": "4625d8503dccddb1925ae03c2ad1c14f1e278423",
      "commit_message": "#682: Unify work with output in classic and instant mode",
      "commit_author": "Vladimir Iakovlev",
      "commit_date": "2017-08-31 17:58:56",
      "commit_parent": "96843fc6cd7f487676b378371830d29ec0e7c083"
    },
    "function": {
      "function_name": "match",
      "function_code_before": "@git_support\ndef match(command):\n    return 'push' in command.script and 'set-upstream' in command.stderr",
      "function_code_after": "@git_support\ndef match(command):\n    return 'push' in command.script and 'set-upstream' in command.output",
      "function_before_start_line": 7,
      "function_before_end_line": 9,
      "function_after_start_line": 7,
      "function_after_end_line": 9,
      "function_before_token_count": 19,
      "function_after_token_count": 19,
      "functions_name_modified_file": [
        "_get_upstream_option_index",
        "match",
        "get_new_command"
      ],
      "functions_name_all_files": [
        "test_sudo_support",
        "test_no_editor",
        "_get_all_tasks",
        "envs",
        "test_is_enabled",
        "output",
        "get_new_command",
        "test_run",
        "_get_wrong_command",
        "stderr",
        "_get_used_executables",
        "test_get_valid_history_without_current",
        "_get_brew_commands",
        "test_equality",
        "_get_actual_scm",
        "test_side_effect",
        "get_package",
        "test_when_cant_match",
        "side_effect",
        "brew_already_installed",
        "grunt_help",
        "_get_command_name",
        "git_not_command_one_of_this",
        "script_parts",
        "brew_install_no_argument",
        "test_get_corrected_commands_with_rule_returns_command",
        "test_git_support_match",
        "_get_script_group_lines",
        "test_get_branches",
        "_get_output_lines",
        "test_memoize",
        "test_when_etag_changed",
        "stdout",
        "yarn_help",
        "key",
        "lsof",
        "_get_similar_formula",
        "_get_between",
        "_get_failed_lifecycle",
        "composer_not_command",
        "is_match",
        "_get_all_absolute_paths_from_history",
        "tmux_ambiguous",
        "_make_pattern",
        "_switch",
        "test_is_arg_url",
        "__init__",
        "pip_unknown_cmd_without_recommend",
        "test_isnt_match_when_rule_failed",
        "extract_possibilities",
        "test_get_new_command_mocked",
        "docker_help",
        "git_branch",
        "os_path",
        "test_not_match",
        "_parse_apt_operations",
        "fn",
        "history_without_current",
        "test_match",
        "git_support",
        "match",
        "_get_actual_file",
        "zip_error",
        "sed_unterminated_s",
        "get_aliases",
        "get_output",
        "brew_no_available_formula",
        "enable_cache",
        "tar_error",
        "git_command",
        "prepare",
        "_get_pid_by_port",
        "get_all_executables",
        "_is_not_okay_to_test",
        "brew_unknown_cmd",
        "_get_sub_dirs",
        "_get_unknown_command",
        "_get_commands",
        "test_get_corrected_commands_with_rule_returns_list",
        "file_access",
        "run",
        "history",
        "test_get_rules",
        "which",
        "test_is_match",
        "test_with_filled_cache",
        "test_with_blank_cache",
        "_parse_apt_get_and_cache_operations",
        "_brew_commands",
        "get_gulp_tasks",
        "_get_all_commands",
        "is_enabled",
        "gem_help_commands",
        "from_path",
        "ssh_error",
        "path_exists",
        "test_not_file",
        "git_not_command_closest",
        "test_representable",
        "_getavailable_lifecycles",
        "test_organize_commands",
        "test_get_corrected_commands",
        "_get_directory_names_only",
        "test_extract_possibilities",
        "test_for_app",
        "test_replace_argument",
        "_get_used_port",
        "glob",
        "_get_upstream_option_index",
        "__hash__",
        "load_source",
        "test_not_is_arg_url",
        "test_isnt_match",
        "is_arg_url",
        "get_actual_scm_mock",
        "_compare_names",
        "bins",
        "fail_on_warning",
        "is_not_task",
        "__eq__",
        "_get_operations",
        "__repr__",
        "Popen",
        "_get_executable",
        "new_command",
        "_get_formulas",
        "_switch_command",
        "test_get_new_comman",
        "test_no_memoize",
        "test_match_mocked",
        "test_is_app",
        "_search",
        "shelve",
        "test_when_can_match",
        "file_exists",
        "test_hashable",
        "test_without_fallback",
        "test_get_all_matched_commands",
        "_is_brew_tap_cmd_naming",
        "tasks",
        "_group_by_calls",
        "_get_brew_tap_specific_commands",
        "_get_destination",
        "test_from_path",
        "brew_unknown_cmd2",
        "test_git_support",
        "alias",
        "set_help",
        "all_executables",
        "exists",
        "_wait_output",
        "from_raw_script",
        "get_corrected_commands",
        "test_get_operations",
        "_get_missing_file",
        "mtime",
        "test_not_march",
        "get_branches",
        "_get_possible_interfaces",
        "composer_not_command_one_of_this",
        "git_not_command",
        "_get_matched_layout",
        "test_default_settings",
        "update",
        "test_get_new_command",
        "test_from_script",
        "ifconfig",
        "test_get_all_executables",
        "_get_script",
        "_get_available_commands",
        "test_from_script_calls",
        "run_script",
        "test_get_new_command_with_settings",
        "get_docker_commands",
        "pip_unknown_cmd",
        "did_not_match"
      ],
      "functions_name_co_evolved_modified_file": [
        "get_new_command"
      ],
      "functions_name_co_evolved_all_files": [
        "_search",
        "test_sudo_support",
        "test_no_editor",
        "get_new_command",
        "output",
        "test_match",
        "test_run",
        "git_support",
        "stderr",
        "test_not_file",
        "test_get_valid_history_without_current",
        "_getavailable_lifecycles",
        "test_side_effect",
        "side_effect",
        "test_get_corrected_commands",
        "get_output",
        "_get_destination",
        "_get_command_name",
        "test_get_corrected_commands_with_rule_returns_command",
        "test_for_app",
        "_get_used_port",
        "test_git_support",
        "_get_unknown_command",
        "test_get_corrected_commands_with_rule_returns_list",
        "test_git_support_match",
        "test_isnt_match",
        "test_not_is_arg_url",
        "test_is_match",
        "from_raw_script",
        "stdout",
        "_get_missing_file",
        "is_match",
        "_get_failed_lifecycle",
        "__eq__",
        "__repr__",
        "test_is_arg_url",
        "Popen",
        "__init__",
        "update",
        "test_get_new_command",
        "test_isnt_match_when_rule_failed",
        "extract_possibilities",
        "test_from_script_calls",
        "test_get_new_comman",
        "test_get_new_command_with_settings",
        "test_is_app",
        "test_not_match"
      ]
    },
    "file": {
      "file_name": "git_push.py",
      "file_nloc": 25,
      "file_complexity": 8,
      "file_token_count": 159,
      "file_before": "import re\nfrom thefuck.utils import replace_argument\nfrom thefuck.specific.git import git_support\n\n\n@git_support\ndef match(command):\n    return ('push' in command.script\n            and 'set-upstream' in command.stderr)\n\n\ndef _get_upstream_option_index(command_parts):\n    if '--set-upstream' in command_parts:\n        return command_parts.index('--set-upstream')\n    elif '-u' in command_parts:\n        return command_parts.index('-u')\n    else:\n        return None\n\n\n@git_support\ndef get_new_command(command):\n    # If --set-upstream or -u are passed, remove it and its argument. This is\n    # because the remaining arguments are concatenated onto the command suggested\n    # by git, which includes --set-upstream and its argument\n    command_parts = command.script_parts[:]\n    upstream_option_index = _get_upstream_option_index(command_parts)\n\n    if upstream_option_index is not None:\n        command_parts.pop(upstream_option_index)\n\n        # In case of `git push -u` we don't have next argument:\n        if len(command_parts) > upstream_option_index:\n            command_parts.pop(upstream_option_index)\n\n    arguments = re.findall(r'git push (.*)', command.stderr)[0].strip()\n    return replace_argument(\" \".join(command_parts), 'push',\n                            'push {}'.format(arguments))\n",
      "file_after": "import re\nfrom thefuck.utils import replace_argument\nfrom thefuck.specific.git import git_support\n\n\n@git_support\ndef match(command):\n    return ('push' in command.script\n            and 'set-upstream' in command.output)\n\n\ndef _get_upstream_option_index(command_parts):\n    if '--set-upstream' in command_parts:\n        return command_parts.index('--set-upstream')\n    elif '-u' in command_parts:\n        return command_parts.index('-u')\n    else:\n        return None\n\n\n@git_support\ndef get_new_command(command):\n    # If --set-upstream or -u are passed, remove it and its argument. This is\n    # because the remaining arguments are concatenated onto the command suggested\n    # by git, which includes --set-upstream and its argument\n    command_parts = command.script_parts[:]\n    upstream_option_index = _get_upstream_option_index(command_parts)\n\n    if upstream_option_index is not None:\n        command_parts.pop(upstream_option_index)\n\n        # In case of `git push -u` we don't have next argument:\n        if len(command_parts) > upstream_option_index:\n            command_parts.pop(upstream_option_index)\n\n    arguments = re.findall(r'git push (.*)', command.output)[0].strip()\n    return replace_argument(\" \".join(command_parts), 'push',\n                            'push {}'.format(arguments))\n",
      "file_patch": "@@ -6,7 +6,7 @@ from thefuck.specific.git import git_support\n @git_support\n def match(command):\n     return ('push' in command.script\n-            and 'set-upstream' in command.stderr)\n+            and 'set-upstream' in command.output)\n \n \n def _get_upstream_option_index(command_parts):\n@@ -33,6 +33,6 @@ def get_new_command(command):\n         if len(command_parts) > upstream_option_index:\n             command_parts.pop(upstream_option_index)\n \n-    arguments = re.findall(r'git push (.*)', command.stderr)[0].strip()\n+    arguments = re.findall(r'git push (.*)', command.output)[0].strip()\n     return replace_argument(\" \".join(command_parts), 'push',\n                             'push {}'.format(arguments))\n",
      "files_name_in_blame_commit": [
        "test_tsuru_not_command.py",
        "test_git_branch_exists.py",
        "mvn_no_command.py",
        "git_branch_exists.py",
        "test_brew_update_formula.py",
        "sed_unterminated_s.py",
        "test_chmod_x.py",
        "test_git_not_command.py",
        "test_missing_space_before_subcommand.py",
        "test_man.py",
        "apt_get.py",
        "test_gem_unknown_command.py",
        "apt_invalid_operation.py",
        "test_fix_alt_space.py",
        "gradle_wrapper.py",
        "test_gulp_not_task.py",
        "test_python_execute.py",
        "mkdir_p.py",
        "pacman_not_found.py",
        "test_history.py",
        "grep_recursive.py",
        "test_git_pull_clone.py",
        "test_git_diff_no_index.py",
        "has_exists_script.py",
        "test_has_exists_script.py",
        "mvn_unknown_lifecycle_phase.py",
        "test_git_branch_list.py",
        "test_pacman_not_found.py",
        "test_scm_correction.py",
        "test_systemctl.py",
        "test_whois.py",
        "test_git_remote_seturl_add.py",
        "tmux.py",
        "git_add.py",
        "test_gradle_not_task.py",
        "test_workon_doesnt_exists.py",
        "no_such_file.py",
        "systemctl.py",
        "gem_unknown_command.py",
        "git_checkout.py",
        "test_brew_link.py",
        "git_push_without_commits.py",
        "test_git_pull.py",
        "fix_alt_space.py",
        "test_git_rm_staged.py",
        "test_git_push_without_commits.py",
        "git_tag_force.py",
        "test_javac.py",
        "ag_literal.py",
        "cd_mkdir.py",
        "test_npm_missing_script.py",
        "grep_arguments_order.py",
        "ls_all.py",
        "test_dry.py",
        "test_unknown_command.py",
        "git_bisect_usage.py",
        "test_brew_unknown_command.py",
        "test_npm_wrong_command.py",
        "test_dirty_unzip.py",
        "test_git_rm_recursive.py",
        "test_git_help_aliased.py",
        "test_hostscli.py",
        "chmod_x.py",
        "test_brew_uninstall.py",
        "man_no_space.py",
        "test_docker_not_command.py",
        "react_native_command_unrecognized.py",
        "test_ssh_known_host.py",
        "test_npm_run_script.py",
        "test_yarn_help.py",
        "python_command.py",
        "test_sl_ls.py",
        "ln_s_order.py",
        "brew_update_formula.py",
        "git_fix_stash.py",
        "npm_run_script.py",
        "cp_omitting_directory.py",
        "test_java.py",
        "test_python_command.py",
        "yarn_command_not_found.py",
        "test_git_branch_delete.py",
        "test_mvn_no_command.py",
        "utils.py",
        "test_git_push.py",
        "test_ls_all.py",
        "test_git_checkout.py",
        "test_rm_root.py",
        "test_yarn_command_not_found.py",
        "test_cargo_no_command.py",
        "git_rm_staged.py",
        "test_git_pull_unstaged_changes.py",
        "test_vagrant_up.py",
        "npm_wrong_command.py",
        "rm_dir.py",
        "tsuru_not_command.py",
        "scm_correction.py",
        "aws_cli.py",
        "rerun.py",
        "test_git.py",
        "test_git_stash_pop.py",
        "test_apt_get_search.py",
        "pacman.py",
        "test_git_rebase_merge_dir.py",
        "git_add_force.py",
        "brew_uninstall.py",
        "test_ls_lah.py",
        "cpp11.py",
        "test_grep_recursive.py",
        "git_help_aliased.py",
        "lein_not_task.py",
        "test_django_south_ghost.py",
        "test_tsuru_login.py",
        "test_git_rm_local_modifications.py",
        "test_cp_omitting_directory.py",
        "composer_not_command.py",
        "test_dirty_untar.py",
        "git_stash.py",
        "git_pull_uncommitted_changes.py",
        "git_two_dashes.py",
        "npm_missing_script.py",
        "no_command.py",
        "test_sudo.py",
        "test_git_bisect_usage.py",
        "test_switch_lang.py",
        "cargo_no_command.py",
        "test_git_add_force.py",
        "vagrant_up.py",
        "test_pacman.py",
        "pip_unknown_command.py",
        "test_path_from_history.py",
        "test_yarn_alias.py",
        "git_remote_seturl_add.py",
        "sudo.py",
        "test_ag_literal.py",
        "test_ln_s_order.py",
        "grunt_task_not_found.py",
        "test.py.py",
        "test_composer_not_command.py",
        "touch.py",
        "test_quotation_marks.py",
        "cd_correction.py",
        "yarn_help.py",
        "git_rm_recursive.py",
        "test_gradle_wrapper.py",
        "test_git_stash.py",
        "test_pip_unknown_command.py",
        "fab_command_not_found.py",
        "git_push_force.py",
        "test_git_pull_uncommitted_changes.py",
        "git_rebase_merge_dir.py",
        "gradle_no_task.py",
        "test_fix_file.py",
        "test_git_fix_stash.py",
        "git_flag_after_filename.py",
        "port_already_in_use.py",
        "test_git_diff_staged.py",
        "test_cd_mkdir.py",
        "test_man_no_space.py",
        "git_rebase_no_changes.py",
        "open.py",
        "man.py",
        "git_pull.py",
        "rm_root.py",
        "test_touch.py",
        "test_mercurial.py",
        "test_brew_upgrade.py",
        "test_no_such_file.py",
        "django_south_merge.py",
        "test_sed_unterminated_s.py",
        "mercurial.py",
        "test_git_push_force.py",
        "tsuru_login.py",
        "test_corrector.py",
        "test_git_flag_after_filename.py",
        "test_aws_cli.py",
        "test_port_already_in_use.py",
        "read_log.py",
        "test_grep_arguments_order.py",
        "brew_install.py",
        "brew_link.py",
        "test_git_rebase_no_changes.py",
        "fix_file.py",
        "test_go_run.py",
        "git_pull_clone.py",
        "gulp_not_task.py",
        "ln_no_hard_link.py",
        "ssh_known_hosts.py",
        "sudo_command_from_user_path.py",
        "test_types.py",
        "test_ifconfig_device_not_found.py",
        "test_sudo_command_from_user_path.py",
        "brew_unknown_command.py",
        "git_branch_delete.py",
        "test_remove_trailing_cedilla.py",
        "git_stash_pop.py",
        "__init__.py",
        "test_lein_not_task.py",
        "ifconfig_device_not_found.py",
        "git_push.py",
        "yarn_command_replaced.py",
        "test_grunt_task_not_found.py",
        "types.py",
        "test_tmux.py",
        "test_git_tag_force.py",
        "test_heroku_not_command.py",
        "test_git_two_dashes.py",
        "switch_lang.py",
        "git_not_command.py",
        "heroku_not_command.py",
        "test_django_south_merge.py",
        "unknown_command.py",
        "git_diff_no_index.py",
        "git_rm_local_modifications.py",
        "test_utils.py",
        "test_react_native_command_unrecognized.py",
        "path_from_history.py",
        "yarn_alias.py",
        "docker_not_command.py",
        "test_open.py",
        "test_brew_install.py",
        "test_git_push_pull.py",
        "test_mkdir_p.py",
        "test_yarn_command_replaced.py",
        "test_git_add.py",
        "test_no_command.py",
        "test_apt_get.py",
        "test_apt_invalid_operation.py",
        "django_south_ghost.py",
        "test_cd_parent.py",
        "test_mvn_unknown_lifecycle_phase.py",
        "git.py",
        "hostscli.py",
        "test_ln_no_hard_link.py",
        "git_push_pull.py",
        "test_fab_command_not_found.py",
        "test_rm_dir.py"
      ]
    }
  },
  "commits_modify_file_before_fix": {
    "size": 18
  },
  "recursive_blame_commits": {
    "recursive_blame_function_lines": {
      "7": {
        "commit_id": "df4d2cc88d315a8caed168bc84b02ad763b9f858",
        "line_code": "def match(command):",
        "commit_date": "2015-09-07 13:00:29",
        "valid": 1
      },
      "8": {
        "commit_id": "98a9fb3d7d0a5225ecc73d873d8503e2cad1fbf6",
        "line_code": "    return ('push' in command.script",
        "commit_date": "2015-07-21 15:35:39",
        "valid": 1
      },
      "9": {
        "commit_id": "71f1f4224b267711bd9cc372a2ec69902f423a0",
        "line_code": "            and 'set-upstream' in command.stderr)",
        "commit_date": "2015-04-08 18:15:49",
        "valid": 1
      }
    },
    "commits": {
      "df4d2cc88d315a8caed168bc84b02ad763b9f858": {
        "commit": {
          "commit_id": "df4d2cc88d315a8caed168bc84b02ad763b9f858",
          "commit_message": "\u26a0\ufe0f Remove `settings` param from rules `match`, `get_new_command` and `side_effect`",
          "commit_author": "nvbn",
          "commit_date": "2015-09-07 13:00:29",
          "commit_parent": "382eb8b86c7e4d403aa3cc00b7d4880b93ebbf42"
        },
        "function": {
          "function_name": "match",
          "function_code_before": "@git_support\ndef match(command, settings):\n    return 'push' in command.script and 'set-upstream' in command.stderr",
          "function_code_after": "@git_support\ndef match(command):\n    return 'push' in command.script and 'set-upstream' in command.stderr",
          "function_before_start_line": 5,
          "function_before_end_line": 7,
          "function_after_start_line": 5,
          "function_after_end_line": 7,
          "function_before_token_count": 21,
          "function_after_token_count": 0,
          "functions_name_modified_file": [
            "match",
            "get_new_command"
          ],
          "functions_name_all_files": [
            "test_sudo_support",
            "test_no_editor",
            "get_new_command",
            "stderr",
            "_get_brew_commands",
            "test_side_effect",
            "get_package",
            "test_when_cant_match",
            "side_effect",
            "brew_already_installed",
            "git_not_command_one_of_this",
            "brew_install_no_argument",
            "get_all_matched_commands",
            "test_git_support_match",
            "test_memoize",
            "print_alias",
            "test_when_etag_changed",
            "default_settings",
            "stdout",
            "key",
            "make_corrected_commands",
            "_get_similar_formula",
            "_get_failed_lifecycle",
            "composer_not_command",
            "get_loaded_rules",
            "tmux_ambiguous",
            "_make_pattern",
            "_switch",
            "pip_unknown_cmd_without_recommend",
            "_get_current_version",
            "extract_possibilities",
            "test_get_new_command_mocked",
            "docker_help",
            "get_command",
            "for_app",
            "suggest_stderr",
            "test_not_match",
            "fn",
            "test_match",
            "load_rule",
            "git_support",
            "match",
            "zip_error",
            "sed_unterminated_s",
            "how_to_configure_alias",
            "get_aliases",
            "test_when_rule_failed",
            "brew_no_available_formula",
            "enable_cache",
            "tar_error",
            "git_command",
            "_is_tar_extract",
            "is_app",
            "get_all_executables",
            "_is_not_okay_to_test",
            "brew_unknown_cmd",
            "main",
            "_get_sub_dirs",
            "history",
            "test_get_rules",
            "which",
            "test_with_filled_cache",
            "test_with_blank_cache",
            "_tar_file",
            "_not_corrected",
            "eager",
            "_brew_commands",
            "get_gulp_tasks",
            "get_rules",
            "setup_user_dir",
            "memoize",
            "ssh_error",
            "test_with_rule_returns_list",
            "test_not_file",
            "test_old_side_effect",
            "git_not_command_closest",
            "_getavailable_lifecycles",
            "test_old_match",
            "test_get_corrected_commands",
            "wait_output",
            "_history_of_exists_without_current",
            "_get_directory_names_only",
            "compatibility_call",
            "test_extract_possibilities",
            "test_for_app",
            "test_replace_argument",
            "glob",
            "load_source",
            "_prepare_rules",
            "_compare_names",
            "is_not_task",
            "_zip_file",
            "is_rule_match",
            "_get_formulas",
            "test_load_rule",
            "_switch_command",
            "test_no_memoize",
            "test_match_mocked",
            "run_command",
            "test_is_app",
            "_search",
            "shelve",
            "test_when_can_match",
            "test_with_rule_returns_command",
            "test_without_fallback",
            "get_closest",
            "test_get_all_matched_commands",
            "_is_brew_tap_cmd_naming",
            "replace_argument",
            "sudo_support",
            "_get_brew_tap_specific_commands",
            "test_old_get_new_command",
            "_get_suggests",
            "brew_unknown_cmd2",
            "test_git_support",
            "alias",
            "get_corrected_commands",
            "callables",
            "fix_command",
            "mtime",
            "test_not_march",
            "replace_command",
            "get_branches",
            "composer_not_command_one_of_this",
            "git_not_command",
            "_get_matched_layout",
            "test_default_settings",
            "test_no_match",
            "test_get_new_command",
            "_is_bad_zip",
            "test_get_all_executables",
            "test_get_new_command_with_settings",
            "get_docker_commands",
            "pip_unknown_cmd",
            "cache",
            "did_not_match"
          ],
          "functions_name_co_evolved_modified_file": [
            "get_new_command"
          ],
          "functions_name_co_evolved_all_files": [
            "test_sudo_support",
            "test_no_editor",
            "get_new_command",
            "test_match",
            "git_support",
            "test_with_rule_returns_command",
            "test_with_rule_returns_list",
            "test_not_file",
            "test_old_side_effect",
            "test_side_effect",
            "test_old_match",
            "test_get_corrected_commands",
            "side_effect",
            "sudo_support",
            "test_old_get_new_command",
            "compatibility_call",
            "test_for_app",
            "test_git_support",
            "test_git_support_match",
            "default_settings",
            "make_corrected_commands",
            "test_not_march",
            "test_default_settings",
            "test_no_match",
            "test_get_new_command",
            "is_rule_match",
            "test_get_new_command_mocked",
            "test_get_new_command_with_settings",
            "run_command",
            "test_match_mocked",
            "for_app",
            "test_not_match"
          ]
        },
        "file": {
          "file_name": "git_push.py",
          "file_nloc": 8,
          "file_complexity": 3,
          "file_token_count": 55,
          "file_before": "from thefuck.specific.git import git_support\n\n\n@git_support\ndef match(command, settings):\n    return ('push' in command.script\n            and 'set-upstream' in command.stderr)\n\n\n@git_support\ndef get_new_command(command, settings):\n    return command.stderr.split('\\n')[-3].strip()\n",
          "file_after": "from thefuck.specific.git import git_support\n\n\n@git_support\ndef match(command):\n    return ('push' in command.script\n            and 'set-upstream' in command.stderr)\n\n\n@git_support\ndef get_new_command(command):\n    return command.stderr.split('\\n')[-3].strip()\n",
          "file_patch": "@@ -2,11 +2,11 @@ from thefuck.specific.git import git_support\n \n \n @git_support\n-def match(command, settings):\n+def match(command):\n     return ('push' in command.script\n             and 'set-upstream' in command.stderr)\n \n \n @git_support\n-def get_new_command(command, settings):\n+def get_new_command(command):\n     return command.stderr.split('\\n')[-3].strip()\n",
          "files_name_in_blame_commit": [
            "test_tsuru_not_command.py",
            "brew_upgrade.py",
            "mvn_no_command.py",
            "cargo.py",
            "sed_unterminated_s.py",
            "test_git_not_command.py",
            "apt_get.py",
            "test_man.py",
            "test_fix_alt_space.py",
            "test_gulp_not_task.py",
            "test_python_execute.py",
            "main.py",
            "mkdir_p.py",
            "test_history.py",
            "pacman_not_found.py",
            "grep_recursive.py",
            "test_git_pull_clone.py",
            "has_exists_script.py",
            "test_has_exists_script.py",
            "mvn_unknown_lifecycle_phase.py",
            "test_git_branch_list.py",
            "test_pacman_not_found.py",
            "test_systemctl.py",
            "test_whois.py",
            "tmux.py",
            "git_add.py",
            "no_such_file.py",
            "systemctl.py",
            "git_checkout.py",
            "test_git_pull.py",
            "fix_alt_space.py",
            "test_javac.py",
            "cd_mkdir.py",
            "test_dry.py",
            "test_unknown_command.py",
            "quotation_marks.py",
            "test_brew_unknown_command.py",
            "test_dirty_unzip.py",
            "man_no_space.py",
            "test_docker_not_command.py",
            "test_ssh_known_host.py",
            "python_command.py",
            "test_sl_ls.py",
            "git_fix_stash.py",
            "cp_omitting_directory.py",
            "test_java.py",
            "test_python_command.py",
            "test_git_branch_delete.py",
            "test_mvn_no_command.py",
            "utils.py",
            "test_git_push.py",
            "test_rm_root.py",
            "test_cargo_no_command.py",
            "test_vagrant_up.py",
            "rm_dir.py",
            "tsuru_not_command.py",
            "whois.py",
            "cd_parent.py",
            "test_git.py",
            "go_run.py",
            "apt_get_search.py",
            "test_apt_get_search.py",
            "pacman.py",
            "test_ls_lah.py",
            "cpp11.py",
            "test_grep_recursive.py",
            "dry.py",
            "lein_not_task.py",
            "test_django_south_ghost.py",
            "test_tsuru_login.py",
            "test_cp_omitting_directory.py",
            "composer_not_command.py",
            "git_diff_staged.py",
            "test_dirty_untar.py",
            "git_stash.py",
            "git_branch_list.py",
            "no_command.py",
            "test_switch_lang.py",
            "test_sudo.py",
            "cargo_no_command.py",
            "vagrant_up.py",
            "test_pacman.py",
            "pip_unknown_command.py",
            "sudo.py",
            "test.py.py",
            "test_composer_not_command.py",
            "test_quotation_marks.py",
            "cd_correction.py",
            "test_git_stash.py",
            "test_pip_unknown_command.py",
            "git_push_force.py",
            "test_fix_file.py",
            "test_git_fix_stash.py",
            "sl_ls.py",
            "test_git_diff_staged.py",
            "dirty_untar.py",
            "test_cd_mkdir.py",
            "test_man_no_space.py",
            "ls_lah.py",
            "open.py",
            "man.py",
            "git_pull.py",
            "rm_root.py",
            "test_mercurial.py",
            "test_brew_upgrade.py",
            "test_no_such_file.py",
            "python_execute.py",
            "django_south_merge.py",
            "test_sed_unterminated_s.py",
            "test_git_push_force.py",
            "tsuru_login.py",
            "test_corrector.py",
            "mercurial.py",
            "brew_install.py",
            "fix_file.py",
            "git_pull_clone.py",
            "test_go_run.py",
            "gulp_not_task.py",
            "ssh_known_hosts.py",
            "brew_unknown_command.py",
            "git_branch_delete.py",
            "test_lein_not_task.py",
            "dirty_unzip.py",
            "git_push.py",
            "test_tmux.py",
            "test_heroku_not_command.py",
            "javac.py",
            "switch_lang.py",
            "history.py",
            "git_not_command.py",
            "heroku_not_command.py",
            "test_django_south_merge.py",
            "unknown_command.py",
            "test_utils.py",
            "docker_not_command.py",
            "test_open.py",
            "test_brew_install.py",
            "test_git_push_pull.py",
            "test_mkdir_p.py",
            "test_git_add.py",
            "test_no_command.py",
            "test_apt_get.py",
            "corrector.py",
            "django_south_ghost.py",
            "test_cd_parent.py",
            "java.py",
            "test_mvn_unknown_lifecycle_phase.py",
            "git.py",
            "test_git_checkout.py",
            "git_push_pull.py",
            "test_rm_dir.py"
          ]
        }
      },
      "98a9fb3d7d0a5225ecc73d873d8503e2cad1fbf6": {
        "commit": {
          "commit_id": "98a9fb3d7d0a5225ecc73d873d8503e2cad1fbf6",
          "commit_message": "Remove now redundant checks in `git_*` rules",
          "commit_author": "mcarton",
          "commit_date": "2015-07-21 15:35:39",
          "commit_parent": "903abff77e4150ef9e46f0b947b96a3d12fa9e23"
        },
        "function": {
          "function_name": "match",
          "function_code_before": "@utils.git_support\ndef match(command, settings):\n    return 'git' in command.script and 'push' in command.script and ('set-upstream' in command.stderr)",
          "function_code_after": "@utils.git_support\ndef match(command, settings):\n    return 'push' in command.script and 'set-upstream' in command.stderr",
          "function_before_start_line": 5,
          "function_before_end_line": 8,
          "function_after_start_line": 5,
          "function_after_end_line": 7,
          "function_before_token_count": 27,
          "function_after_token_count": 21,
          "functions_name_modified_file": [
            "match",
            "get_new_command"
          ],
          "functions_name_all_files": [
            "get_branches",
            "match",
            "get_new_command",
            "_get_all_git_matched_commands"
          ],
          "functions_name_co_evolved_modified_file": [],
          "functions_name_co_evolved_all_files": []
        },
        "file": {
          "file_name": "git_push.py",
          "file_nloc": 8,
          "file_complexity": 3,
          "file_token_count": 59,
          "file_before": "from thefuck import utils\n\n\n@utils.git_support\ndef match(command, settings):\n    return ('git' in command.script\n            and 'push' in command.script\n            and 'set-upstream' in command.stderr)\n\n\n@utils.git_support\ndef get_new_command(command, settings):\n    return command.stderr.split('\\n')[-3].strip()\n",
          "file_after": "from thefuck import utils\n\n\n@utils.git_support\ndef match(command, settings):\n    return ('push' in command.script\n            and 'set-upstream' in command.stderr)\n\n\n@utils.git_support\ndef get_new_command(command, settings):\n    return command.stderr.split('\\n')[-3].strip()\n",
          "file_patch": "@@ -3,8 +3,7 @@ from thefuck import utils\n \n @utils.git_support\n def match(command, settings):\n-    return ('git' in command.script\n-            and 'push' in command.script\n+    return ('push' in command.script\n             and 'set-upstream' in command.stderr)\n \n \n",
          "files_name_in_blame_commit": [
            "git_checkout.py",
            "git_not_command.py",
            "git_push.py",
            "git_diff_staged.py",
            "git_stash.py",
            "git_push_force.py",
            "git_branch_delete.py",
            "git_branch_list.py",
            "git_pull.py",
            "git_add.py",
            "git_push_pull.py",
            "git_pull_clone.py"
          ]
        }
      },
      "71f1f4224b267711bd9cc372a2ec69902f423a0": {
        "commit": {
          "commit_id": "71f1f4224b267711bd9cc372a2ec69902f423a01",
          "commit_message": "Initial commit",
          "commit_author": "nvbn",
          "commit_date": "2015-04-08 18:15:49",
          "commit_parent": ""
        },
        "function": {
          "function_name": "match",
          "function_code_before": "",
          "function_code_after": "def match(command):\n    return 'git' in command.script and 'push' in command.script and ('set-upstream' in command.stderr)",
          "function_before_start_line": "",
          "function_before_end_line": "",
          "function_after_start_line": 1,
          "function_after_end_line": 4,
          "function_before_token_count": 0,
          "function_after_token_count": 25,
          "functions_name_modified_file": [
            "match",
            "get_new_command"
          ],
          "functions_name_all_files": [
            "get_new_command",
            "test_match",
            "load_rule",
            "match",
            "stderr",
            "get_matched_rule",
            "test_get_command",
            "test_get_settings",
            "main",
            "test_get_rules",
            "test_is_rule_enabled",
            "run_rule",
            "is_rule_enabled",
            "test_get_new_command",
            "get_rules",
            "setup_user_dir",
            "test_load_rule",
            "test_get_matched_rule",
            "get_command",
            "test_setup_user_dir",
            "get_settings"
          ],
          "functions_name_co_evolved_modified_file": [
            "get_new_command"
          ],
          "functions_name_co_evolved_all_files": [
            "get_new_command",
            "test_match",
            "load_rule",
            "stderr",
            "get_matched_rule",
            "test_get_command",
            "test_get_settings",
            "main",
            "test_get_rules",
            "test_is_rule_enabled",
            "run_rule",
            "is_rule_enabled",
            "test_get_new_command",
            "get_rules",
            "setup_user_dir",
            "test_load_rule",
            "test_get_matched_rule",
            "get_command",
            "test_setup_user_dir",
            "get_settings"
          ]
        },
        "file": {
          "file_name": "git_push.py",
          "file_nloc": 6,
          "file_complexity": 4,
          "file_token_count": 49,
          "file_before": null,
          "file_after": "def match(command):\n    return ('git' in command.script\n            and 'push' in command.script\n            and 'set-upstream' in command.stderr)\n\n\ndef get_new_command(command):\n    return command.stderr.split('\\n')[-3].strip()\n",
          "file_patch": "@@ -0,0 +1,8 @@\n+def match(command):\n+    return ('git' in command.script\n+            and 'push' in command.script\n+            and 'set-upstream' in command.stderr)\n+\n+\n+def get_new_command(command):\n+    return command.stderr.split('\\n')[-3].strip()\n",
          "files_name_in_blame_commit": [
            "git_push.py",
            "setup.py",
            "test_git_push.py",
            "sudo.py",
            "test_sudo.py",
            "test_main.py",
            "main.py"
          ]
        }
      }
    }
  }
}