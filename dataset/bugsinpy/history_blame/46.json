{
  "id": "46",
  "blame_commit": {
    "commit": {
      "commit_id": "7dd4091458d9117e57d2ad9ce3126855bd00108c",
      "commit_message": "CLN: reorg type inference & introspection\n\ncloses #12503\n\nAuthor: Jeff Reback <jeff@reback.net>\n\nCloses #13147 from jreback/types and squashes the following commits:\n\n244649a [Jeff Reback] CLN: reorg type inference & introspection",
      "commit_author": "Jeff Reback",
      "commit_date": "2016-07-13 07:52:09",
      "commit_parent": "06103dd7735335e51fcd77a36b2e8a714286a059"
    },
    "function": {
      "function_name": "array_equivalent",
      "function_code_before": "",
      "function_code_after": "",
      "function_before_start_line": "",
      "function_before_end_line": "",
      "function_after_start_line": "",
      "function_after_end_line": "",
      "function_before_token_count": 0,
      "function_after_token_count": 0,
      "functions_name_modified_file": [
        "pad_2d",
        "interpolate_1d",
        "get_fill_func",
        "backfill_2d",
        "_akima_interpolate",
        "_interp_wrapper",
        "interpolate_2d",
        "clean_fill_method",
        "fill_zeros",
        "_from_derivatives",
        "clean_reindex_fill_method",
        "backfill_1d",
        "pad_1d",
        "mask_missing",
        "clean_interp_method",
        "_interpolate_scipy_wrapper"
      ],
      "functions_name_all_files": [
        "check_funs",
        "test_ix_setitem_corner",
        "check_for_ordered",
        "test_apply_iteration",
        "test_equality",
        "_safe_fetch",
        "test_inplace",
        "select",
        "test_ix_setitem_slice_dataframe",
        "ordered",
        "_handle_lowerdim_multi_index_axis0",
        "_box_func",
        "test_groupby_multilevel_with_transform",
        "_sqlalchemy_type",
        "is_nested_tuple",
        "test_groupby_with_hier_columns",
        "in_interactive_session",
        "test_omit_nuisance_python_multiple",
        "_build_xpath_expr",
        "from_range",
        "test_loc_getitem_label_list",
        "drop_duplicates",
        "test_match",
        "_format_datetime64",
        "test_constructor_with_datetimelike",
        "test_constructor_map",
        "get_calendar",
        "assert_class_equal",
        "_get_splitter",
        "__next__",
        "is_datetime_or_timedelta_dtype",
        "test_setitem_single_column_mixed_datetime",
        "test_index_equals_with_tz",
        "test_replace",
        "test_drop_preserve_names",
        "_get_axis_resolvers",
        "test_date_export_formats",
        "get_str_from_freq",
        "test_failing_subscript_with_name_error",
        "_conv_value",
        "test_plot_api",
        "_get_errorbars",
        "_add_series_only_operations",
        "_check_for_default_values",
        "test_str_accessor_no_new_attributes",
        "test_column_select_via_attr",
        "test_partially_invalid_plot_data",
        "test_convert_sql_column_ints",
        "test_grouper_iter",
        "test_slice_floats",
        "test_partial_setting_mixed_dtype",
        "test_lookup_nan",
        "test_compound",
        "test_multi_function_flexible_mix",
        "test_frame_to_time_stamp",
        "get_locator",
        "_not_in",
        "_guess_datetime_format",
        "_generate_marginal_results_without_values",
        "test_constructor_freq_mult",
        "test_grouper_getting_correct_binner",
        "f_stat_to_dict",
        "_get_axes_layout",
        "_read",
        "test_reindex_level",
        "storable",
        "test_series_map_box_timestamps",
        "test_annual_upsample_D_s_f",
        "test_boolean_indexing_mixed",
        "check_output",
        "_compare_frame_evaluate",
        "_skew_kurt_wrap",
        "argmin",
        "_use_cached_range",
        "test_aread_sql",
        "test_group_selection_cache",
        "test_multiindex_blocks",
        "_get_nearest_indexer",
        "_set_categories",
        "test_complex",
        "test_complex_series_frame_alignment",
        "test_tz_localize_roundtrip",
        "_get_indices_dict",
        "test_groupby_categorical",
        "_replace_nans",
        "test_default_date_load",
        "clip_lower",
        "rsplit",
        "test_resample_with_nat",
        "test_convert_sql_column_strings",
        "test_extractall_no_matches",
        "_load_test1_data",
        "test_get_attr",
        "ewmcorr",
        "pad_1d",
        "test_set_value_resize",
        "test_binop_typecasting",
        "str_slice_replace",
        "test_getitem_simple",
        "_parse_errorbars",
        "test_apply_multi_index",
        "makeCategoricalIndex",
        "_format_datetime64_dateonly",
        "validate_kwargs",
        "test_filter_single_column_df",
        "_verify_integrity",
        "write_index",
        "test_nat_ops",
        "test_array_equivalent_compat",
        "test_more_contains",
        "test_iloc_getitem_array",
        "test_fancy_slice_partial",
        "test_getitem_boolean_empty",
        "test_pindex_fieldaccessor_nat",
        "_get_array_list",
        "test_agg_period_index",
        "test_as_index_series_return_frame",
        "test_mean",
        "read_index",
        "notnull",
        "test_ctor_orderedDict",
        "test_datetime_invalid_datatype",
        "test_constructor_resize",
        "_partial_tup_index",
        "_check_bar_alignment",
        "tz_localize",
        "test_groupby_dtype_inference_empty",
        "from_codes",
        "test_split",
        "test_identical",
        "nankurt",
        "_make_selectors",
        "_getitem_slice",
        "test_repeat",
        "is_categorical",
        "_ensure_compat_concat",
        "test_sub_delta",
        "test_value_counts_bins",
        "_get_group_keys",
        "test_hash",
        "test_loc_axis_arguments",
        "test_cython_agg_boolean",
        "sortlevel",
        "assert_panelnd_equal",
        "dot",
        "test_utc_to_local_no_modify_explicit",
        "test_maybe_indices_to_slice_middle",
        "is_index_slice",
        "_convert_to_indexer",
        "test_seriesgroupby_name_attr",
        "is_timedelta64_dtype",
        "test_unsorted_index",
        "exists",
        "_check_view",
        "test_keys",
        "_evaluate_with_timedelta_like",
        "_read_old_header",
        "test_localized_at_time_between_time",
        "test_getitem_boolean_list",
        "visit_Index",
        "_get_result",
        "test_basic_downsample",
        "end_time",
        "read_coordinates",
        "is_datelike_mixed_type",
        "test_groupby_multiindex_missing_pair",
        "check_basic_series_frame_alignment",
        "test_bar_barwidth_position",
        "generate_filter_op",
        "test_resample_to_quarterly",
        "test_range_misspecified",
        "_bool_method_SERIES",
        "ex",
        "swaplevel",
        "test_transpose_copy",
        "_format_value",
        "_check_thousands",
        "_get_formatter",
        "tolist",
        "engine_has_neg_frac",
        "_flex_method_SERIES",
        "test_hash_equivalent",
        "test_agg_ser_multi_key",
        "_rows_to_cols",
        "_clean_index_names",
        "set_atom_data",
        "_get_canonical_key",
        "test_frame_setitem",
        "codes",
        "test_constructor_ragged",
        "test_cumcount_mi",
        "test_split_no_pat_with_nonzero_n",
        "df",
        "test_groupby_dict_mapping",
        "test_union_bug_1745",
        "set_eng_float_format",
        "dst",
        "unconvert",
        "_validate_index_level",
        "test_extractall_single_group_with_quantifier",
        "on_right",
        "test_getitem_unordered_dup",
        "format_date_labels",
        "test_iloc_getitem_neg_int",
        "test_frame_getitem_not_sorted",
        "_generate",
        "test_coerce_to_dtype",
        "test_nanall",
        "_convert_to_font",
        "test_groupby_level",
        "justify",
        "test_constructor_single_value",
        "_background_gradient",
        "test_all_values_single_bin",
        "test_setslice",
        "test_nat_vector_field_access",
        "test_indexing",
        "test_resample_empty_series",
        "test_annual_upsample_M_e_b",
        "var",
        "translate_In",
        "test_ops_general",
        "test_partition_to_dataframe",
        "_process_date_conversion",
        "test_describe_multi_index_df_column_names",
        "test_constructor_empty_panel",
        "parse_back_compat",
        "test_reset_index_with_drop",
        "test_drop_column",
        "_selection_list",
        "_read_value_labels",
        "disable",
        "to_period",
        "_handle_date_column",
        "test__bn_ok_dtype",
        "_choose_path",
        "_argminmax_wrap",
        "test_where_setitem_invalid",
        "test_constructor_from_index_series_period",
        "test_downsample_non_unique",
        "register",
        "test_tquery",
        "_check_grid_settings",
        "from_records",
        "test_to_timestamp",
        "test_quantile_interpolation_dtype",
        "_setup_subplots",
        "test_astype_with_view",
        "decons_group_index",
        "check_bad_resolver_raises",
        "_construct_axes_dict",
        "_compute_grand_margin",
        "test_frame_from_records_utc",
        "test_resample_base_with_timedeltaindex",
        "col",
        "test_iterator",
        "_args_adjust",
        "_importers",
        "test_groupby_as_index_cython",
        "test_returned_dtype",
        "test_dt_accessor_api",
        "_reorder_arrays",
        "get_object",
        "check_performance_warning_for_poor_alignment",
        "test_unstack_unobserved_keys",
        "create_index",
        "test_add_offset",
        "count_empty_vals",
        "test_equals",
        "isnumeric",
        "_reindex_with_indexers",
        "_sanitize_column",
        "interpolate_1d",
        "_isnull_ndarraylike",
        "test_astype",
        "test_get",
        "test_multiindex_slicers_edges",
        "test_where_none",
        "_format_header",
        "_check_box_return_type",
        "_interpolate_with_fill",
        "test_setitem_na",
        "test_millisecondly",
        "_sparse_blockify",
        "test_conv_weekly_legacy",
        "get_data_famafrench",
        "_td_index_cmp",
        "_reindex_multi",
        "test_cat",
        "_check_groupby",
        "_apply",
        "test_loc_name",
        "test_dti_reset_index_round_trip",
        "_formatter_func",
        "_make_plot_keywords",
        "_get_valid_sqlite_name",
        "test_setitem_ambiguous_keyerror",
        "test_isnull",
        "test_datetimeindex_tz_nat",
        "test_tzaware_datetime_to_index",
        "_set_codes",
        "fast_apply",
        "_ixs",
        "groupby",
        "test_pipe_panel",
        "test_constructor_ordered_dict_preserve_order",
        "test_agg_consistency",
        "_deepcopy_if_needed",
        "test_basic_frame_series_alignment",
        "test_pivot_table",
        "_create_sql_schema",
        "test_NaT_scalar",
        "remove_categories",
        "test_frame_no_datetime64_dtype",
        "is_integer",
        "test_align_sameindex",
        "debug",
        "_apply_filter",
        "write_result",
        "_get_data_from",
        "_list_of_series_to_arrays",
        "_get_bool_data",
        "to_xarray",
        "test_xs_level_series",
        "set_table_styles",
        "rolling_cov",
        "reindex",
        "test_agg_multiple_functions_maintain_order",
        "nanargmin",
        "_write_data",
        "_join_compat",
        "test_constructor_ordereddict",
        "_get_dummies_1d",
        "test_kind_both_ways",
        "test_iteration",
        "test_guess_datetime_format_with_parseable_formats",
        "test_bar_categorical",
        "test_pickle",
        "test_constructor_simple_new_empty",
        "fetch_data",
        "test_constructor_multi_index",
        "test_setitem_datetimelike_with_inference",
        "assert_frame_equal",
        "days",
        "_convert_to_number_format",
        "check_metadata",
        "setup_ops",
        "test_area_lim",
        "test_ix_setitem_boolean",
        "test_timestamp_to_datetime_tzoffset",
        "test_copy_names",
        "test_datetime_NaT",
        "test_getitem",
        "test_constructor_cast_object",
        "_fill_mi_header",
        "slice_shift",
        "is_dict_like",
        "eval",
        "test_factorize_repeated",
        "test_multiple_functions_tuples_and_non_tuples",
        "test_keyword_as_column_names",
        "check_modulus",
        "test_apply_bug",
        "_buffered_line",
        "_format_header_mi",
        "test_tz_convert_unsorted",
        "test_transform_with_non_scalar_group",
        "_extended_gcd",
        "_convert",
        "raw",
        "background_gradient",
        "test_pie_series",
        "test_dt_namespace_accessor",
        "test_filter_series",
        "test_stat_op_corner",
        "_prep_values",
        "test_constructor_Series_copy_bug",
        "_trim_excel_header",
        "_apply_axis_properties",
        "to_html",
        "test_at_and_iat_get",
        "test_frame_getitem_setitem_slice",
        "_get_level_number",
        "test_groupby_sort_categorical",
        "_maybe_coerce_freq",
        "test_append_numpy_bug_1681",
        "makeTimedeltaIndex",
        "utcoffset",
        "_count_not_none",
        "test_kde_df",
        "test_binops_level",
        "combine_concat_plans",
        "_stat_axis",
        "test_loc_setitem_slice",
        "test_categorical_series_repr_ordered",
        "_combine",
        "skip_if_no_package",
        "is_datetimelike",
        "_mpl_le_2_0_0",
        "test_to_sql_fail",
        "pad",
        "test_asfreq_keep_index_name",
        "to_timedelta",
        "read_msgpack",
        "test_get_axis_name",
        "_apply_2d",
        "test_bigint",
        "__neg__",
        "test_is_dtype",
        "test_subplots_timeseries",
        "_aggregate_series_pure_python",
        "test_if_exists",
        "test_rank_apply",
        "get_result",
        "test_align_fill_method",
        "_get_dtype_type",
        "hour_deltas",
        "test_large_dataframe_indexing",
        "randu",
        "str_split",
        "test_map_indices_py",
        "test_end_time",
        "test_apply_series_to_frame",
        "itertuples",
        "_data_to_frame",
        "_get_names",
        "read_metadata",
        "_bounds",
        "test_pi_sub_pdnat",
        "check_invalid_local_variable_reference",
        "_simple_blockify",
        "infer",
        "test_constructor_mixed_dict_and_Series",
        "test_pindex_multiples",
        "test_hist_legacy",
        "test_time",
        "test_xs_multiindex",
        "_mpl_ge_1_4_0",
        "test_filter_condition_raises",
        "read_multi_index",
        "test_to_period_tz_dateutil",
        "_add_datelike",
        "reshape",
        "read_csv",
        "test_na_flags_int_categories",
        "test_where_timedelta",
        "nonzero",
        "_get_data_to_aggregate",
        "test_categorical_series_repr",
        "test_constructor_dict_multiindex",
        "_tick_comp",
        "test_periodindex",
        "_hashtable_algo",
        "add_flex_arithmetic_methods",
        "test_reindex_frame_add_nat",
        "test_xs_corner",
        "_list_of_dict_to_arrays",
        "test_loc_getitem_bool",
        "onOffset",
        "pnow",
        "autoscale",
        "get_reso",
        "test_pi_sub_period_nat",
        "test_groupby_with_timegrouper_methods",
        "_check_decimal",
        "str_find",
        "test_groupby_groups_periods",
        "test_categorical_sorting",
        "test_series_pos",
        "test_asfreq_ts",
        "test_describe_percentiles_insert_median",
        "test_int32_overflow",
        "test_getitem_generator",
        "_mpl_ge_1_5_0",
        "test_negative_log",
        "items_overlap_with_suffix",
        "test_assignment_in_query",
        "_close_conn",
        "merge_ordered",
        "test_categorical_repr_period_ordered",
        "test_daily",
        "_ok_for_gaussian_kde",
        "_slice",
        "_blknos",
        "test_setitem_by_indexer_mixed_type",
        "r2_adj",
        "test_frame_fillna_limit",
        "test_filter_maintains_ordering",
        "test_to_datetime_other_datetime64_units",
        "_get_roll",
        "check_values",
        "read_pickle",
        "test_to_sql_index_label_multiindex",
        "_make_dt_accessor",
        "_format_regular_rows",
        "_needs_reindex_multi",
        "_start_base",
        "test_ix_frame_align",
        "_search_replace_num_columns",
        "test_105",
        "test_difference",
        "_default_locale_getter",
        "test_recreate_from_data",
        "test_to_frame",
        "_dispatch",
        "test_minutely",
        "_datetime_to_stata_elapsed_vec",
        "test_greater",
        "test_to_frame_multi_major_minor",
        "check_alignment",
        "test_unicode_print",
        "test_df_subplots_patterns_minorticks",
        "_unconvert_index",
        "test_level_with_tuples",
        "_insert_strls",
        "_two_char",
        "_ndim",
        "test_mask_inplace",
        "_getitem_iterable",
        "cdate_range",
        "construction_error",
        "test_take",
        "operand_types",
        "_get_all_lines",
        "test_to_datetime_format_weeks",
        "test_dayfirst",
        "remove_unused_categories",
        "_getitem_nested_tuple",
        "test_pi_ops_array_int",
        "test_agg_callables",
        "_format_header_regular",
        "local_name",
        "get_all_data",
        "test_aggregate_api_consistency",
        "test_unstack_group_index_overflow",
        "validate_argmax_with_skipna",
        "_get_repr",
        "test_loc_setitem_consistency",
        "test_swapcase",
        "get_slice",
        "__invert__",
        "test_sortlevel_mixed",
        "test_pass_args_kwargs",
        "_execute_insert",
        "_non_reducing_slice",
        "ewmvar",
        "test_cat_equality",
        "_convert_grouper",
        "test_utc_with_system_utc",
        "microseconds",
        "test_is_bool",
        "assertRaisesRegexp",
        "is_bool_dtype",
        "_convert_wrapper",
        "_coerce_method",
        "test_numeric_like_ops",
        "test_nancorr_pearson",
        "_format_hierarchical_rows",
        "make_empty",
        "_init_ndarray",
        "set",
        "test_multi_func",
        "set_atom",
        "take_data",
        "test_localize_utc_conversion",
        "argmax",
        "test_datetimeindex_tz",
        "test_mutate_groups",
        "is_unique",
        "test_frame_getitem_view",
        "test_get_period_field_raises_on_out_of_range",
        "test_append_concat_tz_explicit_pytz",
        "_mpl_ge_1_3_1",
        "test_to_frame_mixed",
        "assert_sp_panel_equal",
        "test_getitem_boolean",
        "_is_offset",
        "_is_empty_array",
        "test_create_and_drop_table",
        "_write_value_labels",
        "test_index",
        "test_value_counts_inferred",
        "test_categorical_repr_timedelta_ordered",
        "test_dtypes",
        "test_asfreq",
        "test_describe_none",
        "test_searchsorted",
        "test_na_value_for_dtype",
        "is_dtype_equal",
        "assert_panel4d_equal",
        "test_shift_nat",
        "_reindex_non_unique",
        "_skip_if_no_pymysql",
        "minor_xs",
        "makeStringIndex",
        "test_encode_decode",
        "test_read_dta2",
        "test_groupby_categorical_no_compress",
        "test_pie_df_nan",
        "ftype",
        "isin",
        "_prepare_data",
        "test_timestamp_nat_tz",
        "_make_parser_function",
        "test_loc_setitem_frame_multiples",
        "test_resample_weekly_all_na",
        "test_reindex_nan",
        "hist_series",
        "test_upsample_with_limit",
        "tearDown",
        "_from_derivatives",
        "_make_field_arrays",
        "test_setitem_datetime_coercion",
        "_validate_usecols_arg",
        "_mpl_le_1_2_1",
        "test_orderedDict_ctor",
        "test_column_in",
        "test_wrap",
        "get_weeks",
        "nw_lags",
        "test_to_datetime_infer_datetime_format_series_with_nans",
        "makeBoolIndex",
        "convert_to_index_sliceable",
        "test_groupby_multilevel",
        "_unpickle_panel_compat",
        "_get_blkno_placements",
        "test_getitem_setitem_fancy_exceptions",
        "cov",
        "test_getitem_ix_mixed_integer",
        "test_valid_object_plot",
        "test_dataframe_dtypes",
        "ljust",
        "_write_hierarchical_rows",
        "test_set_group_name",
        "test_select_dtypes_bad_arg_raises",
        "df_model",
        "str_index",
        "makePeriodFrame",
        "test_dtype_conversion",
        "invert",
        "test_sort_index_preserve_levels",
        "_simple_ts",
        "in_ipnb",
        "test_constructor_DataFrame",
        "is_string_dtype",
        "is_int64_dtype",
        "assert_dict_equal",
        "iget",
        "test_pi_offset_errors",
        "test_implicit_label",
        "str_contains",
        "test_print_none_width",
        "test_frame_setitem_multi_column",
        "_get_dtypes",
        "test_asfreq_mult_nat",
        "_maybe_to_dense",
        "_get_codes",
        "test_select_bad_cols",
        "_highlight_extrema",
        "join",
        "write_metadata",
        "is_exists",
        "_get_default_annual_spacing",
        "test_getitem_lowerdim_corner",
        "test_extractall_same_as_extract",
        "test_nancov",
        "test_apply_chunk_view",
        "maybe_expression",
        "_extract_axes",
        "test_iloc_getitem_int",
        "test_add_offset_nat",
        "test_grouping_ndarray",
        "test_pi_ops_errors",
        "test_is_full",
        "assert_sp_list_equal",
        "test_strip_lstrip_rstrip_unicode",
        "_delegate_property_set",
        "set_caption",
        "_apply_meta",
        "test_groupby_level_no_obs",
        "test_properties_hourly",
        "test_annual_upsample_B_s_f",
        "test_duplicated_drop_duplicates",
        "write_block_index",
        "_expand_elements",
        "apply_index_wraps",
        "test_more_replace",
        "_validate_timedelta_unit",
        "test_constructor_ndarray",
        "test_hist_kde",
        "test_NaT_methods",
        "test_getitem_get",
        "test_multi_assign",
        "_parse_raw_thead",
        "validate_attr",
        "test_isscalar_numpy_zerodim_arrays",
        "nanmean",
        "get_quote_yahoo",
        "return_type",
        "_check_stat_op",
        "test_panel_fails",
        "_isnull_ndarraylike_old",
        "_use_inf_as_null",
        "test_constructor_observe_dtype",
        "detect_console_encoding",
        "test_loc_getitem_int",
        "test_from_records_tuples_generator",
        "__nonzero__",
        "test_table",
        "test_reshaping",
        "_doc_parms",
        "tearDownClass",
        "test_apply_with_args_kwds",
        "test_woy_boundary",
        "_get_column_name_list",
        "_use_window",
        "prng",
        "test_partition_series",
        "test_hash_error",
        "test_multiindex_roundtrip",
        "needs_i8_conversion",
        "test_default_color_cycle",
        "test_resample_size",
        "__array__",
        "make_block",
        "test_read_dta3",
        "_try_get_item",
        "test_to_html",
        "levshape",
        "test_apply_series_yield_constant",
        "test_parallel",
        "test_to_datetime_unprocessable_input",
        "_lexer_split_from_str",
        "test_methods",
        "test_reindex_nearest",
        "test_conv_business",
        "test_apply_slabs",
        "test_numpy_reduction",
        "_p_value_raw",
        "test_ix_getitem_setitem_integer_slice_keyerrors",
        "test_repeated_getitem_dups",
        "render",
        "test_xcompat",
        "test_series_plot_color_kwargs",
        "test_where",
        "test_from_records_misc_brokenness",
        "set_atom_complex",
        "test_is_integer",
        "_harmonize_columns",
        "test_construction_frame",
        "test_method_on_bytes",
        "test_transform_dtype",
        "_add_delta_tdi",
        "_parse",
        "test_plot_int_columns",
        "_define_paths",
        "_get_numeric_data",
        "assert_numpy_array_equal",
        "nanargmax",
        "_check_colors",
        "test_conv_secondly",
        "test_getitem_list_duplicates",
        "_compute_plot_data",
        "_get_metadata_path",
        "test_read_sql_parameter",
        "test_reorder_categories",
        "test_filter_enforces_scalarness",
        "_ensure_float",
        "add_categories",
        "get_components_yahoo",
        "_skip_if_no_pathlib",
        "nobs",
        "get_indexer_non_unique",
        "test_boxplot_vertical",
        "check_mutable_error",
        "check_ops_properties",
        "test_where_complex",
        "test_cast_on_putmask",
        "_unstack_multiple",
        "test_numeric_values",
        "_maybe_box",
        "makeMissingCustomDataframe",
        "test_subplots_sharex_axes_existing_axes",
        "mplskip",
        "_test_op",
        "_mut_exclusive",
        "test_getitem_setitem_float_labels",
        "test_nbytes",
        "test_weekly",
        "test_get_loc_single_level",
        "_highlight_null",
        "test_at_time_between_time_datetimeindex",
        "test_properties_secondly",
        "_groups_or_na_fun",
        "test_value_counts_datetime64",
        "maybe_set_size",
        "test_compound_invert_op",
        "test_convert_datetime_list",
        "test_nanmin",
        "_reference_duplicate_name",
        "crosstab",
        "test_datetime64_with_DateOffset",
        "read_hdf",
        "stdin_encoding",
        "test_series_getitem_corner",
        "test_apply_corner",
        "test_nancorr_kendall",
        "test_constructor_name",
        "item",
        "test_constructor_empty_with_string_dtype",
        "clip",
        "month_position_check",
        "test_slice_locs_indexerror",
        "_unpickle_series_compat",
        "_from_ordinal",
        "test_iget",
        "test_series_index_name",
        "_is_view",
        "select_column",
        "get",
        "__array_prepare__",
        "set_atom_timedelta64",
        "test_more_flexible_frame_multi_function",
        "test_join_with_period_index",
        "test_with_tz",
        "is_null",
        "_badobj_wrap",
        "_combine_series",
        "parse",
        "_should_parse_dates",
        "test_removed_from_core_common",
        "_has_infs",
        "_get_join_index",
        "test_take_fill_value_with_timezone",
        "_local_timestamps",
        "test_pass_dates_localize_to_utc",
        "_to_sql",
        "test_read_dta18",
        "test_line_area_nan_df",
        "radviz",
        "test_isscalar_numpy_array_scalars",
        "delta",
        "_r2_adj_raw",
        "_convert_tuple",
        "_has_valid_positional_setitem_indexer",
        "test_getitem_fancy_scalar",
        "_apply_empty_result",
        "test__isfinite",
        "_check_plot_works",
        "_delegate_property_get",
        "as_ordered",
        "test_ix_weird_slicing",
        "test_resample_anchored_monthstart",
        "test_tuples_have_na",
        "reindex_like",
        "test_handle_dict_return_value",
        "_make_fixed_width",
        "test_setitem_clear_caches",
        "_get_nobs",
        "_has_valid_type",
        "test_datetime_time",
        "test_resample_upsample",
        "test_guess_datetime_format_with_locale_specific_formats",
        "_y_converter",
        "_all_not_none",
        "__rmul__",
        "test_setitem_None",
        "_skip_if_no_pytz",
        "test_asfreq_non_unique",
        "test_str_accessor_api_for_categorical",
        "convert_objects",
        "_get_expiry_dates_and_links",
        "_put_lines",
        "test_greater_Raises_Value",
        "test_quantile_box",
        "astype",
        "is_full_slice",
        "test_frame_getitem_setitem_boolean",
        "to_hdf",
        "get_options_data",
        "test_shift",
        "concat",
        "test_series_constructor",
        "ordered_merge",
        "test_swapaxes",
        "_get_interval",
        "_convert_to_side",
        "test_string_methods_dont_fail",
        "_write_regular_rows",
        "_block_shape",
        "indexables",
        "test_ix_empty_list_indexer_is_ok",
        "_next_line",
        "_set_tz",
        "test_per_axis_per_level_doc_examples",
        "_dir_additions",
        "corr",
        "test_fancy_getitem_slice_mixed",
        "test_multiindex_setitem",
        "test_array_equivalent",
        "_dtype_to_stata_type",
        "highlight_null",
        "_make_str_accessor",
        "test_sortlevel",
        "_class_to_alias",
        "levels",
        "_set_with",
        "check_no_new_globals",
        "test_panel_setitem_with_multiindex",
        "_validate_date_like_dtype",
        "set_ordered",
        "test_categorical_ordering",
        "get_rule_code_suffix",
        "_is_weekly",
        "test_codes_immutable",
        "test_indexer_caching",
        "test_describe_typefiltering_category_bool",
        "_align_frame",
        "test_timegrouper_with_reg_groups",
        "test_strip_lstrip_rstrip_args",
        "_index_labels_to_array",
        "categories",
        "test_constructor_dict_of_tuples",
        "test_corner_cases",
        "sp_index",
        "_offset_str",
        "test_encoding",
        "test_apply_empty_infer_type",
        "test_asfreq_MS",
        "test_period_cons_mult",
        "test_delitem_and_pop",
        "_init_dict",
        "_count_level",
        "test_shift_localized",
        "_results",
        "_read_header",
        "scatter",
        "test_fast_unique_multiple_list_gen_sort",
        "itemsize",
        "fields",
        "test_resample_anchored_ticks",
        "test_underlying_data_conversion",
        "test_ops_scalar",
        "numpy_groupby",
        "test_describe_typefiltering_dupcol",
        "test_translate",
        "test_roundtrip_chunksize",
        "test_pipe_tuple",
        "test_describe_empty_int_columns",
        "test_constructor_scalar_inference",
        "test_setattr_column",
        "test_timestamp_constructed_by_date_and_tz_explicit",
        "_set_labels",
        "test_nth_multi_index_as_expected",
        "test_extract_series",
        "test_boxplot_series",
        "test_plot_figsize_and_title",
        "_is_na_compat",
        "test_constructor_default_index",
        "_open_file_binary_write",
        "test_categorical_series_repr_datetime",
        "test_setitem_tuple",
        "f_test",
        "get_corr_func",
        "ole2datetime",
        "test_naneq",
        "test_frame_any_all_group",
        "cumsum",
        "test_slice_consolidate_invalidate_item_cache",
        "test_split_maxsplit",
        "test_index_unique",
        "test_to_datetime_infer_datetime_format_consistent_format",
        "test_coercion_with_setitem_and_series",
        "test_groupby",
        "expanding_count",
        "_data",
        "_add_delta_td",
        "test_start_time",
        "_subplots",
        "test_agg_nested_dicts",
        "test_nanany",
        "test_get_group",
        "test_getitem_listlike",
        "test_annual_upsample_D_e_b",
        "test_unit_consistency",
        "_possibly_convert_objects",
        "_get_freq",
        "single_row_table",
        "pprint_thing",
        "_time_obs_count",
        "_build_table",
        "test_hist_df_with_nonnumerics",
        "test_skip_group_keys",
        "test_groupby_sort",
        "test_constructor_unsortable",
        "__ne__",
        "test_iloc_getitem_dups",
        "is_subperiod",
        "test_getitem_multilevel_index_tuple_unsorted",
        "sort",
        "_vstack",
        "_quote_time_from_root",
        "test_get_level_values_box",
        "test_apply_corner_cases",
        "test_removed_names_produces_warning",
        "test_multitype_list_index_access",
        "test_to_datetime_tz",
        "validate_clip_with_axis",
        "sparse_reindex",
        "date",
        "test_groupby_grouper",
        "day_deltas",
        "test_from_records_decimal",
        "in_qtconsole",
        "_get_layout",
        "test_assignment_fails",
        "_is_url",
        "test_constructor_dict_timedelta_index",
        "diff",
        "test__cython_agg_general",
        "visit_Subscript",
        "test_slice_floats2",
        "test_resample_dup_index",
        "test_result_types",
        "test_at_time",
        "_get_foo",
        "test_align_nocopy",
        "test_series_negate",
        "_tuple_index",
        "_bar",
        "test_get_dummies",
        "test_to_sql_index_label",
        "_is_dtype_compat",
        "test_rhs_alignment",
        "_try_operate",
        "hist",
        "test_getitem_box_float64",
        "test_attribute_access",
        "test_mixed_depth_drop",
        "test_unique",
        "extract_index",
        "test_nanvar_all_finite",
        "test_boxplot_return_type",
        "test_dt_accessor_api_for_categorical",
        "draw",
        "test_inf",
        "test_nan_fullcolumn",
        "has_level_label",
        "_array_values",
        "icol",
        "all_index_generator",
        "test_round",
        "abs",
        "test_groupby_complex",
        "test_setitem_listlike",
        "pivot",
        "_get_fmtlist",
        "test_unicode",
        "check_global_scope",
        "assert_series_equal",
        "_cat_compare_op",
        "rfind",
        "test_panel_setitem",
        "test_reindex_bool_pad",
        "test_conv_annual",
        "_setup_build_doc",
        "_protect_consolidate",
        "reindex_axis",
        "test_read_table_columns",
        "test_duplicate_ix_returns_series",
        "test_to_sql_series",
        "_get_ax",
        "makePeriodIndex",
        "_maybe_convert",
        "_get_unit",
        "test_nsmallest",
        "test_sparse_frame_fillna_limit",
        "str_get",
        "test_fromValue",
        "test_iloc_getitem_slice_dups",
        "test_frame_groupby_columns",
        "test_dict_compat",
        "_convert_to_ndarrays",
        "test_read_write_dta10",
        "test_series_frame_tz_localize",
        "to_time",
        "skip_if_no_ne",
        "_setup_axes",
        "rank",
        "test_nan_to_nat_conversions",
        "_skip_if_windows_python_3",
        "test_performance_warning_for_poor_alignment",
        "test_get_callable_name",
        "to_string",
        "get_base_alias",
        "is_string_like",
        "_validate_indexer",
        "set_table_attributes",
        "_join_unicode",
        "test_business_daily",
        "test_comp_series_period_scalar",
        "test_at_and_iat_set",
        "ewmstd",
        "test_generate_bins",
        "base",
        "_validate_nrows",
        "_wrap_agged_blocks",
        "test_to_datetime_dt64s",
        "_get_fill_indexer",
        "test_loc_coerceion",
        "isscalar",
        "test_check_many_exprs",
        "_is_sqlalchemy_connectable",
        "test_setitem_corner",
        "test_count",
        "deltas_asi8",
        "test_groupby_resample_api",
        "test_kde_kwargs",
        "test_constructor_miscast_na_int_dtype",
        "test_timegrouper_apply_return_type_value",
        "test_arith_flex_panel",
        "check_negate_lt_eq_le",
        "_possibly_convert_platform",
        "__hash__",
        "rollforward",
        "rpartition",
        "dtype_str",
        "test_constructor_iterator_failure",
        "_get_plane_axes_index",
        "test_style_by_column",
        "setUpClass",
        "create_block_manager_from_arrays",
        "str_startswith",
        "assertIsInstance",
        "get_node",
        "test_constructor_name_unhashable",
        "get_group_levels",
        "from_tuples",
        "test_multiindex_slicers_non_unique",
        "test_isnull_numpy_nat",
        "test_constructor_dtype_timedelta64",
        "test_transpose",
        "assert_index_parameters",
        "test_infer_dtype_timedelta",
        "test_greaterEqual",
        "test_resample_fill_missing",
        "test_as_frame_columns",
        "test_slice_can_reorder_not_uniquely_indexed",
        "make_block_same_class",
        "test_equal",
        "_transform",
        "test_at_iat_coercion",
        "convert_from_missing_indexer_tuple",
        "test_append",
        "test_get_group_grouped_by_tuple",
        "test_constant_series",
        "test_is_datetimelike_array_all_nan_nat_like",
        "sample",
        "convert",
        "test_getitem_setitem_ellipsis",
        "test_ix_getitem_iterator",
        "_format_label",
        "test_constructor_mixed_dtypes",
        "test_fancy_getitem",
        "test_frame_series_agg_multiple_levels",
        "metadata",
        "test_type_error_multiindex",
        "_cython_operation",
        "test_select_dtypes_typecodes",
        "rule_code",
        "test_reindex_series_add_nat",
        "_stringify_path",
        "sp_values",
        "get_period_alias",
        "test_isnull_lists",
        "test_quarterly_resampling",
        "_arith_method_FRAME",
        "test_constructor_freq_mult_dti_compat",
        "as_matrix",
        "test_constructor_from_items",
        "test_passed_bar_colors",
        "test_getitem_fancy_xs_check_view",
        "is_any_int_dtype",
        "test_cumcount_groupby_not_col",
        "test_logscales",
        "test_object",
        "_possibly_compare",
        "nanmedian",
        "test_boxplot_colors",
        "should_show_dimensions",
        "test_ctor_dict",
        "_get_window",
        "test_complex_cmp_ops",
        "_get_axis_name",
        "_join_multiline",
        "get_atom_data",
        "_print_as_set",
        "test_fails_on_no_datetime_index",
        "test_groupby_as_index_apply",
        "test_series_invert",
        "_nobs_raw",
        "set_locale",
        "str_join",
        "test_duplicate_dates_indexing",
        "test_floats",
        "assert_contains_all",
        "__enter__",
        "default_fill_value",
        "kde",
        "test_hongkong_tz_convert",
        "test_major_xs_mixed",
        "get_rows",
        "_need_convert",
        "test_custom_business_day_freq",
        "_set_is_copy",
        "_sort_labels",
        "_get_binner_for_grouping",
        "_to_str_columns",
        "test_date_range_localize",
        "_tuplify",
        "test_builtins_apply",
        "_get_series_result_type",
        "select_n_slow",
        "test_aaa_group_order",
        "_try_coerce_args",
        "test_convert_downcast_int64",
        "_simple_pts",
        "test_clip",
        "_set_axis",
        "_to_safe_for_reshape",
        "_is_v1",
        "index",
        "test_comp_series_period_series",
        "test_astype_assignment_with_dups",
        "test_agg_item_by_item_raise_typeerror",
        "test_drop_level",
        "is_null_datelike_scalar",
        "test_to_object_array_width",
        "test_combinePanel",
        "test_resample_irregular_sparse",
        "test_comparison",
        "test_repr_name_coincide",
        "test_to_period_quarterlyish",
        "hist_frame",
        "test_len",
        "test_frame_describe_multikey",
        "_maybe_unpack_cycler",
        "test_add_raises",
        "test_filter_against_workaround",
        "_format_space",
        "_wrap_joined_index",
        "_get_ax_legend",
        "test_constructor_nat",
        "union_many",
        "test_promote_datetime_date",
        "_get_axes",
        "test_get_value",
        "get_indexers_list",
        "test_ambiguous_infer",
        "test_grouping_labels",
        "_end_apply_index",
        "assert_equal",
        "_process_data",
        "test_unstack_multiple_hierarchical",
        "test_coercion_with_setitem_and_dataframe",
        "test_to_period_nofreq",
        "test_getitem_dupe_cols",
        "test_groupby_reindex_inside_function",
        "test_constructor_pass_none",
        "check_funs_ddof",
        "test_compat",
        "test_date_boolean",
        "test_mixed_depth_pop",
        "iteritems",
        "_format_levels",
        "test_resample_empty_dataframe",
        "_combine_rhs",
        "test_value_counts",
        "test_bool_uint",
        "test_sort_values_na_position",
        "test_groupby_level_0_nonmulti",
        "_concat_compat",
        "_merge_blocks",
        "_shallow_copy",
        "labels",
        "is_datetime64_ns_dtype",
        "makeUnicodeIndex",
        "name",
        "asof",
        "test_reindex_level_partial_selection",
        "_aggregate_generic",
        "test_unstack_level_name",
        "putmask",
        "copy",
        "str_findall",
        "test_pickle_v0_15_2",
        "test_asfreq_upsample",
        "resample",
        "test_stack_mixed_dtype",
        "test_iloc_setitem_dups",
        "_sanitize_dates",
        "test_notnull",
        "test_constructor_mix_series_nonseries",
        "test_nan_to_missing_value",
        "test_resample_axis1",
        "test_negate_lt_eq_le",
        "test_numpy_1_7_compat_numeric_methods",
        "boxplot_frame_groupby",
        "test_resample_dtype_preservation",
        "test_unique_ordered",
        "test_to_period_tz_pytz",
        "test_sub_offset",
        "test_resample_ohlc",
        "test_dups_fancy_indexing",
        "test_groupby_nat_exclude",
        "_is_ts_plot",
        "_write_cell",
        "test_get_schema2",
        "test_groupby_whitelist_deprecations",
        "test_convert_infs",
        "test_slicing_directly",
        "_get_levels",
        "describe",
        "_string_data_error",
        "check_pow",
        "test_xs",
        "test_dataframe_insert_column_all_na",
        "get_standard_freq",
        "test_str_cat_raises_intuitive_error",
        "test_constructor_int64_nocopy",
        "insert_statement",
        "test_iloc_getitem_neg_int_can_reach_first_index",
        "_update_inplace",
        "_sanitize_array",
        "is_",
        "test_datetime_with_tz_dtypes",
        "test_set_reset",
        "len",
        "is_datetime64_dtype",
        "nunique",
        "plot_frame",
        "test_align_nested_unary_op",
        "test_title",
        "patch",
        "test_quantile_interpolation",
        "test_tzlocal",
        "array_equivalent",
        "inferred_type",
        "_get_adjustment",
        "_reindex_columns",
        "ensure_compat",
        "test_joins",
        "_adjust_prices",
        "test_constructor_dtype_nocast_view",
        "decons_obs_group_ids",
        "test_line_continuation",
        "test_from_records_bad_index_column",
        "_use_dynamic_x",
        "should_store",
        "test_color_and_style_arguments",
        "_apply_index_days",
        "test_get_axis_number",
        "_engine_builder",
        "test_fancy_index_int_labels_exceptions",
        "set_levels",
        "test_filter",
        "test_weekly_resample_buglet",
        "_convert_to_protection",
        "test_groupby_return_type",
        "_to_recarray",
        "test_sql_open_close",
        "maybe_color_bp",
        "_maybe_null_out",
        "test_partial_set_empty",
        "test_slicing_and_getting_ops",
        "test_anchored_lowercase_buglet",
        "test_none_coercion_loc_and_dataframe",
        "test_is_list_like",
        "data_orientation",
        "test_extract_expand_False",
        "test_normalize",
        "_cython_agg_blocks",
        "test_annual_upsample_M_s_b",
        "test_join_self",
        "test_reindex_multi",
        "test_ix_assign_column_mixed",
        "nblocks",
        "test_apply_issues",
        "_set_default_format",
        "test_simple_in_ops",
        "repeat",
        "_skip_if_scipy_0_17",
        "test_ix_multi_take_multiindex",
        "add_suffix",
        "_maybe_match_name",
        "test_nonexistent_raise_coerce",
        "read_axes",
        "test_categorical_order",
        "view",
        "test_constructor_datelike_coercion",
        "mdiffs",
        "set_kind",
        "test_getitem_datetime",
        "urlopen",
        "test_groupby_2d_malformed",
        "_parser_dispatch",
        "test_hist_single_row",
        "_validate_categories",
        "colorconverter",
        "test_boolean_indexing",
        "test_get_schema",
        "_convert_params",
        "test_join_aware",
        "setitem",
        "_convert_key",
        "get_expected_pow_result",
        "test_getitem_negative_out_of_bounds",
        "test_filter_with_axis_in_groupby",
        "test_concat_categorical",
        "_prep_window",
        "test_create_table",
        "_axify",
        "_get_axis_number",
        "get_chunk",
        "test_setitem_fancy_mixed_2d",
        "test_no_legend",
        "test_basic_frame_alignment",
        "test_constructor_sanitize",
        "test_drop_table",
        "_apply_style_colors",
        "_post_plot_logic_common",
        "test_invalid_flavor",
        "apply_index",
        "test_find_nan",
        "test_getitem_int",
        "assert_almost_equal",
        "reset_testing_mode",
        "test_get_default",
        "_info_axis",
        "test_setitem_float_labels",
        "test_unstack_bug",
        "test_axis_dummies",
        "array_dtype",
        "_combine_series_infer",
        "test_get_plane_axes",
        "_maybe_cache_changed",
        "get_attr",
        "_cached_range",
        "test_multilevel_consolidate",
        "generate_value_label",
        "_check_column_names",
        "_parse_th",
        "test_annual_upsample_B_s_b",
        "test_select",
        "_parse_suffix",
        "test_constructor_with_datetime_tz",
        "get_legacy_offset_name",
        "test_std_var_pass_ddof",
        "test_big_print",
        "_add_numeric_methods",
        "_set_name",
        "test_bar_log_subplots",
        "test_extractall_stringindex",
        "_reorder_by_uniques",
        "_normalize",
        "test_reindex_corner",
        "_coerce_scalar_to_index",
        "test_nargsort",
        "get_ftypes",
        "_convert_to_fill",
        "test_reasonable_keyerror",
        "test_icol",
        "assertNotEquals",
        "round_trip_pickle",
        "test_info",
        "line",
        "needs_filling",
        "_get_na_value",
        "groups",
        "test_drop_nonunique",
        "_set_ticks_props",
        "kind",
        "period_range",
        "test_0d_array",
        "test_series_partial_set_period",
        "set_table",
        "test_apply_reduce_Series",
        "_decide_output_index",
        "test_groupby_whitelist",
        "test_infer_dtype_all_nan_nat_like",
        "recons_labels",
        "test_monthly",
        "test_fillna_nat",
        "first",
        "test_datetime_count",
        "test_coercion_with_loc_setitem",
        "test_period_constructor",
        "__init__",
        "test_constructor_with_index",
        "_do_select_columns",
        "test_lower_int_prec_count",
        "adjoin",
        "get_schema",
        "tz_convert",
        "check_binary_arith_op",
        "get_indexer_for",
        "_cast_to_stata_types",
        "test_value_counts_with_nan",
        "_get_format_datetime64_from_values",
        "test_compare_2100",
        "makeTimeSeries",
        "test_set_index_nan",
        "test_nonnumeric_exclude",
        "test_groupby_levels_and_columns",
        "autocorrelation_plot",
        "test_rename_mi",
        "test_split_noargs",
        "_infer_daily_rule",
        "dt64arr_to_periodarr",
        "_na_ok_dtype",
        "test_series_grouper_noncontig_index",
        "_get_xlim",
        "_box_item_values",
        "test_delete_slice",
        "get_result_as_array",
        "is_time_series",
        "apply_wraps",
        "test_unstack_period_series",
        "expanding_corr",
        "test_nan_string",
        "_underlying_price_from_root",
        "test_categorical_series_repr_timedelta",
        "test_compare_hour01",
        "test_agg_regression1",
        "encode",
        "test_slice",
        "test_index_dupes_contains",
        "_pad_bytes",
        "split",
        "backfill_1d",
        "test_fancy_setitem_int_labels",
        "test_conv_hourly",
        "test_none_comparison",
        "pivot_simple",
        "_consensus_name_attr",
        "_stack_sparse_info",
        "_get_val_at",
        "has_index_names",
        "test_cant_fill_missing_dups",
        "test_duplicated_drop_duplicates_index",
        "test_period_nat_comp",
        "flags",
        "test_apply_concat_preserve_names",
        "_homogenize_dict",
        "_require_min_periods",
        "test_field_access_localize",
        "test_set_minor_major",
        "test_update_from_dict",
        "test_index_to_datetime",
        "test_index_type_coercion",
        "total_seconds",
        "_get_col_names",
        "test_partial_slicing_with_multiindex",
        "test_apply_non_numpy_dtype",
        "check_results",
        "to_native_types",
        "add_nans",
        "test_pipe_failures",
        "test_groupby_function_tuple_1677",
        "test_select_dtypes_not_an_attr_but_still_valid_dtype",
        "assert_range_equal",
        "check_fun",
        "_generate_range",
        "check_more_than_one_expression_raises",
        "__setstate__",
        "rolling_quantile",
        "__rsub__",
        "test_getitem_fancy_labels",
        "_is_monthly",
        "test_invalid_parser",
        "_gca",
        "_convert_can_do_setop",
        "hasnans",
        "test_plot_kwargs",
        "test_integers",
        "barh",
        "_get_index_resolvers",
        "test_align_series",
        "check_simple_cmp_op",
        "is_datetimelike_v_object",
        "to_offset",
        "_compare_frame",
        "test_groupby_as_index_corner",
        "test_unstack_multiple_no_empty_columns",
        "test_transform_doesnt_clobber_ints",
        "_to_dt64",
        "_get_counts",
        "_empty",
        "_is_v2",
        "validate_and_set",
        "_check_box_coord",
        "to_object_block",
        "_cython_agg_general",
        "write_array_empty",
        "ffill",
        "_reset_identity",
        "test_read_table_index_col",
        "_mpl",
        "test_reorder_levels",
        "test_timegrouper_apply_return_type_series",
        "randu_array",
        "test_constructor_categorical",
        "package_check",
        "test_tz_localize_dti",
        "_check",
        "test_fixedtz_topydatetime",
        "_set_endianness",
        "test_second",
        "_apply_window",
        "test_index_convert_to_datetime_array_dateutil",
        "test_is_float",
        "_aggregate_named",
        "reduction",
        "makeFloatSeries",
        "test_construction_from_string",
        "test_median",
        "get_duplicates",
        "query",
        "test_filter_and_transform_with_multiple_non_unique_int_index",
        "test_api_changes_v018",
        "test_resample_reresample",
        "transpose",
        "_rank_raw",
        "network",
        "test_multiindex_assignment",
        "test_reindex_bool",
        "test_maybe_convert_numeric_post_floatify_nan",
        "test_annual_upsample",
        "_calc_betas",
        "pad_2d",
        "test_get_dummies_with_name_dummy",
        "test_get_schema_dtypes",
        "test_panel_dups",
        "test_deprecation_core_common",
        "test_convertable_values",
        "is_floating",
        "test_join_does_not_recur",
        "_convert_string_array",
        "test_monotonic",
        "test_metadata_propagation",
        "set_trace",
        "test_nanargmax",
        "_parse_td",
        "to_csv",
        "test_capitalize",
        "test_compare_invalid",
        "test_read_write_reread_dta15",
        "test_contains",
        "_highlight_handler",
        "engine",
        "set_object_info",
        "test_frame_multi_key_function_list",
        "pandas_dtype",
        "test_annual",
        "test_large_value_conversion",
        "__bytes__",
        "get_indexer",
        "between",
        "_parse_tbody",
        "test_construction_with_ordered",
        "test_chunksize_read",
        "test_assignment_column",
        "test_filter_and_transform_with_non_unique_string_index",
        "insert_data",
        "_block2d_to_blocknd",
        "_get_year_end_last",
        "write_file",
        "test_transform_broadcast",
        "test_loc_getitem_int_slice",
        "_encode",
        "is_hashable",
        "test_groupby_multi_corner",
        "test_resample_anchored_multiday",
        "_maybe_cast_slice_bound",
        "test_constructor_dict_dont_upcast",
        "check_bool_ops_fails_on_scalars",
        "test_to_period_tz_explicit_pytz",
        "get_ftype_counts",
        "duplicated",
        "test_align_frame",
        "test_timestamp_tz_localize",
        "_validate_specification",
        "to_panel",
        "_use_centered_tss",
        "test_lisscalar_pandas_containers",
        "_resid_stats",
        "_validate_time",
        "test_default_type_conversion",
        "ewmcov",
        "expanding_apply",
        "_any_none",
        "_in_chunks",
        "assert_fp_equal",
        "to_json",
        "_astype_nansafe",
        "droplevel",
        "_calc_return_index",
        "__getattribute__",
        "test_resample_base",
        "_set_levels",
        "test_partial_slice",
        "test_missing_value_generator",
        "makeMissingDataframe",
        "blocks",
        "test_constructor_pass_nan_nat",
        "test_to_timestamp_preserve_name",
        "test_multi_line_expression",
        "_clean_na_values",
        "test_ops_series_period",
        "test_get_set_value_no_partial_indexing",
        "detect_colspecs",
        "test_to_timestamp_quarterly_bug",
        "test_agg_must_agg",
        "to_array",
        "test_getitem_int64",
        "_init_data",
        "_fetchall_as_list",
        "clear",
        "_random_state",
        "_validate_parse_dates_arg",
        "_save_header",
        "test_tz_convert_roundtrip",
        "test_applymap_box",
        "test_ix_loc_setitem_consistency",
        "test_ns_index",
        "check_nancorr_nancov_2d",
        "test_date_range_bms_bug",
        "__str__",
        "test_timestamp_repr",
        "getPeriodData",
        "test_at_time_frame",
        "test_pad_fillchar",
        "_read_group",
        "test_cache_updating",
        "c2f",
        "pandas_type",
        "pprint_thing_encoded",
        "get_atom_coltype",
        "test_chunksize_read_type",
        "test_deprecated_match",
        "test_from_records_duplicates",
        "write_sparse_intindex",
        "__setattr__",
        "test_stringified_slice_with_tz",
        "check_extension",
        "_get_result_dim",
        "_get_sqlite_column_type",
        "test_endswith",
        "_unstack_frame",
        "test_series_box_timestamp",
        "test_conv_quarterly",
        "__getslice__",
        "test_cython_agg_nothing_to_agg",
        "combineAdd",
        "test_donot_overwrite_index_name",
        "_chop",
        "_eval_single_bin",
        "writerow",
        "test_is_equal_dtype",
        "_not_none",
        "test_convert_sql_column_bools",
        "_make_labels",
        "strip",
        "test_possibly_convert_objects_copy",
        "test_series_frame_tz_convert",
        "test_cython_transform",
        "_get_time_stamp",
        "test_reindex_pad",
        "is_re_compilable",
        "test_dtypes_are_correct_after_column_slice",
        "is_floating_dtype",
        "test_constructor_list_frames",
        "expiry_dates",
        "test_read_write_reread_dta14",
        "test_pindex_qaccess",
        "test_setitem_chained_setfault",
        "set_info",
        "_has_valid_tuple",
        "maybe_to_datetimelike",
        "test_get_axis",
        "is_lexsorted_for_tuple",
        "test_nonsense_func",
        "dtype",
        "_evaluate_compare",
        "searchsorted",
        "_int64index",
        "test_merge",
        "format_array",
        "supported_extensions",
        "_flex_binary_moment",
        "test_timestamp_nat_mult",
        "test_intercept_builtin_sum",
        "makeCustomIndex",
        "assert_is_valid_plot_return_object",
        "str_translate",
        "open",
        "test_nanprod",
        "check_align_nested_unary_op",
        "reset",
        "test_constructor_mixed",
        "test_loc_setitem_dups",
        "test_hist_secondary_legend",
        "_comp_method_SERIES",
        "test_categorical_index_repr_datetime_ordered",
        "test_kde_colors",
        "test_plot_xy",
        "axes",
        "_get_option_data",
        "_get_column_names_and_types",
        "_format_body",
        "test_agg_multiple_functions_too_many_lambdas",
        "_wrap_applied_output",
        "test_get_numeric_data",
        "test_agg",
        "dtypes",
        "nth",
        "test_date_range_fy5252",
        "test_format_pre_1900_dates",
        "corrwith",
        "test_str",
        "test_getitem_setitem_integers",
        "_offset",
        "assertIs",
        "test_encode_decode_errors",
        "test_timestamp_to_datetime_explicit_dateutil",
        "test_unstack_odd_failure",
        "test_timestamp_equality_different_timezones",
        "test_downcast",
        "test_pipe",
        "_create_from_codes",
        "is_list_like",
        "_get_compressed_labels",
        "test_preserveRefs",
        "_mpl_repr",
        "test_loc_setitem_datetime",
        "_to_m8",
        "test_agg_apply_corner",
        "_any",
        "_get_vlblist",
        "test_sparse_friendly",
        "lookup",
        "_compute",
        "test_categorical_index_repr_datetime",
        "test_pi_sub_period",
        "test_pad_require_monotonicity",
        "test_groupby_categorical_two_columns",
        "_shallow_copy_with_infer",
        "get_value",
        "test_categorical",
        "test_filter_multiple_timestamp",
        "test_to_timestamp_repr_is_code",
        "is_object",
        "nanany",
        "maybe_to_categorical",
        "test_sqlalchemy_type_mapping",
        "test_apply_typecast_fail",
        "test_ohlc_5min",
        "test_frequency_misc",
        "_forecast_vol_raw",
        "test_casemethods",
        "test_1700",
        "test_arith",
        "_coerce_indexer_dtype",
        "test_quantile_interpolation_np_lt_1p9",
        "test_class_ops_pytz",
        "test_getitem_pydatetime_tz",
        "test_read_write_dta11",
        "_should_cache",
        "_invalidate_string_dtypes",
        "handle_failure",
        "test_rename_axis",
        "test_variable_labels",
        "trim_join_unit",
        "parse_tables",
        "test_range_slice",
        "is_period_arraylike",
        "_convert_for_datetime",
        "_convert_to_stop",
        "test_loc_getitem_label_out_of_range",
        "_quarter_months_conform",
        "median",
        "test_loc_empty_list_indexer_is_ok",
        "test_fixed_offset",
        "test_frame_apply_dont_convert_datetime64",
        "_wrap_union_result",
        "test_maybe_match_name",
        "test_frame_setitem_ix",
        "get_console_size",
        "test_groupby_sort_multiindex_series",
        "write_array",
        "test_sharey_and_ax",
        "test_single_variable",
        "test_multi_line_expression_not_inplace",
        "__mul__",
        "test_nanstd_nans",
        "_convert_tolerance",
        "test_apply_no_or_zero_ndim",
        "_selected_obj",
        "test_bool_ops_with_constants",
        "_grouped_plot",
        "noWrap",
        "test_frame_datetime64_duplicated",
        "iterkv",
        "test_resample_single_group",
        "_maybe_to_sparse",
        "check_complex_cmp_op",
        "_groupby_and_merge",
        "applymap",
        "test_reindex_int",
        "get_table",
        "select_dtypes",
        "_construct_axes_dict_from",
        "_new_like",
        "_get_wom_rule",
        "test_getitem_fancy_xs",
        "set_categories",
        "test_astype_to_other",
        "test_read_write_dta12",
        "test_asfreq_mult_pi",
        "_combine_match_columns",
        "_add_delegate_accessors",
        "use_numexpr",
        "_nsorted",
        "test_transactions",
        "test_timestamp_tz_localize_explicit",
        "format",
        "real",
        "_maybe_update_cacher",
        "test_large_mi_dataframe_indexing",
        "_skip_if_windows",
        "_repr_html_",
        "get_loc",
        "get_freq_code",
        "get_group_index",
        "expanding_cov",
        "test_size_compat",
        "test_dont_modify_colors",
        "_arith_method_SERIES",
        "_t_stat_raw",
        "test_reset_index_datetime",
        "test_ndarray_compat_properties",
        "values_cols",
        "validate_window_func",
        "test_catch_infinite_loop",
        "_getitem_tuple",
        "test_rcParams_bar_colors",
        "is_valid",
        "extractall",
        "_set_ticklabels",
        "shape",
        "test_dataframe",
        "test_getitem_iterator",
        "_convert_for_reindex",
        "_guess_datetime_format_for_array",
        "test_to_period_monthish",
        "_left_join_on_index",
        "partition",
        "test_api_compat",
        "test_all_any",
        "test_unexpected_keyword",
        "_check_basic_constructor",
        "_compare",
        "__getstate__",
        "test_int_index",
        "bool",
        "_invalid_indexer",
        "test_numpy_argsort",
        "tostring",
        "test_period_deprecated_freq",
        "homogenize",
        "_total_times",
        "_get_all_tables",
        "_get_data_in_date_range",
        "_get_lines",
        "_can_fast_union",
        "inferred_freq",
        "get_unit_generic",
        "test_groupby_as_index_agg",
        "test_to_datetime_1703",
        "test_constructor_empty",
        "test_binary_ops_docs",
        "test_to_excel",
        "sem",
        "test_datetime_bool",
        "test_getitem_dataframe",
        "test_slice_keep_name",
        "_get_data_label",
        "_window_type",
        "test_mask",
        "test_hist_layout_with_by",
        "test_where_axis",
        "test_boxplot_subplots_return_type",
        "_count_rows",
        "test_sum",
        "test_hexbin_with_c",
        "_make_engine",
        "test_set_axis",
        "_expanding_func",
        "put",
        "test_getitem_ndim2",
        "slice_locs",
        "_df_resid_raw",
        "plot_series",
        "_is_datetime",
        "test_setitem_by_indexer",
        "_stack_arrays",
        "info",
        "cat",
        "cumprod",
        "test_str_label_slicing_with_negative_step",
        "equalContents",
        "test_resample_single_period_timedelta",
        "_constructor_expanddim",
        "_align_series",
        "is_boolean",
        "is_timedelta64_ns_dtype",
        "assertNotIsInstance",
        "test_tz_convert_hour_overflow_dst_timestamps",
        "get_scalar",
        "_valid_sp_values",
        "slabels",
        "test_to_datetime_default",
        "_convert_to_alignment",
        "_get_stacking_id",
        "test_is_period",
        "test_is_recompilable",
        "test_pickle_freq",
        "_bn_ok_dtype",
        "as_sparse_array",
        "test_setitem_iloc",
        "test_basic_setitem_with_labels",
        "test_invert",
        "compress",
        "_maybe_convert_string_to_object",
        "test_align_aware",
        "test_get_reverse_indexer",
        "cartesian_product",
        "test_timedelta",
        "test_cumcount_empty",
        "_concat_indexes",
        "_reindex_output",
        "test_categorical_writing",
        "test_ops_series_timedelta",
        "reset_display_options",
        "test_4d_ndarray_fails",
        "assert_categorical_equal",
        "_reset_cacher",
        "slice_indexer",
        "test_constructor_cast",
        "test_line_colors_and_styles_subplots",
        "test_apply_empty",
        "_do_convert_categoricals",
        "_get_stacked_values",
        "test_align",
        "_possibly_downcast_to_dtype",
        "test_to_period_millisecond",
        "test_concat_datetime_datetime64_frame",
        "str_cat",
        "_factor_indexer",
        "test_bar_edge",
        "_concat_objects",
        "concatenate_block_managers",
        "is_type_compatible",
        "__setitem__",
        "test_hist_bins_legacy",
        "test_quantile_nan",
        "test_setitem_dtypes",
        "test_concat_preserve",
        "test_sub_offset_nat",
        "test_setitem_cast",
        "get_slice_bound",
        "combineMult",
        "_is_cached",
        "_add_accessors",
        "test_coercion_with_loc",
        "test_set_value_with_index_dtype_change",
        "_format_col",
        "assert_attr_equal",
        "_get_xticks",
        "_try_cast",
        "test_dst",
        "_get_with",
        "test_kde_missing_vals",
        "_possibly_cast_item",
        "test_read_sql_delegate",
        "values",
        "test_period_set_index_reindex",
        "_option_frames_from_url",
        "test_resample_group_info",
        "_all_none",
        "test_to_xarray",
        "_get_ordered",
        "test_read_sql_view",
        "_stack_multi_columns",
        "test_round_trip",
        "test_plot_submethod_works",
        "test_slice_keeps_name",
        "_read_sql_iris_parameter",
        "_is_valid_integer",
        "area",
        "test_constructor_list_of_derived_dicts",
        "_indexer_from_factorized",
        "summary_as_matrix",
        "__new__",
        "test_intersection",
        "_params",
        "test_setitem_boolean",
        "test_series_getitem_multiindex",
        "test_multiindex_set_index",
        "_get_object_array",
        "expanding",
        "test_subplots",
        "_is_indexed_like",
        "test_series_box_timedelta",
        "iterpairs",
        "last",
        "test_aggregate_normal",
        "sheet_names",
        "test_where_numeric_with_string",
        "_value_formatter",
        "test_index_namedtuple",
        "test_nanvar",
        "test_isinf_scalar",
        "test_describe_percentiles_unique",
        "test_line_area_nan_series",
        "_take_nd_generic",
        "test_timestamp_constructed_by_date_and_tz",
        "_transform_fast",
        "_convert_range",
        "set_data",
        "test_constructor_maskedarray_nonfloat",
        "forecast_vol",
        "_get_tz",
        "test_categorical_repr_ordered",
        "convert_value",
        "test_guess_datetime_format_nopadding",
        "test_na_roundtrip",
        "test_frame_ctor_datetime64_column",
        "test_result_types2",
        "_getitem_multilevel",
        "test_value_counts_unique_nunique",
        "test_excessively_long_string",
        "apply",
        "validate_metadata",
        "_wrap_output",
        "_expand_user",
        "to_gbq",
        "read_fwf",
        "assertRaises",
        "test_major_xs",
        "test_df_gridspec_patterns",
        "as_datetime",
        "test_read_chunks_columns",
        "test_shift_ndarray",
        "test_series_pad_backfill_limit",
        "assertIn",
        "get_filepath_or_buffer",
        "test_iloc_getitem_multiindex",
        "test_concat_empty_dataframe_dtypes",
        "test_constructor_list_of_dicts",
        "_reindex_axes",
        "_minmax_wrap",
        "_permute",
        "_delta_to_tick",
        "_ensure_term",
        "test_constructor_invalid_quarters",
        "test_indexing_assignment_dict_already_exists",
        "_index_with_as_index",
        "test_prod",
        "test_resample_empty_dtypes",
        "test_non_cython_api",
        "test_isin",
        "test_to_sql_replace",
        "test_resample_anchored_intraday",
        "test_insert_index",
        "test_indexing_over_size_cutoff",
        "test_series_delegations",
        "_scalar_data_error",
        "test_comparisons_coverage",
        "test_bar_linewidth",
        "test_groupby_first_datetime64",
        "get_call_data",
        "test_indexing_mixed_frame_bug",
        "_maybe_downcast",
        "_cleanup",
        "test_indexing_dtypes_on_empty",
        "str_rsplit",
        "test_constructor_dtypes",
        "_reset_group_selection",
        "to_dict",
        "as_unordered",
        "test_api_compat_before_use",
        "test_rank",
        "test_filter_bad_shapes",
        "_handle_shared_axes",
        "prune",
        "_daily_finder",
        "shift",
        "test_string",
        "_freeze",
        "get_to_timestamp_base",
        "test_period_cons_weekly",
        "_get_formatted_values",
        "is_sequence",
        "test_badinput",
        "test_series_group_min_max",
        "_maybe_mask_results",
        "_astype",
        "test_asfreq_corner",
        "test_append_concat",
        "test_float_index_to_mixed",
        "_info_repr",
        "panel_index",
        "test_constructor_column_duplicates",
        "_get_ind",
        "_get_center_of_mass",
        "test_select_dtypes_str_raises",
        "test_iloc_non_unique_indexing",
        "test_cython_fail_agg",
        "test_insert",
        "agg_series",
        "test_constructor_fromarraylike",
        "test_boxplot",
        "rands",
        "test_groupby_categorical_unequal_len",
        "rollback",
        "insert",
        "_validate_color_args",
        "replace_list",
        "test_sparse_series_fillna_limit",
        "_is_nested_tuple_indexer",
        "_slow_pivot",
        "test_groupby_nonobject_dtype",
        "test_slice_replace",
        "test_agg_compat",
        "test_convert_non_hashable",
        "validate_expanding_func",
        "test_getitem_setitem_ix_negative_integers",
        "test_cat_tab_completition",
        "_get_option_frames_from_yahoo",
        "test_datetime_date",
        "test_union_bug_1730",
        "test_no_mutable_funcs",
        "fill_value",
        "test_loc_getitem_label_slice",
        "get_forward_data",
        "_combine_const",
        "test_resample_upsampling_picked_but_not_correct",
        "__exit__",
        "_from_arrays",
        "test_getitem_setitem_non_ix_labels",
        "validate_data_columns",
        "test_binary_arith_ops",
        "test_class_ops_dateutil",
        "test_maybe_booleans_to_slice",
        "test_operators",
        "test_iget_value",
        "test_repr_nat",
        "test_panel_aggregation",
        "test_fromDict",
        "_naive_in_cache_range",
        "_pat_wrapper",
        "_utc",
        "test_timestamp_compare_scalars",
        "test_tzaware_offset",
        "test_random_state",
        "test_groupby_as_index_series_scalar",
        "_simple_new",
        "next",
        "_trim_front",
        "_iter_data",
        "_join_level",
        "_get_consensus_name",
        "test_monthly_resample_error",
        "__xor__",
        "test_index_str_accessor_visibility",
        "read_index_legacy",
        "test_agg_api",
        "test_slice_with_negative_step",
        "test_datetime_categorical_comparison",
        "to_coo",
        "_get_simple_index",
        "test_any_none",
        "is_extension_type",
        "test_irregular_datetime",
        "make_axis_dummies",
        "_yahoo_url_from_expiry",
        "str_strip",
        "makeIntIndex",
        "test_xs_level_multiple",
        "_combinePanel",
        "combine",
        "test_string_na_nat_conversion",
        "_post_plot_logic",
        "test_to_html_timestamp",
        "test_to_csv_numpy_16_bug",
        "tables",
        "__call__",
        "test_from_dict_mixed_orient",
        "_validate_for_numeric_unaryop",
        "to_numeric",
        "test_dictify",
        "test_assignment_to_dataframe",
        "test_with_local_timezone_pytz",
        "get_storer",
        "test_cant_compare_tz_naive_w_aware",
        "test_nanvar_nans",
        "_get_group_index_sorter",
        "test_constructor_complex_dtypes",
        "_tidy_repr",
        "test_stack_unstack_multiple",
        "_make_na_block",
        "test_bad_resolver_raises",
        "_get_frame_result_type",
        "test_negone_ordinals",
        "_bool_and_frame",
        "test_between_time_frame",
        "_get_plane_axes",
        "test_reindex_with_datetimes",
        "assertNotAlmostEquals",
        "test_range_in_series_indexing",
        "_update_stacker",
        "_infer_tzinfo",
        "get_offset_name",
        "test_datetimeindex_accessors",
        "_apply_if_callable",
        "_set_no_thousands_columns",
        "test_invalid_plot_data",
        "_get_info_slice",
        "test_partial_setting_with_datetimelike_dtype",
        "outer",
        "_convert_data",
        "_asof_key",
        "_get_valid_mysql_name",
        "str_pad",
        "test_groupby_datetime64_32_bit",
        "test_categorical_index_repr_ordered",
        "test_apply_raw",
        "test_slice_quarter",
        "test_apply_mixed_datetimelike",
        "test_nanmax",
        "get_near_stock_price",
        "_check_blosc",
        "format_type",
        "test_datetimeindex_union_join_empty",
        "str_extractall",
        "_determine_offset",
        "test_resample_not_monotonic",
        "_complib",
        "_ensure_datetime64",
        "test_slice_year",
        "test_center_ljust_rjust_fillchar",
        "_get_seek_variable_labels",
        "test_read_empty_dta",
        "test_fails_and",
        "_factorize_keys",
        "_set_group_selection",
        "test_microsecondly",
        "test_nonunique_assignment_1750",
        "is_re",
        "test_constructor_list_of_lists",
        "test_filter_out_no_groups",
        "test_all_not_none",
        "test_pct_change",
        "_in_range",
        "skew",
        "test_xs_partial",
        "aggregate",
        "test_nanosecondly",
        "test_write_row_by_row",
        "__get__",
        "maybe_convert_ix",
        "test_list_slice",
        "_init_matrix",
        "test_where_inplace",
        "idxmax",
        "__add__",
        "test_asfreq_resample_set_correct_freq",
        "density",
        "test_nan_handling",
        "_cum_xx",
        "curpath",
        "_fast_count_smallints",
        "reshape_nd",
        "test_resample_tz_localized",
        "test_setting_with_copy_bug",
        "test_with_tz_ambiguous_times",
        "test_to_datetime_tz_pytz",
        "test_parse_nanoseconds_with_formula",
        "test_sort",
        "_join_i8_wrapper",
        "test_union_bug_4564",
        "bar",
        "test_categorical_repr_datetime_ordered",
        "test_to_datetime_infer_datetime_format_inconsistent_format",
        "test_stack",
        "_mklbl",
        "test_apply_multiindex_fail",
        "get_str",
        "test_constructor_Series_differently_indexed",
        "test_groupby_datetime_categorical",
        "test_groupby_transform",
        "_convert_list_indexer",
        "test_ops",
        "test_timedelta_push_over_dst_boundary",
        "test_constructor_set",
        "is_sparse",
        "xs",
        "test_constructor_for_list_with_dtypes",
        "_r2_raw",
        "test_iloc_getitem_doc_issue",
        "get_new_index",
        "create",
        "nrows_expected",
        "test_duplicate_groupby_issues",
        "_parse_raw_data",
        "test_multiindex_columns_empty_level",
        "test_between_time",
        "test_execute_closed_connection",
        "test_slicing",
        "test_float_index_non_scalar_assignment",
        "test_minor_xs_mixed",
        "maybe_convert_indices",
        "assert_produces_warning",
        "_length_check",
        "test_groupby_level_with_nas",
        "_index_name",
        "test_resample_with_timedeltas",
        "test_infer_dtype_bytes",
        "test_strip_lstrip_rstrip_mixed",
        "test_reindex_preserve_levels",
        "test_disallowed_nodes",
        "imag",
        "test_to_datetime_format_YYYYMMDD",
        "test_to_datetime_utc_is_true",
        "_binify",
        "test_to_period",
        "test_timedeltas",
        "randbool",
        "align",
        "test_constructor_U",
        "test_nanops",
        "test_timestamp_to_datetime_explicit_pytz",
        "interpolate",
        "test_does_not_convert_mixed_integer",
        "_convert_to_list_like",
        "test_getitem_fancy_2d",
        "_view_wrapper",
        "test_iloc_getitem_bool",
        "test_is_named_tuple",
        "test_pi_ops",
        "validate_args_and_kwargs",
        "test_setitem_fancy_boolean",
        "test_add_pdnat",
        "setup_connect",
        "test_basic_regression",
        "test_series_ctor_datetime64",
        "test_type_promote_putmask",
        "test_reindex_fill_value",
        "test_bar_subplots_center",
        "test_wrap_aggregated_output_multindex",
        "test_from_records_dictlike",
        "_transform_item_by_item",
        "test_constructor_maskedarray",
        "makeTimeDataFrame",
        "_fletcher32",
        "test_schema",
        "_format_is_iso",
        "center",
        "test_to_datetime_format_microsecond",
        "test_getitem_dups_with_missing",
        "test_groupby_sort_multi",
        "equals",
        "test_cumcount_dupe_index",
        "test_apply_ignore_failures",
        "rename",
        "_convert_scalar_indexer",
        "_read_new_header",
        "test_time_series_plot_color_kwargs",
        "test_get_level_number_out_of_bounds",
        "test_panel_groupby",
        "nseries",
        "test_groupby_groups_datetimeindex",
        "test_combinePanel4d",
        "test_setitem_list_of_tuples",
        "test_nth_multi_index",
        "test_combineFrame",
        "_convert_frames",
        "test_multilevel_preserve_name",
        "quantile",
        "is_complex_dtype",
        "_convert_to_array",
        "test_groupby_multiple_columns",
        "test_get_duplicates",
        "test_fails_not",
        "test_datetimeindex",
        "_lexsort_indexer",
        "test_custom_grouper",
        "test_describe_objects",
        "test_is_lexsorted",
        "test_categorical_series_repr_period",
        "test_setitem_fancy_1d",
        "test_constructor_dtype_list_data",
        "test_axis",
        "test_split_to_dataframe_expand",
        "test_group_ohlc",
        "test_utc_to_local_no_modify",
        "test_not_subperiod",
        "_searchsorted_monotonic",
        "get_writer",
        "_iterate_column_groupbys",
        "test_allow_cmap",
        "test_multiindex_perf_warn",
        "test_properties_annually",
        "value",
        "holds_integer",
        "test_hist_df",
        "_tables",
        "_nan_idxs",
        "str_decode",
        "test_nonzero_single_element",
        "_map",
        "_get_values",
        "_arrays_to_mgr",
        "test_write_preserves_original",
        "test_period_cons_nat",
        "test_big_dates",
        "ignore_sparse_panel_future_warning",
        "make_block_scalar",
        "test_timezone_info",
        "_new_DatetimeIndex",
        "test_dateutil_tzoffset_support",
        "_repr_footer",
        "items",
        "test_datetimeindex_repr_short",
        "test_query_by_select_obj",
        "infer_axes",
        "_try_parse_dates",
        "test_single_element_ix_dont_upcast",
        "test_iloc_empty_list_indexer_is_ok",
        "_set_grouper",
        "test_remove_categories",
        "_assemble_from_unit_mappings",
        "test_append_aware_naive",
        "_concat_date_cols",
        "test_resample_basic_from_daily",
        "test_hist_kde_color",
        "_create_missing_idx",
        "test_groupby_sort_categorical_datetimelike",
        "set_properties",
        "_value_counts_arraylike",
        "_set_axis_name",
        "min",
        "qcut",
        "_flex_comp_method_FRAME",
        "test_asfreq_mult",
        "test_extractall_single_group",
        "_getbool_axis",
        "get_base_missing_value",
        "test_downsample_but_actually_upsampling",
        "_load_test3_data",
        "nchunks",
        "test_series_groupby_plotting_nominally_works",
        "validate_cum_func_with_skipna",
        "_sub_period",
        "test_frame_to_period",
        "_to_ordinalf",
        "test_tab_completion",
        "test_constructor_with_nas",
        "test_binary_functions",
        "is_object_dtype",
        "_set_noconvert_columns",
        "equal_levels",
        "_write_body",
        "test_append_join_nondatetimeindex",
        "_ensure_frozen",
        "test_pandas_dtype",
        "test_numpy_informed",
        "_delegate_method",
        "test_constructor_cast_failure",
        "test_transform",
        "_skip_if_has_locale",
        "test_last_subset",
        "get_target_month_end",
        "test_index_astype_asobject_tzinfos",
        "test_constructor_lists_to_object_dtype",
        "test_smaller_Raises_Type",
        "test_dt_accessor_no_new_attributes",
        "_std_err_raw",
        "test_mut_exclusive",
        "length_of_indexer",
        "_save_chunk",
        "test_is_",
        "test_resample_median_bug_1688",
        "highlight_min",
        "mgr_locs",
        "test_cython_agg_frame_columns",
        "_assure_grouper",
        "value_counts",
        "test_loc_to_fail",
        "box",
        "test_to_excel_xlsxwriter",
        "test_lhs_expression_subscript",
        "test_read_dta1",
        "_maybe_box_datetimelike",
        "test_partial_slice_second_precision",
        "is_bool_indexer",
        "test_scientific_no_exponent",
        "test_read_dta4",
        "test_constructor_Series_named",
        "check_series_frame_commutativity",
        "test_mixin",
        "_join_non_unique",
        "test_select_dtypes_empty",
        "test_sem",
        "get_splitter",
        "internal_values",
        "test_no_mutate_but_looks_like",
        "test_add_categories",
        "test_dti_to_period",
        "_apply_broadcast",
        "_dtype_to_default_stata_fmt",
        "_parse_tables",
        "update",
        "tz",
        "test_ensure_int32",
        "_get_categories",
        "test_count_level_series",
        "make_sparse",
        "test_detect_chained_assignment_warnings",
        "test_multifunc_select_col_integer_cols",
        "test_abs",
        "bootstrap_plot",
        "_compare_constructor",
        "readline",
        "_apply_standard",
        "test_nange",
        "test_unstack",
        "_parse_url",
        "visit_UnaryOp",
        "_get_na_rep",
        "test_dup_datetime_index_plot",
        "_check_annual_upsample_cases",
        "test_schema_support",
        "_get_label",
        "test_setops_preserve_freq",
        "_get_comb_axis",
        "test_series_repr_nat",
        "is_in_table",
        "test_to_datetime_array_of_dt64s",
        "_rolling_ols_call",
        "_create_storer",
        "_handle_usecols",
        "backfill_2d",
        "is_datetime",
        "_get_index_columns",
        "test_center_ljust_rjust",
        "_timezone",
        "test_frame_pad_backfill_limit",
        "test_get_period_field_array_raises_on_out_of_range",
        "test_standard_colors_all",
        "select_n",
        "_is_convertible_to_index",
        "_null_fill_value",
        "_zsqrt",
        "test_setitem_ndarray",
        "test_to_panel_na_handling",
        "test_nlargest",
        "_ensure_encoding",
        "lreshape",
        "test_chained_getitem_with_lists",
        "_validate_dtype",
        "test_warning_case_insensitive_table_name",
        "test_icol_sparse_propegate_fill_value",
        "get_group",
        "test_memory_leak",
        "_null_terminate",
        "test_duplicated_with_nas",
        "test_datetime_with_timezone",
        "test_000constructor_resolution",
        "_should_parse",
        "_get_index_name",
        "is_sorted",
        "test_setitem_cache_updating",
        "test_from_records_to_records",
        "_generate_marginal_results",
        "validate_take_with_convert",
        "test_unicode_repr_issues",
        "makePeriodSeries",
        "_combineFrame",
        "_add_margins",
        "_check_freq",
        "test_resample_loffset_count",
        "test_indexing_unordered",
        "_maybe_dedup_names",
        "test_creation_astype",
        "test_tslib_tz_convert_trans_pos_plus_1__bug",
        "_get_converter",
        "setup_data",
        "_clean_options",
        "as_timestamp",
        "test_astype_categorical",
        "to_clipboard",
        "_set_items",
        "_dt_to_float_ordinal",
        "test_categorical_series_repr_timedelta_ordered",
        "nbytes",
        "_maybe_add_count",
        "test_getitem_empty_frame_with_boolean",
        "melt",
        "test_combine_series",
        "test_nanmean_overflow",
        "test_sparse_frame_pad_backfill_limit",
        "get_data_fred",
        "parallel_coordinates",
        "clean_interp_method",
        "test_multiindex_na_repr",
        "test_ix_align",
        "str_extract",
        "test_setitem_callable",
        "_pprint_dict",
        "test_constructor_tuple_of_tuples",
        "set_metadata",
        "test_consistency_with_window",
        "test_pi_nat_comp",
        "major_xs",
        "std",
        "test_stack_multiple_bug",
        "test_tz_aware_asfreq",
        "get_data_yahoo",
        "test_string_no_dates",
        "test_groupby_non_arithmetic_agg_types",
        "names",
        "test_comp_series_period_object",
        "test_frame_invert",
        "test_how_lambda_functions",
        "not_hashable",
        "test_localize_utc_conversion_explicit",
        "test_resample_to_timestamps",
        "test_combine_first",
        "_get_join_indexers",
        "_update_ctx",
        "_can_reindex",
        "_make_concat_multiindex",
        "test_guess_datetime_format_with_dayfirst",
        "kurt",
        "max",
        "test_parser",
        "assert_isinstance",
        "test_constructor_datetime64_tzformat",
        "generate_bins_generic",
        "test_getitem_tuple_plus_slice",
        "test_isnumeric",
        "test_grouping_string_repr",
        "test_groupby_timedelta_cython_count",
        "check_chained_cmp_op",
        "test_constructor_simple_new",
        "_ensure_numeric",
        "_wrap_aggregated_output",
        "__copy__",
        "test_float_index_at_iat",
        "test_nanargmin",
        "_nanminmax",
        "test_int_series_slicing",
        "test_constructor_with_datetimes",
        "test_frame_group_ops",
        "test_from_records_lists_generator",
        "_save",
        "freqstr",
        "test_frame_add_datetime64_col_other_units",
        "_get_exec",
        "test_constructor_error_msgs",
        "_from_nested_dict",
        "test_resample_panel",
        "test_setitem_fancy_2d",
        "check_nancomp",
        "_asarray_tuplesafe",
        "_get_fill_value",
        "_get_values_tuple",
        "test_setitem_single_column_mixed",
        "_maybe_update_attributes",
        "test_guess_datetime_format_for_array",
        "test_slice_float_get_set",
        "_ts_plot",
        "wrap",
        "rename_axis",
        "test_xticklabels",
        "nlevels",
        "test_frame_dict_constructor_empty_series",
        "is_label_like",
        "_attempt_YYYYMMDD",
        "_preprocess_slice_or_indexer",
        "test_extract_optional_groups",
        "test_update_nooverwrite",
        "test_df_arithmetic_subexpression",
        "_convert_freq",
        "_assert_take_fillable",
        "ydiffs",
        "read",
        "test_basic_series_frame_alignment",
        "_initialize_stacker",
        "test_iter_object_try_string",
        "test_getitem_callable",
        "style",
        "_coerce_scalar_to_timedelta_type",
        "test_groupby_bounds_check",
        "_get_labels",
        "test_groupby_non_arithmetic_agg_intlike_precision",
        "export",
        "assertAlmostEquals",
        "_make_cum_function",
        "test_getattr",
        "test_constructor_dtype_datetime64",
        "test_where_dups",
        "test_dtype",
        "mean",
        "write_data_chunk",
        "_maybe_arg_null_out",
        "test_describe_typefiltering",
        "test_iter_empty",
        "test_minute",
        "test_sub",
        "test_coerce_deprecation",
        "test_execute",
        "to_datetime",
        "test_grouping_error_on_multidim_input",
        "_check_ax_scales",
        "between_time",
        "test_resample_categorical_data_with_timedeltaindex",
        "_get_formatted_column_labels",
        "test_asfreq_normalize",
        "floor",
        "_make_iris_table_metadata",
        "test_series_interpolate_method_values",
        "concatenate_join_units",
        "test_take_dont_lose_meta",
        "validate_multiindex",
        "test_constructor_cant_cast_datetime64",
        "_onOffset",
        "test_nanvar_axis",
        "test_to_sql_type_mapping",
        "test_groupby_head_tail",
        "_expiry_to_string",
        "test_frame_getitem_multicolumn_empty_level",
        "tshift",
        "test_asfreq_nat",
        "test_remove_unused_categories",
        "is_full",
        "test_date_range_businesshour",
        "visit_Attribute",
        "unique",
        "test_append_index",
        "_is_annual",
        "test_to_datetime_format_time",
        "ngroups",
        "test_constructor_empty_list",
        "test_frame_index_to_string",
        "_single_replace",
        "test_bar_log",
        "get_reso_from_freq",
        "_remove_whitespace",
        "test_pop",
        "test_iloc_exceeds_bounds",
        "test_upsample_daily_business_daily",
        "test_series_partial_set",
        "_should_validate_iterable",
        "test_to_datetime_list_of_integers",
        "_prev_opening_time",
        "_is_numeric_mixed_type",
        "test_iloc_getitem_panel",
        "use",
        "test_series_fast_transform_date",
        "test_df_grid_settings",
        "test_filter_non_bool_raises",
        "_quarterly_finder",
        "_repr_categories_info",
        "_extend_blocks",
        "_get_dtype",
        "test_nanne",
        "_retry_read_url",
        "test_hist_layout",
        "test_resmaple_dst_anchor",
        "test_shallow_copying",
        "test_to_datetime_format",
        "test_quarterly_upsample",
        "test_between",
        "write_multi_index",
        "_get_business_hours_by_sec",
        "test_ts_line_lim",
        "get_op",
        "test_hist_colors",
        "test_getitem_out_of_bounds",
        "_valid_locales",
        "test_maybe_convert_scalar",
        "_skip_if_no_scipy_gaussian_kde",
        "test_tz_localize",
        "_getitem_array",
        "dtype_for",
        "test_std",
        "test_tz_localize_empty_series",
        "test_attr_wrapper",
        "test_apply_dict",
        "test_interleave",
        "add_methods",
        "rolling_apply",
        "test_create_with_fixed_tz",
        "_field_accessor",
        "test_min",
        "_failover_to_python",
        "expanding_quantile",
        "symmetric_difference",
        "_convert_object_array",
        "str_endswith",
        "evaluate",
        "create_block_manager_from_blocks",
        "_rolling_func",
        "test_groupby_one_row",
        "is_int_or_datetime_dtype",
        "_process_concat_data",
        "_consolidate",
        "test_constructor_list_of_series",
        "_concat_sparse",
        "_consolidate_check",
        "test_apply_with_mixed_dtype",
        "_check_arg_length",
        "__getitem__",
        "getCols",
        "test_resample_daily_anchored",
        "_get_callable_name",
        "test_constructor_use_start_freq",
        "test_range_slice_outofbounds",
        "_dl_mult_symbols",
        "to_msgpack",
        "test_setitem_frame",
        "set_timezone",
        "test_resample_weekly_bug_1726",
        "_filters",
        "_interleaved_dtype",
        "_possibly_cast_to_datetime",
        "_getitem_frame",
        "test_default_left_closed_label",
        "test_argmin_argmax",
        "test_chained_cmp_op",
        "_init_mgr",
        "use_inf_as_null_cb",
        "ftypes",
        "test_floor_division",
        "get_freq",
        "test_deprecated_labels",
        "idxmin",
        "test_non_monotonic_reindex_methods",
        "test_setitem_frame_align",
        "_filter_data",
        "should_warn",
        "is_categorical_dtype",
        "test_alignment",
        "_skip_if_no_lzma",
        "test_groupby_groups_datetimeindex_tz",
        "strides",
        "test_constructor_dict_datetime64_index",
        "test_from_records_len0_with_columns",
        "test_series_functions_no_warnings",
        "_possibly_promote",
        "test_ix_get_set_consistency",
        "test_series_ctor_plus_datetimeindex",
        "_from_arraylike",
        "test_mask_callable",
        "test_groupby_cumprod",
        "test_dti_constructor_preserve_dti_freq",
        "test_agg_python_multiindex",
        "nanos",
        "_get_freq_str",
        "validate_rolling_func",
        "UnicodeWriter",
        "test_option_mpl_style",
        "test_nancorr",
        "value_labels",
        "test_resample_how_method",
        "nanprod",
        "test_timestamp_equality",
        "test_from_records_with_index_data",
        "create_dt64_based_index",
        "test_notnull_dtype",
        "test_convert_sql_column_unicode",
        "rep_stamp",
        "_series_and_frame",
        "test_astype_str",
        "test_truncate_fillna_bug",
        "test_all_any_unhandled",
        "_create_table_setup",
        "_can_hold_na",
        "test_iterpairs",
        "test_constructor_from_index_series_datetimetz",
        "test_shallow_copy_empty",
        "__or__",
        "_filter_usecols",
        "test_extract_expand_None",
        "_get_options_with_defaults",
        "is_normalized",
        "makeStringSeries",
        "_add_logical_methods_disabled",
        "index_cols",
        "_set_item",
        "all_timeseries_index_generator",
        "set_attrs",
        "_convert_slice_indexer",
        "_extract_axes_for_slice",
        "test_index_cast_datetime64_other_units",
        "makePeriodPanel",
        "test_plot_scatter_with_c",
        "test_pi_pi_comp",
        "_sanitize_index",
        "rindex",
        "test_day_not_in_month_coerce",
        "test_constructor_dict",
        "format_query",
        "_load_raw_sql",
        "test_apply_convert_objects",
        "is_datetimetz",
        "test_to_datetime_with_non_exact",
        "set_atom_categorical",
        "test_xs_level0",
        "test_repr",
        "test_smallerEqual_Raises_Type",
        "test_resample_frame_basic",
        "_box_values",
        "_indicator_post_merge",
        "UnicodeReader",
        "_na_value",
        "test_groupby_with_small_elem",
        "test_nth",
        "_to_sql_replace",
        "_ensure_valid_index",
        "union",
        "is_superperiod",
        "_concat_sparse_indexes",
        "_get_index_factory",
        "is_categorical_astype",
        "get_numeric_data",
        "_rmse_raw",
        "_text_getter",
        "assert_index_equal",
        "test_categorical_index_preserver",
        "_try_coerce_result",
        "get_formatted_cells",
        "test_frame_datetime64_mixed_index_ctor_1681",
        "test_from_records_with_datetimes",
        "test_is_dict_like",
        "is_named_tuple",
        "_repr_categories",
        "test_filter_out_all_groups_in_df",
        "_get_setitem_indexer",
        "test_per_axis_per_level_getitem",
        "test_compare_2000",
        "test_bar_barwidth",
        "_max_groupsize",
        "can_connect",
        "_indicator_pre_merge",
        "test_truncate",
        "test_cant_compare_tz_naive_w_aware_explicit_pytz",
        "test_string_slice_out_of_bounds",
        "test_irow",
        "test_between_time_formats",
        "test_constructor_dtype",
        "remove",
        "_unpickle_frame_compat",
        "__and__",
        "test_maybe_convert_numeric_infinities",
        "test_resample_same_freq",
        "_last_compat",
        "test_getitem_boolean_casting",
        "_aggregate_multiple_funcs",
        "test_data_method",
        "get_locales",
        "test_invalid_engine",
        "test_read_sql_named_parameter",
        "test_nangt",
        "is_datetime64tz_dtype",
        "_sanitize_values",
        "test_nested_dict_frame_constructor",
        "test_non_reducing_slice",
        "test_numpy_repeat",
        "test_getitem_ix_boolean_duplicates_multiple",
        "test_multiples",
        "_homogenize",
        "translate",
        "_ensure_index",
        "bfill",
        "convert_values",
        "test_consolidate",
        "test_repr_empty",
        "test_read_chunks_115",
        "group_index",
        "test_constructor_name_hashable",
        "test_tz_convert_hour_overflow_dst",
        "_get_subplots",
        "_roundtrip",
        "test_bar_colors",
        "_round",
        "format_percentiles",
        "x",
        "is_consolidated",
        "_check_setitem_copy",
        "get_store",
        "test_multiindex_label_slicing_with_negative_step",
        "is_integer_dtype",
        "test_bar_ignore_index",
        "_consolidate_inplace",
        "_aggregate",
        "_coerce_to_dtype",
        "test_int64_overflow",
        "test_extract_expand_unspecified",
        "_is_multiple",
        "test_first_last_nth",
        "test_pad",
        "as_blocks",
        "test_bar_stacked_center",
        "test_basic_getitem_setitem_corner",
        "get_compressed_ids",
        "_is_s3_url",
        "test_intersection_bug_1708",
        "_monthly_finder",
        "test_describe_percentiles_equivalence",
        "to_julian_date",
        "asobject",
        "test_from_frame_level1_unsorted",
        "wide_to_long",
        "test_transform_mixed_type",
        "test_with_na",
        "test_plot_fails_with_dupe_color_and_style",
        "read_excel",
        "test_where_datetime",
        "test_slicing_maintains_type",
        "test_decons",
        "parse_time_string",
        "_is_cython_func",
        "_multi_take_opportunity",
        "__abs__",
        "test_subplots_layout",
        "mode",
        "set_locs",
        "test_date_range_ambiguous_arguments",
        "_combine_match_index",
        "default_units",
        "_convert_to_color",
        "test_constructor_list_of_tuples",
        "test_is_timedelta",
        "test_groupby_level_apply",
        "test_conform",
        "test_timestamp_tz_convert",
        "test_split_with_name",
        "test_int_indexing",
        "_safe_update",
        "_set_foo",
        "_insert_inaxis_grouper_inplace",
        "test_nanle",
        "skip_if_no_package_deco",
        "_concat_datetime",
        "scatter_plot",
        "test_agg_grouping_is_list_tuple",
        "_prepare_categoricals",
        "_pickle_array",
        "test_series_describe_single",
        "var_beta",
        "backfill",
        "sort_idx",
        "_setitem_slice",
        "validate_names",
        "test_argsort",
        "test_getitem_partial_column_select",
        "_wrap_result",
        "str_get_dummies",
        "_flatten",
        "test_upsample_apply_functions",
        "_pprint_seq",
        "_resolve_name",
        "_read_sql_iris",
        "test_to_string",
        "test_getitem_fancy_boolean",
        "test_duplicate_mi",
        "test_numpy_transpose",
        "_align_method_FRAME",
        "_is_quarterly",
        "test_frame_pos",
        "_get_value",
        "test_constructor_with_generator",
        "test_getitem_ix_float_duplicates",
        "_cum_xy",
        "_block",
        "check_inf",
        "test_to_sql_panel",
        "test_properties_nat",
        "assertIsNotNone",
        "test_resample_count",
        "test_anchor_week_end_time",
        "test_categorical_repr_datetime",
        "test_na_actions",
        "test_types",
        "components",
        "test_annual_upsample_M_s_f",
        "test_ground_truth",
        "test_constructor_fails_with_not_3d_input",
        "_maybe_convert_scalar",
        "clean_fill_method",
        "connect",
        "indexer_between_time",
        "ensure_clean",
        "check_basic_frame_alignment",
        "p_value",
        "test_constructor_dtype_copy",
        "mod",
        "test_cumsum",
        "_join_monotonic",
        "_incompat_bottleneck_version",
        "assertEquals",
        "test_update_filtered",
        "test_getitem_ambiguous_keyerror",
        "_get_varlist",
        "test_negative_ordinals",
        "deltas",
        "reset_index",
        "df_resid",
        "test_groupby_count_dateparseerror",
        "test_slice_with_zero_step_raises",
        "_iterable_not_string",
        "test_simple_bool_ops",
        "test_reflected_comparison_with_scalars",
        "test_sort_values",
        "_check_roundtrip",
        "get_locs",
        "_view_if_needed",
        "test_quantile_multi",
        "_get_join_info",
        "test_properties_weekly_legacy",
        "split_ranges",
        "test_safe_names_warning",
        "test_to_datetime_format_integer",
        "test_partial_ix_missing",
        "test_print",
        "test_read_procedure",
        "test_cython_agg_nothing_to_agg_with_dates",
        "test_categorical_index_repr",
        "chop_data",
        "test_from_records_sequencelike",
        "_unconvert_index_legacy",
        "test_describe_empty",
        "test_plain_axes",
        "test_cumcount",
        "test_compare_hour13",
        "test_subplots_dup_columns",
        "test_wrap_agg_out",
        "test_sub_of_datetime_from_TimeSeries",
        "_expand_axes",
        "test_tz_string",
        "test_find",
        "test_partial_set",
        "test_factorize",
        "test_setitem_ndarray_1d",
        "_get_prefix",
        "test_coercion_with_setitem",
        "validate_argmin_with_skipna",
        "test_errorbar_with_integer_column_names",
        "test_string_slice_get_syntax",
        "test_equal_join_ensure_utc",
        "ndim",
        "test_convert_tz_aware_datetime_datetime",
        "delete",
        "test_ffill_bfill",
        "test_mixed_depth_get",
        "result_index",
        "_stata_elapsed_date_to_datetime_vec",
        "test_groupby_categorical_index",
        "_can_hold_element",
        "test_is_sequence",
        "test_series_groupby_value_counts",
        "test_constructor_with_embedded_frames",
        "test_none_coercion_mixed_dtypes",
        "test_getitem_setitem_boolean_misaligned",
        "_add_numeric_methods_disabled",
        "set_index",
        "test_numpy_reshape",
        "test_to_datetime_iso8601_noleading_0s",
        "keys",
        "get_bool_data",
        "add_nans_panel4d",
        "test_rsplit_to_multiindex_expand",
        "test_dtypes_gh8722",
        "test_ix_getitem",
        "handle_success",
        "test_constructor_rec",
        "_register_xlsx",
        "test_series_partial_set_datetime",
        "test_convert_array_of_periods",
        "test_frame_reset_index",
        "infer_freq",
        "test_plot",
        "test_constructor_cant_cast_period",
        "_convert_index",
        "_get_skiprows",
        "test_groupby_name_propagation",
        "test_convert_sql_column_floats",
        "test_double_precision",
        "type",
        "test_a_deprecation",
        "test_groupby_aggregation_mixed_dtype",
        "_is_label_like",
        "test_to_object_array_tuples",
        "is_all_dates",
        "_decode",
        "_construct",
        "test_secondly",
        "_generate_regular_range",
        "test_sorting_repr_8017",
        "_possibly_castable",
        "read_block_index",
        "_compress_group_index",
        "test_strip_lstrip_rstrip",
        "test_count_cross_type",
        "visit_Assign",
        "__radd__",
        "_interleave",
        "slice_replace",
        "_get_take_nd_function",
        "test_compare_1700",
        "test_categorical_series_repr_period_ordered",
        "_possibly_infer_to_datetimelike",
        "__repr__",
        "test_equality_invalid",
        "__array_finalize__",
        "_get_level_indexer",
        "test_constructor_dtype_nocast",
        "_repr_attrs",
        "_nobs",
        "test_kde_colors_and_styles_subplots",
        "_ensure_datetimelike_to_i8",
        "test_split_compat",
        "close",
        "test_astype_assignment",
        "test_intercept_astype_object",
        "to_pickle",
        "_maybe_numeric_slice",
        "summary",
        "test_categorical_index_repr_period_ordered",
        "test_panel_getitem",
        "test_groupby_apply_all_none",
        "test_multi_iter_frame",
        "read_stata",
        "test_day_not_in_month_raise",
        "_sql_type_name",
        "_get_fill_indexer_searchsorted",
        "_check_iris_loaded_frame",
        "test_transform_multiple",
        "test_basic_period_index_subscript_expression",
        "test_create_with_tz",
        "_copy",
        "reindex_indexer",
        "_drop_from_level",
        "resolution",
        "rjust",
        "str_slice",
        "_infer_fill_value",
        "test_reindex_methods",
        "_try_sort",
        "_get_format_datetime64",
        "test_create_with_fixedoffset_noname",
        "test_setitem_list",
        "test_aggregate_item_by_item",
        "test_numpy_compat",
        "test_series_fillna_limit",
        "test_to_datetime_types",
        "test_bool_ops_fails_on_scalars",
        "test_series_getitem_not_sorted",
        "_ensure_like_indices",
        "test_empty_frame_dtypes_ftypes",
        "setup_import",
        "table_type_short",
        "test_apply_axis1",
        "test_tz_localize_naive",
        "test_constructor_subclass_dict",
        "_get_data_algo",
        "validate_read",
        "_validate_flavor",
        "test_single_invert_op",
        "__len__",
        "test_scalar_unary",
        "_maybe_parse_dates",
        "_get_level_lengths",
        "_to_sql_save_index",
        "get_freq_group",
        "test_fields",
        "_slice_take_blocks_ax0",
        "where",
        "_floatify_na_values",
        "_setitem_frame",
        "_check_has_errorbars",
        "test_errorbar_with_partial_columns",
        "test_conv_minutely",
        "_parse_raw_tfoot",
        "rstrip",
        "test_mask_broadcast",
        "_construct_axes_dict_for_slice",
        "read_column",
        "_series",
        "validate_version",
        "_check_all_fields",
        "test_unstack_sparse_keyspace",
        "_combine_frame",
        "test_iloc_mask",
        "test_nanskew",
        "_get_sheet_name",
        "_partial_date_slice",
        "test_datetimeindex_from_empty_datetime64_array",
        "test_groupby_selection_with_methods",
        "test_read_dta12",
        "test_period_cons_quarterly",
        "_read_sql_iris_named_parameter",
        "_do_convert_missing",
        "optional_args",
        "_handle",
        "read_sql_query",
        "test_cant_compare_tz_naive_w_aware_dateutil",
        "test_groupby_corner",
        "test_head_tail",
        "_is_single_block",
        "test_constructor_pi_nat",
        "get_fill_func",
        "test_comp_period",
        "start_time",
        "_add_aggregate_operations",
        "test_getitem_boolean_iadd",
        "test_fill_constistency",
        "test_swaplevel",
        "test_series_interpolate_intraday",
        "test_nanmedian",
        "test_maybe_indices_to_slice_both_edges",
        "single_column_table",
        "_can_set_locale",
        "tzinfo",
        "test_xs_keep_level",
        "is_multi_index",
        "test_mixed_dtype_insert",
        "ewm",
        "_aggregate_item_by_item",
        "pop",
        "_indexed_same",
        "nsmallest",
        "pipe",
        "test_valid_dt_with_missing_values",
        "test_where_align",
        "test_stack_unstack_preserve_names",
        "test_with_multi_index",
        "test_date_range_span_dst_transition",
        "y_fitted",
        "test_orderedDict_subclass_ctor",
        "_parse_raw_tbody",
        "test_mulitindex_passthru",
        "predict",
        "__delitem__",
        "convert_missing_indexer",
        "test_combine_scalar",
        "read_query",
        "test_string_index_alias_tz_aware",
        "test_describe_percentiles_percent_or_raw",
        "test_timestamp_compare_series",
        "test_empty_print",
        "_validate",
        "TextParser",
        "test_filter_nan_is_false",
        "test_constructor_infer_freq",
        "test_nans",
        "test_series_groupby_nunique",
        "disabled",
        "_make_reader",
        "get_iterator",
        "test_plotting_with_float_index_works",
        "test_to_datetime_freq",
        "test_ftypes",
        "_populate_tables",
        "_get_handle",
        "is_monotonic",
        "test_isscalar_builtin_scalars",
        "_put_str",
        "_nargsort",
        "_make_cat_accessor",
        "test_getitem_setitem_boolean_corner",
        "pathname",
        "_resid_raw",
        "test_float64index_slicing_bug",
        "test_illegal_names",
        "_get_attributes_dict",
        "first_valid_index",
        "_build_doc",
        "test_annual_upsample_B_e_b",
        "_extract_axis",
        "test_extractall_errors",
        "test_setitem_corner2",
        "find",
        "_from_axes",
        "root",
        "_coerce_to_ndarray",
        "is_monotonic_increasing",
        "test_cython_grouper_series_bug_noncontig",
        "test_to_datetime_with_apply",
        "test_astype_object",
        "test_pass_datetimeindex_to_index",
        "test_add",
        "_get_colors_mapped",
        "from_dict",
        "__array_wrap__",
        "test_setitem_list_not_dataframe",
        "_skip_if_no_dateutil",
        "test_hist_no_overlap",
        "test_infer_tz",
        "test_transform_function_aliases",
        "test_split_to_dataframe",
        "head",
        "test_getitem_median_slice_bug",
        "get_put_data",
        "date_range",
        "_try_convert_dates",
        "_set_with_engine",
        "swapaxes",
        "test_join",
        "test_tslib_tz_convert_dst",
        "meta",
        "test_resample_extra_index_point",
        "test_line_use_index_false",
        "test_ix_slicing_strings",
        "test_apply_frame_concat_series",
        "test_describe_timedelta",
        "test_extractall",
        "_transform_general",
        "test_dups_loc",
        "test_panel_assignment",
        "test_transform_axis",
        "test_connectable_issue_example",
        "from_product",
        "_get_marker_compat",
        "test_constructor_dict_block",
        "test_resample_timegrouper",
        "test_groups",
        "test_describe_raises",
        "_to_sql_append",
        "argsort",
        "_new_Index",
        "test_groupby_duplicated_column_errormsg",
        "test_equal_Raises_Value",
        "drop",
        "test_hexbin_cmap",
        "test_categories_assigments",
        "_get_unicode_name",
        "test_nancorr_spearman",
        "test_scatter_colors",
        "test_properties_weekly",
        "tzstr",
        "from_csv",
        "test_agg_datetimes_mixed",
        "test_comparisons_nat",
        "_isnull_old",
        "test_setitem_empty_frame_with_boolean",
        "_check_zlib",
        "pie",
        "test_numpy_groupby",
        "get_atom_datetime64",
        "test_arith_utc_convert",
        "tquery",
        "test_maybe_numeric_slice",
        "_write_variable_labels",
        "check_bool",
        "_iterate_slices",
        "test_stack_level_name",
        "_convert_to_border",
        "_check_axes_shape",
        "test_sortlevel_by_name",
        "filename",
        "test_constructor_periodindex",
        "test_delta_preserve_nanos",
        "_skip_if_no_xarray",
        "create_table_index",
        "test_applymap",
        "_create_index",
        "test_groupby_blacklist",
        "test_count_uses_size_on_exception",
        "_trim_zeros",
        "test_ix_preserve_names",
        "_skip_if_no_scipy",
        "to_sparse",
        "test_ops_frame_period",
        "_set_as_cached",
        "_blklocs",
        "test_transform_exclude_nuisance",
        "_get_format_timedelta64",
        "test_groupby_multi_categorical_as_index",
        "test_getitem_setitem_boolean_multi",
        "test_constructor_dict_timedelta64_index",
        "snap",
        "rmse",
        "test_series_set_value",
        "_maybe_wrap_formatter",
        "test_groupby_max_datetime64",
        "test_series_setitem",
        "_get_standard_kind",
        "test_iloc_getitem_multiindex2",
        "reorder_categories",
        "check_single_invert_op",
        "_maybe_promote",
        "test_disallow_scalar_bool_ops",
        "test_lexsort_indexer",
        "test_between_time_types",
        "test_notEqual",
        "year_has_extra_week",
        "test_errorbar_timeseries",
        "test_nankurt",
        "test_series_agg_multi_pure_python",
        "test_getitem_toplevel",
        "test_datetimeindex_integers_shift",
        "_is_dates_only",
        "sort_values",
        "test_categorical_index_repr_timedelta",
        "test_match_findall_flags",
        "_maybe_upcast_putmask",
        "_skip_if_no_mpl",
        "process_skipna",
        "test_time_series_plot_color_with_empty_kwargs",
        "test_conv_weekly",
        "test_modulus",
        "test_write_missing_strings",
        "_masked_rec_array_to_mgr",
        "test_iter",
        "test_cython_median",
        "test_groupby_average_dup_values",
        "test_cat_on_filtered_index",
        "test_invalid_colormap",
        "__sub__",
        "test_missing_value_conversion",
        "test_read_sql_iris",
        "test_datetime_timedelta_quantiles",
        "nanvar",
        "_convert_by",
        "test_basic_indexing",
        "_create_categorical",
        "_get_footer",
        "test_apply_use_categorical_name",
        "test_constructor_arrays_negative_year",
        "y_predict",
        "test_to_sql_save_index",
        "_get_time_micros",
        "_add_numeric_methods_unary",
        "test_getitem_setitem_slice_integers",
        "merge_asof",
        "test_range_slice_seconds",
        "_box_col_values",
        "test_resample_unequal_times",
        "_evaluate_with_datetime_like",
        "_comp_method_OBJECT_ARRAY",
        "_annual_finder",
        "_long_prod",
        "set_error_bad_lines",
        "test_index_with_timezone_repr",
        "test_resample_ohlc_result",
        "test_all_finite",
        "test_series_grouper",
        "test_pickle_v0_14_1",
        "_has_names",
        "read_dta",
        "_format_with_header",
        "_partial_td_slice",
        "normalize",
        "_execute_sql",
        "test_downcast_conv",
        "is_datetime64_any_dtype",
        "_sparse_series_op",
        "_underlying_price_and_time_from_url",
        "_series_and_2d_ndarray",
        "_has_plotted_object",
        "test_basic_period_index_boolean_expression",
        "isnull",
        "_kind",
        "_dict_compat",
        "T",
        "_f_stat_raw",
        "test_pie_nan",
        "test_is_hashable",
        "test_timestamp_tz_arg_dateutil",
        "is_numeric_dtype",
        "add_prefix",
        "test_to_sql_empty",
        "test_count_level",
        "check_no_new_locals",
        "_format_attrs",
        "__setslice__",
        "test_constructor_compound_dtypes",
        "_check_if_open",
        "test_frame_comparison",
        "test_unit_mixed",
        "test_groupby_transform_with_int",
        "_whitelist_method_generator",
        "_validate_for_numeric_binop",
        "getArangeMat",
        "assert_sp_array_equal",
        "test_set_axis_name_raises",
        "test_dti_set_index_reindex",
        "from_coo",
        "test_indexing_over_hashtable_size_cutoff",
        "test_setitem_multiindex",
        "test_abc_types",
        "test_resample_nunique",
        "read_sql",
        "str_encode",
        "_window_time_obs",
        "na_value_for_dtype",
        "test_no_nonsense_name",
        "test_properties_monthly",
        "_maybe_rename_join",
        "_cumcount_array",
        "test_no_new_locals",
        "is_bool",
        "test_simple_arith_ops",
        "test_select_dtypes_include",
        "test_maybe_indices_to_slice_right_edge",
        "_check_visible",
        "_check_legend_labels",
        "test_constructor_with_tz",
        "test_make_time_series",
        "test_lookup",
        "test_multi_iter_panel",
        "_infer_dtype_from_scalar",
        "_maybe_fill",
        "test_fails_or",
        "is_string_like_dtype",
        "test_intersection_cases",
        "pudebug",
        "_translate",
        "_df_raw",
        "test_ops_differently_indexed",
        "_beg_apply_index",
        "_python_agg_general",
        "_isfinite",
        "_interpolate",
        "test_delete",
        "test_iloc_setitem_series",
        "test_apply_modify_traceback",
        "test_from_records_empty",
        "test_dont_modify_rcParams",
        "_comp_method_PANEL",
        "_plot",
        "_make_date_converter",
        "test_multi_iter",
        "test_timestamp_date_out_of_range",
        "append",
        "test_subplots_warnings",
        "_cast_inplace",
        "check_name_error_exprs",
        "rename_categories",
        "_where_compat",
        "test_dont_clobber_name_column",
        "test_deprecated_levels",
        "test_default_right_closed_label",
        "beta",
        "_compare_stacked_y_cood",
        "test_from_M8_structured",
        "group_info",
        "_write_to_group",
        "write_tr",
        "_maybe_cast_indexer",
        "test_to_period_annualish",
        "test_repr_to_string",
        "get_empty_dtype_and_na",
        "_merger",
        "groupings",
        "test_resample_5minute",
        "test_reindex_backfill",
        "test_sequence_like",
        "test_constructor_generator",
        "_stringify_na_values",
        "_applymap",
        "validate_groupby_func",
        "_post_setstate",
        "test_unstack_period_frame",
        "assert_panel_equal",
        "to_pydatetime",
        "_get_hist_google",
        "get_finder",
        "test_integer_col_names",
        "_dt_index_cmp",
        "test_agg_misc",
        "test_timestamp_fields",
        "test_smaller",
        "_isnull_new",
        "test_hexbin_basic",
        "test_apply_differently_indexed",
        "_prep_binary",
        "test_invalida_delgation",
        "test_datetimeindex_diff",
        "_format_strings",
        "test_timegrouper_get_group",
        "test_maybe_convert_string_to_array",
        "test_count_level_corner",
        "test_string_index_series_name_converted",
        "test_minimal_size_col",
        "hexbin",
        "_has_same_tz",
        "test_assigning_ops",
        "test_standard_colors",
        "test_categorical_repr_timedelta",
        "_parse_excel",
        "_apply_1d",
        "test_index_duplicate_periods",
        "assignment_not_inplace",
        "test_asfreq_bug",
        "_make_plot",
        "test_series_grid_settings",
        "_first_compat",
        "test_ix_loc_consistency",
        "test_global_scope",
        "get_dummies",
        "_default_index",
        "get_atom_timedelta64",
        "_rewrite_membership_op",
        "_create_indexer",
        "test_onecolumn_of_integer",
        "test_codes_dtypes",
        "test_date",
        "test_read_write_dta5",
        "_set_window",
        "test_filter_and_transform_with_non_unique_timestamp_index",
        "test_array_equivalent_str",
        "test_from_records_iterator",
        "test_pi_ops_offset",
        "test_indices_concatenation_order",
        "test_getitem_fancy_ints",
        "default_kind",
        "test_constant",
        "test_getitem_list",
        "test_ix_dup",
        "test_nan_numeric",
        "_exclude_implicit_index",
        "test_write_dta6",
        "mpl_ge_1_5_0",
        "test_numexpr_builtin_raises",
        "_multi_blockify",
        "test_describe_no_numeric",
        "_result_index",
        "is_mixed_type",
        "_calcsize",
        "test_split_to_multiindex_expand",
        "DataReader",
        "test_reindex_like",
        "validate_resampler_func",
        "test_set_axis_name_mi",
        "test_api",
        "test_constructor_coverage",
        "test_stat_non_defaults_args",
        "squeeze",
        "test_setitem",
        "test_multifunc_sum_bug",
        "check_binop_typecasting",
        "test_fillna",
        "test_sample",
        "set_precision",
        "check_disallowed_nodes",
        "_skip_if_32bit",
        "_style_to_xlwt",
        "nrows",
        "set_attr",
        "execute",
        "test_get_loc_msg",
        "test_series_getitem",
        "test_first_last_nth_dtypes",
        "test_to_frame_multi_drop_level",
        "_get_year_end_nearest",
        "round",
        "makePanel4D",
        "test_resample_loffset",
        "cmptz",
        "test_pipe_tuple_error",
        "_valid_obs_labels",
        "test_invalid_local_variable_reference",
        "test_delitem",
        "test_stack_multiple_out_of_bounds",
        "_sparsify",
        "test_convert_sql_column_decimals",
        "_unpickle_sparse_frame_compat",
        "_maybe_convert_timedelta",
        "identical",
        "test_getitem_fancy_1d",
        "order",
        "_python_apply_general",
        "test_first_subset",
        "_get_monthly_rule",
        "test_to_datetime_on_datetime64_series",
        "_validate_join_method",
        "test_imethods_with_dups",
        "test_extractall_same_as_extract_subject_index",
        "test_set_ordered",
        "read_sql_table",
        "timedelta_range",
        "test_convert_objects",
        "test_constructor",
        "test_resample_how_callables",
        "test_to_period_quarterly",
        "test_properties_quarterly",
        "size",
        "_putmask_smart",
        "rolling",
        "storage_obj_type",
        "test_dispatch_transform",
        "test_properties_daily",
        "makeObjectSeries",
        "_write_descriptors",
        "test_groupby_level_mapper",
        "test_iter_single_element",
        "_agg_index",
        "test_is_number",
        "_get_loc",
        "test_bigint_warning",
        "_query_iterator",
        "test_subclass",
        "zfill",
        "test_resample_timestamp_to_period",
        "test_not_reflect_all_tables",
        "ravel",
        "test_period_cons_annual",
        "_compose2",
        "_groupby_function",
        "_get_formatted_index",
        "get_data_google",
        "test_slice_month",
        "_load_test2_data",
        "test_rename_categories",
        "test_panel_index",
        "_beta_matrix",
        "test_stack_dropna",
        "test_filter_using_len",
        "test_rsplit_to_dataframe_expand",
        "_get_codes_for_values",
        "test_getitem_setitem_tuple_plus_columns",
        "test_resample_panel_numpy",
        "makeMixedDataFrame",
        "getOffsetOfMonth",
        "_get_complex_date_index",
        "test_getitem_multiindex",
        "_unpickle_array",
        "test_tz_convert_tzlocal",
        "str_repeat",
        "_in",
        "test_construction",
        "test_pow",
        "pow",
        "test_tolist",
        "test_conv_monthly",
        "test_groupby_with_single_column",
        "test_numpy_round",
        "test_slicing_doc_examples",
        "to_records",
        "_set_result_index_ordered",
        "_match_generic",
        "test_mixed_depth_insert",
        "test_to_datetime_infer_datetime_format_series_starting_with_nans",
        "_get_join_keys",
        "test_transform_bug",
        "test_constructor_tuples",
        "mask",
        "test_nansem",
        "test_to_datetime_utc",
        "_interp_wrapper",
        "to_pytimedelta",
        "test_apply_multikey_corner",
        "test_resample_timedelta_idempotency",
        "test_ambiguous_nat",
        "conform",
        "test_sharex_and_ax",
        "assertIsNone",
        "test_period_ops_offset",
        "test_boolean_index_empty_corner",
        "rolling_corr",
        "test_categories_none",
        "_remove_labels_from_axis",
        "test_apply_attach_name",
        "save",
        "test_indexing_ambiguity_bug_1678",
        "empty",
        "check_equal",
        "localize",
        "_add_series_or_dataframe_operations",
        "_akima_interpolate",
        "test_unicode_repr_level_names",
        "_join_multi",
        "is_null_slice",
        "take_2d_multi",
        "forecast_mean",
        "test_date_range_gen_error",
        "_resolution",
        "_add_delta",
        "_create_methods",
        "_get_data_as_items",
        "merge",
        "test_resample_interpolate",
        "test_more_than_one_expression_raises",
        "_add_offset",
        "validate_transpose_for_generic",
        "_get_field",
        "test_ctor_str_intraday",
        "flush",
        "test_getitem_seconds",
        "clean_reindex_fill_method",
        "test_set_ix_out_of_bounds_axis_0",
        "test_deprecation_core_common_moved",
        "test_constructor_simple_new_floats",
        "test_resample_segfault",
        "_max_fitting_element",
        "plt",
        "_try_cast_result",
        "test_to_datetime_iso8601",
        "test_update_raise",
        "test_apply_without_aggregation",
        "_concat_categorical",
        "test_map",
        "raise_assert_detail",
        "test_partition_with_name",
        "write_th",
        "test_timestamp_tz_arg_dateutil_from_string",
        "nanoseconds",
        "test_from_records_non_tuple",
        "test_set_ix_out_of_bounds_axis_1",
        "sentinel_factory",
        "__set__",
        "get_key",
        "to_dense",
        "test_neg",
        "isiterable",
        "test_frame_groupby",
        "test_union",
        "set_atom_datetime64",
        "test_delevel_infer_dtype",
        "last_valid_index",
        "_join_index",
        "scatter_matrix",
        "_check_empty",
        "_get_item_cache",
        "test_resample_ohlc_dataframe",
        "test_iloc_panel_issue",
        "test_get_schema_keys",
        "test_iloc_getitem_frame",
        "test_back_compat_v180",
        "test_resample_groupby_with_label",
        "dropna",
        "test_size",
        "_setitem_array",
        "test_reset_index_period",
        "_get_slice_axis",
        "test_line_lim",
        "test_iteritems",
        "write_td",
        "ewma",
        "_read_strls",
        "generate",
        "sql_schema",
        "test_nanlt",
        "_is_metadata_of",
        "_create_blocks",
        "contains",
        "test_getitem_partial",
        "asfreq",
        "form_blocks",
        "_iget_item_cache",
        "at_time",
        "set_names",
        "test_basic_getitem_with_labels",
        "_maybe_right_yaxis",
        "test_quantile",
        "_check_is_chained_assignment_possible",
        "_beta_raw",
        "is_unique_asi8",
        "test_line_label_none",
        "test_constructor_namedtuples",
        "_right_outer_join",
        "__sizeof__",
        "_assert_safe_casting",
        "test_groupby_with_empty",
        "test_partial_slice_minutely",
        "_get_counts_nanvar",
        "test_getitem_dups",
        "test_timestamp_from_ordinal",
        "sort_index",
        "is_list_like_indexer",
        "set_atom_string",
        "stack_sparse_frame",
        "test_normalize_tz",
        "assign",
        "test_setitem_change_dtype",
        "from_array",
        "set_atom_datetime64tz",
        "test_set_axis_name",
        "test_groupby_series_with_name",
        "test_fill_method_and_how_upsample",
        "test_filter_and_transform_with_non_unique_int_index",
        "_replace_single",
        "test_per_axis_per_level_setitem",
        "check_complex_series_frame_alignment",
        "_guess_time_format_for_array",
        "_set_values",
        "test_memory_usage",
        "test_unit_with_numeric",
        "_set_names",
        "test_legend_name",
        "_is_index_col",
        "test_weekly_upsample",
        "_filter_indexer_tolerance",
        "_convert_to_style",
        "_get_annual_rule",
        "test_period_with_agg",
        "read_table",
        "test_plot_bar",
        "test_import_warnings",
        "_disallow_scalar_only_bool_ops",
        "test_dti_snap",
        "_align_panel",
        "test_tricky_container",
        "test_assign_index_sequences",
        "irow",
        "_decorate_ticks",
        "test_set_dataframe_column_ns_dtype",
        "test_categorical_frame",
        "test_iloc_setitem_list_of_lists",
        "test_categorical_warnings_and_errors",
        "write_data",
        "_infer_columns",
        "_engine",
        "test_mi_access",
        "test_nanosecond_resample_error",
        "test_bar_align_single_column",
        "nancov",
        "_center_window",
        "tzname",
        "has_duplicates",
        "test_partial_slice_daily",
        "_maybe_make_list",
        "test_timestamp_compare_with_early_datetime",
        "test_unary_in_array",
        "validate",
        "write",
        "test_sub_pdnat",
        "test_empty_str_methods_to_frame",
        "test_combined_up_downsampling_of_irregular",
        "test_join_utc_convert",
        "_next_opening_time",
        "is_open",
        "block",
        "test_uquery",
        "_parsed_string_to_bounds",
        "test_delitem_corner",
        "test_union_with_DatetimeIndex",
        "to_stata",
        "is_old_version",
        "_construct_return_type",
        "test_read_table",
        "test_groupby_multi_timezone",
        "test_subplots_ts_share_axes",
        "test_numeric_column_names",
        "test_normalize_tz_local",
        "makeDateIndex",
        "_interpolate_scipy_wrapper",
        "getitem_block",
        "str_replace",
        "_maybe_utc_convert",
        "check",
        "_str_extract_noexpand",
        "test_indexing_with_datetimeindex_tz",
        "_sparse_array_op",
        "test_max_len_string_array",
        "test_update",
        "_parse_date_columns",
        "_prep_ndarray",
        "get_datevalue",
        "__eq__",
        "to_excel",
        "test_apply_frame_yield_constant",
        "check_nancorr_nancov_1d",
        "_assert_can_do_setop",
        "get_dtype_counts",
        "_make_index",
        "test_groupby_keys_same_size_as_index",
        "test_timedelta_assignment",
        "check_medium_complex_frame_alignment",
        "_unpickle_matrix_compat",
        "pandasSQL_builder",
        "_take_2d_multi_generic",
        "_get_cython_function",
        "_wrap_results",
        "test_cat_accessor_api",
        "t_stat",
        "test_truncate_out_of_bounds",
        "_get_partial_string_timestamp_match_key",
        "from_items",
        "test_gb_apply_list_of_unequal_len_arrays",
        "replace",
        "test_series_slice_partial",
        "rolling_window",
        "_getitem_axis",
        "test_drop_level_nonunique_datetime",
        "check_result_type",
        "test_xs_duplicates",
        "union_categoricals",
        "test_is_unique_monotonic",
        "test_categorical_index_repr_timedelta_ordered",
        "_apply_raw",
        "str_match",
        "test_to_panel_duplicates",
        "to_manager",
        "test_union_freq_both_none",
        "map",
        "register_writer",
        "test_from_dict",
        "_period_str_to_code",
        "test_pindex_slice_index",
        "str_count",
        "test_groupby_preserves_sort",
        "_constructor_sliced",
        "test_df_series_secondary_legend",
        "stack",
        "test_raises_on_non_datetimelike_index",
        "test_getitem_fancy",
        "period_break",
        "test_constructor_arrays_and_scalars",
        "setUp",
        "test_getitem_boolean_object",
        "_maybe_coerce_indexer",
        "clip_upper",
        "test_getitem_setitem_slice_bug",
        "test__has_infs",
        "test_getitem_regression",
        "_comp_method_FRAME",
        "_y_fitted_raw",
        "test_stata_doc_examples",
        "test_extract_expand_True",
        "_min_fitting_element",
        "test_indexing_with_datetime_tz",
        "take_nd",
        "_noarg_wrapper",
        "test_annual_upsample_D_e_f",
        "test_to_period_microsecond",
        "test_iat_invalid_args",
        "_get_suffix_prefix",
        "_get_merge_data",
        "check_floor_division",
        "test_NaT_cast",
        "test_read_table_absent",
        "test_frame_getitem_setitem_multislice",
        "test_hist_df_kwargs",
        "__finalize__",
        "test_read_write_dta13",
        "check_fun_data",
        "test_constructor_dict_mixed",
        "_ensure_localized",
        "_agg_by_level",
        "test_partial_slice_doesnt_require_monotonicity",
        "test_all_invalid_plot_data",
        "test_from_index",
        "fill_zeros",
        "make_nancomp",
        "time",
        "test_getitem_fancy_slice_integers_step",
        "_get_daytime_flag",
        "test_smaller_Raises_Value",
        "_convert_to_style_kwargs",
        "timeit",
        "_has_valid_setitem_indexer",
        "indices",
        "check_deprecation",
        "_zero_out_fperr",
        "test_conv_daily",
        "is_float_dtype",
        "iterrows",
        "_set_ordered",
        "test_series_partial_set_with_name",
        "test_to_datetime_tzlocal",
        "test_min_max",
        "test_to_sql",
        "extract",
        "test_cat_accessor_no_new_attributes",
        "test_constructor_year_and_quarter",
        "_flex_compare_frame",
        "test_name_error_exprs",
        "_time_to_micros",
        "test_nested_exception",
        "test_sortlevel_large_cardinality",
        "append_to_multiple",
        "test_temporary_table",
        "to_frame",
        "_ensure_compat_append",
        "test_multiindex_slicers_datetimelike",
        "makeRangeIndex",
        "test_setitem_with_unaligned_tz_aware_datetime_column",
        "_reindex_index",
        "test_pi_ops_nat",
        "_get_merge_keys",
        "test_resample_consistency",
        "test_getitem_day",
        "test_max_nan_bug",
        "__getattr__",
        "test_panel_warnings",
        "test_to_timestamp_pi_nat",
        "test_date_range_normalize",
        "npoints",
        "test_select_dtypes_raises_on_string",
        "test_setitem_always_copy",
        "_valid_indices",
        "get_attrs",
        "f_stat",
        "_range_from_fields",
        "test_area_colors",
        "_na_map",
        "test_frame_add_datetime64_column",
        "test_aggregate_str_func",
        "_load_iris_data",
        "from_arrays",
        "is_iterator",
        "test_unstack_preserve_types",
        "has_table",
        "set_labels",
        "test_apply_no_name_column_conflict",
        "test_empty_groups_corner",
        "_get_multiindex_indexer",
        "test_constructor_scalar",
        "test_pie_df",
        "_var_beta_raw",
        "_maybe_convert_to_int_keys",
        "get_loc_level",
        "test_ndarray",
        "lag_plot",
        "test_set_categories",
        "test_series_comparison_scalars",
        "test_groupby_with_timezone_selection",
        "test_constructor_mrecarray",
        "interpolate_2d",
        "_parse_tfoot",
        "test_nans_skipna",
        "_cython_transform",
        "__iter__",
        "mask_missing",
        "test_annual_upsample_M_e_f",
        "_repr_fits_vertical_",
        "test_frame_setitem_timestamp",
        "test_cat_accessor",
        "test_hist_kwargs",
        "test_hash_vs_equality",
        "_make_stat_function_ddof",
        "test_partition_index",
        "assert_sp_series_equal",
        "seconds",
        "select_as_multiple",
        "test_setitem_ambig",
        "test_type_promotion",
        "test_maybe_indices_to_slice_left_edge",
        "test_to_records",
        "isleapyear",
        "_combine_panel",
        "test_ts_area_lim",
        "test_setitem_dtype_upcast",
        "to_sql",
        "slice",
        "test_set_none_nan",
        "_gcf",
        "test_period_index_length",
        "_aggregate_series_fast",
        "_binop",
        "test_partial_setting",
        "_rolling_rank",
        "test_astype_cast_nan_int",
        "mpl_ge_1_3_1",
        "truncate",
        "test_first_last_max_min_on_time_data",
        "test_nunique_with_object",
        "test_resample_basic",
        "test_append_concat_tz_dateutil",
        "test_apply_transform",
        "test_read_sql",
        "test_setitem_with_unaligned_sparse_value",
        "test_hourly",
        "test_df_use_case",
        "take",
        "data_label",
        "pivot_annual",
        "test_convert_sql_column_longs",
        "consolidate",
        "test_to_datetime_tz_psycopg2",
        "_parse_tr",
        "test_ix_multi_take_nonint_index",
        "test_hist_df_coord",
        "test_roundtrip",
        "test_irow_icol_duplicates",
        "to_hierarchical",
        "result",
        "test_constructor_series",
        "test_set_attribute",
        "test_resample_incompat_freq",
        "test_describe",
        "_make_sorted_values_labels",
        "test_loc_setitem_frame",
        "_gotitem",
        "test_sideeffects_free",
        "test_transpose_non_default_axes",
        "indexer_at_time",
        "test_empty_groups",
        "_get_colors",
        "test_misc_coverage",
        "test_apply_categorical_data",
        "create_series",
        "test_apply_broadcast",
        "_sub_datelike",
        "test_utc_box_timestamp_and_localize",
        "_getitem_column",
        "unpack",
        "isAnchored",
        "test_with_local_timezone_dateutil",
        "test_metadata_propagation_indiv",
        "test_day_not_in_month_ignore",
        "_allow_na_ops",
        "test_quarterly_negative_ordinals",
        "test_transform_select_columns",
        "_check_percentile",
        "test_resample_bms_2752",
        "test_iloc_getitem_list_int",
        "_get_sorted_data",
        "highlight_max",
        "_check_comments",
        "test_greater_Raises_Type",
        "_maybe_make_multi_index_columns",
        "test_constructor_period",
        "validate_args",
        "getTimeSeriesData",
        "test_raise_when_not_implemented",
        "test_setitem_fancy_scalar",
        "in_ipython_frontend",
        "test_numpy_squeeze",
        "test_getitem_setitem_ix_bool_keyerror",
        "axisinfo",
        "_convert_datetime_to_stata_type",
        "unique1d",
        "_from_name",
        "test_constructor_manager_resize",
        "test_non_unique_loc_memory_error",
        "_evalute_compare",
        "test_frame_datetime64_handling_groupby",
        "test_where_broadcast",
        "autocorr",
        "set_testing_mode",
        "__reduce__",
        "test_bar_log_no_subplots",
        "test_isscalar_pandas_scalars",
        "test_coercion_with_loc_and_series",
        "_add_legend_handle",
        "test_groupby_describe_categorical_columns",
        "_get_block_manager_axis",
        "test_frame_negate",
        "test_groupby_wrong_multi_labels",
        "check_bool_indexer",
        "combine_first",
        "assertNotIn",
        "unstack",
        "_maybe_upcast",
        "validate_col",
        "asi8",
        "test_2000",
        "_get_standard_colors",
        "test_series_agg_multikey",
        "difference",
        "test_set_value",
        "_to_sql_empty",
        "_add_numericlike_set_methods_disabled",
        "_str_extract_frame",
        "_format_data",
        "test_select_dtypes_exclude",
        "_int64_overflow_possible",
        "test_set_index_period",
        "test_closed_left_corner",
        "nanall",
        "test_nanstd",
        "_reduce",
        "test_millisecond_repr",
        "create_description",
        "_finalize_nsmallest",
        "_execute_create",
        "drop_table",
        "test_errorbar_asymmetrical",
        "_y_predict_raw",
        "_list_to_arrays",
        "test_basic",
        "test_series_bin_grouper",
        "test_set_index_datetime",
        "test_cythonized_aggers",
        "pivot_table",
        "test_no_color_bar",
        "test_guess_datetime_format_invalid_inputs",
        "test_select_dtypes_datetime_with_tz",
        "test_scalar_conversion",
        "test_cython_group_transform_algos",
        "assertIsNot",
        "process_axes",
        "to_timestamp",
        "_validate_expiry",
        "test_filter_and_transform_with_non_unique_float_index",
        "test_to_sql_append",
        "read_sparse_intindex",
        "test_setitem_multiple_partial",
        "test_get_schema_create_table",
        "__floordiv__",
        "test_keyword_arg",
        "test_rsplit",
        "test_datetime_indexing",
        "_is_rolling",
        "test_simple_cmp_ops",
        "test_frame_dict_constructor_datetime64_1680",
        "writerows",
        "test_isscalar_numpy_arrays",
        "test_constructor_orient",
        "test_isnull_datetime",
        "test_grouper_index_types",
        "test_ix_multi_take",
        "test_fails_ampersand",
        "test_index_convert_to_datetime_array",
        "test_constructor_overflow_int64",
        "test_setitem_other_callable",
        "test_multiindex_get_loc",
        "_getitem_lowerdim",
        "pack",
        "has_invalid_return_type",
        "_repr_fits_horizontal_",
        "_complevel",
        "test_apply_standard_nonunique",
        "is_term",
        "test_nonzero",
        "_get_hist_yahoo",
        "test_subplots_multiple_axes",
        "test_iloc_getitem_slice",
        "test_extract_single_group_returns_frame",
        "is_datetime_arraylike",
        "_should_fill",
        "_from_elements",
        "test_partial_set_invalid",
        "test_comparison_with_unknown_scalars",
        "test_date_and_index",
        "_skip_if_no_localpath",
        "ceil",
        "nansem",
        "cumcount",
        "_get_indices",
        "test_smallerEqual_Raises_Value",
        "test_grouper_creation_bug",
        "read_html",
        "test_infer_dtype_datetime",
        "test_plot_scatter",
        "test_properties_minutely",
        "test_ordered_api",
        "_reindex_axis",
        "queryables",
        "test_findall",
        "test_asfreq_downsample",
        "test_unary_functions",
        "test_join_segfault",
        "test_partial_slice_hourly",
        "_write_header",
        "getMixedTypeDict",
        "cvalues",
        "_check_inplace_setting",
        "test_iteration_preserves_tz",
        "_set_subtyp",
        "test_lower_upper",
        "test_where_bug",
        "test_var",
        "tail",
        "get_atom_string",
        "_get_ax_layer",
        "test_unit",
        "_bins_to_cuts",
        "test_groupby_apply_none_first",
        "std_err",
        "test_setitem_empty",
        "match",
        "_values",
        "_soft_convert_objects",
        "check_result",
        "attrs",
        "_wrap_transformed_output",
        "test_frame_timeseries_to_records",
        "ohlc",
        "assert_copy",
        "test_annual_upsample_D_s_b",
        "test_count_object",
        "test_microsecond_repr",
        "test_set_item_nan",
        "_df_model_raw",
        "_where",
        "test_resample_to_period_monthly_buglet",
        "test_constructor_iterator",
        "test_bar_barwidth_position_int",
        "has_column_names",
        "is_lexsorted",
        "_clear_item_cache",
        "_parse_thead",
        "test_categorical_series_repr_datetime_ordered",
        "get_quote_google",
        "test_convert_objects_leave_decimal_alone",
        "test_date_range_negative_freq",
        "test_union_coverage",
        "check_frame_comparison",
        "test_groupby_unstack_categorical",
        "test_apply_describe_bug",
        "_coef_table",
        "_get_default_locs",
        "test_dataframe_constructor",
        "to_perioddelta",
        "cut",
        "ncols",
        "test_slice_float64",
        "test_iget_nonunique",
        "set_value",
        "_coerce_to_dtypes",
        "test_getitem_fancy_slice",
        "test_apply_mixed_dtype_corner",
        "need_slice",
        "test_constructor_bool",
        "test_multi_nan_indexing",
        "_nat_new",
        "test_mode",
        "_consolidate_key",
        "mpl_style_cb",
        "test_categorical_repr_period",
        "_dir_deletions",
        "maybe_read_encoded_stream",
        "test_strftime",
        "_has_complex_internals",
        "test_quantile_nat",
        "test_errorbar_scatter",
        "check_compound_invert_op",
        "_has_complex_date_col",
        "test_basics_nanos",
        "map_indices_py",
        "variable_labels",
        "_make_logical_function",
        "_maybe_check_integrity",
        "_transform_index",
        "test_line_area_stacked",
        "_validate_header_arg",
        "test_apply_yield_list",
        "test_period_dt64_round_trip",
        "is_numeric",
        "_pop_header_name",
        "test_select_dtypes_exclude_include",
        "test_index_drop_dont_lose_tz",
        "downcast",
        "_transaction_test",
        "test_getitem_setitem_integer_slice_keyerrors",
        "test_time_field_bug",
        "test_constructor_datetime64arr",
        "test_timestamp_to_datetime",
        "test_constructor_from_index_series_timedelta",
        "test_xs_view",
        "select_as_coordinates",
        "test_split_ranges",
        "asof_locs",
        "test_bools",
        "test_period_compat",
        "test_rename",
        "test_detect_chained_assignment",
        "_unique_generic",
        "test_where_callable",
        "get_reindexed_values",
        "test_constructor_ndarray_copy",
        "factorize",
        "transform",
        "test_categorical_index_repr_period",
        "test_constructor_dict_cast",
        "test_omit_nuisance",
        "test_monthly_upsample",
        "andrews_curves",
        "test_map_bug_1677",
        "test_groupby_multiindex_not_lexsorted",
        "check_numexpr_builtin_raises",
        "__unicode__",
        "strftime",
        "test_align_multiindex",
        "test_evenly_divisible_with_no_extra_bins",
        "to_latex",
        "generate_range",
        "_add_logical_methods",
        "_fast_union",
        "test_timestamp_to_datetime_dateutil",
        "_clear_buffer",
        "_add_table",
        "read_array",
        "makeDataFrame",
        "test_grouper_multilevel_freq",
        "test_drop",
        "update_info",
        "boxplot",
        "_is_convertible_to_td",
        "test_get_set_boolean_different_order",
        "__delete__",
        "_disabled",
        "test_map_with_string_constructor",
        "test_values",
        "test_nanstd_roundoff",
        "test_transform_length",
        "is_datetimelike_v_numeric",
        "test_truediv",
        "test_frame_datetime64_pre1900_repr",
        "_is_valid_list_like",
        "is_view",
        "lstrip",
        "test_append_aware",
        "check_basic_frame_series_alignment",
        "test_to_datetime_unit",
        "test_timestamp_mult",
        "_validate_format",
        "uquery",
        "legend_title",
        "test_categorical_repr",
        "_get_grouper",
        "test_apply_frame_to_series",
        "is_transposed",
        "test_rotation",
        "pct_change",
        "test_constructor_sequence_like",
        "test_groupby_nonstring_columns",
        "_repr_latex_",
        "_get_na_values",
        "_maybe_add_join_keys",
        "test_setitem_mulit_index",
        "test_dropna",
        "test_sparse_series_pad_backfill_limit",
        "get_level_values",
        "_get_firstbday",
        "test_iloc_setitem",
        "_wrap_generic_output",
        "_to_embed",
        "test_groupby_list_infer_array_like",
        "test_multi_key_multiple_functions",
        "tests_skip_nuisance",
        "test_series_describe_multikey",
        "count",
        "test_squeeze",
        "_add_numeric_methods_binary",
        "test_bar_center",
        "test_take_fill_value",
        "_prefix",
        "test_groupby_level_index_names",
        "test_no_index",
        "_assert_can_do_op",
        "_get_single_group_name",
        "test_TimeSeries_deprecation",
        "setup_driver",
        "test_strip_lstrip_rstrip_args_unicode",
        "test_bar_nan",
        "test_sqlite_type_mapping",
        "_period_alias_dictionary",
        "test_nanvar_ddof",
        "test_describe_percentiles_formatting",
        "run_transaction",
        "test_to_timestamp_pi_mult",
        "test_setitem_boolean_column",
        "test_apply",
        "nansum",
        "_get_concat_axis",
        "test_fails_pipe",
        "test_regression_whitelist_methods",
        "test_union_dataframe_index",
        "_try_coerce_and_cast_result",
        "test_loc_getitem_label",
        "test_no_new_globals",
        "test_length_zero",
        "is_numeric_v_string_like",
        "test_pnow",
        "_grouped_plot_by_column",
        "flatten",
        "_get_string_slice",
        "nlargest",
        "test_groupby_multiple_key",
        "test_tz_localize_tzlocal",
        "data",
        "create_axes",
        "ax",
        "test_non_convertable_values",
        "get_values",
        "_write",
        "makeFloatIndex",
        "test_from_records_empty_with_nonempty_fields_gh3682",
        "assert_",
        "get_dtype_kinds",
        "__dir__",
        "test_to_sql_read_sql_with_database_uri",
        "test_smallerEqual",
        "_get_info",
        "test_read_chunks_117",
        "_groupby_indices",
        "_get_axis",
        "test_constructor_ordered_dict_conflicting_orders",
        "_construct_axes_from_arguments",
        "test_constructor_incompat_freq",
        "test_timestamp_and_label",
        "_is_normalized",
        "test_ix_getitem_not_monotonic",
        "_generate_4_axes_via_gridspec",
        "getSeriesData",
        "_format_native_types",
        "_post_process_cython_aggregate",
        "test_index_label_overlaps_location",
        "_multi_take",
        "test_dti_slicing",
        "assert_sp_frame_equal",
        "_apply_to_column_groupbys",
        "test_loc_general",
        "__contains__",
        "test_stack_names_and_numbers",
        "test_getitem_slice_not_sorted",
        "test_deferred_with_groupby",
        "test_nat",
        "iget_value",
        "test_unicode_column_name",
        "test_resample_rounding",
        "_convert_types",
        "test_numpy_clip",
        "test_comparisons",
        "test_transform_fast",
        "orientation",
        "is_datelike",
        "test_annual_upsample_B_e_f",
        "set_name",
        "test_swaplevel_panel",
        "grouped_hist",
        "_flatten_visible",
        "test_from_records_nones",
        "__deepcopy__",
        "test_describe_typefiltering_groupby",
        "read_index_node",
        "test_to_frame_multi_major",
        "add_special_arithmetic_methods",
        "rands_array",
        "test_tshift",
        "test_resample_how",
        "is_number",
        "set_uuid",
        "_constructor",
        "resid",
        "test_level_preserve_order",
        "_chk_truncate",
        "_get_agg_axis",
        "test_filter_out_all_groups",
        "to_series",
        "test_skew",
        "_generate_indices",
        "_get_dtype_from_object",
        "nancorr",
        "_check_data",
        "validate_argsort_with_ascending",
        "_try_fill",
        "_get_single_indexer",
        "is_numeric_mixed_type",
        "test_bar_bottom_left",
        "test_constructor_series_copy",
        "test_getitem_multiple",
        "_is_builtin_func",
        "test_nested_period_index_subscript_expression",
        "_make_stat_function",
        "test_range_slice_day",
        "test_query_by_text_obj",
        "test_fancy_getitem_int_labels",
        "_make_wrapper",
        "_get_names_from_index",
        "_skip_if_mpl_1_5",
        "test_cache_keys_are_distinct_for_pytz_vs_dateutil",
        "_setitem_with_indexer",
        "test_slicing_datetimes",
        "_check_text_labels",
        "test_sort_index",
        "get_offset",
        "get_dtypes",
        "get_new_values",
        "file_path_to_url",
        "test_nat_scalar_field_access",
        "_extract_multi_indexer_columns",
        "test_df_legend_labels",
        "test_extract_index_one_two_groups",
        "is_indexed",
        "test_index_convert_to_datetime_array_explicit_pytz",
        "test_nansum",
        "_wrap_compressed",
        "test_zfill",
        "test_ambiguous_flags",
        "_do_date_conversions",
        "test_constructor_corner",
        "test_timedelta_push_over_dst_boundary_explicit",
        "_get_cacher",
        "_unconvert_string_array",
        "_add_numeric_operations",
        "_get_lbllist",
        "test_set_column_scalar_with_ix",
        "_alias_to_class",
        "_is_py3_complex_incompat",
        "_get_new_axes",
        "_get_empty_meta",
        "nkeys",
        "test_astype_with_exclude_string",
        "test_not_hashable",
        "makePanel",
        "test_aggregate_with_nat",
        "test_unordered_ts",
        "test_syntax_error_exprs",
        "test_static_tzinfo",
        "test_invalid_kind",
        "test_infer_dtype_from_scalar",
        "fillna",
        "test_periods_number_check",
        "_get_index_names",
        "test_construction_series",
        "test_consistency_name",
        "nanskew",
        "test_ismethods",
        "intersection",
        "_get_notnull_col_dtype",
        "test_pivot",
        "test_filter_multi_column_df",
        "_base_and_stride",
        "nanstd",
        "test_attr_expression",
        "test_startswith",
        "_init_arrays",
        "test_tz_convert_and_localize",
        "memory_usage",
        "is_monotonic_decreasing",
        "test_nanmean",
        "_add_comparison_methods",
        "test_groupby_grouper_f_sanity_checked",
        "__round__",
        "test_constructor_field_arrays",
        "test_isnull_nat",
        "is_mixed",
        "test_basic_upsample",
        "test_get_numeric_data_preserve_dtype",
        "_add_datetimelike_methods",
        "fast_xs",
        "test_undefined_func",
        "write_cells",
        "test_execute_fail",
        "test_dti_constructor_years_only",
        "table",
        "test_non_unique_loc",
        "_convert_for_op",
        "_to_arrays",
        "test_loc_multiindex",
        "test_execute_sql",
        "test_ix_setitem",
        "test_isscalar_builtin_nonscalars",
        "get_value_maybe_box",
        "get_data_path",
        "test_from_records_set_index_name",
        "_check_for_invalid_keys",
        "compose",
        "get_year_end",
        "test_max",
        "test_is_re",
        "test_no_dummy_key_names",
        "filter",
        "set_version",
        "_set_freq",
        "test_constructor_frame_copy",
        "test_filter_mixed_df",
        "_lcd_dtypes",
        "_get_index",
        "get_new_columns",
        "_to_sql_fail",
        "test_max_min_non_numeric",
        "test_from_records_columns_not_modified",
        "validate_min_itemsize",
        "test_filter_has_access_to_grouped_cols",
        "test_grouping_is_iterable",
        "remove_na",
        "decode",
        "_check_ticks_props",
        "test_datetime",
        "rolling_count",
        "lexsort_depth",
        "test_setitem_with_sparse_value",
        "test_stat_unexpected_keyword",
        "test_groupby_with_timegrouper",
        "_enough_obs",
        "test_hour",
        "test_select_dtypes_bad_datetime64",
        "test_fast_apply",
        "_get_quarterly_rule",
        "set_pos",
        "_is_mixed_type",
        "_ensure_has_len",
        "test_reindex",
        "_get_ordinal_range",
        "test_datetimeindex_constructor",
        "ZipFile",
        "test_concat",
        "_to_datetime",
        "test_groupby_args",
        "_forecast_mean_raw",
        "test_constructor_more",
        "_prepare_pandas",
        "makeCustomDataframe",
        "get_mgr_concatenation_plan",
        "test_getitem_list_of_columns",
        "test_auto_conversion",
        "test_errorbar_plot",
        "create_for_block",
        "description",
        "r2",
        "_reset_cache",
        "test_xs_level",
        "test_fancy_setitem",
        "y",
        "check_syntax_error_exprs",
        "test_from_codes",
        "_isnan",
        "test_date_parsing",
        "external_values",
        "test_frame_set_name_single",
        "test_describe_column_index_type",
        "test_getitem_setitem_ix_duplicates",
        "test_minor_xs",
        "select_coords",
        "time2num",
        "test_categorical_with_stata_missing_values",
        "_axes",
        "test_period_constructor_offsets",
        "test_medium_complex_frame_alignment",
        "test_contiguous_boolean_preserve_freq",
        "reorder_levels",
        "test_min_max_series",
        "test_nanosecond_field",
        "_obj_with_exclusions",
        "test_series_map_box_timedelta",
        "test_mask_edge_case_1xN_frame",
        "test_multiindex_get",
        "maybe_droplevels",
        "stack_multiple",
        "test_empty_str_methods",
        "_arith_method_PANEL",
        "test_apply_without_copy",
        "test_series_frame_commutativity",
        "set_axis",
        "_rebuild_blknos_and_blklocs",
        "test_astimezone",
        "_ensure_decoded",
        "test_groupby_series_indexed_differently",
        "_arith_method",
        "_load_iris_view",
        "test_greaterEqual_Raises_Value",
        "bdate_range",
        "sum",
        "_is_datelike_mixed_type",
        "_adorn_subplots",
        "_make_legend",
        "query_inplace",
        "test_dates_invalid_column",
        "test_ix_general",
        "test_cython_api2",
        "test_logical_with_nas",
        "test_timestamp_tz_arg",
        "test_take_invalid_kwargs",
        "_get_items",
        "_period_index_cmp",
        "test_append_concat_tz",
        "_reindex_indexer",
        "test_freq_str",
        "test_line_colors",
        "test_label",
        "str_wrap"
      ],
      "functions_name_co_evolved_modified_file": [
        "pad_2d",
        "interpolate_1d",
        "backfill_2d",
        "fill_zeros",
        "backfill_1d",
        "pad_1d",
        "mask_missing"
      ],
      "functions_name_co_evolved_all_files": [
        "pad_2d",
        "test_convert_sql_column_decimals",
        "get_dtype_kinds",
        "test_deprecation_core_common",
        "pivot_table",
        "_groupby_indices",
        "_maybe_convert_timedelta",
        "get_freq_code",
        "_convert_string_array",
        "is_dict_like",
        "get_group_index",
        "_arith_method_SERIES",
        "test_convert_infs",
        "describe",
        "check_pow",
        "test_types",
        "is_object_dtype",
        "_set_noconvert_columns",
        "_convert_for_reindex",
        "_simple_new",
        "_maybe_convert_scalar",
        "diff",
        "test_convert_objects",
        "test_dt_namespace_accessor",
        "_ensure_frozen",
        "test_constructor",
        "__floordiv__",
        "test_pandas_dtype",
        "take_nd",
        "_sanitize_array",
        "_prep_values",
        "test_datetime_with_tz_dtypes",
        "_delegate_method",
        "size",
        "_putmask_smart",
        "_guess_datetime_format_for_array",
        "pandas_dtype",
        "is_datetime64_dtype",
        "test_isscalar_numpy_zerodim_arrays",
        "__contains__",
        "get_indexer",
        "is_datetime_or_timedelta_dtype",
        "test_is_number",
        "nunique",
        "_iter_data",
        "test_setitem_single_column_mixed_datetime",
        "test_isscalar_numpy_arrays",
        "_is_dtype_compat",
        "test_isnull_datetime",
        "_isnull_ndarraylike_old",
        "_use_inf_as_null",
        "test_convert_objects_ints",
        "_isnull_old",
        "bool",
        "is_extension_type",
        "zfill",
        "reset_index",
        "_ensure_localized",
        "_conv_value",
        "_reindex_columns",
        "ensure_compat",
        "_iterable_not_string",
        "_count_not_none",
        "fill_zeros",
        "_get_dtype",
        "_check_for_default_values",
        "test_convert_sql_column_ints",
        "value_counts",
        "combine",
        "_combine",
        "is_datetime_arraylike",
        "check_deprecation",
        "should_store",
        "needs_i8_conversion",
        "is_hashable",
        "_convert_types",
        "is_float_dtype",
        "test_transform_fast",
        "is_datetimelike",
        "duplicated",
        "_not_in",
        "is_bool_indexer",
        "test_scientific_no_exponent",
        "to_numeric",
        "test_unicode",
        "test_assignment_to_dataframe",
        "_cat_compare_op",
        "_to_recarray",
        "test_maybe_convert_scalar",
        "test_lisscalar_pandas_containers",
        "_unpickle_array",
        "_get_group_index_sorter",
        "_join_non_unique",
        "test_slicing_and_getting_ops",
        "str_repeat",
        "test_is_list_like",
        "_in",
        "_make_na_block",
        "test_infer_dtype_datetime",
        "is_number",
        "_maybe_wrap_formatter",
        "_get_dtype_type",
        "to_records",
        "_dtype_to_default_stata_fmt",
        "test_where",
        "_astype_nansafe",
        "delete",
        "_maybe_promote",
        "test_is_integer",
        "_maybe_match_name",
        "test_ensure_int32",
        "_can_hold_element",
        "to_frame",
        "test_is_sequence",
        "_get_dtype_from_object",
        "_set_no_thousands_columns",
        "_convert_object_array",
        "outer",
        "make_sparse",
        "_reindex_index",
        "sort_values",
        "_get_single_indexer",
        "test_convert_sql_column_strings",
        "_maybe_upcast_putmask",
        "_align_series",
        "is_timedelta64_ns_dtype",
        "pad_1d",
        "to_time",
        "is_int_or_datetime_dtype",
        "test_set_value_resize",
        "_concat_sparse",
        "conform",
        "_valid_sp_values",
        "_parse_errorbars",
        "_clean_na_values",
        "_ensure_float",
        "test_nan_to_nat_conversions",
        "__getitem__",
        "str_extractall",
        "setitem",
        "test_is_period",
        "test_is_recompilable",
        "_bins_to_cuts",
        "_init_data",
        "is_string_like",
        "check_result",
        "_soft_convert_objects",
        "test_array_equivalent_compat",
        "infer_freq",
        "_validate_parse_dates_arg",
        "_check_text_labels",
        "_prep_window",
        "_convert_by",
        "test_na_flags_int_categories",
        "_create_categorical",
        "_get_skiprows",
        "take_2d_multi",
        "_get_footer",
        "_maybe_convert_string_to_object",
        "_validate_nrows",
        "test_convert_sql_column_floats",
        "_factorize_keys",
        "_possibly_cast_to_datetime",
        "isscalar",
        "_getitem_frame",
        "_get_axis_number",
        "backfill_2d",
        "use_inf_as_null_cb",
        "_is_label_like",
        "is_re",
        "is_iterator",
        "test_to_object_array_tuples",
        "_hashtable_algo",
        "test_constructor_list_of_lists",
        "_where",
        "_null_fill_value",
        "_construct",
        "slice_indexer",
        "notnull",
        "_unconvert_string_array",
        "_possibly_castable",
        "test_deprecation_core_common_moved",
        "_possibly_downcast_to_dtype",
        "_get_empty_meta",
        "is_categorical_dtype",
        "_compress_group_index",
        "_possibly_convert_platform",
        "_validate_dtype",
        "test_identical",
        "_factor_indexer",
        "test_downcast_conv",
        "is_categorical",
        "is_datetime64_any_dtype",
        "_get_take_nd_function",
        "__add__",
        "_from_arraylike",
        "_possibly_infer_to_datetimelike",
        "test_infer_dtype_from_scalar",
        "fillna",
        "isnull",
        "_concat_categorical",
        "test_datetime_with_timezone",
        "sortlevel",
        "clip",
        "raise_assert_detail",
        "__setitem__",
        "_get_level_indexer",
        "get_group_levels",
        "test_is_hashable",
        "test_isnull_numpy_nat",
        "is_numeric_dtype",
        "_join_i8_wrapper",
        "test_constructor_with_datetime_tz",
        "cut",
        "_ensure_datetimelike_to_i8",
        "is_timedelta64_dtype",
        "_coerce_to_dtypes",
        "set_value",
        "__setslice__",
        "__iter__",
        "test_infer_dtype_timedelta",
        "mask_missing",
        "test_convert_sql_column_unicode",
        "intersection",
        "test_convert_sql_column_bools",
        "test_possibly_convert_objects_copy",
        "_try_cast",
        "test_delevel_infer_dtype",
        "is_sparse",
        "get",
        "scatter_matrix",
        "xs",
        "_nat_new",
        "_possibly_cast_item",
        "is_re_compilable",
        "_should_parse_dates",
        "is_floating_dtype",
        "test_removed_from_core_common",
        "_create_table_setup",
        "_datetime_to_stata_elapsed_vec",
        "test_is_datetimelike_array_all_nan_nat_like",
        "dropna",
        "convert",
        "test_abc_types",
        "_bool_method_SERIES",
        "na_value_for_dtype",
        "_clean_options",
        "test_0d_array",
        "memory_usage",
        "_format_value",
        "test_isscalar_numpy_array_scalars",
        "_format_label",
        "_dt_to_float_ordinal",
        "_add_comparison_methods",
        "_get_formatter",
        "test_isnull_nat",
        "test_infer_dtype_all_nan_nat_like",
        "_getitem_iterable",
        "check_compound_invert_op",
        "_cython_operation",
        "dtype",
        "_evaluate_compare",
        "searchsorted",
        "__new__",
        "is_datetimetz",
        "_infer_fill_value",
        "_add_datetimelike_methods",
        "test_isnull_lists",
        "test_setitem_dtype_upcast",
        "__init__",
        "format_array",
        "_check_visible",
        "_arith_method_FRAME",
        "_pop_header_name",
        "is_any_int_dtype",
        "_getitem_nested_tuple",
        "_infer_dtype_from_scalar",
        "_maybe_fill",
        "test_object",
        "test_where_numeric_with_string",
        "_possibly_compare",
        "is_string_like_dtype",
        "test_infer_dtype_bytes",
        "test_isscalar_builtin_nonscalars",
        "test_isinf_scalar",
        "test_convert_objects_complex_number",
        "test_getitem_unordered_dup",
        "_take_nd_generic",
        "test_bools",
        "take",
        "is_dictlike",
        "test_is_re",
        "filter",
        "pivot_annual",
        "union",
        "test_convert_sql_column_longs",
        "test_coerce_to_dtype",
        "_generate",
        "_python_agg_general",
        "_get_data_algo",
        "is_categorical_astype",
        "__sizeof__",
        "factorize",
        "test_to_datetime_tz_psycopg2",
        "_try_coerce_result",
        "_make_date_converter",
        "_plot",
        "ensure_float",
        "append",
        "_lcd_dtypes",
        "_convert_to_list_like",
        "test_floats",
        "_get_counts_nanvar",
        "_offset",
        "test_is_named_tuple",
        "test_is_dict_like",
        "is_named_tuple",
        "test_value_counts_unique_nunique",
        "apply",
        "_non_reducing_slice",
        "_process_date_conversion",
        "validate_metadata",
        "sort_index",
        "group_info",
        "_slice_take_blocks_ax0",
        "test_is_bool",
        "_selection_list",
        "is_list_like",
        "is_bool_dtype",
        "_setitem_frame",
        "_sort_labels",
        "get_empty_dtype_and_na",
        "_handle_date_column",
        "result",
        "backfill_1d",
        "test_datetime",
        "_get_series_result_type",
        "_gotitem",
        "corr",
        "lexsort_depth",
        "_try_coerce_args",
        "from_records",
        "test_convert_downcast_int64",
        "_replace_single",
        "test_array_equivalent",
        "test_quantile_interpolation_dtype",
        "_guess_time_format_for_array",
        "equals",
        "test_maybe_convert_numeric_infinities",
        "_dtype_to_stata_type",
        "_make_str_accessor",
        "rename",
        "_dt_index_cmp",
        "_convert_scalar_indexer",
        "test_memory_usage",
        "test_datetimeindex_from_empty_datetime64_array",
        "_isnull_new",
        "get_value",
        "test_categorical",
        "_aggregate_multiple_funcs",
        "_validate_date_like_dtype",
        "is_datetime64tz_dtype",
        "_sanitize_values",
        "is_null_datelike_scalar",
        "test_to_object_array_width",
        "_format_strings",
        "_to_datetime",
        "_align_frame",
        "_args_adjust",
        "is_datetimelike_v_numeric",
        "test_maybe_convert_string_to_array",
        "hist_frame",
        "test_len",
        "quantile",
        "_parse_excel",
        "test_na_value_for_dtype",
        "is_dtype_equal",
        "is_complex_dtype",
        "_reindex_with_indexers",
        "_convert_to_array",
        "_reindex_non_unique",
        "_sanitize_column",
        "interpolate_1d",
        "_coerce_indexer_dtype",
        "_isnull_ndarraylike",
        "write_data",
        "_make_plot",
        "test_ix_loc_consistency",
        "is_integer_dtype",
        "isin",
        "_count_level",
        "_aggregate",
        "_coerce_to_dtype",
        "get_dummies",
        "_invalidate_string_dtypes",
        "test_first_last_nth",
        "pct_change",
        "_td_index_cmp",
        "is_period_arraylike",
        "_apply",
        "shift",
        "rename_axis",
        "test_string",
        "validate",
        "test_group_ohlc",
        "hasnans",
        "test_integers",
        "test_date",
        "test_isnull",
        "test_array_equivalent_str",
        "is_sequence",
        "check_simple_cmp_op",
        "is_datetimelike_v_object",
        "_astype",
        "_attempt_YYYYMMDD",
        "count",
        "test_isscalar_pandas_scalars",
        "_add_numeric_methods_binary",
        "_get_blkno_placements",
        "_obj_with_exclusions",
        "_is_na_compat",
        "_convert_freq",
        "_assert_take_fillable",
        "write_array",
        "_ixs",
        "is_datetime64_ns_dtype",
        "name",
        "_get_counts",
        "check_bool_indexer",
        "cov",
        "_assert_can_do_op",
        "test_isscalar_builtin_scalars",
        "read",
        "check",
        "_maybe_upcast",
        "_selected_obj",
        "_validate_color_args",
        "cumsum",
        "_arith_method_PANEL",
        "_map",
        "mode",
        "_parse_date_columns",
        "test_api",
        "_prep_ndarray",
        "get_datevalue",
        "_get_standard_colors",
        "test_is_timedelta",
        "_maybe_to_sparse",
        "test_apply",
        "check_complex_cmp_op",
        "_arith_method",
        "test_set_value",
        "test_constructor_categorical",
        "putmask",
        "_assert_can_do_setop",
        "_subplots",
        "test_convert_non_hashable",
        "is_string_dtype",
        "test_length_zero",
        "is_numeric_v_string_like",
        "select_dtypes",
        "test_is_float",
        "is_int64_dtype",
        "_possibly_convert_objects",
        "_concat_datetime",
        "_reduce",
        "reindex",
        "_coerce_to_ndarray",
        "_prepare_categoricals",
        "pprint_thing",
        "test_single_element_ix_dont_upcast",
        "test_astype_to_other",
        "test_notnull",
        "round",
        "_assemble_from_unit_mappings",
        "__array_wrap__",
        "_wrap_result",
        "transpose",
        "_flatten",
        "get_values",
        "replace",
        "_nsorted",
        "test_maybe_convert_numeric_post_floatify_nan",
        "_value_counts_arraylike",
        "union_categoricals",
        "join",
        "qcut"
      ]
    },
    "file": {
      "file_name": "missing.py",
      "file_nloc": 376,
      "file_complexity": 124,
      "file_token_count": 2696,
      "file_before": "\"\"\"\nRoutines for filling missing data\n\"\"\"\n\nimport numpy as np\nfrom distutils.version import LooseVersion\n\nimport pandas.core.common as com\nimport pandas.algos as algos\nimport pandas.lib as lib\nfrom pandas.compat import range, string_types\n\n\ndef mask_missing(arr, values_to_mask):\n    \"\"\"\n    Return a masking array of same size/shape as arr\n    with entries equaling any member of values_to_mask set to True\n    \"\"\"\n    if not isinstance(values_to_mask, (list, np.ndarray)):\n        values_to_mask = [values_to_mask]\n\n    try:\n        values_to_mask = np.array(values_to_mask, dtype=arr.dtype)\n    except Exception:\n        values_to_mask = np.array(values_to_mask, dtype=object)\n\n    na_mask = com.isnull(values_to_mask)\n    nonna = values_to_mask[~na_mask]\n\n    mask = None\n    for x in nonna:\n        if mask is None:\n\n            # numpy elementwise comparison warning\n            if com.is_numeric_v_string_like(arr, x):\n                mask = False\n            else:\n                mask = arr == x\n\n            # if x is a string and arr is not, then we get False and we must\n            # expand the mask to size arr.shape\n            if lib.isscalar(mask):\n                mask = np.zeros(arr.shape, dtype=bool)\n        else:\n\n            # numpy elementwise comparison warning\n            if com.is_numeric_v_string_like(arr, x):\n                mask |= False\n            else:\n                mask |= arr == x\n\n    if na_mask.any():\n        if mask is None:\n            mask = com.isnull(arr)\n        else:\n            mask |= com.isnull(arr)\n\n    return mask\n\n\ndef clean_fill_method(method, allow_nearest=False):\n    # asfreq is compat for resampling\n    if method in [None, 'asfreq']:\n        return None\n\n    if isinstance(method, string_types):\n        method = method.lower()\n        if method == 'ffill':\n            method = 'pad'\n        elif method == 'bfill':\n            method = 'backfill'\n\n    valid_methods = ['pad', 'backfill']\n    expecting = 'pad (ffill) or backfill (bfill)'\n    if allow_nearest:\n        valid_methods.append('nearest')\n        expecting = 'pad (ffill), backfill (bfill) or nearest'\n    if method not in valid_methods:\n        msg = ('Invalid fill method. Expecting %s. Got %s' %\n               (expecting, method))\n        raise ValueError(msg)\n    return method\n\n\ndef clean_interp_method(method, **kwargs):\n    order = kwargs.get('order')\n    valid = ['linear', 'time', 'index', 'values', 'nearest', 'zero', 'slinear',\n             'quadratic', 'cubic', 'barycentric', 'polynomial', 'krogh',\n             'piecewise_polynomial', 'pchip', 'akima', 'spline',\n             'from_derivatives']\n    if method in ('spline', 'polynomial') and order is None:\n        raise ValueError(\"You must specify the order of the spline or \"\n                         \"polynomial.\")\n    if method not in valid:\n        raise ValueError(\"method must be one of {0}.\"\n                         \"Got '{1}' instead.\".format(valid, method))\n\n    return method\n\n\ndef interpolate_1d(xvalues, yvalues, method='linear', limit=None,\n                   limit_direction='forward', fill_value=None,\n                   bounds_error=False, order=None, **kwargs):\n    \"\"\"\n    Logic for the 1-d interpolation.  The result should be 1-d, inputs\n    xvalues and yvalues will each be 1-d arrays of the same length.\n\n    Bounds_error is currently hardcoded to False since non-scipy ones don't\n    take it as an argumnet.\n    \"\"\"\n    # Treat the original, non-scipy methods first.\n\n    invalid = com.isnull(yvalues)\n    valid = ~invalid\n\n    if not valid.any():\n        # have to call np.asarray(xvalues) since xvalues could be an Index\n        # which cant be mutated\n        result = np.empty_like(np.asarray(xvalues), dtype=np.float64)\n        result.fill(np.nan)\n        return result\n\n    if valid.all():\n        return yvalues\n\n    if method == 'time':\n        if not getattr(xvalues, 'is_all_dates', None):\n            # if not issubclass(xvalues.dtype.type, np.datetime64):\n            raise ValueError('time-weighted interpolation only works '\n                             'on Series or DataFrames with a '\n                             'DatetimeIndex')\n        method = 'values'\n\n    def _interp_limit(invalid, fw_limit, bw_limit):\n        \"Get idx of values that won't be filled b/c they exceed the limits.\"\n        for x in np.where(invalid)[0]:\n            if invalid[max(0, x - fw_limit):x + bw_limit + 1].all():\n                yield x\n\n    valid_limit_directions = ['forward', 'backward', 'both']\n    limit_direction = limit_direction.lower()\n    if limit_direction not in valid_limit_directions:\n        raise ValueError('Invalid limit_direction: expecting one of %r, got '\n                         '%r.' % (valid_limit_directions, limit_direction))\n\n    from pandas import Series\n    ys = Series(yvalues)\n    start_nans = set(range(ys.first_valid_index()))\n    end_nans = set(range(1 + ys.last_valid_index(), len(valid)))\n\n    # This is a list of the indexes in the series whose yvalue is currently\n    # NaN, but whose interpolated yvalue will be overwritten with NaN after\n    # computing the interpolation. For each index in this list, one of these\n    # conditions is true of the corresponding NaN in the yvalues:\n    #\n    # a) It is one of a chain of NaNs at the beginning of the series, and\n    #    either limit is not specified or limit_direction is 'forward'.\n    # b) It is one of a chain of NaNs at the end of the series, and limit is\n    #    specified and limit_direction is 'backward' or 'both'.\n    # c) Limit is nonzero and it is further than limit from the nearest non-NaN\n    #    value (with respect to the limit_direction setting).\n    #\n    # The default behavior is to fill forward with no limit, ignoring NaNs at\n    # the beginning (see issues #9218 and #10420)\n    violate_limit = sorted(start_nans)\n\n    if limit:\n        if limit_direction == 'forward':\n            violate_limit = sorted(start_nans | set(_interp_limit(invalid,\n                                                                  limit, 0)))\n        if limit_direction == 'backward':\n            violate_limit = sorted(end_nans | set(_interp_limit(invalid, 0,\n                                                                limit)))\n        if limit_direction == 'both':\n            violate_limit = sorted(_interp_limit(invalid, limit, limit))\n\n    xvalues = getattr(xvalues, 'values', xvalues)\n    yvalues = getattr(yvalues, 'values', yvalues)\n    result = yvalues.copy()\n\n    if method in ['linear', 'time', 'index', 'values']:\n        if method in ('values', 'index'):\n            inds = np.asarray(xvalues)\n            # hack for DatetimeIndex, #1646\n            if issubclass(inds.dtype.type, np.datetime64):\n                inds = inds.view(np.int64)\n            if inds.dtype == np.object_:\n                inds = lib.maybe_convert_objects(inds)\n        else:\n            inds = xvalues\n        result[invalid] = np.interp(inds[invalid], inds[valid], yvalues[valid])\n        result[violate_limit] = np.nan\n        return result\n\n    sp_methods = ['nearest', 'zero', 'slinear', 'quadratic', 'cubic',\n                  'barycentric', 'krogh', 'spline', 'polynomial',\n                  'from_derivatives', 'piecewise_polynomial', 'pchip', 'akima']\n\n    if method in sp_methods:\n        inds = np.asarray(xvalues)\n        # hack for DatetimeIndex, #1646\n        if issubclass(inds.dtype.type, np.datetime64):\n            inds = inds.view(np.int64)\n        result[invalid] = _interpolate_scipy_wrapper(inds[valid],\n                                                     yvalues[valid],\n                                                     inds[invalid],\n                                                     method=method,\n                                                     fill_value=fill_value,\n                                                     bounds_error=bounds_error,\n                                                     order=order, **kwargs)\n        result[violate_limit] = np.nan\n        return result\n\n\ndef _interpolate_scipy_wrapper(x, y, new_x, method, fill_value=None,\n                               bounds_error=False, order=None, **kwargs):\n    \"\"\"\n    passed off to scipy.interpolate.interp1d. method is scipy's kind.\n    Returns an array interpolated at new_x.  Add any new methods to\n    the list in _clean_interp_method\n    \"\"\"\n    try:\n        from scipy import interpolate\n        # TODO: Why is DatetimeIndex being imported here?\n        from pandas import DatetimeIndex  # noqa\n    except ImportError:\n        raise ImportError('{0} interpolation requires Scipy'.format(method))\n\n    new_x = np.asarray(new_x)\n\n    # ignores some kwargs that could be passed along.\n    alt_methods = {\n        'barycentric': interpolate.barycentric_interpolate,\n        'krogh': interpolate.krogh_interpolate,\n        'from_derivatives': _from_derivatives,\n        'piecewise_polynomial': _from_derivatives,\n    }\n\n    if getattr(x, 'is_all_dates', False):\n        # GH 5975, scipy.interp1d can't hande datetime64s\n        x, new_x = x._values.astype('i8'), new_x.astype('i8')\n\n    if method == 'pchip':\n        try:\n            alt_methods['pchip'] = interpolate.pchip_interpolate\n        except AttributeError:\n            raise ImportError(\"Your version of Scipy does not support \"\n                              \"PCHIP interpolation.\")\n    elif method == 'akima':\n        try:\n            from scipy.interpolate import Akima1DInterpolator  # noqa\n            alt_methods['akima'] = _akima_interpolate\n        except ImportError:\n            raise ImportError(\"Your version of Scipy does not support \"\n                              \"Akima interpolation.\")\n\n    interp1d_methods = ['nearest', 'zero', 'slinear', 'quadratic', 'cubic',\n                        'polynomial']\n    if method in interp1d_methods:\n        if method == 'polynomial':\n            method = order\n        terp = interpolate.interp1d(x, y, kind=method, fill_value=fill_value,\n                                    bounds_error=bounds_error)\n        new_y = terp(new_x)\n    elif method == 'spline':\n        # GH #10633\n        if not order:\n            raise ValueError(\"order needs to be specified and greater than 0\")\n        terp = interpolate.UnivariateSpline(x, y, k=order, **kwargs)\n        new_y = terp(new_x)\n    else:\n        # GH 7295: need to be able to write for some reason\n        # in some circumstances: check all three\n        if not x.flags.writeable:\n            x = x.copy()\n        if not y.flags.writeable:\n            y = y.copy()\n        if not new_x.flags.writeable:\n            new_x = new_x.copy()\n        method = alt_methods[method]\n        new_y = method(x, y, new_x, **kwargs)\n    return new_y\n\n\ndef _from_derivatives(xi, yi, x, order=None, der=0, extrapolate=False):\n    \"\"\"\n    Convenience function for interpolate.BPoly.from_derivatives\n\n    Construct a piecewise polynomial in the Bernstein basis, compatible\n    with the specified values and derivatives at breakpoints.\n\n    Parameters\n    ----------\n    xi : array_like\n        sorted 1D array of x-coordinates\n    yi : array_like or list of array-likes\n        yi[i][j] is the j-th derivative known at xi[i]\n    orders : None or int or array_like of ints. Default: None.\n        Specifies the degree of local polynomials. If not None, some\n        derivatives are ignored.\n    der : int or list\n        How many derivatives to extract; None for all potentially nonzero\n        derivatives (that is a number equal to the number of points), or a\n        list of derivatives to extract. This numberincludes the function\n        value as 0th derivative.\n     extrapolate : bool, optional\n        Whether to extrapolate to ouf-of-bounds points based on first and last\n        intervals, or to return NaNs. Default: True.\n\n    See Also\n    --------\n    scipy.interpolate.BPoly.from_derivatives\n\n    Returns\n    -------\n    y : scalar or array_like\n        The result, of length R or length M or M by R,\n\n    \"\"\"\n    import scipy\n    from scipy import interpolate\n\n    if LooseVersion(scipy.__version__) < '0.18.0':\n        try:\n            method = interpolate.piecewise_polynomial_interpolate\n            return method(xi, yi.reshape(-1, 1), x,\n                          orders=order, der=der)\n        except AttributeError:\n            pass\n\n    # return the method for compat with scipy version & backwards compat\n    method = interpolate.BPoly.from_derivatives\n    m = method(xi, yi.reshape(-1, 1),\n               orders=order, extrapolate=extrapolate)\n\n    return m(x)\n\n\ndef _akima_interpolate(xi, yi, x, der=0, axis=0):\n    \"\"\"\n    Convenience function for akima interpolation.\n    xi and yi are arrays of values used to approximate some function f,\n    with ``yi = f(xi)``.\n\n    See `Akima1DInterpolator` for details.\n\n    Parameters\n    ----------\n    xi : array_like\n        A sorted list of x-coordinates, of length N.\n    yi :  array_like\n        A 1-D array of real values.  `yi`'s length along the interpolation\n        axis must be equal to the length of `xi`. If N-D array, use axis\n        parameter to select correct axis.\n    x : scalar or array_like\n        Of length M.\n    der : int or list, optional\n        How many derivatives to extract; None for all potentially\n        nonzero derivatives (that is a number equal to the number\n        of points), or a list of derivatives to extract. This number\n        includes the function value as 0th derivative.\n    axis : int, optional\n        Axis in the yi array corresponding to the x-coordinate values.\n\n    See Also\n    --------\n    scipy.interpolate.Akima1DInterpolator\n\n    Returns\n    -------\n    y : scalar or array_like\n        The result, of length R or length M or M by R,\n\n    \"\"\"\n    from scipy import interpolate\n    try:\n        P = interpolate.Akima1DInterpolator(xi, yi, axis=axis)\n    except TypeError:\n        # Scipy earlier than 0.17.0 missing axis\n        P = interpolate.Akima1DInterpolator(xi, yi)\n    if der == 0:\n        return P(x)\n    elif interpolate._isscalar(der):\n        return P(x, der=der)\n    else:\n        return [P(x, nu) for nu in der]\n\n\ndef interpolate_2d(values, method='pad', axis=0, limit=None, fill_value=None,\n                   dtype=None):\n    \"\"\" perform an actual interpolation of values, values will be make 2-d if\n    needed fills inplace, returns the result\n    \"\"\"\n\n    transf = (lambda x: x) if axis == 0 else (lambda x: x.T)\n\n    # reshape a 1 dim if needed\n    ndim = values.ndim\n    if values.ndim == 1:\n        if axis != 0:  # pragma: no cover\n            raise AssertionError(\"cannot interpolate on a ndim == 1 with \"\n                                 \"axis != 0\")\n        values = values.reshape(tuple((1, ) + values.shape))\n\n    if fill_value is None:\n        mask = None\n    else:  # todo create faster fill func without masking\n        mask = mask_missing(transf(values), fill_value)\n\n    method = clean_fill_method(method)\n    if method == 'pad':\n        values = transf(pad_2d(\n            transf(values), limit=limit, mask=mask, dtype=dtype))\n    else:\n        values = transf(backfill_2d(\n            transf(values), limit=limit, mask=mask, dtype=dtype))\n\n    # reshape back\n    if ndim == 1:\n        values = values[0]\n\n    return values\n\n\ndef _interp_wrapper(f, wrap_dtype, na_override=None):\n    def wrapper(arr, mask, limit=None):\n        view = arr.view(wrap_dtype)\n        f(view, mask, limit=limit)\n\n    return wrapper\n\n\n_pad_1d_datetime = _interp_wrapper(algos.pad_inplace_int64, np.int64)\n_pad_2d_datetime = _interp_wrapper(algos.pad_2d_inplace_int64, np.int64)\n_backfill_1d_datetime = _interp_wrapper(algos.backfill_inplace_int64, np.int64)\n_backfill_2d_datetime = _interp_wrapper(algos.backfill_2d_inplace_int64,\n                                        np.int64)\n\n\ndef pad_1d(values, limit=None, mask=None, dtype=None):\n\n    if dtype is None:\n        dtype = values.dtype\n    _method = None\n    if com.is_float_dtype(values):\n        _method = getattr(algos, 'pad_inplace_%s' % dtype.name, None)\n    elif dtype in com._DATELIKE_DTYPES or com.is_datetime64_dtype(values):\n        _method = _pad_1d_datetime\n    elif com.is_integer_dtype(values):\n        values = com._ensure_float64(values)\n        _method = algos.pad_inplace_float64\n    elif values.dtype == np.object_:\n        _method = algos.pad_inplace_object\n\n    if _method is None:\n        raise ValueError('Invalid dtype for pad_1d [%s]' % dtype.name)\n\n    if mask is None:\n        mask = com.isnull(values)\n    mask = mask.view(np.uint8)\n    _method(values, mask, limit=limit)\n    return values\n\n\ndef backfill_1d(values, limit=None, mask=None, dtype=None):\n\n    if dtype is None:\n        dtype = values.dtype\n    _method = None\n    if com.is_float_dtype(values):\n        _method = getattr(algos, 'backfill_inplace_%s' % dtype.name, None)\n    elif dtype in com._DATELIKE_DTYPES or com.is_datetime64_dtype(values):\n        _method = _backfill_1d_datetime\n    elif com.is_integer_dtype(values):\n        values = com._ensure_float64(values)\n        _method = algos.backfill_inplace_float64\n    elif values.dtype == np.object_:\n        _method = algos.backfill_inplace_object\n\n    if _method is None:\n        raise ValueError('Invalid dtype for backfill_1d [%s]' % dtype.name)\n\n    if mask is None:\n        mask = com.isnull(values)\n    mask = mask.view(np.uint8)\n\n    _method(values, mask, limit=limit)\n    return values\n\n\ndef pad_2d(values, limit=None, mask=None, dtype=None):\n\n    if dtype is None:\n        dtype = values.dtype\n    _method = None\n    if com.is_float_dtype(values):\n        _method = getattr(algos, 'pad_2d_inplace_%s' % dtype.name, None)\n    elif dtype in com._DATELIKE_DTYPES or com.is_datetime64_dtype(values):\n        _method = _pad_2d_datetime\n    elif com.is_integer_dtype(values):\n        values = com._ensure_float64(values)\n        _method = algos.pad_2d_inplace_float64\n    elif values.dtype == np.object_:\n        _method = algos.pad_2d_inplace_object\n\n    if _method is None:\n        raise ValueError('Invalid dtype for pad_2d [%s]' % dtype.name)\n\n    if mask is None:\n        mask = com.isnull(values)\n    mask = mask.view(np.uint8)\n\n    if np.all(values.shape):\n        _method(values, mask, limit=limit)\n    else:\n        # for test coverage\n        pass\n    return values\n\n\ndef backfill_2d(values, limit=None, mask=None, dtype=None):\n\n    if dtype is None:\n        dtype = values.dtype\n    _method = None\n    if com.is_float_dtype(values):\n        _method = getattr(algos, 'backfill_2d_inplace_%s' % dtype.name, None)\n    elif dtype in com._DATELIKE_DTYPES or com.is_datetime64_dtype(values):\n        _method = _backfill_2d_datetime\n    elif com.is_integer_dtype(values):\n        values = com._ensure_float64(values)\n        _method = algos.backfill_2d_inplace_float64\n    elif values.dtype == np.object_:\n        _method = algos.backfill_2d_inplace_object\n\n    if _method is None:\n        raise ValueError('Invalid dtype for backfill_2d [%s]' % dtype.name)\n\n    if mask is None:\n        mask = com.isnull(values)\n    mask = mask.view(np.uint8)\n\n    if np.all(values.shape):\n        _method(values, mask, limit=limit)\n    else:\n        # for test coverage\n        pass\n    return values\n\n\n_fill_methods = {'pad': pad_1d, 'backfill': backfill_1d}\n\n\ndef get_fill_func(method):\n    method = clean_fill_method(method)\n    return _fill_methods[method]\n\n\ndef clean_reindex_fill_method(method):\n    return clean_fill_method(method, allow_nearest=True)\n\n\ndef fill_zeros(result, x, y, name, fill):\n    \"\"\"\n    if this is a reversed op, then flip x,y\n\n    if we have an integer value (or array in y)\n    and we have 0's, fill them with the fill,\n    return the result\n\n    mask the nan's from x\n    \"\"\"\n    if fill is None or com.is_float_dtype(result):\n        return result\n\n    if name.startswith(('r', '__r')):\n        x, y = y, x\n\n    is_typed_variable = (hasattr(y, 'dtype') or hasattr(y, 'type'))\n    is_scalar = lib.isscalar(y)\n\n    if not is_typed_variable and not is_scalar:\n        return result\n\n    if is_scalar:\n        y = np.array(y)\n\n    if com.is_integer_dtype(y):\n\n        if (y == 0).any():\n\n            # GH 7325, mask and nans must be broadcastable (also: PR 9308)\n            # Raveling and then reshaping makes np.putmask faster\n            mask = ((y == 0) & ~np.isnan(result)).ravel()\n\n            shape = result.shape\n            result = result.astype('float64', copy=False).ravel()\n\n            np.putmask(result, mask, fill)\n\n            # if we have a fill of inf, then sign it correctly\n            # (GH 6178 and PR 9308)\n            if np.isinf(fill):\n                signs = np.sign(y if name.startswith(('r', '__r')) else x)\n                negative_inf_mask = (signs.ravel() < 0) & mask\n                np.putmask(result, negative_inf_mask, -fill)\n\n            if \"floordiv\" in name:  # (PR 9308)\n                nan_mask = ((y == 0) & (x == 0)).ravel()\n                np.putmask(result, nan_mask, np.nan)\n\n            result = result.reshape(shape)\n\n    return result\n",
      "file_after": "\"\"\"\nRoutines for filling missing data\n\"\"\"\n\nimport numpy as np\nfrom distutils.version import LooseVersion\n\nimport pandas.algos as algos\nimport pandas.lib as lib\nfrom pandas.compat import range, string_types\nfrom pandas.types.common import (is_numeric_v_string_like,\n                                 is_float_dtype, is_datetime64_dtype,\n                                 is_integer_dtype, _ensure_float64,\n                                 is_scalar,\n                                 _DATELIKE_DTYPES)\nfrom pandas.types.missing import isnull\n\n\ndef mask_missing(arr, values_to_mask):\n    \"\"\"\n    Return a masking array of same size/shape as arr\n    with entries equaling any member of values_to_mask set to True\n    \"\"\"\n    if not isinstance(values_to_mask, (list, np.ndarray)):\n        values_to_mask = [values_to_mask]\n\n    try:\n        values_to_mask = np.array(values_to_mask, dtype=arr.dtype)\n    except Exception:\n        values_to_mask = np.array(values_to_mask, dtype=object)\n\n    na_mask = isnull(values_to_mask)\n    nonna = values_to_mask[~na_mask]\n\n    mask = None\n    for x in nonna:\n        if mask is None:\n\n            # numpy elementwise comparison warning\n            if is_numeric_v_string_like(arr, x):\n                mask = False\n            else:\n                mask = arr == x\n\n            # if x is a string and arr is not, then we get False and we must\n            # expand the mask to size arr.shape\n            if is_scalar(mask):\n                mask = np.zeros(arr.shape, dtype=bool)\n        else:\n\n            # numpy elementwise comparison warning\n            if is_numeric_v_string_like(arr, x):\n                mask |= False\n            else:\n                mask |= arr == x\n\n    if na_mask.any():\n        if mask is None:\n            mask = isnull(arr)\n        else:\n            mask |= isnull(arr)\n\n    return mask\n\n\ndef clean_fill_method(method, allow_nearest=False):\n    # asfreq is compat for resampling\n    if method in [None, 'asfreq']:\n        return None\n\n    if isinstance(method, string_types):\n        method = method.lower()\n        if method == 'ffill':\n            method = 'pad'\n        elif method == 'bfill':\n            method = 'backfill'\n\n    valid_methods = ['pad', 'backfill']\n    expecting = 'pad (ffill) or backfill (bfill)'\n    if allow_nearest:\n        valid_methods.append('nearest')\n        expecting = 'pad (ffill), backfill (bfill) or nearest'\n    if method not in valid_methods:\n        msg = ('Invalid fill method. Expecting %s. Got %s' %\n               (expecting, method))\n        raise ValueError(msg)\n    return method\n\n\ndef clean_interp_method(method, **kwargs):\n    order = kwargs.get('order')\n    valid = ['linear', 'time', 'index', 'values', 'nearest', 'zero', 'slinear',\n             'quadratic', 'cubic', 'barycentric', 'polynomial', 'krogh',\n             'piecewise_polynomial', 'pchip', 'akima', 'spline',\n             'from_derivatives']\n    if method in ('spline', 'polynomial') and order is None:\n        raise ValueError(\"You must specify the order of the spline or \"\n                         \"polynomial.\")\n    if method not in valid:\n        raise ValueError(\"method must be one of {0}.\"\n                         \"Got '{1}' instead.\".format(valid, method))\n\n    return method\n\n\ndef interpolate_1d(xvalues, yvalues, method='linear', limit=None,\n                   limit_direction='forward', fill_value=None,\n                   bounds_error=False, order=None, **kwargs):\n    \"\"\"\n    Logic for the 1-d interpolation.  The result should be 1-d, inputs\n    xvalues and yvalues will each be 1-d arrays of the same length.\n\n    Bounds_error is currently hardcoded to False since non-scipy ones don't\n    take it as an argumnet.\n    \"\"\"\n    # Treat the original, non-scipy methods first.\n\n    invalid = isnull(yvalues)\n    valid = ~invalid\n\n    if not valid.any():\n        # have to call np.asarray(xvalues) since xvalues could be an Index\n        # which cant be mutated\n        result = np.empty_like(np.asarray(xvalues), dtype=np.float64)\n        result.fill(np.nan)\n        return result\n\n    if valid.all():\n        return yvalues\n\n    if method == 'time':\n        if not getattr(xvalues, 'is_all_dates', None):\n            # if not issubclass(xvalues.dtype.type, np.datetime64):\n            raise ValueError('time-weighted interpolation only works '\n                             'on Series or DataFrames with a '\n                             'DatetimeIndex')\n        method = 'values'\n\n    def _interp_limit(invalid, fw_limit, bw_limit):\n        \"Get idx of values that won't be filled b/c they exceed the limits.\"\n        for x in np.where(invalid)[0]:\n            if invalid[max(0, x - fw_limit):x + bw_limit + 1].all():\n                yield x\n\n    valid_limit_directions = ['forward', 'backward', 'both']\n    limit_direction = limit_direction.lower()\n    if limit_direction not in valid_limit_directions:\n        raise ValueError('Invalid limit_direction: expecting one of %r, got '\n                         '%r.' % (valid_limit_directions, limit_direction))\n\n    from pandas import Series\n    ys = Series(yvalues)\n    start_nans = set(range(ys.first_valid_index()))\n    end_nans = set(range(1 + ys.last_valid_index(), len(valid)))\n\n    # This is a list of the indexes in the series whose yvalue is currently\n    # NaN, but whose interpolated yvalue will be overwritten with NaN after\n    # computing the interpolation. For each index in this list, one of these\n    # conditions is true of the corresponding NaN in the yvalues:\n    #\n    # a) It is one of a chain of NaNs at the beginning of the series, and\n    #    either limit is not specified or limit_direction is 'forward'.\n    # b) It is one of a chain of NaNs at the end of the series, and limit is\n    #    specified and limit_direction is 'backward' or 'both'.\n    # c) Limit is nonzero and it is further than limit from the nearest non-NaN\n    #    value (with respect to the limit_direction setting).\n    #\n    # The default behavior is to fill forward with no limit, ignoring NaNs at\n    # the beginning (see issues #9218 and #10420)\n    violate_limit = sorted(start_nans)\n\n    if limit:\n        if limit_direction == 'forward':\n            violate_limit = sorted(start_nans | set(_interp_limit(invalid,\n                                                                  limit, 0)))\n        if limit_direction == 'backward':\n            violate_limit = sorted(end_nans | set(_interp_limit(invalid, 0,\n                                                                limit)))\n        if limit_direction == 'both':\n            violate_limit = sorted(_interp_limit(invalid, limit, limit))\n\n    xvalues = getattr(xvalues, 'values', xvalues)\n    yvalues = getattr(yvalues, 'values', yvalues)\n    result = yvalues.copy()\n\n    if method in ['linear', 'time', 'index', 'values']:\n        if method in ('values', 'index'):\n            inds = np.asarray(xvalues)\n            # hack for DatetimeIndex, #1646\n            if issubclass(inds.dtype.type, np.datetime64):\n                inds = inds.view(np.int64)\n            if inds.dtype == np.object_:\n                inds = lib.maybe_convert_objects(inds)\n        else:\n            inds = xvalues\n        result[invalid] = np.interp(inds[invalid], inds[valid], yvalues[valid])\n        result[violate_limit] = np.nan\n        return result\n\n    sp_methods = ['nearest', 'zero', 'slinear', 'quadratic', 'cubic',\n                  'barycentric', 'krogh', 'spline', 'polynomial',\n                  'from_derivatives', 'piecewise_polynomial', 'pchip', 'akima']\n\n    if method in sp_methods:\n        inds = np.asarray(xvalues)\n        # hack for DatetimeIndex, #1646\n        if issubclass(inds.dtype.type, np.datetime64):\n            inds = inds.view(np.int64)\n        result[invalid] = _interpolate_scipy_wrapper(inds[valid],\n                                                     yvalues[valid],\n                                                     inds[invalid],\n                                                     method=method,\n                                                     fill_value=fill_value,\n                                                     bounds_error=bounds_error,\n                                                     order=order, **kwargs)\n        result[violate_limit] = np.nan\n        return result\n\n\ndef _interpolate_scipy_wrapper(x, y, new_x, method, fill_value=None,\n                               bounds_error=False, order=None, **kwargs):\n    \"\"\"\n    passed off to scipy.interpolate.interp1d. method is scipy's kind.\n    Returns an array interpolated at new_x.  Add any new methods to\n    the list in _clean_interp_method\n    \"\"\"\n    try:\n        from scipy import interpolate\n        # TODO: Why is DatetimeIndex being imported here?\n        from pandas import DatetimeIndex  # noqa\n    except ImportError:\n        raise ImportError('{0} interpolation requires Scipy'.format(method))\n\n    new_x = np.asarray(new_x)\n\n    # ignores some kwargs that could be passed along.\n    alt_methods = {\n        'barycentric': interpolate.barycentric_interpolate,\n        'krogh': interpolate.krogh_interpolate,\n        'from_derivatives': _from_derivatives,\n        'piecewise_polynomial': _from_derivatives,\n    }\n\n    if getattr(x, 'is_all_dates', False):\n        # GH 5975, scipy.interp1d can't hande datetime64s\n        x, new_x = x._values.astype('i8'), new_x.astype('i8')\n\n    if method == 'pchip':\n        try:\n            alt_methods['pchip'] = interpolate.pchip_interpolate\n        except AttributeError:\n            raise ImportError(\"Your version of Scipy does not support \"\n                              \"PCHIP interpolation.\")\n    elif method == 'akima':\n        try:\n            from scipy.interpolate import Akima1DInterpolator  # noqa\n            alt_methods['akima'] = _akima_interpolate\n        except ImportError:\n            raise ImportError(\"Your version of Scipy does not support \"\n                              \"Akima interpolation.\")\n\n    interp1d_methods = ['nearest', 'zero', 'slinear', 'quadratic', 'cubic',\n                        'polynomial']\n    if method in interp1d_methods:\n        if method == 'polynomial':\n            method = order\n        terp = interpolate.interp1d(x, y, kind=method, fill_value=fill_value,\n                                    bounds_error=bounds_error)\n        new_y = terp(new_x)\n    elif method == 'spline':\n        # GH #10633\n        if not order:\n            raise ValueError(\"order needs to be specified and greater than 0\")\n        terp = interpolate.UnivariateSpline(x, y, k=order, **kwargs)\n        new_y = terp(new_x)\n    else:\n        # GH 7295: need to be able to write for some reason\n        # in some circumstances: check all three\n        if not x.flags.writeable:\n            x = x.copy()\n        if not y.flags.writeable:\n            y = y.copy()\n        if not new_x.flags.writeable:\n            new_x = new_x.copy()\n        method = alt_methods[method]\n        new_y = method(x, y, new_x, **kwargs)\n    return new_y\n\n\ndef _from_derivatives(xi, yi, x, order=None, der=0, extrapolate=False):\n    \"\"\"\n    Convenience function for interpolate.BPoly.from_derivatives\n\n    Construct a piecewise polynomial in the Bernstein basis, compatible\n    with the specified values and derivatives at breakpoints.\n\n    Parameters\n    ----------\n    xi : array_like\n        sorted 1D array of x-coordinates\n    yi : array_like or list of array-likes\n        yi[i][j] is the j-th derivative known at xi[i]\n    orders : None or int or array_like of ints. Default: None.\n        Specifies the degree of local polynomials. If not None, some\n        derivatives are ignored.\n    der : int or list\n        How many derivatives to extract; None for all potentially nonzero\n        derivatives (that is a number equal to the number of points), or a\n        list of derivatives to extract. This numberincludes the function\n        value as 0th derivative.\n     extrapolate : bool, optional\n        Whether to extrapolate to ouf-of-bounds points based on first and last\n        intervals, or to return NaNs. Default: True.\n\n    See Also\n    --------\n    scipy.interpolate.BPoly.from_derivatives\n\n    Returns\n    -------\n    y : scalar or array_like\n        The result, of length R or length M or M by R,\n\n    \"\"\"\n    import scipy\n    from scipy import interpolate\n\n    if LooseVersion(scipy.__version__) < '0.18.0':\n        try:\n            method = interpolate.piecewise_polynomial_interpolate\n            return method(xi, yi.reshape(-1, 1), x,\n                          orders=order, der=der)\n        except AttributeError:\n            pass\n\n    # return the method for compat with scipy version & backwards compat\n    method = interpolate.BPoly.from_derivatives\n    m = method(xi, yi.reshape(-1, 1),\n               orders=order, extrapolate=extrapolate)\n\n    return m(x)\n\n\ndef _akima_interpolate(xi, yi, x, der=0, axis=0):\n    \"\"\"\n    Convenience function for akima interpolation.\n    xi and yi are arrays of values used to approximate some function f,\n    with ``yi = f(xi)``.\n\n    See `Akima1DInterpolator` for details.\n\n    Parameters\n    ----------\n    xi : array_like\n        A sorted list of x-coordinates, of length N.\n    yi :  array_like\n        A 1-D array of real values.  `yi`'s length along the interpolation\n        axis must be equal to the length of `xi`. If N-D array, use axis\n        parameter to select correct axis.\n    x : scalar or array_like\n        Of length M.\n    der : int or list, optional\n        How many derivatives to extract; None for all potentially\n        nonzero derivatives (that is a number equal to the number\n        of points), or a list of derivatives to extract. This number\n        includes the function value as 0th derivative.\n    axis : int, optional\n        Axis in the yi array corresponding to the x-coordinate values.\n\n    See Also\n    --------\n    scipy.interpolate.Akima1DInterpolator\n\n    Returns\n    -------\n    y : scalar or array_like\n        The result, of length R or length M or M by R,\n\n    \"\"\"\n    from scipy import interpolate\n    try:\n        P = interpolate.Akima1DInterpolator(xi, yi, axis=axis)\n    except TypeError:\n        # Scipy earlier than 0.17.0 missing axis\n        P = interpolate.Akima1DInterpolator(xi, yi)\n    if der == 0:\n        return P(x)\n    elif interpolate._isscalar(der):\n        return P(x, der=der)\n    else:\n        return [P(x, nu) for nu in der]\n\n\ndef interpolate_2d(values, method='pad', axis=0, limit=None, fill_value=None,\n                   dtype=None):\n    \"\"\" perform an actual interpolation of values, values will be make 2-d if\n    needed fills inplace, returns the result\n    \"\"\"\n\n    transf = (lambda x: x) if axis == 0 else (lambda x: x.T)\n\n    # reshape a 1 dim if needed\n    ndim = values.ndim\n    if values.ndim == 1:\n        if axis != 0:  # pragma: no cover\n            raise AssertionError(\"cannot interpolate on a ndim == 1 with \"\n                                 \"axis != 0\")\n        values = values.reshape(tuple((1, ) + values.shape))\n\n    if fill_value is None:\n        mask = None\n    else:  # todo create faster fill func without masking\n        mask = mask_missing(transf(values), fill_value)\n\n    method = clean_fill_method(method)\n    if method == 'pad':\n        values = transf(pad_2d(\n            transf(values), limit=limit, mask=mask, dtype=dtype))\n    else:\n        values = transf(backfill_2d(\n            transf(values), limit=limit, mask=mask, dtype=dtype))\n\n    # reshape back\n    if ndim == 1:\n        values = values[0]\n\n    return values\n\n\ndef _interp_wrapper(f, wrap_dtype, na_override=None):\n    def wrapper(arr, mask, limit=None):\n        view = arr.view(wrap_dtype)\n        f(view, mask, limit=limit)\n\n    return wrapper\n\n\n_pad_1d_datetime = _interp_wrapper(algos.pad_inplace_int64, np.int64)\n_pad_2d_datetime = _interp_wrapper(algos.pad_2d_inplace_int64, np.int64)\n_backfill_1d_datetime = _interp_wrapper(algos.backfill_inplace_int64, np.int64)\n_backfill_2d_datetime = _interp_wrapper(algos.backfill_2d_inplace_int64,\n                                        np.int64)\n\n\ndef pad_1d(values, limit=None, mask=None, dtype=None):\n\n    if dtype is None:\n        dtype = values.dtype\n    _method = None\n    if is_float_dtype(values):\n        _method = getattr(algos, 'pad_inplace_%s' % dtype.name, None)\n    elif dtype in _DATELIKE_DTYPES or is_datetime64_dtype(values):\n        _method = _pad_1d_datetime\n    elif is_integer_dtype(values):\n        values = _ensure_float64(values)\n        _method = algos.pad_inplace_float64\n    elif values.dtype == np.object_:\n        _method = algos.pad_inplace_object\n\n    if _method is None:\n        raise ValueError('Invalid dtype for pad_1d [%s]' % dtype.name)\n\n    if mask is None:\n        mask = isnull(values)\n    mask = mask.view(np.uint8)\n    _method(values, mask, limit=limit)\n    return values\n\n\ndef backfill_1d(values, limit=None, mask=None, dtype=None):\n\n    if dtype is None:\n        dtype = values.dtype\n    _method = None\n    if is_float_dtype(values):\n        _method = getattr(algos, 'backfill_inplace_%s' % dtype.name, None)\n    elif dtype in _DATELIKE_DTYPES or is_datetime64_dtype(values):\n        _method = _backfill_1d_datetime\n    elif is_integer_dtype(values):\n        values = _ensure_float64(values)\n        _method = algos.backfill_inplace_float64\n    elif values.dtype == np.object_:\n        _method = algos.backfill_inplace_object\n\n    if _method is None:\n        raise ValueError('Invalid dtype for backfill_1d [%s]' % dtype.name)\n\n    if mask is None:\n        mask = isnull(values)\n    mask = mask.view(np.uint8)\n\n    _method(values, mask, limit=limit)\n    return values\n\n\ndef pad_2d(values, limit=None, mask=None, dtype=None):\n\n    if dtype is None:\n        dtype = values.dtype\n    _method = None\n    if is_float_dtype(values):\n        _method = getattr(algos, 'pad_2d_inplace_%s' % dtype.name, None)\n    elif dtype in _DATELIKE_DTYPES or is_datetime64_dtype(values):\n        _method = _pad_2d_datetime\n    elif is_integer_dtype(values):\n        values = _ensure_float64(values)\n        _method = algos.pad_2d_inplace_float64\n    elif values.dtype == np.object_:\n        _method = algos.pad_2d_inplace_object\n\n    if _method is None:\n        raise ValueError('Invalid dtype for pad_2d [%s]' % dtype.name)\n\n    if mask is None:\n        mask = isnull(values)\n    mask = mask.view(np.uint8)\n\n    if np.all(values.shape):\n        _method(values, mask, limit=limit)\n    else:\n        # for test coverage\n        pass\n    return values\n\n\ndef backfill_2d(values, limit=None, mask=None, dtype=None):\n\n    if dtype is None:\n        dtype = values.dtype\n    _method = None\n    if is_float_dtype(values):\n        _method = getattr(algos, 'backfill_2d_inplace_%s' % dtype.name, None)\n    elif dtype in _DATELIKE_DTYPES or is_datetime64_dtype(values):\n        _method = _backfill_2d_datetime\n    elif is_integer_dtype(values):\n        values = _ensure_float64(values)\n        _method = algos.backfill_2d_inplace_float64\n    elif values.dtype == np.object_:\n        _method = algos.backfill_2d_inplace_object\n\n    if _method is None:\n        raise ValueError('Invalid dtype for backfill_2d [%s]' % dtype.name)\n\n    if mask is None:\n        mask = isnull(values)\n    mask = mask.view(np.uint8)\n\n    if np.all(values.shape):\n        _method(values, mask, limit=limit)\n    else:\n        # for test coverage\n        pass\n    return values\n\n\n_fill_methods = {'pad': pad_1d, 'backfill': backfill_1d}\n\n\ndef get_fill_func(method):\n    method = clean_fill_method(method)\n    return _fill_methods[method]\n\n\ndef clean_reindex_fill_method(method):\n    return clean_fill_method(method, allow_nearest=True)\n\n\ndef fill_zeros(result, x, y, name, fill):\n    \"\"\"\n    if this is a reversed op, then flip x,y\n\n    if we have an integer value (or array in y)\n    and we have 0's, fill them with the fill,\n    return the result\n\n    mask the nan's from x\n    \"\"\"\n    if fill is None or is_float_dtype(result):\n        return result\n\n    if name.startswith(('r', '__r')):\n        x, y = y, x\n\n    is_variable_type = (hasattr(y, 'dtype') or hasattr(y, 'type'))\n    is_scalar_type = is_scalar(y)\n\n    if not is_variable_type and not is_scalar_type:\n        return result\n\n    if is_scalar_type:\n        y = np.array(y)\n\n    if is_integer_dtype(y):\n\n        if (y == 0).any():\n\n            # GH 7325, mask and nans must be broadcastable (also: PR 9308)\n            # Raveling and then reshaping makes np.putmask faster\n            mask = ((y == 0) & ~np.isnan(result)).ravel()\n\n            shape = result.shape\n            result = result.astype('float64', copy=False).ravel()\n\n            np.putmask(result, mask, fill)\n\n            # if we have a fill of inf, then sign it correctly\n            # (GH 6178 and PR 9308)\n            if np.isinf(fill):\n                signs = np.sign(y if name.startswith(('r', '__r')) else x)\n                negative_inf_mask = (signs.ravel() < 0) & mask\n                np.putmask(result, negative_inf_mask, -fill)\n\n            if \"floordiv\" in name:  # (PR 9308)\n                nan_mask = ((y == 0) & (x == 0)).ravel()\n                np.putmask(result, nan_mask, np.nan)\n\n            result = result.reshape(shape)\n\n    return result\n",
      "file_patch": "@@ -5,10 +5,15 @@ Routines for filling missing data\n import numpy as np\n from distutils.version import LooseVersion\n \n-import pandas.core.common as com\n import pandas.algos as algos\n import pandas.lib as lib\n from pandas.compat import range, string_types\n+from pandas.types.common import (is_numeric_v_string_like,\n+                                 is_float_dtype, is_datetime64_dtype,\n+                                 is_integer_dtype, _ensure_float64,\n+                                 is_scalar,\n+                                 _DATELIKE_DTYPES)\n+from pandas.types.missing import isnull\n \n \n def mask_missing(arr, values_to_mask):\n@@ -24,7 +29,7 @@ def mask_missing(arr, values_to_mask):\n     except Exception:\n         values_to_mask = np.array(values_to_mask, dtype=object)\n \n-    na_mask = com.isnull(values_to_mask)\n+    na_mask = isnull(values_to_mask)\n     nonna = values_to_mask[~na_mask]\n \n     mask = None\n@@ -32,28 +37,28 @@ def mask_missing(arr, values_to_mask):\n         if mask is None:\n \n             # numpy elementwise comparison warning\n-            if com.is_numeric_v_string_like(arr, x):\n+            if is_numeric_v_string_like(arr, x):\n                 mask = False\n             else:\n                 mask = arr == x\n \n             # if x is a string and arr is not, then we get False and we must\n             # expand the mask to size arr.shape\n-            if lib.isscalar(mask):\n+            if is_scalar(mask):\n                 mask = np.zeros(arr.shape, dtype=bool)\n         else:\n \n             # numpy elementwise comparison warning\n-            if com.is_numeric_v_string_like(arr, x):\n+            if is_numeric_v_string_like(arr, x):\n                 mask |= False\n             else:\n                 mask |= arr == x\n \n     if na_mask.any():\n         if mask is None:\n-            mask = com.isnull(arr)\n+            mask = isnull(arr)\n         else:\n-            mask |= com.isnull(arr)\n+            mask |= isnull(arr)\n \n     return mask\n \n@@ -110,7 +115,7 @@ def interpolate_1d(xvalues, yvalues, method='linear', limit=None,\n     \"\"\"\n     # Treat the original, non-scipy methods first.\n \n-    invalid = com.isnull(yvalues)\n+    invalid = isnull(yvalues)\n     valid = ~invalid\n \n     if not valid.any():\n@@ -442,12 +447,12 @@ def pad_1d(values, limit=None, mask=None, dtype=None):\n     if dtype is None:\n         dtype = values.dtype\n     _method = None\n-    if com.is_float_dtype(values):\n+    if is_float_dtype(values):\n         _method = getattr(algos, 'pad_inplace_%s' % dtype.name, None)\n-    elif dtype in com._DATELIKE_DTYPES or com.is_datetime64_dtype(values):\n+    elif dtype in _DATELIKE_DTYPES or is_datetime64_dtype(values):\n         _method = _pad_1d_datetime\n-    elif com.is_integer_dtype(values):\n-        values = com._ensure_float64(values)\n+    elif is_integer_dtype(values):\n+        values = _ensure_float64(values)\n         _method = algos.pad_inplace_float64\n     elif values.dtype == np.object_:\n         _method = algos.pad_inplace_object\n@@ -456,7 +461,7 @@ def pad_1d(values, limit=None, mask=None, dtype=None):\n         raise ValueError('Invalid dtype for pad_1d [%s]' % dtype.name)\n \n     if mask is None:\n-        mask = com.isnull(values)\n+        mask = isnull(values)\n     mask = mask.view(np.uint8)\n     _method(values, mask, limit=limit)\n     return values\n@@ -467,12 +472,12 @@ def backfill_1d(values, limit=None, mask=None, dtype=None):\n     if dtype is None:\n         dtype = values.dtype\n     _method = None\n-    if com.is_float_dtype(values):\n+    if is_float_dtype(values):\n         _method = getattr(algos, 'backfill_inplace_%s' % dtype.name, None)\n-    elif dtype in com._DATELIKE_DTYPES or com.is_datetime64_dtype(values):\n+    elif dtype in _DATELIKE_DTYPES or is_datetime64_dtype(values):\n         _method = _backfill_1d_datetime\n-    elif com.is_integer_dtype(values):\n-        values = com._ensure_float64(values)\n+    elif is_integer_dtype(values):\n+        values = _ensure_float64(values)\n         _method = algos.backfill_inplace_float64\n     elif values.dtype == np.object_:\n         _method = algos.backfill_inplace_object\n@@ -481,7 +486,7 @@ def backfill_1d(values, limit=None, mask=None, dtype=None):\n         raise ValueError('Invalid dtype for backfill_1d [%s]' % dtype.name)\n \n     if mask is None:\n-        mask = com.isnull(values)\n+        mask = isnull(values)\n     mask = mask.view(np.uint8)\n \n     _method(values, mask, limit=limit)\n@@ -493,12 +498,12 @@ def pad_2d(values, limit=None, mask=None, dtype=None):\n     if dtype is None:\n         dtype = values.dtype\n     _method = None\n-    if com.is_float_dtype(values):\n+    if is_float_dtype(values):\n         _method = getattr(algos, 'pad_2d_inplace_%s' % dtype.name, None)\n-    elif dtype in com._DATELIKE_DTYPES or com.is_datetime64_dtype(values):\n+    elif dtype in _DATELIKE_DTYPES or is_datetime64_dtype(values):\n         _method = _pad_2d_datetime\n-    elif com.is_integer_dtype(values):\n-        values = com._ensure_float64(values)\n+    elif is_integer_dtype(values):\n+        values = _ensure_float64(values)\n         _method = algos.pad_2d_inplace_float64\n     elif values.dtype == np.object_:\n         _method = algos.pad_2d_inplace_object\n@@ -507,7 +512,7 @@ def pad_2d(values, limit=None, mask=None, dtype=None):\n         raise ValueError('Invalid dtype for pad_2d [%s]' % dtype.name)\n \n     if mask is None:\n-        mask = com.isnull(values)\n+        mask = isnull(values)\n     mask = mask.view(np.uint8)\n \n     if np.all(values.shape):\n@@ -523,12 +528,12 @@ def backfill_2d(values, limit=None, mask=None, dtype=None):\n     if dtype is None:\n         dtype = values.dtype\n     _method = None\n-    if com.is_float_dtype(values):\n+    if is_float_dtype(values):\n         _method = getattr(algos, 'backfill_2d_inplace_%s' % dtype.name, None)\n-    elif dtype in com._DATELIKE_DTYPES or com.is_datetime64_dtype(values):\n+    elif dtype in _DATELIKE_DTYPES or is_datetime64_dtype(values):\n         _method = _backfill_2d_datetime\n-    elif com.is_integer_dtype(values):\n-        values = com._ensure_float64(values)\n+    elif is_integer_dtype(values):\n+        values = _ensure_float64(values)\n         _method = algos.backfill_2d_inplace_float64\n     elif values.dtype == np.object_:\n         _method = algos.backfill_2d_inplace_object\n@@ -537,7 +542,7 @@ def backfill_2d(values, limit=None, mask=None, dtype=None):\n         raise ValueError('Invalid dtype for backfill_2d [%s]' % dtype.name)\n \n     if mask is None:\n-        mask = com.isnull(values)\n+        mask = isnull(values)\n     mask = mask.view(np.uint8)\n \n     if np.all(values.shape):\n@@ -570,22 +575,22 @@ def fill_zeros(result, x, y, name, fill):\n \n     mask the nan's from x\n     \"\"\"\n-    if fill is None or com.is_float_dtype(result):\n+    if fill is None or is_float_dtype(result):\n         return result\n \n     if name.startswith(('r', '__r')):\n         x, y = y, x\n \n-    is_typed_variable = (hasattr(y, 'dtype') or hasattr(y, 'type'))\n-    is_scalar = lib.isscalar(y)\n+    is_variable_type = (hasattr(y, 'dtype') or hasattr(y, 'type'))\n+    is_scalar_type = is_scalar(y)\n \n-    if not is_typed_variable and not is_scalar:\n+    if not is_variable_type and not is_scalar_type:\n         return result\n \n-    if is_scalar:\n+    if is_scalar_type:\n         y = np.array(y)\n \n-    if com.is_integer_dtype(y):\n+    if is_integer_dtype(y):\n \n         if (y == 0).any():\n \n",
      "files_name_in_blame_commit": [
        "data.py",
        "merge.py",
        "test_generic.py",
        "api.py",
        "test_infer_and_convert.py",
        "offsets.py",
        "generic.py",
        "test_graphics.py",
        "test_groupby.py",
        "cast.py",
        "pytables.py",
        "groupby.py",
        "parsers.py",
        "printing.py",
        "test_stata.py",
        "style.py",
        "packers.py",
        "nanops.py",
        "test_base.py",
        "test_multilevel.py",
        "tdi.py",
        "test_quantile.py",
        "period.py",
        "test_resample.py",
        "converter.py",
        "reshape.py",
        "test_lib.py",
        "testing.pyx",
        "html.py",
        "frame.py",
        "series.py",
        "test_common.py",
        "function.py",
        "util.py",
        "test_sql.py",
        "plotting.py",
        "frequencies.py",
        "test_constructors.py",
        "test_eval.py",
        "numeric.py",
        "test_inference.py",
        "convert.py",
        "panel.py",
        "concat.py",
        "range.py",
        "excel.py",
        "ops.py",
        "test_api.py",
        "ols.py",
        "format.py",
        "internals.py",
        "pivot.py",
        "base.py",
        "list.py",
        "inference.py",
        "test_apply.py",
        "test_nanops.py",
        "testing.py",
        "moments.py",
        "test_bin_groupby.py",
        "algorithms.py",
        "validators.py",
        "strings.py",
        "indexing.py",
        "test_dtypes.py",
        "timedeltas.py",
        "test_missing.py",
        "test_timezones.py",
        "category.py",
        "test_types.py",
        "stata.py",
        "test_datetime_values.py",
        "__init__.py",
        "common.py",
        "test_timeseries.py",
        "config_init.py",
        "tile.py",
        "tools.py",
        "sql.py",
        "test_indexing.py",
        "array.py",
        "window.py",
        "test_panel.py",
        "pickle.py",
        "categorical.py",
        "multi.py",
        "test_categorical.py",
        "missing.py",
        "index.py",
        "test_period.py",
        "test_cast.py",
        "test_strings.py",
        "test_io.py",
        "test_panel4d.py"
      ]
    }
  },
  "commits_modify_file_before_fix": {
    "size": 42
  },
  "recursive_blame_commits": {}
}