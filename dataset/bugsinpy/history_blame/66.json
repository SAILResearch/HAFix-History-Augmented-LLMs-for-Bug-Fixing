{
  "id": "66",
  "blame_commit": {
    "commit": {
      "commit_id": "f8f06a986c0a1aa06a0e04af4cf80eea75241bc0",
      "commit_message": "spilt `contrib.wraps` into `contrib` and `contrib.concurrent`",
      "commit_author": "Casper da Costa-Luis",
      "commit_date": "2020-01-24 21:18:08",
      "commit_parent": "cf74393cd376440d5dda412ca223f1b43edefadb"
    },
    "function": {
      "function_name": "tenumerate",
      "function_code_before": "",
      "function_code_after": "def tenumerate(iterable, start=0, total=None, tqdm_class=tqdm_auto, **tqdm_kwargs):\n    \"\"\"\n    Equivalent of `numpy.ndenumerate` or builtin `enumerate`.\n\n    Parameters\n    ----------\n    tqdm_class  : [default: tqdm.auto.tqdm].\n    \"\"\"\n    try:\n        import numpy as np\n    except ImportError:\n        pass\n    else:\n        if isinstance(iterable, np.ndarray):\n            return tqdm_class(np.ndenumerate(iterable), total=total or len(iterable), **tqdm_kwargs)\n    return enumerate(tqdm_class(iterable, start, **tqdm_kwargs))",
      "function_before_start_line": "",
      "function_before_end_line": "",
      "function_after_start_line": 24,
      "function_after_end_line": 41,
      "function_before_token_count": 0,
      "function_after_token_count": 78,
      "functions_name_modified_file": [
        "write",
        "tmap",
        "_tzip",
        "tenumerate",
        "tzip",
        "_tmap"
      ],
      "functions_name_all_files": [
        "incr",
        "write",
        "cpu_count",
        "test_map",
        "test_enumerate",
        "thread_map",
        "tmap",
        "_executor_map",
        "_tzip",
        "process_map",
        "test_thread_map",
        "test_zip",
        "test_enumerate_numpy",
        "test_process_map",
        "tenumerate",
        "tzip",
        "_tmap"
      ],
      "functions_name_co_evolved_modified_file": [
        "_tzip",
        "tmap",
        "tzip",
        "_tmap"
      ],
      "functions_name_co_evolved_all_files": [
        "incr",
        "cpu_count",
        "test_map",
        "test_enumerate",
        "thread_map",
        "process_map",
        "_executor_map",
        "_tzip",
        "test_thread_map",
        "test_zip",
        "test_enumerate_numpy",
        "test_process_map",
        "tmap",
        "tzip",
        "_tmap"
      ]
    },
    "file": {
      "file_name": "__init__.py",
      "file_nloc": 47,
      "file_complexity": 12,
      "file_token_count": 330,
      "file_before": "from tqdm import tqdm\nfrom tqdm.utils import ObjectWrapper\n\n\nclass DummyTqdmFile(ObjectWrapper):\n    \"\"\"Dummy file-like that will write to tqdm\"\"\"\n    def write(self, x, nolock=False):\n        # Avoid print() second call (useless \\n)\n        if len(x.rstrip()) > 0:\n            tqdm.write(x, file=self._wrapped, nolock=nolock)\n",
      "file_after": "\"\"\"\nThin wrappers around common functions.\n\nSubpackages contain potentially unstable extensions.\n\"\"\"\nfrom tqdm import tqdm\nfrom tqdm.auto import tqdm as tqdm_auto\nfrom tqdm.utils import ObjectWrapper\nfrom copy import deepcopy\nimport functools\nimport sys\n__author__ = {\"github.com/\": [\"casperdcl\"]}\n__all__ = ['tenumerate', 'tzip', 'tmap']\n\n\nclass DummyTqdmFile(ObjectWrapper):\n    \"\"\"Dummy file-like that will write to tqdm\"\"\"\n    def write(self, x, nolock=False):\n        # Avoid print() second call (useless \\n)\n        if len(x.rstrip()) > 0:\n            tqdm.write(x, file=self._wrapped, nolock=nolock)\n\n\ndef tenumerate(iterable, start=0, total=None, tqdm_class=tqdm_auto,\n               **tqdm_kwargs):\n    \"\"\"\n    Equivalent of `numpy.ndenumerate` or builtin `enumerate`.\n\n    Parameters\n    ----------\n    tqdm_class  : [default: tqdm.auto.tqdm].\n    \"\"\"\n    try:\n        import numpy as np\n    except ImportError:\n        pass\n    else:\n        if isinstance(iterable, np.ndarray):\n            return tqdm_class(np.ndenumerate(iterable),\n                              total=total or len(iterable), **tqdm_kwargs)\n    return enumerate(tqdm_class(iterable, start, **tqdm_kwargs))\n\n\ndef _tzip(iter1, *iter2plus, **tqdm_kwargs):\n    \"\"\"\n    Equivalent of builtin `zip`.\n\n    Parameters\n    ----------\n    tqdm_class  : [default: tqdm.auto.tqdm].\n    \"\"\"\n    kwargs = deepcopy(tqdm_kwargs)\n    tqdm_class = kwargs.pop(\"tqdm_class\", tqdm_auto)\n    for i in zip(tqdm_class(iter1, **tqdm_kwargs), *iter2plus):\n        yield i\n\n\ndef _tmap(function, *sequences, **tqdm_kwargs):\n    \"\"\"\n    Equivalent of builtin `map`.\n\n    Parameters\n    ----------\n    tqdm_class  : [default: tqdm.auto.tqdm].\n    \"\"\"\n    for i in _tzip(*sequences, **tqdm_kwargs):\n        yield function(*i)\n\n\nif sys.version_info[:1] < (3,):\n    @functools.wraps(_tzip)\n    def tzip(*args, **kwargs):\n        return list(_tzip(*args, **kwargs))\n\n    @functools.wraps(_tmap)\n    def tmap(*args, **kwargs):\n        return list(_tmap(*args, **kwargs))\nelse:\n    tzip = _tzip\n    tmap = _tmap\n",
      "file_patch": "@@ -1,5 +1,16 @@\n+\"\"\"\n+Thin wrappers around common functions.\n+\n+Subpackages contain potentially unstable extensions.\n+\"\"\"\n from tqdm import tqdm\n+from tqdm.auto import tqdm as tqdm_auto\n from tqdm.utils import ObjectWrapper\n+from copy import deepcopy\n+import functools\n+import sys\n+__author__ = {\"github.com/\": [\"casperdcl\"]}\n+__all__ = ['tenumerate', 'tzip', 'tmap']\n \n \n class DummyTqdmFile(ObjectWrapper):\n@@ -8,3 +19,62 @@ class DummyTqdmFile(ObjectWrapper):\n         # Avoid print() second call (useless \\n)\n         if len(x.rstrip()) > 0:\n             tqdm.write(x, file=self._wrapped, nolock=nolock)\n+\n+\n+def tenumerate(iterable, start=0, total=None, tqdm_class=tqdm_auto,\n+               **tqdm_kwargs):\n+    \"\"\"\n+    Equivalent of `numpy.ndenumerate` or builtin `enumerate`.\n+\n+    Parameters\n+    ----------\n+    tqdm_class  : [default: tqdm.auto.tqdm].\n+    \"\"\"\n+    try:\n+        import numpy as np\n+    except ImportError:\n+        pass\n+    else:\n+        if isinstance(iterable, np.ndarray):\n+            return tqdm_class(np.ndenumerate(iterable),\n+                              total=total or len(iterable), **tqdm_kwargs)\n+    return enumerate(tqdm_class(iterable, start, **tqdm_kwargs))\n+\n+\n+def _tzip(iter1, *iter2plus, **tqdm_kwargs):\n+    \"\"\"\n+    Equivalent of builtin `zip`.\n+\n+    Parameters\n+    ----------\n+    tqdm_class  : [default: tqdm.auto.tqdm].\n+    \"\"\"\n+    kwargs = deepcopy(tqdm_kwargs)\n+    tqdm_class = kwargs.pop(\"tqdm_class\", tqdm_auto)\n+    for i in zip(tqdm_class(iter1, **tqdm_kwargs), *iter2plus):\n+        yield i\n+\n+\n+def _tmap(function, *sequences, **tqdm_kwargs):\n+    \"\"\"\n+    Equivalent of builtin `map`.\n+\n+    Parameters\n+    ----------\n+    tqdm_class  : [default: tqdm.auto.tqdm].\n+    \"\"\"\n+    for i in _tzip(*sequences, **tqdm_kwargs):\n+        yield function(*i)\n+\n+\n+if sys.version_info[:1] < (3,):\n+    @functools.wraps(_tzip)\n+    def tzip(*args, **kwargs):\n+        return list(_tzip(*args, **kwargs))\n+\n+    @functools.wraps(_tmap)\n+    def tmap(*args, **kwargs):\n+        return list(_tmap(*args, **kwargs))\n+else:\n+    tzip = _tzip\n+    tmap = _tmap\n",
      "files_name_in_blame_commit": [
        "wraps.py",
        "concurrent.py",
        "tests_concurrent.py",
        "__init__.py",
        "tests_contrib.py"
      ]
    }
  },
  "commits_modify_file_before_fix": {
    "size": 3
  },
  "recursive_blame_commits": {}
}