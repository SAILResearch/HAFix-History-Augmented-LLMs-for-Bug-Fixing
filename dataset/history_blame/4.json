{
  "id": "4",
  "blame_commit": {
    "commit": {
      "commit_id": "7ee261cf8697bfd087b5144178b3c0634337e8d8",
      "commit_message": "Fix get_work() slowdown introduced in #986\n\nAs daveFNbuck said in that PR. The patch in #986 slowed down his\nget_work() calls. My theory is that I actually worsened the worst case\ncomplexity in that patch because I assumed that tasks-per-worker is less\nthan total-pending-tasks. While that's definetly is the case at Spotify.\nThat is not the case at Houzz.\n\nThis patch tries to get the fastest speed in both settings. The setting\nthat will get a speed-up from this patch is when you have a very few\nworkers and most of your tasks are in the DONE state.",
      "commit_author": "Arash Rouhani",
      "commit_date": "2015-06-29 11:36:02",
      "commit_parent": "d87d0b0999bc8362dd17bca4dd0d53b9d390c95c"
    },
    "function": {
      "function_name": "get_pending_tasks",
      "function_code_before": "def get_pending_tasks(self):\n    return six.moves.filter(lambda task: task.status in [PENDING, RUNNING], self.tasks)",
      "function_code_after": "def get_pending_tasks(self, state):\n    \"\"\"\n        Get PENDING (and RUNNING) tasks for this worker.\n\n        You have to pass in the state for optimization reasons.\n        \"\"\"\n    if len(self.tasks) < state.num_pending_tasks():\n        return six.moves.filter(lambda task: task.status in [PENDING, RUNNING], self.tasks)\n    else:\n        return state.get_pending_tasks()",
      "function_before_start_line": 248,
      "function_before_end_line": 250,
      "function_after_start_line": 248,
      "function_after_end_line": 258,
      "function_before_token_count": 29,
      "function_after_token_count": 54,
      "functions_name_modified_file": [
        "add_failure",
        "get_worker_ids",
        "prune",
        "_schedulable",
        "clear",
        "has_excessive_failures",
        "_upstream_status",
        "_update_task_history",
        "can_disable",
        "ping",
        "assistant",
        "inverse_dep_graph",
        "get_pending_tasks",
        "_traverse_inverse_deps",
        "load",
        "num_failures",
        "num_pending_tasks",
        "task_search",
        "_recurse_deps",
        "get_worker",
        "get_active_workers",
        "worker_list",
        "add_task",
        "update_resources",
        "get_necessary_tasks",
        "_update_priority",
        "task_list",
        "add_info",
        "get_active_tasks",
        "_has_resources",
        "_used_resources",
        "has_task",
        "fix_time",
        "_serialize_task",
        "task_history",
        "dep_graph",
        "__str__",
        "graph",
        "_get_default",
        "dump",
        "__repr__",
        "re_enable",
        "inactivate_tasks",
        "__init__",
        "update",
        "set_status",
        "add_worker",
        "get_task",
        "get_assistants",
        "get_running_tasks",
        "_rank",
        "get_work",
        "re_enable_task",
        "fetch_error",
        "inactivate_workers",
        "is_trivial_worker"
      ],
      "functions_name_all_files": [
        "add_failure",
        "test_disable",
        "test_prune_done_tasks",
        "can_disable",
        "test_task_list_filter_by_search",
        "test_can_work_on_lower_priority_while_waiting_for_resources",
        "load",
        "num_pending_tasks",
        "test_priorities_and_dependencies",
        "test_timeout",
        "test_scheduler_overprovisioned_on_other_resource",
        "add_task",
        "get_necessary_tasks",
        "add_info",
        "_has_resources",
        "_serialize_task",
        "fix_time",
        "check_task_order",
        "test_assistant_get_work_external_task",
        "test_task_list_no_deps",
        "test_prefer_readier_dependents",
        "test_no_lock_if_too_many_resources_required",
        "test_hendle_multiple_resources",
        "setUp",
        "__init__",
        "test_assistant_get_work",
        "test_task_list_filter_by_multiple_search_terms",
        "test_priority_update_with_pruning",
        "test_scheduler_with_priority_and_competing_resources",
        "test_prefer_more_dependents",
        "test_keep_tasks_for_assistant",
        "test_disconnect_running",
        "test_task_lists_some_beyond_limit",
        "inactivate_workers",
        "is_trivial_worker",
        "test_priority_update_dependency_after_scheduling",
        "prune",
        "tearDown",
        "clear",
        "_upstream_status",
        "test_two_workers",
        "test_lock_resources_for_second_worker",
        "ping",
        "test_retry",
        "inverse_dep_graph",
        "test_dep",
        "_traverse_inverse_deps",
        "test_search_results_beyond_limit",
        "test_quadratic_behavior",
        "test_task_first_failure_time",
        "_recurse_deps",
        "test_raw_ping_extended",
        "test_two_worker_info",
        "update_resources",
        "_update_priority",
        "test_task_fails_when_assistant_dies",
        "test_disallowed_state_changes",
        "test_get_work_speed",
        "test_single_resource_lock",
        "test_multiple_resources_lock",
        "test_ping",
        "test_scheduler_resources_none_allow_one",
        "test_lock_resources_while_running_lower_priority",
        "__str__",
        "test_disable_and_done",
        "add_worker",
        "test_broken_dep",
        "test_keep_scheduler_disabled_tasks_for_assistant",
        "test_priorities_default_and_negative",
        "test_scheduler_with_insufficient_resources",
        "test_update_resources",
        "test_ignore_done_dependents",
        "_schedulable",
        "has_excessive_failures",
        "assistant",
        "test_unique_tasks",
        "test_scheduler_with_resources_used",
        "test_priority_no_decrease_with_multiple_updates",
        "worker_list",
        "get_active_tasks",
        "test_pending_downstream_failure",
        "test_disable_and_reenable",
        "test_disable_and_reenable_and_disable_again",
        "task_history",
        "test_disable_by_worker",
        "test_pending_downstream_disable",
        "test_multiple_resources_no_lock",
        "graph",
        "re_enable",
        "dump",
        "__repr__",
        "inactivate_tasks",
        "test_task_has_excessive_failures",
        "test_failed_dep",
        "get_task",
        "get_assistants",
        "_rank",
        "get_app",
        "test_prune_with_live_assistant",
        "test_do_not_lock_resources_while_running_higher_priority",
        "get_worker_ids",
        "_update_task_history",
        "test_remove_dep",
        "test_priority_update_dependency_chain",
        "get_pending_tasks",
        "num_failures",
        "task_search",
        "get_worker",
        "get_active_workers",
        "test_task_list_within_limit",
        "task_list",
        "_used_resources",
        "has_task",
        "test_do_not_lock_resources_when_not_ready",
        "test_task_first_failure_time_remains_constant",
        "test_raw_ping",
        "dep_graph",
        "test_scheduler_with_sufficient_resources",
        "get_scheduler_config",
        "test_keep_failed_tasks_for_assistant",
        "test_task_list_beyond_limit",
        "_get_default",
        "update",
        "test_scheduler_resources_none_disallow_two",
        "set_status",
        "test_lock_resources_when_one_of_multiple_workers_is_ready",
        "test_priorities",
        "get_running_tasks",
        "setTime",
        "get_work",
        "re_enable_task",
        "fetch_error"
      ],
      "functions_name_co_evolved_modified_file": [
        "num_pending_tasks",
        "get_work",
        "is_trivial_worker"
      ],
      "functions_name_co_evolved_all_files": [
        "num_pending_tasks",
        "test_get_work_speed",
        "get_work",
        "is_trivial_worker"
      ]
    },
    "file": {
      "file_name": "scheduler.py",
      "file_nloc": 714,
      "file_complexity": 267,
      "file_token_count": 5488,
      "file_before": "# -*- coding: utf-8 -*-\n#\n# Copyright 2012-2015 Spotify AB\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\"\"\"\nThe system for scheduling tasks and executing them in order.\nDeals with dependencies, priorities, resources, etc.\nThe :py:class:`~luigi.worker.Worker` pulls tasks from the scheduler (usually over the REST interface) and executes them.\nSee :doc:`/central_scheduler` for more info.\n\"\"\"\n\nimport collections\ntry:\n    import cPickle as pickle\nexcept ImportError:\n    import pickle\nimport datetime\nimport functools\nimport itertools\nimport logging\nimport os\nimport time\n\nfrom luigi import six\n\nfrom luigi import configuration\nfrom luigi import notifications\nfrom luigi import parameter\nfrom luigi import task_history as history\nfrom luigi.task_status import DISABLED, DONE, FAILED, PENDING, RUNNING, SUSPENDED, UNKNOWN\nfrom luigi.task import Config\n\nlogger = logging.getLogger(\"luigi.server\")\n\n\nclass Scheduler(object):\n    \"\"\"\n    Abstract base class.\n\n    Note that the methods all take string arguments, not Task objects...\n    \"\"\"\"\"\n    add_task = NotImplemented\n    get_work = NotImplemented\n    ping = NotImplemented\n\nUPSTREAM_RUNNING = 'UPSTREAM_RUNNING'\nUPSTREAM_MISSING_INPUT = 'UPSTREAM_MISSING_INPUT'\nUPSTREAM_FAILED = 'UPSTREAM_FAILED'\nUPSTREAM_DISABLED = 'UPSTREAM_DISABLED'\n\nUPSTREAM_SEVERITY_ORDER = (\n    '',\n    UPSTREAM_RUNNING,\n    UPSTREAM_MISSING_INPUT,\n    UPSTREAM_FAILED,\n    UPSTREAM_DISABLED,\n)\nUPSTREAM_SEVERITY_KEY = UPSTREAM_SEVERITY_ORDER.index\nSTATUS_TO_UPSTREAM_MAP = {\n    FAILED: UPSTREAM_FAILED,\n    RUNNING: UPSTREAM_RUNNING,\n    PENDING: UPSTREAM_MISSING_INPUT,\n    DISABLED: UPSTREAM_DISABLED,\n}\n\n\nclass scheduler(Config):\n    # TODO(erikbern): the config_path is needed for backwards compatilibity. We should drop the compatibility\n    # at some point (in particular this would force users to replace all dashes with underscores in the config)\n    retry_delay = parameter.FloatParameter(default=900.0)\n    remove_delay = parameter.FloatParameter(default=600.0)\n    worker_disconnect_delay = parameter.FloatParameter(default=60.0)\n    state_path = parameter.Parameter(default='/var/lib/luigi-server/state.pickle')\n\n    # Jobs are disabled if we see more than disable_failures failures in disable_window seconds.\n    # These disables last for disable_persist seconds.\n    disable_window = parameter.IntParameter(default=3600,\n                                            config_path=dict(section='scheduler', name='disable-window-seconds'))\n    disable_failures = parameter.IntParameter(default=None,\n                                              config_path=dict(section='scheduler', name='disable-num-failures'))\n    disable_hard_timeout = parameter.IntParameter(default=None,\n                                                  config_path=dict(section='scheduler', name='disable-hard-timeout'))\n    disable_persist = parameter.IntParameter(default=86400,\n                                             config_path=dict(section='scheduler', name='disable-persist-seconds'))\n    max_shown_tasks = parameter.IntParameter(default=100000)\n    prune_done_tasks = parameter.BoolParameter(default=False)\n\n    record_task_history = parameter.BoolParameter(default=False)\n\n    visualization_graph = parameter.Parameter(default=\"svg\", config_path=dict(section='scheduler', name='visualization-graph'))\n\n\ndef fix_time(x):\n    # Backwards compatibility for a fix in Dec 2014. Prior to the fix, pickled state might store datetime objects\n    # Let's remove this function soon\n    if isinstance(x, datetime.datetime):\n        return time.mktime(x.timetuple())\n    else:\n        return x\n\n\nclass Failures(object):\n    \"\"\"\n    This class tracks the number of failures in a given time window.\n\n    Failures added are marked with the current timestamp, and this class counts\n    the number of failures in a sliding time window ending at the present.\n    \"\"\"\n\n    def __init__(self, window):\n        \"\"\"\n        Initialize with the given window.\n\n        :param window: how long to track failures for, as a float (number of seconds).\n        \"\"\"\n        self.window = window\n        self.failures = collections.deque()\n        self.first_failure_time = None\n\n    def add_failure(self):\n        \"\"\"\n        Add a failure event with the current timestamp.\n        \"\"\"\n        failure_time = time.time()\n\n        if not self.first_failure_time:\n            self.first_failure_time = failure_time\n\n        self.failures.append(failure_time)\n\n    def num_failures(self):\n        \"\"\"\n        Return the number of failures in the window.\n        \"\"\"\n        min_time = time.time() - self.window\n\n        while self.failures and fix_time(self.failures[0]) < min_time:\n            self.failures.popleft()\n\n        return len(self.failures)\n\n    def clear(self):\n        \"\"\"\n        Clear the failure queue.\n        \"\"\"\n        self.failures.clear()\n\n\ndef _get_default(x, default):\n    if x is not None:\n        return x\n    else:\n        return default\n\n\nclass Task(object):\n\n    def __init__(self, task_id, status, deps, resources=None, priority=0, family='', module=None,\n                 params=None, disable_failures=None, disable_window=None, disable_hard_timeout=None):\n        self.id = task_id\n        self.stakeholders = set()  # workers ids that are somehow related to this task (i.e. don't prune while any of these workers are still active)\n        self.workers = set()  # workers ids that can perform task - task is 'BROKEN' if none of these workers are active\n        if deps is None:\n            self.deps = set()\n        else:\n            self.deps = set(deps)\n        self.status = status  # PENDING, RUNNING, FAILED or DONE\n        self.time = time.time()  # Timestamp when task was first added\n        self.retry = None\n        self.remove = None\n        self.worker_running = None  # the worker id that is currently running the task or None\n        self.time_running = None  # Timestamp when picked up by worker\n        self.expl = None\n        self.priority = priority\n        self.resources = _get_default(resources, {})\n        self.family = family\n        self.module = module\n        self.params = _get_default(params, {})\n        self.disable_failures = disable_failures\n        self.disable_hard_timeout = disable_hard_timeout\n        self.failures = Failures(disable_window)\n        self.scheduler_disable_time = None\n\n    def __repr__(self):\n        return \"Task(%r)\" % vars(self)\n\n    def add_failure(self):\n        self.failures.add_failure()\n\n    def has_excessive_failures(self):\n\n        excessive_failures = False\n\n        if (self.failures.first_failure_time is not None and\n                self.disable_hard_timeout):\n            if (time.time() >= self.failures.first_failure_time +\n                    self.disable_hard_timeout):\n                excessive_failures = True\n\n        if self.failures.num_failures() >= self.disable_failures:\n            excessive_failures = True\n\n        return excessive_failures\n\n    def can_disable(self):\n        return (self.disable_failures is not None or\n                self.disable_hard_timeout is not None)\n\n\nclass Worker(object):\n    \"\"\"\n    Structure for tracking worker activity and keeping their references.\n    \"\"\"\n\n    def __init__(self, worker_id, last_active=None):\n        self.id = worker_id\n        self.reference = None  # reference to the worker in the real world. (Currently a dict containing just the host)\n        self.last_active = last_active  # seconds since epoch\n        self.started = time.time()  # seconds since epoch\n        self.tasks = set()  # task objects\n        self.info = {}\n\n    def add_info(self, info):\n        self.info.update(info)\n\n    def update(self, worker_reference):\n        if worker_reference:\n            self.reference = worker_reference\n        self.last_active = time.time()\n\n    def prune(self, config):\n        # Delete workers that haven't said anything for a while (probably killed)\n        if self.last_active + config.worker_disconnect_delay < time.time():\n            return True\n\n    def get_pending_tasks(self):\n        return six.moves.filter(lambda task: task.status in [PENDING, RUNNING],\n                                self.tasks)\n\n    def is_trivial_worker(self):\n        \"\"\"\n        If it's not an assistant having only tasks that are without\n        requirements\n        \"\"\"\n        if self.assistant:\n            return False\n        return all(not task.resources for task in self.get_pending_tasks())\n\n    @property\n    def assistant(self):\n        return self.info.get('assistant', False)\n\n    def __str__(self):\n        return self.id\n\n\nclass SimpleTaskState(object):\n    \"\"\"\n    Keep track of the current state and handle persistance.\n\n    The point of this class is to enable other ways to keep state, eg. by using a database\n    These will be implemented by creating an abstract base class that this and other classes\n    inherit from.\n    \"\"\"\n\n    def __init__(self, state_path):\n        self._state_path = state_path\n        self._tasks = {}  # map from id to a Task object\n        self._status_tasks = collections.defaultdict(dict)\n        self._active_workers = {}  # map from id to a Worker object\n\n    def dump(self):\n        state = (self._tasks, self._active_workers)\n        try:\n            with open(self._state_path, 'wb') as fobj:\n                pickle.dump(state, fobj)\n        except IOError:\n            logger.warning(\"Failed saving scheduler state\", exc_info=1)\n        else:\n            logger.info(\"Saved state in %s\", self._state_path)\n\n    # prone to lead to crashes when old state is unpickled with updated code. TODO some kind of version control?\n    def load(self):\n        if os.path.exists(self._state_path):\n            logger.info(\"Attempting to load state from %s\", self._state_path)\n            try:\n                with open(self._state_path, 'rb') as fobj:\n                    state = pickle.load(fobj)\n            except BaseException:\n                logger.exception(\"Error when loading state. Starting from clean slate.\")\n                return\n\n            self._tasks, self._active_workers = state\n            self._status_tasks = collections.defaultdict(dict)\n            for task in six.itervalues(self._tasks):\n                self._status_tasks[task.status][task.id] = task\n\n            # Convert from old format\n            # TODO: this is really ugly, we need something more future-proof\n            # Every time we add an attribute to the Worker class, this code needs to be updated\n            for k, v in six.iteritems(self._active_workers):\n                if isinstance(v, float):\n                    self._active_workers[k] = Worker(worker_id=k, last_active=v)\n\n            if any(not hasattr(w, 'tasks') for k, w in six.iteritems(self._active_workers)):\n                # If you load from an old format where Workers don't contain tasks.\n                for k, worker in six.iteritems(self._active_workers):\n                    worker.tasks = set()\n                for task in six.itervalues(self._tasks):\n                    for worker_id in task.workers:\n                        self._active_workers[worker_id].tasks.add(task)\n        else:\n            logger.info(\"No prior state file exists at %s. Starting with clean slate\", self._state_path)\n\n    def get_active_tasks(self, status=None):\n        if status:\n            for task in six.itervalues(self._status_tasks[status]):\n                yield task\n        else:\n            for task in six.itervalues(self._tasks):\n                yield task\n\n    def get_running_tasks(self):\n        return six.itervalues(self._status_tasks[RUNNING])\n\n    def get_pending_tasks(self):\n        return itertools.chain.from_iterable(six.itervalues(self._status_tasks[status])\n                                             for status in [PENDING, RUNNING])\n\n    def get_task(self, task_id, default=None, setdefault=None):\n        if setdefault:\n            task = self._tasks.setdefault(task_id, setdefault)\n            self._status_tasks[task.status][task.id] = task\n            return task\n        else:\n            return self._tasks.get(task_id, default)\n\n    def has_task(self, task_id):\n        return task_id in self._tasks\n\n    def re_enable(self, task, config=None):\n        task.scheduler_disable_time = None\n        task.failures.clear()\n        if config:\n            self.set_status(task, FAILED, config)\n            task.failures.clear()\n\n    def set_status(self, task, new_status, config=None):\n        if new_status == FAILED:\n            assert config is not None\n\n        # not sure why we have SUSPENDED, as it can never be set\n        if new_status == SUSPENDED:\n            new_status = PENDING\n\n        if new_status == DISABLED and task.status == RUNNING:\n            return\n\n        if task.status == DISABLED:\n            if new_status == DONE:\n                self.re_enable(task)\n\n            # don't allow workers to override a scheduler disable\n            elif task.scheduler_disable_time is not None:\n                return\n\n        if new_status == FAILED and task.can_disable():\n            task.add_failure()\n            if task.has_excessive_failures():\n                task.scheduler_disable_time = time.time()\n                new_status = DISABLED\n                notifications.send_error_email(\n                    'Luigi Scheduler: DISABLED {task} due to excessive failures'.format(task=task.id),\n                    '{task} failed {failures} times in the last {window} seconds, so it is being '\n                    'disabled for {persist} seconds'.format(\n                        failures=config.disable_failures,\n                        task=task.id,\n                        window=config.disable_window,\n                        persist=config.disable_persist,\n                    ))\n        elif new_status == DISABLED:\n            task.scheduler_disable_time = None\n\n        self._status_tasks[task.status].pop(task.id)\n        self._status_tasks[new_status][task.id] = task\n        task.status = new_status\n\n    def prune(self, task, config, assistants):\n        remove = False\n\n        # Mark tasks with no remaining active stakeholders for deletion\n        if not task.stakeholders:\n            if task.remove is None:\n                logger.info(\"Task %r has stakeholders %r but none remain connected -> will remove \"\n                            \"task in %s seconds\", task.id, task.stakeholders, config.remove_delay)\n                task.remove = time.time() + config.remove_delay\n\n        # If a running worker disconnects, tag all its jobs as FAILED and subject it to the same retry logic\n        if task.status == RUNNING and task.worker_running and task.worker_running not in task.stakeholders | assistants:\n            logger.info(\"Task %r is marked as running by disconnected worker %r -> marking as \"\n                        \"FAILED with retry delay of %rs\", task.id, task.worker_running,\n                        config.retry_delay)\n            task.worker_running = None\n            self.set_status(task, FAILED, config)\n            task.retry = time.time() + config.retry_delay\n\n        # Re-enable task after the disable time expires\n        if task.status == DISABLED and task.scheduler_disable_time:\n            if time.time() - fix_time(task.scheduler_disable_time) > config.disable_persist:\n                self.re_enable(task, config)\n\n        # Remove tasks that have no stakeholders\n        if task.remove and time.time() > task.remove:\n            logger.info(\"Removing task %r (no connected stakeholders)\", task.id)\n            remove = True\n\n        # Reset FAILED tasks to PENDING if max timeout is reached, and retry delay is >= 0\n        if task.status == FAILED and config.retry_delay >= 0 and task.retry < time.time():\n            self.set_status(task, PENDING, config)\n\n        return remove\n\n    def inactivate_tasks(self, delete_tasks):\n        # The terminology is a bit confusing: we used to \"delete\" tasks when they became inactive,\n        # but with a pluggable state storage, you might very well want to keep some history of\n        # older tasks as well. That's why we call it \"inactivate\" (as in the verb)\n        for task in delete_tasks:\n            task_obj = self._tasks.pop(task)\n            self._status_tasks[task_obj.status].pop(task)\n\n    def get_active_workers(self, last_active_lt=None):\n        for worker in six.itervalues(self._active_workers):\n            if last_active_lt is not None and worker.last_active >= last_active_lt:\n                continue\n            yield worker\n\n    def get_assistants(self, last_active_lt=None):\n        return filter(lambda w: w.assistant, self.get_active_workers(last_active_lt))\n\n    def get_worker_ids(self):\n        return self._active_workers.keys()  # only used for unit tests\n\n    def get_worker(self, worker_id):\n        return self._active_workers.setdefault(worker_id, Worker(worker_id))\n\n    def inactivate_workers(self, delete_workers):\n        # Mark workers as inactive\n        for worker in delete_workers:\n            self._active_workers.pop(worker)\n\n        # remove workers from tasks\n        for task in self.get_active_tasks():\n            task.stakeholders.difference_update(delete_workers)\n            task.workers.difference_update(delete_workers)\n\n    def get_necessary_tasks(self):\n        necessary_tasks = set()\n        for task in self.get_active_tasks():\n            if task.status not in (DONE, DISABLED) or \\\n                    getattr(task, 'scheduler_disable_time', None) is not None:\n                necessary_tasks.update(task.deps)\n                necessary_tasks.add(task.id)\n        return necessary_tasks\n\n\nclass CentralPlannerScheduler(Scheduler):\n    \"\"\"\n    Async scheduler that can handle multiple workers, etc.\n\n    Can be run locally or on a server (using RemoteScheduler + server.Server).\n    \"\"\"\n\n    def __init__(self, config=None, resources=None, task_history_impl=None, **kwargs):\n        \"\"\"\n        Keyword Arguments:\n        :param config: an object of class \"scheduler\" or None (in which the global instance will be used)\n        :param resources: a dict of str->int constraints\n        :param task_history_override: ignore config and use this object as the task history\n        \"\"\"\n        self._config = config or scheduler(**kwargs)\n        self._state = SimpleTaskState(self._config.state_path)\n\n        if task_history_impl:\n            self._task_history = task_history_impl\n        elif self._config.record_task_history:\n            from luigi import db_task_history  # Needs sqlalchemy, thus imported here\n            self._task_history = db_task_history.DbTaskHistory()\n        else:\n            self._task_history = history.NopHistory()\n        self._resources = resources or configuration.get_config().getintdict('resources')  # TODO: Can we make this a Parameter?\n        self._make_task = functools.partial(\n            Task, disable_failures=self._config.disable_failures,\n            disable_hard_timeout=self._config.disable_hard_timeout,\n            disable_window=self._config.disable_window)\n\n    def load(self):\n        self._state.load()\n\n    def dump(self):\n        self._state.dump()\n\n    def prune(self):\n        logger.info(\"Starting pruning of task graph\")\n        remove_workers = []\n        for worker in self._state.get_active_workers():\n            if worker.prune(self._config):\n                logger.info(\"Worker %s timed out (no contact for >=%ss)\", worker, self._config.worker_disconnect_delay)\n                remove_workers.append(worker.id)\n\n        self._state.inactivate_workers(remove_workers)\n\n        assistant_ids = set(w.id for w in self._state.get_assistants())\n        remove_tasks = []\n\n        if assistant_ids:\n            necessary_tasks = self._state.get_necessary_tasks()\n        else:\n            necessary_tasks = ()\n\n        for task in self._state.get_active_tasks():\n            if task.id not in necessary_tasks and self._state.prune(task, self._config, assistant_ids):\n                remove_tasks.append(task.id)\n\n        self._state.inactivate_tasks(remove_tasks)\n\n        logger.info(\"Done pruning task graph\")\n\n    def update(self, worker_id, worker_reference=None):\n        \"\"\"\n        Keep track of whenever the worker was last active.\n        \"\"\"\n        worker = self._state.get_worker(worker_id)\n        worker.update(worker_reference)\n\n    def _update_priority(self, task, prio, worker):\n        \"\"\"\n        Update priority of the given task.\n\n        Priority can only be increased.\n        If the task doesn't exist, a placeholder task is created to preserve priority when the task is later scheduled.\n        \"\"\"\n        task.priority = prio = max(prio, task.priority)\n        for dep in task.deps or []:\n            t = self._state.get_task(dep)\n            if t is not None and prio > t.priority:\n                self._update_priority(t, prio, worker)\n\n    def add_task(self, task_id=None, status=PENDING, runnable=True,\n                 deps=None, new_deps=None, expl=None, resources=None,\n                 priority=0, family='', module=None, params=None,\n                 assistant=False, **kwargs):\n        \"\"\"\n        * add task identified by task_id if it doesn't exist\n        * if deps is not None, update dependency list\n        * update status of task\n        * add additional workers/stakeholders\n        * update priority when needed\n        \"\"\"\n        worker_id = kwargs['worker']\n        self.update(worker_id)\n\n        task = self._state.get_task(task_id, setdefault=self._make_task(\n            task_id=task_id, status=PENDING, deps=deps, resources=resources,\n            priority=priority, family=family, module=module, params=params))\n\n        # for setting priority, we'll sometimes create tasks with unset family and params\n        if not task.family:\n            task.family = family\n        if not getattr(task, 'module', None):\n            task.module = module\n        if not task.params:\n            task.params = _get_default(params, {})\n\n        if task.remove is not None:\n            task.remove = None  # unmark task for removal so it isn't removed after being added\n\n        if not (task.status == RUNNING and status == PENDING):\n            # don't allow re-scheduling of task while it is running, it must either fail or succeed first\n            if status == PENDING or status != task.status:\n                # Update the DB only if there was a acctual change, to prevent noise.\n                # We also check for status == PENDING b/c that's the default value\n                # (so checking for status != task.status woule lie)\n                self._update_task_history(task_id, status)\n            self._state.set_status(task, PENDING if status == SUSPENDED else status, self._config)\n            if status == FAILED:\n                task.retry = time.time() + self._config.retry_delay\n\n        if deps is not None:\n            task.deps = set(deps)\n\n        if new_deps is not None:\n            task.deps.update(new_deps)\n\n        if resources is not None:\n            task.resources = resources\n\n        if not assistant:\n            task.stakeholders.add(worker_id)\n\n            # Task dependencies might not exist yet. Let's create dummy tasks for them for now.\n            # Otherwise the task dependencies might end up being pruned if scheduling takes a long time\n            for dep in task.deps or []:\n                t = self._state.get_task(dep, setdefault=self._make_task(task_id=dep, status=UNKNOWN, deps=None, priority=priority))\n                t.stakeholders.add(worker_id)\n\n        self._update_priority(task, priority, worker_id)\n\n        if runnable:\n            task.workers.add(worker_id)\n            self._state.get_worker(worker_id).tasks.add(task)\n\n        if expl is not None:\n            task.expl = expl\n\n    def add_worker(self, worker, info, **kwargs):\n        self._state.get_worker(worker).add_info(info)\n\n    def update_resources(self, **resources):\n        if self._resources is None:\n            self._resources = {}\n        self._resources.update(resources)\n\n    def _has_resources(self, needed_resources, used_resources):\n        if needed_resources is None:\n            return True\n\n        available_resources = self._resources or {}\n        for resource, amount in six.iteritems(needed_resources):\n            if amount + used_resources[resource] > available_resources.get(resource, 1):\n                return False\n        return True\n\n    def _used_resources(self):\n        used_resources = collections.defaultdict(int)\n        if self._resources is not None:\n            for task in self._state.get_active_tasks():\n                if task.status == RUNNING and task.resources:\n                    for resource, amount in six.iteritems(task.resources):\n                        used_resources[resource] += amount\n        return used_resources\n\n    def _rank(self, among_tasks):\n        \"\"\"\n        Return worker's rank function for task scheduling.\n\n        :return:\n        \"\"\"\n        dependents = collections.defaultdict(int)\n\n        def not_done(t):\n            task = self._state.get_task(t, default=None)\n            return task is None or task.status != DONE\n        for task in among_tasks:\n            if task.status != DONE:\n                deps = list(filter(not_done, task.deps))\n                inverse_num_deps = 1.0 / max(len(deps), 1)\n                for dep in deps:\n                    dependents[dep] += inverse_num_deps\n\n        return lambda task: (task.priority, dependents[task.id], -task.time)\n\n    def _schedulable(self, task):\n        if task.status != PENDING:\n            return False\n        for dep in task.deps:\n            dep_task = self._state.get_task(dep, default=None)\n            if dep_task is None or dep_task.status != DONE:\n                return False\n        return True\n\n    def get_work(self, host=None, assistant=False, **kwargs):\n        # TODO: remove any expired nodes\n\n        # Algo: iterate over all nodes, find the highest priority node no dependencies and available\n        # resources.\n\n        # Resource checking looks both at currently available resources and at which resources would\n        # be available if all running tasks died and we rescheduled all workers greedily. We do both\n        # checks in order to prevent a worker with many low-priority tasks from starving other\n        # workers with higher priority tasks that share the same resources.\n\n        # TODO: remove tasks that can't be done, figure out if the worker has absolutely\n        # nothing it can wait for\n\n        worker_id = kwargs['worker']\n        # Return remaining tasks that have no FAILED descendents\n        self.update(worker_id, {'host': host})\n        if assistant:\n            self.add_worker(worker_id, [('assistant', assistant)])\n        best_task = None\n        locally_pending_tasks = 0\n        running_tasks = []\n        upstream_table = {}\n\n        greedy_resources = collections.defaultdict(int)\n        n_unique_pending = 0\n\n        worker = self._state.get_worker(worker_id)\n        if worker.is_trivial_worker():\n            relevant_tasks = worker.get_pending_tasks()\n            used_resources = collections.defaultdict(int)\n            greedy_workers = dict()  # If there's no resources, then they can grab any task\n        else:\n            relevant_tasks = self._state.get_pending_tasks()\n            used_resources = self._used_resources()\n            greedy_workers = dict((worker.id, worker.info.get('workers', 1))\n                                  for worker in self._state.get_active_workers())\n        tasks = list(relevant_tasks)\n        tasks.sort(key=self._rank(among_tasks=tasks), reverse=True)\n\n        for task in tasks:\n            upstream_status = self._upstream_status(task.id, upstream_table)\n            in_workers = (assistant and task.workers) or worker_id in task.workers\n            if task.status == RUNNING and in_workers:\n                # Return a list of currently running tasks to the client,\n                # makes it easier to troubleshoot\n                other_worker = self._state.get_worker(task.worker_running)\n                more_info = {'task_id': task.id, 'worker': str(other_worker)}\n                if other_worker is not None:\n                    more_info.update(other_worker.info)\n                    running_tasks.append(more_info)\n\n            if task.status == PENDING and in_workers and upstream_status != UPSTREAM_DISABLED:\n                locally_pending_tasks += 1\n                if len(task.workers) == 1 and not assistant:\n                    n_unique_pending += 1\n\n            if task.status == RUNNING and (task.worker_running in greedy_workers):\n                greedy_workers[task.worker_running] -= 1\n                for resource, amount in six.iteritems((task.resources or {})):\n                    greedy_resources[resource] += amount\n\n            if not best_task and self._schedulable(task) and self._has_resources(task.resources, greedy_resources):\n                if in_workers and self._has_resources(task.resources, used_resources):\n                    best_task = task\n                else:\n                    workers = itertools.chain(task.workers, [worker_id]) if assistant else task.workers\n                    for task_worker in workers:\n                        if greedy_workers.get(task_worker, 0) > 0:\n                            # use up a worker\n                            greedy_workers[task_worker] -= 1\n\n                            # keep track of the resources used in greedy scheduling\n                            for resource, amount in six.iteritems((task.resources or {})):\n                                greedy_resources[resource] += amount\n\n                            break\n\n        reply = {'n_pending_tasks': locally_pending_tasks,\n                 'running_tasks': running_tasks,\n                 'task_id': None,\n                 'n_unique_pending': n_unique_pending}\n\n        if best_task:\n            self._state.set_status(best_task, RUNNING, self._config)\n            best_task.worker_running = worker_id\n            best_task.time_running = time.time()\n            self._update_task_history(best_task.id, RUNNING, host=host)\n\n            reply['task_id'] = best_task.id\n            reply['task_family'] = best_task.family\n            reply['task_module'] = getattr(best_task, 'module', None)\n            reply['task_params'] = best_task.params\n\n        return reply\n\n    def ping(self, **kwargs):\n        worker_id = kwargs['worker']\n        self.update(worker_id)\n\n    def _upstream_status(self, task_id, upstream_status_table):\n        if task_id in upstream_status_table:\n            return upstream_status_table[task_id]\n        elif self._state.has_task(task_id):\n            task_stack = [task_id]\n\n            while task_stack:\n                dep_id = task_stack.pop()\n                if self._state.has_task(dep_id):\n                    dep = self._state.get_task(dep_id)\n                    if dep_id not in upstream_status_table:\n                        if dep.status == PENDING and dep.deps:\n                            task_stack = task_stack + [dep_id] + list(dep.deps)\n                            upstream_status_table[dep_id] = ''  # will be updated postorder\n                        else:\n                            dep_status = STATUS_TO_UPSTREAM_MAP.get(dep.status, '')\n                            upstream_status_table[dep_id] = dep_status\n                    elif upstream_status_table[dep_id] == '' and dep.deps:\n                        # This is the postorder update step when we set the\n                        # status based on the previously calculated child elements\n                        upstream_status = [upstream_status_table.get(task_id, '') for task_id in dep.deps]\n                        upstream_status.append('')  # to handle empty list\n                        status = max(upstream_status, key=UPSTREAM_SEVERITY_KEY)\n                        upstream_status_table[dep_id] = status\n            return upstream_status_table[dep_id]\n\n    def _serialize_task(self, task_id, include_deps=True):\n        task = self._state.get_task(task_id)\n        ret = {\n            'status': task.status,\n            'workers': list(task.workers),\n            'worker_running': task.worker_running,\n            'time_running': getattr(task, \"time_running\", None),\n            'start_time': task.time,\n            'params': task.params,\n            'name': task.family,\n            'priority': task.priority,\n            'resources': task.resources,\n        }\n        if task.status == DISABLED:\n            ret['re_enable_able'] = task.scheduler_disable_time is not None\n        if include_deps:\n            ret['deps'] = list(task.deps)\n        return ret\n\n    def graph(self, **kwargs):\n        self.prune()\n        serialized = {}\n        for task in self._state.get_active_tasks():\n            serialized[task.id] = self._serialize_task(task.id)\n        return serialized\n\n    def _recurse_deps(self, task_id, serialized):\n        if task_id not in serialized:\n            task = self._state.get_task(task_id)\n            if task is None or not task.family:\n                logger.warn('Missing task for id [%s]', task_id)\n\n                # try to infer family and params from task_id\n                try:\n                    family, _, param_str = task_id.rstrip(')').partition('(')\n                    params = dict(param.split('=') for param in param_str.split(', '))\n                except BaseException:\n                    family, params = '', {}\n                serialized[task_id] = {\n                    'deps': [],\n                    'status': UNKNOWN,\n                    'workers': [],\n                    'start_time': UNKNOWN,\n                    'params': params,\n                    'name': family,\n                    'priority': 0,\n                }\n            else:\n                serialized[task_id] = self._serialize_task(task_id)\n                for dep in task.deps:\n                    self._recurse_deps(dep, serialized)\n\n    def dep_graph(self, task_id, **kwargs):\n        self.prune()\n        serialized = {}\n        if self._state.has_task(task_id):\n            self._recurse_deps(task_id, serialized)\n        return serialized\n\n    def task_list(self, status, upstream_status, limit=True, search=None, **kwargs):\n        \"\"\"\n        Query for a subset of tasks by status.\n        \"\"\"\n        self.prune()\n        result = {}\n        upstream_status_table = {}  # used to memoize upstream status\n        if search is None:\n            filter_func = lambda _: True\n        else:\n            terms = search.split()\n            filter_func = lambda t: all(term in t.id for term in terms)\n        for task in filter(filter_func, self._state.get_active_tasks(status)):\n            if (task.status != PENDING or not upstream_status or\n                    upstream_status == self._upstream_status(task.id, upstream_status_table)):\n                serialized = self._serialize_task(task.id, False)\n                result[task.id] = serialized\n        if limit and len(result) > self._config.max_shown_tasks:\n            return {'num_tasks': len(result)}\n        return result\n\n    def worker_list(self, include_running=True, **kwargs):\n        self.prune()\n        workers = [\n            dict(\n                name=worker.id,\n                last_active=worker.last_active,\n                started=getattr(worker, 'started', None),\n                **worker.info\n            ) for worker in self._state.get_active_workers()]\n        workers.sort(key=lambda worker: worker['started'], reverse=True)\n        if include_running:\n            running = collections.defaultdict(dict)\n            num_pending = collections.defaultdict(int)\n            num_uniques = collections.defaultdict(int)\n            for task in self._state.get_pending_tasks():\n                if task.status == RUNNING and task.worker_running:\n                    running[task.worker_running][task.id] = self._serialize_task(task.id, False)\n                elif task.status == PENDING:\n                    for worker in task.workers:\n                        num_pending[worker] += 1\n                    if len(task.workers) == 1:\n                        num_uniques[list(task.workers)[0]] += 1\n            for worker in workers:\n                tasks = running[worker['name']]\n                worker['num_running'] = len(tasks)\n                worker['num_pending'] = num_pending[worker['name']]\n                worker['num_uniques'] = num_uniques[worker['name']]\n                worker['running'] = tasks\n        return workers\n\n    def inverse_dep_graph(self, task_id, **kwargs):\n        self.prune()\n        serialized = {}\n        if self._state.has_task(task_id):\n            self._traverse_inverse_deps(task_id, serialized)\n        return serialized\n\n    def _traverse_inverse_deps(self, task_id, serialized):\n        stack = [task_id]\n        serialized[task_id] = self._serialize_task(task_id)\n        while len(stack) > 0:\n            curr_id = stack.pop()\n            for task in self._state.get_active_tasks():\n                if curr_id in task.deps:\n                    serialized[curr_id][\"deps\"].append(task.id)\n                    if task.id not in serialized:\n                        serialized[task.id] = self._serialize_task(task.id)\n                        serialized[task.id][\"deps\"] = []\n                        stack.append(task.id)\n\n    def task_search(self, task_str, **kwargs):\n        \"\"\"\n        Query for a subset of tasks by task_id.\n\n        :param task_str:\n        :return:\n        \"\"\"\n        self.prune()\n        result = collections.defaultdict(dict)\n        for task in self._state.get_active_tasks():\n            if task.id.find(task_str) != -1:\n                serialized = self._serialize_task(task.id, False)\n                result[task.status][task.id] = serialized\n        return result\n\n    def re_enable_task(self, task_id):\n        serialized = {}\n        task = self._state.get_task(task_id)\n        if task and task.status == DISABLED and task.scheduler_disable_time:\n            self._state.re_enable(task, self._config)\n            serialized = self._serialize_task(task_id)\n        return serialized\n\n    def fetch_error(self, task_id, **kwargs):\n        if self._state.has_task(task_id):\n            return {\"taskId\": task_id, \"error\": self._state.get_task(task_id).expl}\n        else:\n            return {\"taskId\": task_id, \"error\": \"\"}\n\n    def _update_task_history(self, task_id, status, host=None):\n        try:\n            if status == DONE or status == FAILED:\n                successful = (status == DONE)\n                self._task_history.task_finished(task_id, successful)\n            elif status == PENDING:\n                self._task_history.task_scheduled(task_id)\n            elif status == RUNNING:\n                self._task_history.task_started(task_id, host)\n        except BaseException:\n            logger.warning(\"Error saving Task history\", exc_info=True)\n\n    @property\n    def task_history(self):\n        # Used by server.py to expose the calls\n        return self._task_history\n",
      "file_after": "# -*- coding: utf-8 -*-\n#\n# Copyright 2012-2015 Spotify AB\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\"\"\"\nThe system for scheduling tasks and executing them in order.\nDeals with dependencies, priorities, resources, etc.\nThe :py:class:`~luigi.worker.Worker` pulls tasks from the scheduler (usually over the REST interface) and executes them.\nSee :doc:`/central_scheduler` for more info.\n\"\"\"\n\nimport collections\ntry:\n    import cPickle as pickle\nexcept ImportError:\n    import pickle\nimport datetime\nimport functools\nimport itertools\nimport logging\nimport os\nimport time\n\nfrom luigi import six\n\nfrom luigi import configuration\nfrom luigi import notifications\nfrom luigi import parameter\nfrom luigi import task_history as history\nfrom luigi.task_status import DISABLED, DONE, FAILED, PENDING, RUNNING, SUSPENDED, UNKNOWN\nfrom luigi.task import Config\n\nlogger = logging.getLogger(\"luigi.server\")\n\n\nclass Scheduler(object):\n    \"\"\"\n    Abstract base class.\n\n    Note that the methods all take string arguments, not Task objects...\n    \"\"\"\"\"\n    add_task = NotImplemented\n    get_work = NotImplemented\n    ping = NotImplemented\n\nUPSTREAM_RUNNING = 'UPSTREAM_RUNNING'\nUPSTREAM_MISSING_INPUT = 'UPSTREAM_MISSING_INPUT'\nUPSTREAM_FAILED = 'UPSTREAM_FAILED'\nUPSTREAM_DISABLED = 'UPSTREAM_DISABLED'\n\nUPSTREAM_SEVERITY_ORDER = (\n    '',\n    UPSTREAM_RUNNING,\n    UPSTREAM_MISSING_INPUT,\n    UPSTREAM_FAILED,\n    UPSTREAM_DISABLED,\n)\nUPSTREAM_SEVERITY_KEY = UPSTREAM_SEVERITY_ORDER.index\nSTATUS_TO_UPSTREAM_MAP = {\n    FAILED: UPSTREAM_FAILED,\n    RUNNING: UPSTREAM_RUNNING,\n    PENDING: UPSTREAM_MISSING_INPUT,\n    DISABLED: UPSTREAM_DISABLED,\n}\n\n\nclass scheduler(Config):\n    # TODO(erikbern): the config_path is needed for backwards compatilibity. We should drop the compatibility\n    # at some point (in particular this would force users to replace all dashes with underscores in the config)\n    retry_delay = parameter.FloatParameter(default=900.0)\n    remove_delay = parameter.FloatParameter(default=600.0)\n    worker_disconnect_delay = parameter.FloatParameter(default=60.0)\n    state_path = parameter.Parameter(default='/var/lib/luigi-server/state.pickle')\n\n    # Jobs are disabled if we see more than disable_failures failures in disable_window seconds.\n    # These disables last for disable_persist seconds.\n    disable_window = parameter.IntParameter(default=3600,\n                                            config_path=dict(section='scheduler', name='disable-window-seconds'))\n    disable_failures = parameter.IntParameter(default=None,\n                                              config_path=dict(section='scheduler', name='disable-num-failures'))\n    disable_hard_timeout = parameter.IntParameter(default=None,\n                                                  config_path=dict(section='scheduler', name='disable-hard-timeout'))\n    disable_persist = parameter.IntParameter(default=86400,\n                                             config_path=dict(section='scheduler', name='disable-persist-seconds'))\n    max_shown_tasks = parameter.IntParameter(default=100000)\n    prune_done_tasks = parameter.BoolParameter(default=False)\n\n    record_task_history = parameter.BoolParameter(default=False)\n\n    visualization_graph = parameter.Parameter(default=\"svg\", config_path=dict(section='scheduler', name='visualization-graph'))\n\n\ndef fix_time(x):\n    # Backwards compatibility for a fix in Dec 2014. Prior to the fix, pickled state might store datetime objects\n    # Let's remove this function soon\n    if isinstance(x, datetime.datetime):\n        return time.mktime(x.timetuple())\n    else:\n        return x\n\n\nclass Failures(object):\n    \"\"\"\n    This class tracks the number of failures in a given time window.\n\n    Failures added are marked with the current timestamp, and this class counts\n    the number of failures in a sliding time window ending at the present.\n    \"\"\"\n\n    def __init__(self, window):\n        \"\"\"\n        Initialize with the given window.\n\n        :param window: how long to track failures for, as a float (number of seconds).\n        \"\"\"\n        self.window = window\n        self.failures = collections.deque()\n        self.first_failure_time = None\n\n    def add_failure(self):\n        \"\"\"\n        Add a failure event with the current timestamp.\n        \"\"\"\n        failure_time = time.time()\n\n        if not self.first_failure_time:\n            self.first_failure_time = failure_time\n\n        self.failures.append(failure_time)\n\n    def num_failures(self):\n        \"\"\"\n        Return the number of failures in the window.\n        \"\"\"\n        min_time = time.time() - self.window\n\n        while self.failures and fix_time(self.failures[0]) < min_time:\n            self.failures.popleft()\n\n        return len(self.failures)\n\n    def clear(self):\n        \"\"\"\n        Clear the failure queue.\n        \"\"\"\n        self.failures.clear()\n\n\ndef _get_default(x, default):\n    if x is not None:\n        return x\n    else:\n        return default\n\n\nclass Task(object):\n\n    def __init__(self, task_id, status, deps, resources=None, priority=0, family='', module=None,\n                 params=None, disable_failures=None, disable_window=None, disable_hard_timeout=None):\n        self.id = task_id\n        self.stakeholders = set()  # workers ids that are somehow related to this task (i.e. don't prune while any of these workers are still active)\n        self.workers = set()  # workers ids that can perform task - task is 'BROKEN' if none of these workers are active\n        if deps is None:\n            self.deps = set()\n        else:\n            self.deps = set(deps)\n        self.status = status  # PENDING, RUNNING, FAILED or DONE\n        self.time = time.time()  # Timestamp when task was first added\n        self.retry = None\n        self.remove = None\n        self.worker_running = None  # the worker id that is currently running the task or None\n        self.time_running = None  # Timestamp when picked up by worker\n        self.expl = None\n        self.priority = priority\n        self.resources = _get_default(resources, {})\n        self.family = family\n        self.module = module\n        self.params = _get_default(params, {})\n        self.disable_failures = disable_failures\n        self.disable_hard_timeout = disable_hard_timeout\n        self.failures = Failures(disable_window)\n        self.scheduler_disable_time = None\n\n    def __repr__(self):\n        return \"Task(%r)\" % vars(self)\n\n    def add_failure(self):\n        self.failures.add_failure()\n\n    def has_excessive_failures(self):\n\n        excessive_failures = False\n\n        if (self.failures.first_failure_time is not None and\n                self.disable_hard_timeout):\n            if (time.time() >= self.failures.first_failure_time +\n                    self.disable_hard_timeout):\n                excessive_failures = True\n\n        if self.failures.num_failures() >= self.disable_failures:\n            excessive_failures = True\n\n        return excessive_failures\n\n    def can_disable(self):\n        return (self.disable_failures is not None or\n                self.disable_hard_timeout is not None)\n\n\nclass Worker(object):\n    \"\"\"\n    Structure for tracking worker activity and keeping their references.\n    \"\"\"\n\n    def __init__(self, worker_id, last_active=None):\n        self.id = worker_id\n        self.reference = None  # reference to the worker in the real world. (Currently a dict containing just the host)\n        self.last_active = last_active  # seconds since epoch\n        self.started = time.time()  # seconds since epoch\n        self.tasks = set()  # task objects\n        self.info = {}\n\n    def add_info(self, info):\n        self.info.update(info)\n\n    def update(self, worker_reference):\n        if worker_reference:\n            self.reference = worker_reference\n        self.last_active = time.time()\n\n    def prune(self, config):\n        # Delete workers that haven't said anything for a while (probably killed)\n        if self.last_active + config.worker_disconnect_delay < time.time():\n            return True\n\n    def get_pending_tasks(self, state):\n        \"\"\"\n        Get PENDING (and RUNNING) tasks for this worker.\n\n        You have to pass in the state for optimization reasons.\n        \"\"\"\n        if len(self.tasks) < state.num_pending_tasks():\n            return six.moves.filter(lambda task: task.status in [PENDING, RUNNING],\n                                    self.tasks)\n        else:\n            return state.get_pending_tasks()\n\n    def is_trivial_worker(self, state):\n        \"\"\"\n        If it's not an assistant having only tasks that are without\n        requirements.\n\n        We have to pass the state parameter for optimization reasons.\n        \"\"\"\n        if self.assistant:\n            return False\n        return all(not task.resources for task in self.get_pending_tasks(state))\n\n    @property\n    def assistant(self):\n        return self.info.get('assistant', False)\n\n    def __str__(self):\n        return self.id\n\n\nclass SimpleTaskState(object):\n    \"\"\"\n    Keep track of the current state and handle persistance.\n\n    The point of this class is to enable other ways to keep state, eg. by using a database\n    These will be implemented by creating an abstract base class that this and other classes\n    inherit from.\n    \"\"\"\n\n    def __init__(self, state_path):\n        self._state_path = state_path\n        self._tasks = {}  # map from id to a Task object\n        self._status_tasks = collections.defaultdict(dict)\n        self._active_workers = {}  # map from id to a Worker object\n\n    def dump(self):\n        state = (self._tasks, self._active_workers)\n        try:\n            with open(self._state_path, 'wb') as fobj:\n                pickle.dump(state, fobj)\n        except IOError:\n            logger.warning(\"Failed saving scheduler state\", exc_info=1)\n        else:\n            logger.info(\"Saved state in %s\", self._state_path)\n\n    # prone to lead to crashes when old state is unpickled with updated code. TODO some kind of version control?\n    def load(self):\n        if os.path.exists(self._state_path):\n            logger.info(\"Attempting to load state from %s\", self._state_path)\n            try:\n                with open(self._state_path, 'rb') as fobj:\n                    state = pickle.load(fobj)\n            except BaseException:\n                logger.exception(\"Error when loading state. Starting from clean slate.\")\n                return\n\n            self._tasks, self._active_workers = state\n            self._status_tasks = collections.defaultdict(dict)\n            for task in six.itervalues(self._tasks):\n                self._status_tasks[task.status][task.id] = task\n\n            # Convert from old format\n            # TODO: this is really ugly, we need something more future-proof\n            # Every time we add an attribute to the Worker class, this code needs to be updated\n            for k, v in six.iteritems(self._active_workers):\n                if isinstance(v, float):\n                    self._active_workers[k] = Worker(worker_id=k, last_active=v)\n\n            if any(not hasattr(w, 'tasks') for k, w in six.iteritems(self._active_workers)):\n                # If you load from an old format where Workers don't contain tasks.\n                for k, worker in six.iteritems(self._active_workers):\n                    worker.tasks = set()\n                for task in six.itervalues(self._tasks):\n                    for worker_id in task.workers:\n                        self._active_workers[worker_id].tasks.add(task)\n        else:\n            logger.info(\"No prior state file exists at %s. Starting with clean slate\", self._state_path)\n\n    def get_active_tasks(self, status=None):\n        if status:\n            for task in six.itervalues(self._status_tasks[status]):\n                yield task\n        else:\n            for task in six.itervalues(self._tasks):\n                yield task\n\n    def get_running_tasks(self):\n        return six.itervalues(self._status_tasks[RUNNING])\n\n    def get_pending_tasks(self):\n        return itertools.chain.from_iterable(six.itervalues(self._status_tasks[status])\n                                             for status in [PENDING, RUNNING])\n\n    def num_pending_tasks(self):\n        \"\"\"\n        Return how many tasks are PENDING + RUNNING. O(1).\n        \"\"\"\n        return len(self._status_tasks[PENDING]) + len(self._status_tasks[RUNNING])\n\n    def get_task(self, task_id, default=None, setdefault=None):\n        if setdefault:\n            task = self._tasks.setdefault(task_id, setdefault)\n            self._status_tasks[task.status][task.id] = task\n            return task\n        else:\n            return self._tasks.get(task_id, default)\n\n    def has_task(self, task_id):\n        return task_id in self._tasks\n\n    def re_enable(self, task, config=None):\n        task.scheduler_disable_time = None\n        task.failures.clear()\n        if config:\n            self.set_status(task, FAILED, config)\n            task.failures.clear()\n\n    def set_status(self, task, new_status, config=None):\n        if new_status == FAILED:\n            assert config is not None\n\n        # not sure why we have SUSPENDED, as it can never be set\n        if new_status == SUSPENDED:\n            new_status = PENDING\n\n        if new_status == DISABLED and task.status == RUNNING:\n            return\n\n        if task.status == DISABLED:\n            if new_status == DONE:\n                self.re_enable(task)\n\n            # don't allow workers to override a scheduler disable\n            elif task.scheduler_disable_time is not None:\n                return\n\n        if new_status == FAILED and task.can_disable():\n            task.add_failure()\n            if task.has_excessive_failures():\n                task.scheduler_disable_time = time.time()\n                new_status = DISABLED\n                notifications.send_error_email(\n                    'Luigi Scheduler: DISABLED {task} due to excessive failures'.format(task=task.id),\n                    '{task} failed {failures} times in the last {window} seconds, so it is being '\n                    'disabled for {persist} seconds'.format(\n                        failures=config.disable_failures,\n                        task=task.id,\n                        window=config.disable_window,\n                        persist=config.disable_persist,\n                    ))\n        elif new_status == DISABLED:\n            task.scheduler_disable_time = None\n\n        self._status_tasks[task.status].pop(task.id)\n        self._status_tasks[new_status][task.id] = task\n        task.status = new_status\n\n    def prune(self, task, config, assistants):\n        remove = False\n\n        # Mark tasks with no remaining active stakeholders for deletion\n        if not task.stakeholders:\n            if task.remove is None:\n                logger.info(\"Task %r has stakeholders %r but none remain connected -> will remove \"\n                            \"task in %s seconds\", task.id, task.stakeholders, config.remove_delay)\n                task.remove = time.time() + config.remove_delay\n\n        # If a running worker disconnects, tag all its jobs as FAILED and subject it to the same retry logic\n        if task.status == RUNNING and task.worker_running and task.worker_running not in task.stakeholders | assistants:\n            logger.info(\"Task %r is marked as running by disconnected worker %r -> marking as \"\n                        \"FAILED with retry delay of %rs\", task.id, task.worker_running,\n                        config.retry_delay)\n            task.worker_running = None\n            self.set_status(task, FAILED, config)\n            task.retry = time.time() + config.retry_delay\n\n        # Re-enable task after the disable time expires\n        if task.status == DISABLED and task.scheduler_disable_time:\n            if time.time() - fix_time(task.scheduler_disable_time) > config.disable_persist:\n                self.re_enable(task, config)\n\n        # Remove tasks that have no stakeholders\n        if task.remove and time.time() > task.remove:\n            logger.info(\"Removing task %r (no connected stakeholders)\", task.id)\n            remove = True\n\n        # Reset FAILED tasks to PENDING if max timeout is reached, and retry delay is >= 0\n        if task.status == FAILED and config.retry_delay >= 0 and task.retry < time.time():\n            self.set_status(task, PENDING, config)\n\n        return remove\n\n    def inactivate_tasks(self, delete_tasks):\n        # The terminology is a bit confusing: we used to \"delete\" tasks when they became inactive,\n        # but with a pluggable state storage, you might very well want to keep some history of\n        # older tasks as well. That's why we call it \"inactivate\" (as in the verb)\n        for task in delete_tasks:\n            task_obj = self._tasks.pop(task)\n            self._status_tasks[task_obj.status].pop(task)\n\n    def get_active_workers(self, last_active_lt=None):\n        for worker in six.itervalues(self._active_workers):\n            if last_active_lt is not None and worker.last_active >= last_active_lt:\n                continue\n            yield worker\n\n    def get_assistants(self, last_active_lt=None):\n        return filter(lambda w: w.assistant, self.get_active_workers(last_active_lt))\n\n    def get_worker_ids(self):\n        return self._active_workers.keys()  # only used for unit tests\n\n    def get_worker(self, worker_id):\n        return self._active_workers.setdefault(worker_id, Worker(worker_id))\n\n    def inactivate_workers(self, delete_workers):\n        # Mark workers as inactive\n        for worker in delete_workers:\n            self._active_workers.pop(worker)\n\n        # remove workers from tasks\n        for task in self.get_active_tasks():\n            task.stakeholders.difference_update(delete_workers)\n            task.workers.difference_update(delete_workers)\n\n    def get_necessary_tasks(self):\n        necessary_tasks = set()\n        for task in self.get_active_tasks():\n            if task.status not in (DONE, DISABLED) or \\\n                    getattr(task, 'scheduler_disable_time', None) is not None:\n                necessary_tasks.update(task.deps)\n                necessary_tasks.add(task.id)\n        return necessary_tasks\n\n\nclass CentralPlannerScheduler(Scheduler):\n    \"\"\"\n    Async scheduler that can handle multiple workers, etc.\n\n    Can be run locally or on a server (using RemoteScheduler + server.Server).\n    \"\"\"\n\n    def __init__(self, config=None, resources=None, task_history_impl=None, **kwargs):\n        \"\"\"\n        Keyword Arguments:\n        :param config: an object of class \"scheduler\" or None (in which the global instance will be used)\n        :param resources: a dict of str->int constraints\n        :param task_history_override: ignore config and use this object as the task history\n        \"\"\"\n        self._config = config or scheduler(**kwargs)\n        self._state = SimpleTaskState(self._config.state_path)\n\n        if task_history_impl:\n            self._task_history = task_history_impl\n        elif self._config.record_task_history:\n            from luigi import db_task_history  # Needs sqlalchemy, thus imported here\n            self._task_history = db_task_history.DbTaskHistory()\n        else:\n            self._task_history = history.NopHistory()\n        self._resources = resources or configuration.get_config().getintdict('resources')  # TODO: Can we make this a Parameter?\n        self._make_task = functools.partial(\n            Task, disable_failures=self._config.disable_failures,\n            disable_hard_timeout=self._config.disable_hard_timeout,\n            disable_window=self._config.disable_window)\n\n    def load(self):\n        self._state.load()\n\n    def dump(self):\n        self._state.dump()\n\n    def prune(self):\n        logger.info(\"Starting pruning of task graph\")\n        remove_workers = []\n        for worker in self._state.get_active_workers():\n            if worker.prune(self._config):\n                logger.info(\"Worker %s timed out (no contact for >=%ss)\", worker, self._config.worker_disconnect_delay)\n                remove_workers.append(worker.id)\n\n        self._state.inactivate_workers(remove_workers)\n\n        assistant_ids = set(w.id for w in self._state.get_assistants())\n        remove_tasks = []\n\n        if assistant_ids:\n            necessary_tasks = self._state.get_necessary_tasks()\n        else:\n            necessary_tasks = ()\n\n        for task in self._state.get_active_tasks():\n            if task.id not in necessary_tasks and self._state.prune(task, self._config, assistant_ids):\n                remove_tasks.append(task.id)\n\n        self._state.inactivate_tasks(remove_tasks)\n\n        logger.info(\"Done pruning task graph\")\n\n    def update(self, worker_id, worker_reference=None):\n        \"\"\"\n        Keep track of whenever the worker was last active.\n        \"\"\"\n        worker = self._state.get_worker(worker_id)\n        worker.update(worker_reference)\n\n    def _update_priority(self, task, prio, worker):\n        \"\"\"\n        Update priority of the given task.\n\n        Priority can only be increased.\n        If the task doesn't exist, a placeholder task is created to preserve priority when the task is later scheduled.\n        \"\"\"\n        task.priority = prio = max(prio, task.priority)\n        for dep in task.deps or []:\n            t = self._state.get_task(dep)\n            if t is not None and prio > t.priority:\n                self._update_priority(t, prio, worker)\n\n    def add_task(self, task_id=None, status=PENDING, runnable=True,\n                 deps=None, new_deps=None, expl=None, resources=None,\n                 priority=0, family='', module=None, params=None,\n                 assistant=False, **kwargs):\n        \"\"\"\n        * add task identified by task_id if it doesn't exist\n        * if deps is not None, update dependency list\n        * update status of task\n        * add additional workers/stakeholders\n        * update priority when needed\n        \"\"\"\n        worker_id = kwargs['worker']\n        self.update(worker_id)\n\n        task = self._state.get_task(task_id, setdefault=self._make_task(\n            task_id=task_id, status=PENDING, deps=deps, resources=resources,\n            priority=priority, family=family, module=module, params=params))\n\n        # for setting priority, we'll sometimes create tasks with unset family and params\n        if not task.family:\n            task.family = family\n        if not getattr(task, 'module', None):\n            task.module = module\n        if not task.params:\n            task.params = _get_default(params, {})\n\n        if task.remove is not None:\n            task.remove = None  # unmark task for removal so it isn't removed after being added\n\n        if not (task.status == RUNNING and status == PENDING):\n            # don't allow re-scheduling of task while it is running, it must either fail or succeed first\n            if status == PENDING or status != task.status:\n                # Update the DB only if there was a acctual change, to prevent noise.\n                # We also check for status == PENDING b/c that's the default value\n                # (so checking for status != task.status woule lie)\n                self._update_task_history(task_id, status)\n            self._state.set_status(task, PENDING if status == SUSPENDED else status, self._config)\n            if status == FAILED:\n                task.retry = time.time() + self._config.retry_delay\n\n        if deps is not None:\n            task.deps = set(deps)\n\n        if new_deps is not None:\n            task.deps.update(new_deps)\n\n        if resources is not None:\n            task.resources = resources\n\n        if not assistant:\n            task.stakeholders.add(worker_id)\n\n            # Task dependencies might not exist yet. Let's create dummy tasks for them for now.\n            # Otherwise the task dependencies might end up being pruned if scheduling takes a long time\n            for dep in task.deps or []:\n                t = self._state.get_task(dep, setdefault=self._make_task(task_id=dep, status=UNKNOWN, deps=None, priority=priority))\n                t.stakeholders.add(worker_id)\n\n        self._update_priority(task, priority, worker_id)\n\n        if runnable:\n            task.workers.add(worker_id)\n            self._state.get_worker(worker_id).tasks.add(task)\n\n        if expl is not None:\n            task.expl = expl\n\n    def add_worker(self, worker, info, **kwargs):\n        self._state.get_worker(worker).add_info(info)\n\n    def update_resources(self, **resources):\n        if self._resources is None:\n            self._resources = {}\n        self._resources.update(resources)\n\n    def _has_resources(self, needed_resources, used_resources):\n        if needed_resources is None:\n            return True\n\n        available_resources = self._resources or {}\n        for resource, amount in six.iteritems(needed_resources):\n            if amount + used_resources[resource] > available_resources.get(resource, 1):\n                return False\n        return True\n\n    def _used_resources(self):\n        used_resources = collections.defaultdict(int)\n        if self._resources is not None:\n            for task in self._state.get_active_tasks():\n                if task.status == RUNNING and task.resources:\n                    for resource, amount in six.iteritems(task.resources):\n                        used_resources[resource] += amount\n        return used_resources\n\n    def _rank(self, among_tasks):\n        \"\"\"\n        Return worker's rank function for task scheduling.\n\n        :return:\n        \"\"\"\n        dependents = collections.defaultdict(int)\n\n        def not_done(t):\n            task = self._state.get_task(t, default=None)\n            return task is None or task.status != DONE\n        for task in among_tasks:\n            if task.status != DONE:\n                deps = list(filter(not_done, task.deps))\n                inverse_num_deps = 1.0 / max(len(deps), 1)\n                for dep in deps:\n                    dependents[dep] += inverse_num_deps\n\n        return lambda task: (task.priority, dependents[task.id], -task.time)\n\n    def _schedulable(self, task):\n        if task.status != PENDING:\n            return False\n        for dep in task.deps:\n            dep_task = self._state.get_task(dep, default=None)\n            if dep_task is None or dep_task.status != DONE:\n                return False\n        return True\n\n    def get_work(self, host=None, assistant=False, **kwargs):\n        # TODO: remove any expired nodes\n\n        # Algo: iterate over all nodes, find the highest priority node no dependencies and available\n        # resources.\n\n        # Resource checking looks both at currently available resources and at which resources would\n        # be available if all running tasks died and we rescheduled all workers greedily. We do both\n        # checks in order to prevent a worker with many low-priority tasks from starving other\n        # workers with higher priority tasks that share the same resources.\n\n        # TODO: remove tasks that can't be done, figure out if the worker has absolutely\n        # nothing it can wait for\n\n        worker_id = kwargs['worker']\n        # Return remaining tasks that have no FAILED descendents\n        self.update(worker_id, {'host': host})\n        if assistant:\n            self.add_worker(worker_id, [('assistant', assistant)])\n        best_task = None\n        locally_pending_tasks = 0\n        running_tasks = []\n        upstream_table = {}\n\n        greedy_resources = collections.defaultdict(int)\n        n_unique_pending = 0\n\n        worker = self._state.get_worker(worker_id)\n        if worker.is_trivial_worker(self._state):\n            relevant_tasks = worker.get_pending_tasks(self._state)\n            used_resources = collections.defaultdict(int)\n            greedy_workers = dict()  # If there's no resources, then they can grab any task\n        else:\n            relevant_tasks = self._state.get_pending_tasks()\n            used_resources = self._used_resources()\n            greedy_workers = dict((worker.id, worker.info.get('workers', 1))\n                                  for worker in self._state.get_active_workers())\n        tasks = list(relevant_tasks)\n        tasks.sort(key=self._rank(among_tasks=tasks), reverse=True)\n\n        for task in tasks:\n            upstream_status = self._upstream_status(task.id, upstream_table)\n            in_workers = (assistant and task.workers) or worker_id in task.workers\n            if task.status == RUNNING and in_workers:\n                # Return a list of currently running tasks to the client,\n                # makes it easier to troubleshoot\n                other_worker = self._state.get_worker(task.worker_running)\n                more_info = {'task_id': task.id, 'worker': str(other_worker)}\n                if other_worker is not None:\n                    more_info.update(other_worker.info)\n                    running_tasks.append(more_info)\n\n            if task.status == PENDING and in_workers and upstream_status != UPSTREAM_DISABLED:\n                locally_pending_tasks += 1\n                if len(task.workers) == 1 and not assistant:\n                    n_unique_pending += 1\n\n            if task.status == RUNNING and (task.worker_running in greedy_workers):\n                greedy_workers[task.worker_running] -= 1\n                for resource, amount in six.iteritems((task.resources or {})):\n                    greedy_resources[resource] += amount\n\n            if not best_task and self._schedulable(task) and self._has_resources(task.resources, greedy_resources):\n                if in_workers and self._has_resources(task.resources, used_resources):\n                    best_task = task\n                else:\n                    workers = itertools.chain(task.workers, [worker_id]) if assistant else task.workers\n                    for task_worker in workers:\n                        if greedy_workers.get(task_worker, 0) > 0:\n                            # use up a worker\n                            greedy_workers[task_worker] -= 1\n\n                            # keep track of the resources used in greedy scheduling\n                            for resource, amount in six.iteritems((task.resources or {})):\n                                greedy_resources[resource] += amount\n\n                            break\n\n        reply = {'n_pending_tasks': locally_pending_tasks,\n                 'running_tasks': running_tasks,\n                 'task_id': None,\n                 'n_unique_pending': n_unique_pending}\n\n        if best_task:\n            self._state.set_status(best_task, RUNNING, self._config)\n            best_task.worker_running = worker_id\n            best_task.time_running = time.time()\n            self._update_task_history(best_task.id, RUNNING, host=host)\n\n            reply['task_id'] = best_task.id\n            reply['task_family'] = best_task.family\n            reply['task_module'] = getattr(best_task, 'module', None)\n            reply['task_params'] = best_task.params\n\n        return reply\n\n    def ping(self, **kwargs):\n        worker_id = kwargs['worker']\n        self.update(worker_id)\n\n    def _upstream_status(self, task_id, upstream_status_table):\n        if task_id in upstream_status_table:\n            return upstream_status_table[task_id]\n        elif self._state.has_task(task_id):\n            task_stack = [task_id]\n\n            while task_stack:\n                dep_id = task_stack.pop()\n                if self._state.has_task(dep_id):\n                    dep = self._state.get_task(dep_id)\n                    if dep_id not in upstream_status_table:\n                        if dep.status == PENDING and dep.deps:\n                            task_stack = task_stack + [dep_id] + list(dep.deps)\n                            upstream_status_table[dep_id] = ''  # will be updated postorder\n                        else:\n                            dep_status = STATUS_TO_UPSTREAM_MAP.get(dep.status, '')\n                            upstream_status_table[dep_id] = dep_status\n                    elif upstream_status_table[dep_id] == '' and dep.deps:\n                        # This is the postorder update step when we set the\n                        # status based on the previously calculated child elements\n                        upstream_status = [upstream_status_table.get(task_id, '') for task_id in dep.deps]\n                        upstream_status.append('')  # to handle empty list\n                        status = max(upstream_status, key=UPSTREAM_SEVERITY_KEY)\n                        upstream_status_table[dep_id] = status\n            return upstream_status_table[dep_id]\n\n    def _serialize_task(self, task_id, include_deps=True):\n        task = self._state.get_task(task_id)\n        ret = {\n            'status': task.status,\n            'workers': list(task.workers),\n            'worker_running': task.worker_running,\n            'time_running': getattr(task, \"time_running\", None),\n            'start_time': task.time,\n            'params': task.params,\n            'name': task.family,\n            'priority': task.priority,\n            'resources': task.resources,\n        }\n        if task.status == DISABLED:\n            ret['re_enable_able'] = task.scheduler_disable_time is not None\n        if include_deps:\n            ret['deps'] = list(task.deps)\n        return ret\n\n    def graph(self, **kwargs):\n        self.prune()\n        serialized = {}\n        for task in self._state.get_active_tasks():\n            serialized[task.id] = self._serialize_task(task.id)\n        return serialized\n\n    def _recurse_deps(self, task_id, serialized):\n        if task_id not in serialized:\n            task = self._state.get_task(task_id)\n            if task is None or not task.family:\n                logger.warn('Missing task for id [%s]', task_id)\n\n                # try to infer family and params from task_id\n                try:\n                    family, _, param_str = task_id.rstrip(')').partition('(')\n                    params = dict(param.split('=') for param in param_str.split(', '))\n                except BaseException:\n                    family, params = '', {}\n                serialized[task_id] = {\n                    'deps': [],\n                    'status': UNKNOWN,\n                    'workers': [],\n                    'start_time': UNKNOWN,\n                    'params': params,\n                    'name': family,\n                    'priority': 0,\n                }\n            else:\n                serialized[task_id] = self._serialize_task(task_id)\n                for dep in task.deps:\n                    self._recurse_deps(dep, serialized)\n\n    def dep_graph(self, task_id, **kwargs):\n        self.prune()\n        serialized = {}\n        if self._state.has_task(task_id):\n            self._recurse_deps(task_id, serialized)\n        return serialized\n\n    def task_list(self, status, upstream_status, limit=True, search=None, **kwargs):\n        \"\"\"\n        Query for a subset of tasks by status.\n        \"\"\"\n        self.prune()\n        result = {}\n        upstream_status_table = {}  # used to memoize upstream status\n        if search is None:\n            filter_func = lambda _: True\n        else:\n            terms = search.split()\n            filter_func = lambda t: all(term in t.id for term in terms)\n        for task in filter(filter_func, self._state.get_active_tasks(status)):\n            if (task.status != PENDING or not upstream_status or\n                    upstream_status == self._upstream_status(task.id, upstream_status_table)):\n                serialized = self._serialize_task(task.id, False)\n                result[task.id] = serialized\n        if limit and len(result) > self._config.max_shown_tasks:\n            return {'num_tasks': len(result)}\n        return result\n\n    def worker_list(self, include_running=True, **kwargs):\n        self.prune()\n        workers = [\n            dict(\n                name=worker.id,\n                last_active=worker.last_active,\n                started=getattr(worker, 'started', None),\n                **worker.info\n            ) for worker in self._state.get_active_workers()]\n        workers.sort(key=lambda worker: worker['started'], reverse=True)\n        if include_running:\n            running = collections.defaultdict(dict)\n            num_pending = collections.defaultdict(int)\n            num_uniques = collections.defaultdict(int)\n            for task in self._state.get_pending_tasks():\n                if task.status == RUNNING and task.worker_running:\n                    running[task.worker_running][task.id] = self._serialize_task(task.id, False)\n                elif task.status == PENDING:\n                    for worker in task.workers:\n                        num_pending[worker] += 1\n                    if len(task.workers) == 1:\n                        num_uniques[list(task.workers)[0]] += 1\n            for worker in workers:\n                tasks = running[worker['name']]\n                worker['num_running'] = len(tasks)\n                worker['num_pending'] = num_pending[worker['name']]\n                worker['num_uniques'] = num_uniques[worker['name']]\n                worker['running'] = tasks\n        return workers\n\n    def inverse_dep_graph(self, task_id, **kwargs):\n        self.prune()\n        serialized = {}\n        if self._state.has_task(task_id):\n            self._traverse_inverse_deps(task_id, serialized)\n        return serialized\n\n    def _traverse_inverse_deps(self, task_id, serialized):\n        stack = [task_id]\n        serialized[task_id] = self._serialize_task(task_id)\n        while len(stack) > 0:\n            curr_id = stack.pop()\n            for task in self._state.get_active_tasks():\n                if curr_id in task.deps:\n                    serialized[curr_id][\"deps\"].append(task.id)\n                    if task.id not in serialized:\n                        serialized[task.id] = self._serialize_task(task.id)\n                        serialized[task.id][\"deps\"] = []\n                        stack.append(task.id)\n\n    def task_search(self, task_str, **kwargs):\n        \"\"\"\n        Query for a subset of tasks by task_id.\n\n        :param task_str:\n        :return:\n        \"\"\"\n        self.prune()\n        result = collections.defaultdict(dict)\n        for task in self._state.get_active_tasks():\n            if task.id.find(task_str) != -1:\n                serialized = self._serialize_task(task.id, False)\n                result[task.status][task.id] = serialized\n        return result\n\n    def re_enable_task(self, task_id):\n        serialized = {}\n        task = self._state.get_task(task_id)\n        if task and task.status == DISABLED and task.scheduler_disable_time:\n            self._state.re_enable(task, self._config)\n            serialized = self._serialize_task(task_id)\n        return serialized\n\n    def fetch_error(self, task_id, **kwargs):\n        if self._state.has_task(task_id):\n            return {\"taskId\": task_id, \"error\": self._state.get_task(task_id).expl}\n        else:\n            return {\"taskId\": task_id, \"error\": \"\"}\n\n    def _update_task_history(self, task_id, status, host=None):\n        try:\n            if status == DONE or status == FAILED:\n                successful = (status == DONE)\n                self._task_history.task_finished(task_id, successful)\n            elif status == PENDING:\n                self._task_history.task_scheduled(task_id)\n            elif status == RUNNING:\n                self._task_history.task_started(task_id, host)\n        except BaseException:\n            logger.warning(\"Error saving Task history\", exc_info=True)\n\n    @property\n    def task_history(self):\n        # Used by server.py to expose the calls\n        return self._task_history\n",
      "file_patch": "@@ -245,18 +245,28 @@ class Worker(object):\n         if self.last_active + config.worker_disconnect_delay < time.time():\n             return True\n \n-    def get_pending_tasks(self):\n-        return six.moves.filter(lambda task: task.status in [PENDING, RUNNING],\n-                                self.tasks)\n+    def get_pending_tasks(self, state):\n+        \"\"\"\n+        Get PENDING (and RUNNING) tasks for this worker.\n+\n+        You have to pass in the state for optimization reasons.\n+        \"\"\"\n+        if len(self.tasks) < state.num_pending_tasks():\n+            return six.moves.filter(lambda task: task.status in [PENDING, RUNNING],\n+                                    self.tasks)\n+        else:\n+            return state.get_pending_tasks()\n \n-    def is_trivial_worker(self):\n+    def is_trivial_worker(self, state):\n         \"\"\"\n         If it's not an assistant having only tasks that are without\n-        requirements\n+        requirements.\n+\n+        We have to pass the state parameter for optimization reasons.\n         \"\"\"\n         if self.assistant:\n             return False\n-        return all(not task.resources for task in self.get_pending_tasks())\n+        return all(not task.resources for task in self.get_pending_tasks(state))\n \n     @property\n     def assistant(self):\n@@ -339,6 +349,12 @@ class SimpleTaskState(object):\n         return itertools.chain.from_iterable(six.itervalues(self._status_tasks[status])\n                                              for status in [PENDING, RUNNING])\n \n+    def num_pending_tasks(self):\n+        \"\"\"\n+        Return how many tasks are PENDING + RUNNING. O(1).\n+        \"\"\"\n+        return len(self._status_tasks[PENDING]) + len(self._status_tasks[RUNNING])\n+\n     def get_task(self, task_id, default=None, setdefault=None):\n         if setdefault:\n             task = self._tasks.setdefault(task_id, setdefault)\n@@ -708,8 +724,8 @@ class CentralPlannerScheduler(Scheduler):\n         n_unique_pending = 0\n \n         worker = self._state.get_worker(worker_id)\n-        if worker.is_trivial_worker():\n-            relevant_tasks = worker.get_pending_tasks()\n+        if worker.is_trivial_worker(self._state):\n+            relevant_tasks = worker.get_pending_tasks(self._state)\n             used_resources = collections.defaultdict(int)\n             greedy_workers = dict()  # If there's no resources, then they can grab any task\n         else:\n",
      "files_name_in_blame_commit": [
        "scheduler.py",
        "central_planner_test.py",
        "rpc_test.py"
      ]
    }
  },
  "commits_modify_file_before_fix": {
    "size": 191
  },
  "recursive_blame_commits": {
    "recursive_blame_function_lines": {
      "248": {
        "commit_id": "8d79b9aadd33b0c8a1155c70c99e7162c72a9737",
        "line_code": "    def get_pending_tasks(self):",
        "commit_date": "2015-05-28 17:38:42",
        "valid": 1
      },
      "249": {
        "commit_id": "8d79b9aadd33b0c8a1155c70c99e7162c72a9737",
        "line_code": "        return six.moves.filter(lambda task: task.status in [PENDING, RUNNING],",
        "commit_date": "2015-05-28 17:38:42",
        "valid": 1
      },
      "250": {
        "commit_id": "8d79b9aadd33b0c8a1155c70c99e7162c72a9737",
        "line_code": "                                self.tasks)",
        "commit_date": "2015-05-28 17:38:42",
        "valid": 1
      }
    },
    "commits": {
      "8d79b9aadd33b0c8a1155c70c99e7162c72a9737": {
        "commit": {
          "commit_id": "8d79b9aadd33b0c8a1155c70c99e7162c72a9737",
          "commit_message": "Improve best case complexity for get_work\n\nYes, we only improve the best case complexity, not the worst case.\nIn summary, you'll get sublinear in aomunt of tasks if your worker\ndoesn't do any tasks that use global resources.\n\nget_work has gotten way to complex once we added global resource\nconstraints, as the resource constraints interaction with priorities is\na hairy beast requiring a global perspective, not allowing for\nworker-local optimization. See these related tickets which added the\nexpressiveness/complicated stuff:\n\n  * spotify/luigi#445\n  * spotify/luigi#462\n  * spotify/luigi#496\n  * spotify/luigi#513\n\nNote that the optimization once done in spotify/luigi#584 which helped\n@daveFNbuck's company a lot doesn't help Spotify's setup. Most of\nSpotify's tasks lingering in the scheduler are pending tasks and not\ndone tasks.\n\nThe proposed hacky solution here, which I mostly see as a temporary\nsolution until we do a bigger rewrite and rethink of the central\nscheduler is the following:\n\nCategorize the get_work scenario in two different buckets, \"trivial\" and\n\"nontrivial\". Trivial is when none of the tasks of the worker require\nglobal resources, in that scenario, just loop over the tasks the worker\nhave registered for instead of all the tasks. For the non-trivial case,\nwe do what we've always done previously.\n\nSo in that sense this commit contains two parts:\n\n * Add an \"index\" so you can quickly retrieve the tasks for a worker\n * Do the special-casing of trivial and nontrivial in get_work\n\nAt Spotify, we don't use the resources feature that much, so we're\nhoping for tremendous speed improvements, no more 30-second get-work\ncalls! :)",
          "commit_author": "Arash Rouhani",
          "commit_date": "2015-05-28 17:38:42",
          "commit_parent": "b5ad3eba1501bdc25e91e98901bc781128f2d8a7"
        },
        "function": {
          "function_name": "get_pending_tasks",
          "function_code_before": "def get_pending_tasks(self):\n    return itertools.chain.from_iterable((six.itervalues(self._status_tasks[status]) for status in [PENDING, RUNNING]))",
          "function_code_after": "def get_pending_tasks(self):\n    return six.moves.filter(lambda task: task.status in [PENDING, RUNNING], self.tasks)",
          "function_before_start_line": 316,
          "function_before_end_line": 318,
          "function_after_start_line": 248,
          "function_after_end_line": 250,
          "function_before_token_count": 32,
          "function_after_token_count": 29,
          "functions_name_modified_file": [
            "add_failure",
            "get_worker_ids",
            "prune",
            "_schedulable",
            "clear",
            "has_excessive_failures",
            "_upstream_status",
            "_update_task_history",
            "can_disable",
            "ping",
            "assistant",
            "inverse_dep_graph",
            "get_pending_tasks",
            "_traverse_inverse_deps",
            "load",
            "num_failures",
            "task_search",
            "_recurse_deps",
            "get_worker",
            "get_active_workers",
            "worker_list",
            "add_task",
            "update_resources",
            "get_necessary_tasks",
            "_update_priority",
            "task_list",
            "add_info",
            "get_active_tasks",
            "_has_resources",
            "_used_resources",
            "has_task",
            "fix_time",
            "_serialize_task",
            "task_history",
            "dep_graph",
            "__str__",
            "graph",
            "_get_default",
            "dump",
            "__repr__",
            "re_enable",
            "inactivate_tasks",
            "__init__",
            "update",
            "set_status",
            "add_worker",
            "get_task",
            "get_assistants",
            "get_running_tasks",
            "_rank",
            "get_work",
            "re_enable_task",
            "fetch_error",
            "inactivate_workers",
            "is_trivial_worker"
          ],
          "functions_name_all_files": [
            "add_failure",
            "test_disable",
            "test_scheduler_with_resources",
            "test_load_recovers_tasks_index",
            "test_prune_done_tasks",
            "can_disable",
            "test_task_list_filter_by_search",
            "test_can_work_on_lower_priority_while_waiting_for_resources",
            "load",
            "test_priorities_and_dependencies",
            "test_timeout",
            "test_scheduler_overprovisioned_on_other_resource",
            "add_task",
            "get_necessary_tasks",
            "add_info",
            "_has_resources",
            "_serialize_task",
            "fix_time",
            "check_task_order",
            "test_assistant_get_work_external_task",
            "test_task_list_no_deps",
            "test_prefer_readier_dependents",
            "test_no_lock_if_too_many_resources_required",
            "test_hendle_multiple_resources",
            "setUp",
            "__init__",
            "test_assistant_get_work",
            "test_task_list_filter_by_multiple_search_terms",
            "test_priority_update_with_pruning",
            "test_scheduler_with_priority_and_competing_resources",
            "test_prefer_more_dependents",
            "test_keep_tasks_for_assistant",
            "test_disconnect_running",
            "test_task_lists_some_beyond_limit",
            "inactivate_workers",
            "is_trivial_worker",
            "test_priority_update_dependency_after_scheduling",
            "prune",
            "tearDown",
            "clear",
            "_upstream_status",
            "test_two_workers",
            "test_lock_resources_for_second_worker",
            "ping",
            "test_retry",
            "inverse_dep_graph",
            "test_dep",
            "_traverse_inverse_deps",
            "test_search_results_beyond_limit",
            "test_quadratic_behavior",
            "test_task_first_failure_time",
            "_recurse_deps",
            "test_raw_ping_extended",
            "test_load_old_state",
            "test_two_worker_info",
            "update_resources",
            "_update_priority",
            "test_task_fails_when_assistant_dies",
            "test_disallowed_state_changes",
            "test_single_resource_lock",
            "test_multiple_resources_lock",
            "test_ping",
            "test_scheduler_resources_none_allow_one",
            "test_lock_resources_while_running_lower_priority",
            "__str__",
            "test_disable_and_done",
            "add_worker",
            "test_broken_dep",
            "test_keep_scheduler_disabled_tasks_for_assistant",
            "test_priorities_default_and_negative",
            "test_scheduler_with_insufficient_resources",
            "test_update_resources",
            "test_ignore_done_dependents",
            "_schedulable",
            "has_excessive_failures",
            "assistant",
            "test_unique_tasks",
            "test_scheduler_with_resources_used",
            "test_priority_no_decrease_with_multiple_updates",
            "worker_list",
            "get_active_tasks",
            "test_pending_downstream_failure",
            "test_disable_and_reenable",
            "test_disable_and_reenable_and_disable_again",
            "task_history",
            "test_disable_by_worker",
            "test_pending_downstream_disable",
            "test_multiple_resources_no_lock",
            "test_load_broken_state",
            "graph",
            "re_enable",
            "dump",
            "__repr__",
            "inactivate_tasks",
            "test_task_has_excessive_failures",
            "test_failed_dep",
            "get_task",
            "get_assistants",
            "_rank",
            "get_app",
            "test_prune_with_live_assistant",
            "test_do_not_lock_resources_while_running_higher_priority",
            "get_worker_ids",
            "_update_task_history",
            "test_remove_dep",
            "test_priority_update_dependency_chain",
            "get_pending_tasks",
            "num_failures",
            "task_search",
            "get_worker",
            "get_active_workers",
            "test_task_list_within_limit",
            "task_list",
            "_used_resources",
            "has_task",
            "test_do_not_lock_resources_when_not_ready",
            "test_task_first_failure_time_remains_constant",
            "test_raw_ping",
            "dep_graph",
            "test_scheduler_with_config",
            "test_scheduler_with_sufficient_resources",
            "get_scheduler_config",
            "test_keep_failed_tasks_for_assistant",
            "test_task_list_beyond_limit",
            "_get_default",
            "update",
            "test_scheduler_resources_none_disallow_two",
            "set_status",
            "test_lock_resources_when_one_of_multiple_workers_is_ready",
            "test_priorities",
            "get_running_tasks",
            "setTime",
            "get_work",
            "re_enable_task",
            "fetch_error"
          ],
          "functions_name_co_evolved_modified_file": [
            "__init__",
            "add_task",
            "_rank",
            "get_work",
            "load",
            "is_trivial_worker"
          ],
          "functions_name_co_evolved_all_files": [
            "__init__",
            "test_load_recovers_tasks_index",
            "add_task",
            "_rank",
            "get_work",
            "load",
            "test_quadratic_behavior",
            "is_trivial_worker"
          ]
        },
        "file": {
          "file_name": "scheduler.py",
          "file_nloc": 709,
          "file_complexity": 265,
          "file_token_count": 5427,
          "file_before": "# -*- coding: utf-8 -*-\n#\n# Copyright 2012-2015 Spotify AB\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\"\"\"\nThe system for scheduling tasks and executing them in order.\nDeals with dependencies, priorities, resources, etc.\nThe :py:class:`~luigi.worker.Worker` pulls tasks from the scheduler (usually over the REST interface) and executes them.\nSee :doc:`/central_scheduler` for more info.\n\"\"\"\n\nimport collections\ntry:\n    import cPickle as pickle\nexcept ImportError:\n    import pickle\nimport datetime\nimport functools\nimport itertools\nimport logging\nimport os\nimport time\n\nfrom luigi import six\n\nfrom luigi import configuration\nfrom luigi import notifications\nfrom luigi import parameter\nfrom luigi import task_history as history\nfrom luigi.task_status import DISABLED, DONE, FAILED, PENDING, RUNNING, SUSPENDED, UNKNOWN\nfrom luigi.task import Config\n\nlogger = logging.getLogger(\"luigi.server\")\n\n\nclass Scheduler(object):\n    \"\"\"\n    Abstract base class.\n\n    Note that the methods all take string arguments, not Task objects...\n    \"\"\"\"\"\n    add_task = NotImplemented\n    get_work = NotImplemented\n    ping = NotImplemented\n\nUPSTREAM_RUNNING = 'UPSTREAM_RUNNING'\nUPSTREAM_MISSING_INPUT = 'UPSTREAM_MISSING_INPUT'\nUPSTREAM_FAILED = 'UPSTREAM_FAILED'\nUPSTREAM_DISABLED = 'UPSTREAM_DISABLED'\n\nUPSTREAM_SEVERITY_ORDER = (\n    '',\n    UPSTREAM_RUNNING,\n    UPSTREAM_MISSING_INPUT,\n    UPSTREAM_FAILED,\n    UPSTREAM_DISABLED,\n)\nUPSTREAM_SEVERITY_KEY = UPSTREAM_SEVERITY_ORDER.index\nSTATUS_TO_UPSTREAM_MAP = {\n    FAILED: UPSTREAM_FAILED,\n    RUNNING: UPSTREAM_RUNNING,\n    PENDING: UPSTREAM_MISSING_INPUT,\n    DISABLED: UPSTREAM_DISABLED,\n}\n\n\nclass scheduler(Config):\n    # TODO(erikbern): the config_path is needed for backwards compatilibity. We should drop the compatibility\n    # at some point (in particular this would force users to replace all dashes with underscores in the config)\n    retry_delay = parameter.FloatParameter(default=900.0)\n    remove_delay = parameter.FloatParameter(default=600.0)\n    worker_disconnect_delay = parameter.FloatParameter(default=60.0)\n    state_path = parameter.Parameter(default='/var/lib/luigi-server/state.pickle')\n\n    # Jobs are disabled if we see more than disable_failures failures in disable_window seconds.\n    # These disables last for disable_persist seconds.\n    disable_window = parameter.IntParameter(default=3600,\n                                            config_path=dict(section='scheduler', name='disable-window-seconds'))\n    disable_failures = parameter.IntParameter(default=None,\n                                              config_path=dict(section='scheduler', name='disable-num-failures'))\n    disable_hard_timeout = parameter.IntParameter(default=None,\n                                                  config_path=dict(section='scheduler', name='disable-hard-timeout'))\n    disable_persist = parameter.IntParameter(default=86400,\n                                             config_path=dict(section='scheduler', name='disable-persist-seconds'))\n    max_shown_tasks = parameter.IntParameter(default=100000)\n    prune_done_tasks = parameter.BoolParameter(default=False)\n\n    record_task_history = parameter.BoolParameter(default=False)\n\n    visualization_graph = parameter.Parameter(default=\"svg\", config_path=dict(section='scheduler', name='visualization-graph'))\n\n\ndef fix_time(x):\n    # Backwards compatibility for a fix in Dec 2014. Prior to the fix, pickled state might store datetime objects\n    # Let's remove this function soon\n    if isinstance(x, datetime.datetime):\n        return time.mktime(x.timetuple())\n    else:\n        return x\n\n\nclass Failures(object):\n    \"\"\"\n    This class tracks the number of failures in a given time window.\n\n    Failures added are marked with the current timestamp, and this class counts\n    the number of failures in a sliding time window ending at the present.\n    \"\"\"\n\n    def __init__(self, window):\n        \"\"\"\n        Initialize with the given window.\n\n        :param window: how long to track failures for, as a float (number of seconds).\n        \"\"\"\n        self.window = window\n        self.failures = collections.deque()\n        self.first_failure_time = None\n\n    def add_failure(self):\n        \"\"\"\n        Add a failure event with the current timestamp.\n        \"\"\"\n        failure_time = time.time()\n\n        if not self.first_failure_time:\n            self.first_failure_time = failure_time\n\n        self.failures.append(failure_time)\n\n    def num_failures(self):\n        \"\"\"\n        Return the number of failures in the window.\n        \"\"\"\n        min_time = time.time() - self.window\n\n        while self.failures and fix_time(self.failures[0]) < min_time:\n            self.failures.popleft()\n\n        return len(self.failures)\n\n    def clear(self):\n        \"\"\"\n        Clear the failure queue.\n        \"\"\"\n        self.failures.clear()\n\n\ndef _get_default(x, default):\n    if x is not None:\n        return x\n    else:\n        return default\n\n\nclass Task(object):\n\n    def __init__(self, task_id, status, deps, resources=None, priority=0, family='', module=None,\n                 params=None, disable_failures=None, disable_window=None, disable_hard_timeout=None):\n        self.id = task_id\n        self.stakeholders = set()  # workers ids that are somehow related to this task (i.e. don't prune while any of these workers are still active)\n        self.workers = set()  # workers ids that can perform task - task is 'BROKEN' if none of these workers are active\n        if deps is None:\n            self.deps = set()\n        else:\n            self.deps = set(deps)\n        self.status = status  # PENDING, RUNNING, FAILED or DONE\n        self.time = time.time()  # Timestamp when task was first added\n        self.retry = None\n        self.remove = None\n        self.worker_running = None  # the worker id that is currently running the task or None\n        self.time_running = None  # Timestamp when picked up by worker\n        self.expl = None\n        self.priority = priority\n        self.resources = _get_default(resources, {})\n        self.family = family\n        self.module = module\n        self.params = _get_default(params, {})\n        self.disable_failures = disable_failures\n        self.disable_hard_timeout = disable_hard_timeout\n        self.failures = Failures(disable_window)\n        self.scheduler_disable_time = None\n\n    def __repr__(self):\n        return \"Task(%r)\" % vars(self)\n\n    def add_failure(self):\n        self.failures.add_failure()\n\n    def has_excessive_failures(self):\n\n        excessive_failures = False\n\n        if (self.failures.first_failure_time is not None and\n                self.disable_hard_timeout):\n            if (time.time() >= self.failures.first_failure_time +\n                    self.disable_hard_timeout):\n                excessive_failures = True\n\n        if self.failures.num_failures() >= self.disable_failures:\n            excessive_failures = True\n\n        return excessive_failures\n\n    def can_disable(self):\n        return (self.disable_failures is not None or\n                self.disable_hard_timeout is not None)\n\n\nclass Worker(object):\n    \"\"\"\n    Structure for tracking worker activity and keeping their references.\n    \"\"\"\n\n    def __init__(self, worker_id, last_active=None):\n        self.id = worker_id\n        self.reference = None  # reference to the worker in the real world. (Currently a dict containing just the host)\n        self.last_active = last_active  # seconds since epoch\n        self.started = time.time()  # seconds since epoch\n        self.info = {}\n\n    def add_info(self, info):\n        self.info.update(info)\n\n    def update(self, worker_reference):\n        if worker_reference:\n            self.reference = worker_reference\n        self.last_active = time.time()\n\n    def prune(self, config):\n        # Delete workers that haven't said anything for a while (probably killed)\n        if self.last_active + config.worker_disconnect_delay < time.time():\n            return True\n\n    @property\n    def assistant(self):\n        return self.info.get('assistant', False)\n\n    def __str__(self):\n        return self.id\n\n\nclass SimpleTaskState(object):\n    \"\"\"\n    Keep track of the current state and handle persistance.\n\n    The point of this class is to enable other ways to keep state, eg. by using a database\n    These will be implemented by creating an abstract base class that this and other classes\n    inherit from.\n    \"\"\"\n\n    def __init__(self, state_path):\n        self._state_path = state_path\n        self._tasks = {}  # map from id to a Task object\n        self._status_tasks = collections.defaultdict(dict)\n        self._active_workers = {}  # map from id to a Worker object\n\n    def dump(self):\n        state = (self._tasks, self._active_workers)\n        try:\n            with open(self._state_path, 'wb') as fobj:\n                pickle.dump(state, fobj)\n        except IOError:\n            logger.warning(\"Failed saving scheduler state\", exc_info=1)\n        else:\n            logger.info(\"Saved state in %s\", self._state_path)\n\n    # prone to lead to crashes when old state is unpickled with updated code. TODO some kind of version control?\n    def load(self):\n        if os.path.exists(self._state_path):\n            logger.info(\"Attempting to load state from %s\", self._state_path)\n            try:\n                with open(self._state_path, 'rb') as fobj:\n                    state = pickle.load(fobj)\n            except BaseException:\n                logger.exception(\"Error when loading state. Starting from clean slate.\")\n                return\n\n            self._tasks, self._active_workers = state\n            self._status_tasks = collections.defaultdict(dict)\n            for task in six.itervalues(self._tasks):\n                self._status_tasks[task.status][task.id] = task\n\n            # Convert from old format\n            # TODO: this is really ugly, we need something more future-proof\n            # Every time we add an attribute to the Worker class, this code needs to be updated\n            for k, v in six.iteritems(self._active_workers):\n                if isinstance(v, float):\n                    self._active_workers[k] = Worker(worker_id=k, last_active=v)\n        else:\n            logger.info(\"No prior state file exists at %s. Starting with clean slate\", self._state_path)\n\n    def get_active_tasks(self, status=None):\n        if status:\n            for task in six.itervalues(self._status_tasks[status]):\n                yield task\n        else:\n            for task in six.itervalues(self._tasks):\n                yield task\n\n    def get_running_tasks(self):\n        return six.itervalues(self._status_tasks[RUNNING])\n\n    def get_pending_tasks(self):\n        return itertools.chain.from_iterable(six.itervalues(self._status_tasks[status])\n                                             for status in [PENDING, RUNNING])\n\n    def get_task(self, task_id, default=None, setdefault=None):\n        if setdefault:\n            task = self._tasks.setdefault(task_id, setdefault)\n            self._status_tasks[task.status][task.id] = task\n            return task\n        else:\n            return self._tasks.get(task_id, default)\n\n    def has_task(self, task_id):\n        return task_id in self._tasks\n\n    def re_enable(self, task, config=None):\n        task.scheduler_disable_time = None\n        task.failures.clear()\n        if config:\n            self.set_status(task, FAILED, config)\n            task.failures.clear()\n\n    def set_status(self, task, new_status, config=None):\n        if new_status == FAILED:\n            assert config is not None\n\n        # not sure why we have SUSPENDED, as it can never be set\n        if new_status == SUSPENDED:\n            new_status = PENDING\n\n        if new_status == DISABLED and task.status == RUNNING:\n            return\n\n        if task.status == DISABLED:\n            if new_status == DONE:\n                self.re_enable(task)\n\n            # don't allow workers to override a scheduler disable\n            elif task.scheduler_disable_time is not None:\n                return\n\n        if new_status == FAILED and task.can_disable():\n            task.add_failure()\n            if task.has_excessive_failures():\n                task.scheduler_disable_time = time.time()\n                new_status = DISABLED\n                notifications.send_error_email(\n                    'Luigi Scheduler: DISABLED {task} due to excessive failures'.format(task=task.id),\n                    '{task} failed {failures} times in the last {window} seconds, so it is being '\n                    'disabled for {persist} seconds'.format(\n                        failures=config.disable_failures,\n                        task=task.id,\n                        window=config.disable_window,\n                        persist=config.disable_persist,\n                    ))\n        elif new_status == DISABLED:\n            task.scheduler_disable_time = None\n\n        self._status_tasks[task.status].pop(task.id)\n        self._status_tasks[new_status][task.id] = task\n        task.status = new_status\n\n    def prune(self, task, config, assistants):\n        remove = False\n\n        # Mark tasks with no remaining active stakeholders for deletion\n        if not task.stakeholders:\n            if task.remove is None:\n                logger.info(\"Task %r has stakeholders %r but none remain connected -> will remove \"\n                            \"task in %s seconds\", task.id, task.stakeholders, config.remove_delay)\n                task.remove = time.time() + config.remove_delay\n\n        # If a running worker disconnects, tag all its jobs as FAILED and subject it to the same retry logic\n        if task.status == RUNNING and task.worker_running and task.worker_running not in task.stakeholders | assistants:\n            logger.info(\"Task %r is marked as running by disconnected worker %r -> marking as \"\n                        \"FAILED with retry delay of %rs\", task.id, task.worker_running,\n                        config.retry_delay)\n            task.worker_running = None\n            self.set_status(task, FAILED, config)\n            task.retry = time.time() + config.retry_delay\n\n        # Re-enable task after the disable time expires\n        if task.status == DISABLED and task.scheduler_disable_time:\n            if time.time() - fix_time(task.scheduler_disable_time) > config.disable_persist:\n                self.re_enable(task, config)\n\n        # Remove tasks that have no stakeholders\n        if task.remove and time.time() > task.remove:\n            logger.info(\"Removing task %r (no connected stakeholders)\", task.id)\n            remove = True\n\n        # Reset FAILED tasks to PENDING if max timeout is reached, and retry delay is >= 0\n        if task.status == FAILED and config.retry_delay >= 0 and task.retry < time.time():\n            self.set_status(task, PENDING, config)\n\n        return remove\n\n    def inactivate_tasks(self, delete_tasks):\n        # The terminology is a bit confusing: we used to \"delete\" tasks when they became inactive,\n        # but with a pluggable state storage, you might very well want to keep some history of\n        # older tasks as well. That's why we call it \"inactivate\" (as in the verb)\n        for task in delete_tasks:\n            task_obj = self._tasks.pop(task)\n            self._status_tasks[task_obj.status].pop(task)\n\n    def get_active_workers(self, last_active_lt=None):\n        for worker in six.itervalues(self._active_workers):\n            if last_active_lt is not None and worker.last_active >= last_active_lt:\n                continue\n            yield worker\n\n    def get_assistants(self, last_active_lt=None):\n        return filter(lambda w: w.assistant, self.get_active_workers(last_active_lt))\n\n    def get_worker_ids(self):\n        return self._active_workers.keys()  # only used for unit tests\n\n    def get_worker(self, worker_id):\n        return self._active_workers.setdefault(worker_id, Worker(worker_id))\n\n    def inactivate_workers(self, delete_workers):\n        # Mark workers as inactive\n        for worker in delete_workers:\n            self._active_workers.pop(worker)\n\n        # remove workers from tasks\n        for task in self.get_active_tasks():\n            task.stakeholders.difference_update(delete_workers)\n            task.workers.difference_update(delete_workers)\n\n    def get_necessary_tasks(self):\n        necessary_tasks = set()\n        for task in self.get_active_tasks():\n            if task.status not in (DONE, DISABLED) or \\\n                    getattr(task, 'scheduler_disable_time', None) is not None:\n                necessary_tasks.update(task.deps)\n                necessary_tasks.add(task.id)\n        return necessary_tasks\n\n\nclass CentralPlannerScheduler(Scheduler):\n    \"\"\"\n    Async scheduler that can handle multiple workers, etc.\n\n    Can be run locally or on a server (using RemoteScheduler + server.Server).\n    \"\"\"\n\n    def __init__(self, config=None, resources=None, task_history_impl=None, **kwargs):\n        \"\"\"\n        Keyword Arguments:\n        :param config: an object of class \"scheduler\" or None (in which the global instance will be used)\n        :param resources: a dict of str->int constraints\n        :param task_history_override: ignore config and use this object as the task history\n        \"\"\"\n        self._config = config or scheduler(**kwargs)\n        self._state = SimpleTaskState(self._config.state_path)\n\n        if task_history_impl:\n            self._task_history = task_history_impl\n        elif self._config.record_task_history:\n            from luigi import db_task_history  # Needs sqlalchemy, thus imported here\n            self._task_history = db_task_history.DbTaskHistory()\n        else:\n            self._task_history = history.NopHistory()\n        self._resources = resources or configuration.get_config().getintdict('resources')  # TODO: Can we make this a Parameter?\n        self._make_task = functools.partial(\n            Task, disable_failures=self._config.disable_failures,\n            disable_hard_timeout=self._config.disable_hard_timeout,\n            disable_window=self._config.disable_window)\n\n    def load(self):\n        self._state.load()\n\n    def dump(self):\n        self._state.dump()\n\n    def prune(self):\n        logger.info(\"Starting pruning of task graph\")\n        remove_workers = []\n        for worker in self._state.get_active_workers():\n            if worker.prune(self._config):\n                logger.info(\"Worker %s timed out (no contact for >=%ss)\", worker, self._config.worker_disconnect_delay)\n                remove_workers.append(worker.id)\n\n        self._state.inactivate_workers(remove_workers)\n\n        assistant_ids = set(w.id for w in self._state.get_assistants())\n        remove_tasks = []\n\n        if assistant_ids:\n            necessary_tasks = self._state.get_necessary_tasks()\n        else:\n            necessary_tasks = ()\n\n        for task in self._state.get_active_tasks():\n            if task.id not in necessary_tasks and self._state.prune(task, self._config, assistant_ids):\n                remove_tasks.append(task.id)\n\n        self._state.inactivate_tasks(remove_tasks)\n\n        logger.info(\"Done pruning task graph\")\n\n    def update(self, worker_id, worker_reference=None):\n        \"\"\"\n        Keep track of whenever the worker was last active.\n        \"\"\"\n        worker = self._state.get_worker(worker_id)\n        worker.update(worker_reference)\n\n    def _update_priority(self, task, prio, worker):\n        \"\"\"\n        Update priority of the given task.\n\n        Priority can only be increased.\n        If the task doesn't exist, a placeholder task is created to preserve priority when the task is later scheduled.\n        \"\"\"\n        task.priority = prio = max(prio, task.priority)\n        for dep in task.deps or []:\n            t = self._state.get_task(dep)\n            if t is not None and prio > t.priority:\n                self._update_priority(t, prio, worker)\n\n    def add_task(self, task_id=None, status=PENDING, runnable=True,\n                 deps=None, new_deps=None, expl=None, resources=None,\n                 priority=0, family='', module=None, params=None,\n                 assistant=False, **kwargs):\n        \"\"\"\n        * add task identified by task_id if it doesn't exist\n        * if deps is not None, update dependency list\n        * update status of task\n        * add additional workers/stakeholders\n        * update priority when needed\n        \"\"\"\n        worker_id = kwargs['worker']\n        self.update(worker_id)\n\n        task = self._state.get_task(task_id, setdefault=self._make_task(\n            task_id=task_id, status=PENDING, deps=deps, resources=resources,\n            priority=priority, family=family, module=module, params=params))\n\n        # for setting priority, we'll sometimes create tasks with unset family and params\n        if not task.family:\n            task.family = family\n        if not getattr(task, 'module', None):\n            task.module = module\n        if not task.params:\n            task.params = _get_default(params, {})\n\n        if task.remove is not None:\n            task.remove = None  # unmark task for removal so it isn't removed after being added\n\n        if not (task.status == RUNNING and status == PENDING):\n            # don't allow re-scheduling of task while it is running, it must either fail or succeed first\n            if status == PENDING or status != task.status:\n                # Update the DB only if there was a acctual change, to prevent noise.\n                # We also check for status == PENDING b/c that's the default value\n                # (so checking for status != task.status woule lie)\n                self._update_task_history(task_id, status)\n            self._state.set_status(task, PENDING if status == SUSPENDED else status, self._config)\n            if status == FAILED:\n                task.retry = time.time() + self._config.retry_delay\n\n        if deps is not None:\n            task.deps = set(deps)\n\n        if new_deps is not None:\n            task.deps.update(new_deps)\n\n        if resources is not None:\n            task.resources = resources\n\n        if not assistant:\n            task.stakeholders.add(worker_id)\n\n            # Task dependencies might not exist yet. Let's create dummy tasks for them for now.\n            # Otherwise the task dependencies might end up being pruned if scheduling takes a long time\n            for dep in task.deps or []:\n                t = self._state.get_task(dep, setdefault=self._make_task(task_id=dep, status=UNKNOWN, deps=None, priority=priority))\n                t.stakeholders.add(worker_id)\n\n        self._update_priority(task, priority, worker_id)\n\n        if runnable:\n            task.workers.add(worker_id)\n\n        if expl is not None:\n            task.expl = expl\n\n    def add_worker(self, worker, info, **kwargs):\n        self._state.get_worker(worker).add_info(info)\n\n    def update_resources(self, **resources):\n        if self._resources is None:\n            self._resources = {}\n        self._resources.update(resources)\n\n    def _has_resources(self, needed_resources, used_resources):\n        if needed_resources is None:\n            return True\n\n        available_resources = self._resources or {}\n        for resource, amount in six.iteritems(needed_resources):\n            if amount + used_resources[resource] > available_resources.get(resource, 1):\n                return False\n        return True\n\n    def _used_resources(self):\n        used_resources = collections.defaultdict(int)\n        if self._resources is not None:\n            for task in self._state.get_active_tasks():\n                if task.status == RUNNING and task.resources:\n                    for resource, amount in six.iteritems(task.resources):\n                        used_resources[resource] += amount\n        return used_resources\n\n    def _rank(self):\n        \"\"\"\n        Return worker's rank function for task scheduling.\n\n        :return:\n        \"\"\"\n        dependents = collections.defaultdict(int)\n\n        def not_done(t):\n            task = self._state.get_task(t, default=None)\n            return task is None or task.status != DONE\n        for task in self._state.get_pending_tasks():\n            if task.status != DONE:\n                deps = list(filter(not_done, task.deps))\n                inverse_num_deps = 1.0 / max(len(deps), 1)\n                for dep in deps:\n                    dependents[dep] += inverse_num_deps\n\n        return lambda task: (task.priority, dependents[task.id], -task.time)\n\n    def _schedulable(self, task):\n        if task.status != PENDING:\n            return False\n        for dep in task.deps:\n            dep_task = self._state.get_task(dep, default=None)\n            if dep_task is None or dep_task.status != DONE:\n                return False\n        return True\n\n    def get_work(self, host=None, assistant=False, **kwargs):\n        # TODO: remove any expired nodes\n\n        # Algo: iterate over all nodes, find the highest priority node no dependencies and available\n        # resources.\n\n        # Resource checking looks both at currently available resources and at which resources would\n        # be available if all running tasks died and we rescheduled all workers greedily. We do both\n        # checks in order to prevent a worker with many low-priority tasks from starving other\n        # workers with higher priority tasks that share the same resources.\n\n        # TODO: remove tasks that can't be done, figure out if the worker has absolutely\n        # nothing it can wait for\n\n        worker_id = kwargs['worker']\n        # Return remaining tasks that have no FAILED descendents\n        self.update(worker_id, {'host': host})\n        if assistant:\n            self.add_worker(worker_id, [('assistant', assistant)])\n        best_task = None\n        locally_pending_tasks = 0\n        running_tasks = []\n        upstream_table = {}\n\n        used_resources = self._used_resources()\n        greedy_resources = collections.defaultdict(int)\n        n_unique_pending = 0\n        greedy_workers = dict((worker.id, worker.info.get('workers', 1))\n                              for worker in self._state.get_active_workers())\n\n        tasks = list(self._state.get_pending_tasks())\n        tasks.sort(key=self._rank(), reverse=True)\n\n        for task in tasks:\n            upstream_status = self._upstream_status(task.id, upstream_table)\n            in_workers = (assistant and task.workers) or worker_id in task.workers\n            if task.status == RUNNING and in_workers:\n                # Return a list of currently running tasks to the client,\n                # makes it easier to troubleshoot\n                other_worker = self._state.get_worker(task.worker_running)\n                more_info = {'task_id': task.id, 'worker': str(other_worker)}\n                if other_worker is not None:\n                    more_info.update(other_worker.info)\n                    running_tasks.append(more_info)\n\n            if task.status == PENDING and in_workers and upstream_status != UPSTREAM_DISABLED:\n                locally_pending_tasks += 1\n                if len(task.workers) == 1 and not assistant:\n                    n_unique_pending += 1\n\n            if task.status == RUNNING and (task.worker_running in greedy_workers):\n                greedy_workers[task.worker_running] -= 1\n                for resource, amount in six.iteritems((task.resources or {})):\n                    greedy_resources[resource] += amount\n\n            if not best_task and self._schedulable(task) and self._has_resources(task.resources, greedy_resources):\n                if in_workers and self._has_resources(task.resources, used_resources):\n                    best_task = task\n                else:\n                    workers = itertools.chain(task.workers, [worker_id]) if assistant else task.workers\n                    for task_worker in workers:\n                        if greedy_workers.get(task_worker, 0) > 0:\n                            # use up a worker\n                            greedy_workers[task_worker] -= 1\n\n                            # keep track of the resources used in greedy scheduling\n                            for resource, amount in six.iteritems((task.resources or {})):\n                                greedy_resources[resource] += amount\n\n                            break\n\n        reply = {'n_pending_tasks': locally_pending_tasks,\n                 'running_tasks': running_tasks,\n                 'task_id': None,\n                 'n_unique_pending': n_unique_pending}\n\n        if best_task:\n            self._state.set_status(best_task, RUNNING, self._config)\n            best_task.worker_running = worker_id\n            best_task.time_running = time.time()\n            self._update_task_history(best_task.id, RUNNING, host=host)\n\n            reply['task_id'] = best_task.id\n            reply['task_family'] = best_task.family\n            reply['task_module'] = getattr(best_task, 'module', None)\n            reply['task_params'] = best_task.params\n\n        return reply\n\n    def ping(self, **kwargs):\n        worker_id = kwargs['worker']\n        self.update(worker_id)\n\n    def _upstream_status(self, task_id, upstream_status_table):\n        if task_id in upstream_status_table:\n            return upstream_status_table[task_id]\n        elif self._state.has_task(task_id):\n            task_stack = [task_id]\n\n            while task_stack:\n                dep_id = task_stack.pop()\n                if self._state.has_task(dep_id):\n                    dep = self._state.get_task(dep_id)\n                    if dep_id not in upstream_status_table:\n                        if dep.status == PENDING and dep.deps:\n                            task_stack = task_stack + [dep_id] + list(dep.deps)\n                            upstream_status_table[dep_id] = ''  # will be updated postorder\n                        else:\n                            dep_status = STATUS_TO_UPSTREAM_MAP.get(dep.status, '')\n                            upstream_status_table[dep_id] = dep_status\n                    elif upstream_status_table[dep_id] == '' and dep.deps:\n                        # This is the postorder update step when we set the\n                        # status based on the previously calculated child elements\n                        upstream_status = [upstream_status_table.get(task_id, '') for task_id in dep.deps]\n                        upstream_status.append('')  # to handle empty list\n                        status = max(upstream_status, key=UPSTREAM_SEVERITY_KEY)\n                        upstream_status_table[dep_id] = status\n            return upstream_status_table[dep_id]\n\n    def _serialize_task(self, task_id, include_deps=True):\n        task = self._state.get_task(task_id)\n        ret = {\n            'status': task.status,\n            'workers': list(task.workers),\n            'worker_running': task.worker_running,\n            'time_running': getattr(task, \"time_running\", None),\n            'start_time': task.time,\n            'params': task.params,\n            'name': task.family,\n            'priority': task.priority,\n            'resources': task.resources,\n        }\n        if task.status == DISABLED:\n            ret['re_enable_able'] = task.scheduler_disable_time is not None\n        if include_deps:\n            ret['deps'] = list(task.deps)\n        return ret\n\n    def graph(self, **kwargs):\n        self.prune()\n        serialized = {}\n        for task in self._state.get_active_tasks():\n            serialized[task.id] = self._serialize_task(task.id)\n        return serialized\n\n    def _recurse_deps(self, task_id, serialized):\n        if task_id not in serialized:\n            task = self._state.get_task(task_id)\n            if task is None or not task.family:\n                logger.warn('Missing task for id [%s]', task_id)\n\n                # try to infer family and params from task_id\n                try:\n                    family, _, param_str = task_id.rstrip(')').partition('(')\n                    params = dict(param.split('=') for param in param_str.split(', '))\n                except BaseException:\n                    family, params = '', {}\n                serialized[task_id] = {\n                    'deps': [],\n                    'status': UNKNOWN,\n                    'workers': [],\n                    'start_time': UNKNOWN,\n                    'params': params,\n                    'name': family,\n                    'priority': 0,\n                }\n            else:\n                serialized[task_id] = self._serialize_task(task_id)\n                for dep in task.deps:\n                    self._recurse_deps(dep, serialized)\n\n    def dep_graph(self, task_id, **kwargs):\n        self.prune()\n        serialized = {}\n        if self._state.has_task(task_id):\n            self._recurse_deps(task_id, serialized)\n        return serialized\n\n    def task_list(self, status, upstream_status, limit=True, search=None, **kwargs):\n        \"\"\"\n        Query for a subset of tasks by status.\n        \"\"\"\n        self.prune()\n        result = {}\n        upstream_status_table = {}  # used to memoize upstream status\n        if search is None:\n            filter_func = lambda _: True\n        else:\n            terms = search.split()\n            filter_func = lambda t: all(term in t.id for term in terms)\n        for task in filter(filter_func, self._state.get_active_tasks(status)):\n            if (task.status != PENDING or not upstream_status or\n                    upstream_status == self._upstream_status(task.id, upstream_status_table)):\n                serialized = self._serialize_task(task.id, False)\n                result[task.id] = serialized\n        if limit and len(result) > self._config.max_shown_tasks:\n            return {'num_tasks': len(result)}\n        return result\n\n    def worker_list(self, include_running=True, **kwargs):\n        self.prune()\n        workers = [\n            dict(\n                name=worker.id,\n                last_active=worker.last_active,\n                started=getattr(worker, 'started', None),\n                **worker.info\n            ) for worker in self._state.get_active_workers()]\n        workers.sort(key=lambda worker: worker['started'], reverse=True)\n        if include_running:\n            running = collections.defaultdict(dict)\n            num_pending = collections.defaultdict(int)\n            num_uniques = collections.defaultdict(int)\n            for task in self._state.get_pending_tasks():\n                if task.status == RUNNING and task.worker_running:\n                    running[task.worker_running][task.id] = self._serialize_task(task.id, False)\n                elif task.status == PENDING:\n                    for worker in task.workers:\n                        num_pending[worker] += 1\n                    if len(task.workers) == 1:\n                        num_uniques[list(task.workers)[0]] += 1\n            for worker in workers:\n                tasks = running[worker['name']]\n                worker['num_running'] = len(tasks)\n                worker['num_pending'] = num_pending[worker['name']]\n                worker['num_uniques'] = num_uniques[worker['name']]\n                worker['running'] = tasks\n        return workers\n\n    def inverse_dep_graph(self, task_id, **kwargs):\n        self.prune()\n        serialized = {}\n        if self._state.has_task(task_id):\n            self._traverse_inverse_deps(task_id, serialized)\n        return serialized\n\n    def _traverse_inverse_deps(self, task_id, serialized):\n        stack = [task_id]\n        serialized[task_id] = self._serialize_task(task_id)\n        while len(stack) > 0:\n            curr_id = stack.pop()\n            for task in self._state.get_active_tasks():\n                if curr_id in task.deps:\n                    serialized[curr_id][\"deps\"].append(task.id)\n                    if task.id not in serialized:\n                        serialized[task.id] = self._serialize_task(task.id)\n                        serialized[task.id][\"deps\"] = []\n                        stack.append(task.id)\n\n    def task_search(self, task_str, **kwargs):\n        \"\"\"\n        Query for a subset of tasks by task_id.\n\n        :param task_str:\n        :return:\n        \"\"\"\n        self.prune()\n        result = collections.defaultdict(dict)\n        for task in self._state.get_active_tasks():\n            if task.id.find(task_str) != -1:\n                serialized = self._serialize_task(task.id, False)\n                result[task.status][task.id] = serialized\n        return result\n\n    def re_enable_task(self, task_id):\n        serialized = {}\n        task = self._state.get_task(task_id)\n        if task and task.status == DISABLED and task.scheduler_disable_time:\n            self._state.re_enable(task, self._config)\n            serialized = self._serialize_task(task_id)\n        return serialized\n\n    def fetch_error(self, task_id, **kwargs):\n        if self._state.has_task(task_id):\n            return {\"taskId\": task_id, \"error\": self._state.get_task(task_id).expl}\n        else:\n            return {\"taskId\": task_id, \"error\": \"\"}\n\n    def _update_task_history(self, task_id, status, host=None):\n        try:\n            if status == DONE or status == FAILED:\n                successful = (status == DONE)\n                self._task_history.task_finished(task_id, successful)\n            elif status == PENDING:\n                self._task_history.task_scheduled(task_id)\n            elif status == RUNNING:\n                self._task_history.task_started(task_id, host)\n        except BaseException:\n            logger.warning(\"Error saving Task history\", exc_info=True)\n\n    @property\n    def task_history(self):\n        # Used by server.py to expose the calls\n        return self._task_history\n",
          "file_after": "# -*- coding: utf-8 -*-\n#\n# Copyright 2012-2015 Spotify AB\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\"\"\"\nThe system for scheduling tasks and executing them in order.\nDeals with dependencies, priorities, resources, etc.\nThe :py:class:`~luigi.worker.Worker` pulls tasks from the scheduler (usually over the REST interface) and executes them.\nSee :doc:`/central_scheduler` for more info.\n\"\"\"\n\nimport collections\ntry:\n    import cPickle as pickle\nexcept ImportError:\n    import pickle\nimport datetime\nimport functools\nimport itertools\nimport logging\nimport os\nimport time\n\nfrom luigi import six\n\nfrom luigi import configuration\nfrom luigi import notifications\nfrom luigi import parameter\nfrom luigi import task_history as history\nfrom luigi.task_status import DISABLED, DONE, FAILED, PENDING, RUNNING, SUSPENDED, UNKNOWN\nfrom luigi.task import Config\n\nlogger = logging.getLogger(\"luigi.server\")\n\n\nclass Scheduler(object):\n    \"\"\"\n    Abstract base class.\n\n    Note that the methods all take string arguments, not Task objects...\n    \"\"\"\"\"\n    add_task = NotImplemented\n    get_work = NotImplemented\n    ping = NotImplemented\n\nUPSTREAM_RUNNING = 'UPSTREAM_RUNNING'\nUPSTREAM_MISSING_INPUT = 'UPSTREAM_MISSING_INPUT'\nUPSTREAM_FAILED = 'UPSTREAM_FAILED'\nUPSTREAM_DISABLED = 'UPSTREAM_DISABLED'\n\nUPSTREAM_SEVERITY_ORDER = (\n    '',\n    UPSTREAM_RUNNING,\n    UPSTREAM_MISSING_INPUT,\n    UPSTREAM_FAILED,\n    UPSTREAM_DISABLED,\n)\nUPSTREAM_SEVERITY_KEY = UPSTREAM_SEVERITY_ORDER.index\nSTATUS_TO_UPSTREAM_MAP = {\n    FAILED: UPSTREAM_FAILED,\n    RUNNING: UPSTREAM_RUNNING,\n    PENDING: UPSTREAM_MISSING_INPUT,\n    DISABLED: UPSTREAM_DISABLED,\n}\n\n\nclass scheduler(Config):\n    # TODO(erikbern): the config_path is needed for backwards compatilibity. We should drop the compatibility\n    # at some point (in particular this would force users to replace all dashes with underscores in the config)\n    retry_delay = parameter.FloatParameter(default=900.0)\n    remove_delay = parameter.FloatParameter(default=600.0)\n    worker_disconnect_delay = parameter.FloatParameter(default=60.0)\n    state_path = parameter.Parameter(default='/var/lib/luigi-server/state.pickle')\n\n    # Jobs are disabled if we see more than disable_failures failures in disable_window seconds.\n    # These disables last for disable_persist seconds.\n    disable_window = parameter.IntParameter(default=3600,\n                                            config_path=dict(section='scheduler', name='disable-window-seconds'))\n    disable_failures = parameter.IntParameter(default=None,\n                                              config_path=dict(section='scheduler', name='disable-num-failures'))\n    disable_hard_timeout = parameter.IntParameter(default=None,\n                                                  config_path=dict(section='scheduler', name='disable-hard-timeout'))\n    disable_persist = parameter.IntParameter(default=86400,\n                                             config_path=dict(section='scheduler', name='disable-persist-seconds'))\n    max_shown_tasks = parameter.IntParameter(default=100000)\n    prune_done_tasks = parameter.BoolParameter(default=False)\n\n    record_task_history = parameter.BoolParameter(default=False)\n\n    visualization_graph = parameter.Parameter(default=\"svg\", config_path=dict(section='scheduler', name='visualization-graph'))\n\n\ndef fix_time(x):\n    # Backwards compatibility for a fix in Dec 2014. Prior to the fix, pickled state might store datetime objects\n    # Let's remove this function soon\n    if isinstance(x, datetime.datetime):\n        return time.mktime(x.timetuple())\n    else:\n        return x\n\n\nclass Failures(object):\n    \"\"\"\n    This class tracks the number of failures in a given time window.\n\n    Failures added are marked with the current timestamp, and this class counts\n    the number of failures in a sliding time window ending at the present.\n    \"\"\"\n\n    def __init__(self, window):\n        \"\"\"\n        Initialize with the given window.\n\n        :param window: how long to track failures for, as a float (number of seconds).\n        \"\"\"\n        self.window = window\n        self.failures = collections.deque()\n        self.first_failure_time = None\n\n    def add_failure(self):\n        \"\"\"\n        Add a failure event with the current timestamp.\n        \"\"\"\n        failure_time = time.time()\n\n        if not self.first_failure_time:\n            self.first_failure_time = failure_time\n\n        self.failures.append(failure_time)\n\n    def num_failures(self):\n        \"\"\"\n        Return the number of failures in the window.\n        \"\"\"\n        min_time = time.time() - self.window\n\n        while self.failures and fix_time(self.failures[0]) < min_time:\n            self.failures.popleft()\n\n        return len(self.failures)\n\n    def clear(self):\n        \"\"\"\n        Clear the failure queue.\n        \"\"\"\n        self.failures.clear()\n\n\ndef _get_default(x, default):\n    if x is not None:\n        return x\n    else:\n        return default\n\n\nclass Task(object):\n\n    def __init__(self, task_id, status, deps, resources=None, priority=0, family='', module=None,\n                 params=None, disable_failures=None, disable_window=None, disable_hard_timeout=None):\n        self.id = task_id\n        self.stakeholders = set()  # workers ids that are somehow related to this task (i.e. don't prune while any of these workers are still active)\n        self.workers = set()  # workers ids that can perform task - task is 'BROKEN' if none of these workers are active\n        if deps is None:\n            self.deps = set()\n        else:\n            self.deps = set(deps)\n        self.status = status  # PENDING, RUNNING, FAILED or DONE\n        self.time = time.time()  # Timestamp when task was first added\n        self.retry = None\n        self.remove = None\n        self.worker_running = None  # the worker id that is currently running the task or None\n        self.time_running = None  # Timestamp when picked up by worker\n        self.expl = None\n        self.priority = priority\n        self.resources = _get_default(resources, {})\n        self.family = family\n        self.module = module\n        self.params = _get_default(params, {})\n        self.disable_failures = disable_failures\n        self.disable_hard_timeout = disable_hard_timeout\n        self.failures = Failures(disable_window)\n        self.scheduler_disable_time = None\n\n    def __repr__(self):\n        return \"Task(%r)\" % vars(self)\n\n    def add_failure(self):\n        self.failures.add_failure()\n\n    def has_excessive_failures(self):\n\n        excessive_failures = False\n\n        if (self.failures.first_failure_time is not None and\n                self.disable_hard_timeout):\n            if (time.time() >= self.failures.first_failure_time +\n                    self.disable_hard_timeout):\n                excessive_failures = True\n\n        if self.failures.num_failures() >= self.disable_failures:\n            excessive_failures = True\n\n        return excessive_failures\n\n    def can_disable(self):\n        return (self.disable_failures is not None or\n                self.disable_hard_timeout is not None)\n\n\nclass Worker(object):\n    \"\"\"\n    Structure for tracking worker activity and keeping their references.\n    \"\"\"\n\n    def __init__(self, worker_id, last_active=None):\n        self.id = worker_id\n        self.reference = None  # reference to the worker in the real world. (Currently a dict containing just the host)\n        self.last_active = last_active  # seconds since epoch\n        self.started = time.time()  # seconds since epoch\n        self.tasks = set()  # task objects\n        self.info = {}\n\n    def add_info(self, info):\n        self.info.update(info)\n\n    def update(self, worker_reference):\n        if worker_reference:\n            self.reference = worker_reference\n        self.last_active = time.time()\n\n    def prune(self, config):\n        # Delete workers that haven't said anything for a while (probably killed)\n        if self.last_active + config.worker_disconnect_delay < time.time():\n            return True\n\n    def get_pending_tasks(self):\n        return six.moves.filter(lambda task: task.status in [PENDING, RUNNING],\n                                self.tasks)\n\n    def is_trivial_worker(self):\n        \"\"\"\n        If it's not an assistant having only tasks that are without\n        requirements\n        \"\"\"\n        if self.assistant:\n            return False\n        return all(not task.resources for task in self.get_pending_tasks())\n\n    @property\n    def assistant(self):\n        return self.info.get('assistant', False)\n\n    def __str__(self):\n        return self.id\n\n\nclass SimpleTaskState(object):\n    \"\"\"\n    Keep track of the current state and handle persistance.\n\n    The point of this class is to enable other ways to keep state, eg. by using a database\n    These will be implemented by creating an abstract base class that this and other classes\n    inherit from.\n    \"\"\"\n\n    def __init__(self, state_path):\n        self._state_path = state_path\n        self._tasks = {}  # map from id to a Task object\n        self._status_tasks = collections.defaultdict(dict)\n        self._active_workers = {}  # map from id to a Worker object\n\n    def dump(self):\n        state = (self._tasks, self._active_workers)\n        try:\n            with open(self._state_path, 'wb') as fobj:\n                pickle.dump(state, fobj)\n        except IOError:\n            logger.warning(\"Failed saving scheduler state\", exc_info=1)\n        else:\n            logger.info(\"Saved state in %s\", self._state_path)\n\n    # prone to lead to crashes when old state is unpickled with updated code. TODO some kind of version control?\n    def load(self):\n        if os.path.exists(self._state_path):\n            logger.info(\"Attempting to load state from %s\", self._state_path)\n            try:\n                with open(self._state_path, 'rb') as fobj:\n                    state = pickle.load(fobj)\n            except BaseException:\n                logger.exception(\"Error when loading state. Starting from clean slate.\")\n                return\n\n            self._tasks, self._active_workers = state\n            self._status_tasks = collections.defaultdict(dict)\n            for task in six.itervalues(self._tasks):\n                self._status_tasks[task.status][task.id] = task\n\n            # Convert from old format\n            # TODO: this is really ugly, we need something more future-proof\n            # Every time we add an attribute to the Worker class, this code needs to be updated\n            for k, v in six.iteritems(self._active_workers):\n                if isinstance(v, float):\n                    self._active_workers[k] = Worker(worker_id=k, last_active=v)\n\n            if any(not hasattr(w, 'tasks') for k, w in six.iteritems(self._active_workers)):\n                # If you load from an old format where Workers don't contain tasks.\n                for k, worker in six.iteritems(self._active_workers):\n                    worker.tasks = set()\n                for task in six.itervalues(self._tasks):\n                    for worker_id in task.workers:\n                        self._active_workers[worker_id].tasks.add(task)\n        else:\n            logger.info(\"No prior state file exists at %s. Starting with clean slate\", self._state_path)\n\n    def get_active_tasks(self, status=None):\n        if status:\n            for task in six.itervalues(self._status_tasks[status]):\n                yield task\n        else:\n            for task in six.itervalues(self._tasks):\n                yield task\n\n    def get_running_tasks(self):\n        return six.itervalues(self._status_tasks[RUNNING])\n\n    def get_pending_tasks(self):\n        return itertools.chain.from_iterable(six.itervalues(self._status_tasks[status])\n                                             for status in [PENDING, RUNNING])\n\n    def get_task(self, task_id, default=None, setdefault=None):\n        if setdefault:\n            task = self._tasks.setdefault(task_id, setdefault)\n            self._status_tasks[task.status][task.id] = task\n            return task\n        else:\n            return self._tasks.get(task_id, default)\n\n    def has_task(self, task_id):\n        return task_id in self._tasks\n\n    def re_enable(self, task, config=None):\n        task.scheduler_disable_time = None\n        task.failures.clear()\n        if config:\n            self.set_status(task, FAILED, config)\n            task.failures.clear()\n\n    def set_status(self, task, new_status, config=None):\n        if new_status == FAILED:\n            assert config is not None\n\n        # not sure why we have SUSPENDED, as it can never be set\n        if new_status == SUSPENDED:\n            new_status = PENDING\n\n        if new_status == DISABLED and task.status == RUNNING:\n            return\n\n        if task.status == DISABLED:\n            if new_status == DONE:\n                self.re_enable(task)\n\n            # don't allow workers to override a scheduler disable\n            elif task.scheduler_disable_time is not None:\n                return\n\n        if new_status == FAILED and task.can_disable():\n            task.add_failure()\n            if task.has_excessive_failures():\n                task.scheduler_disable_time = time.time()\n                new_status = DISABLED\n                notifications.send_error_email(\n                    'Luigi Scheduler: DISABLED {task} due to excessive failures'.format(task=task.id),\n                    '{task} failed {failures} times in the last {window} seconds, so it is being '\n                    'disabled for {persist} seconds'.format(\n                        failures=config.disable_failures,\n                        task=task.id,\n                        window=config.disable_window,\n                        persist=config.disable_persist,\n                    ))\n        elif new_status == DISABLED:\n            task.scheduler_disable_time = None\n\n        self._status_tasks[task.status].pop(task.id)\n        self._status_tasks[new_status][task.id] = task\n        task.status = new_status\n\n    def prune(self, task, config, assistants):\n        remove = False\n\n        # Mark tasks with no remaining active stakeholders for deletion\n        if not task.stakeholders:\n            if task.remove is None:\n                logger.info(\"Task %r has stakeholders %r but none remain connected -> will remove \"\n                            \"task in %s seconds\", task.id, task.stakeholders, config.remove_delay)\n                task.remove = time.time() + config.remove_delay\n\n        # If a running worker disconnects, tag all its jobs as FAILED and subject it to the same retry logic\n        if task.status == RUNNING and task.worker_running and task.worker_running not in task.stakeholders | assistants:\n            logger.info(\"Task %r is marked as running by disconnected worker %r -> marking as \"\n                        \"FAILED with retry delay of %rs\", task.id, task.worker_running,\n                        config.retry_delay)\n            task.worker_running = None\n            self.set_status(task, FAILED, config)\n            task.retry = time.time() + config.retry_delay\n\n        # Re-enable task after the disable time expires\n        if task.status == DISABLED and task.scheduler_disable_time:\n            if time.time() - fix_time(task.scheduler_disable_time) > config.disable_persist:\n                self.re_enable(task, config)\n\n        # Remove tasks that have no stakeholders\n        if task.remove and time.time() > task.remove:\n            logger.info(\"Removing task %r (no connected stakeholders)\", task.id)\n            remove = True\n\n        # Reset FAILED tasks to PENDING if max timeout is reached, and retry delay is >= 0\n        if task.status == FAILED and config.retry_delay >= 0 and task.retry < time.time():\n            self.set_status(task, PENDING, config)\n\n        return remove\n\n    def inactivate_tasks(self, delete_tasks):\n        # The terminology is a bit confusing: we used to \"delete\" tasks when they became inactive,\n        # but with a pluggable state storage, you might very well want to keep some history of\n        # older tasks as well. That's why we call it \"inactivate\" (as in the verb)\n        for task in delete_tasks:\n            task_obj = self._tasks.pop(task)\n            self._status_tasks[task_obj.status].pop(task)\n\n    def get_active_workers(self, last_active_lt=None):\n        for worker in six.itervalues(self._active_workers):\n            if last_active_lt is not None and worker.last_active >= last_active_lt:\n                continue\n            yield worker\n\n    def get_assistants(self, last_active_lt=None):\n        return filter(lambda w: w.assistant, self.get_active_workers(last_active_lt))\n\n    def get_worker_ids(self):\n        return self._active_workers.keys()  # only used for unit tests\n\n    def get_worker(self, worker_id):\n        return self._active_workers.setdefault(worker_id, Worker(worker_id))\n\n    def inactivate_workers(self, delete_workers):\n        # Mark workers as inactive\n        for worker in delete_workers:\n            self._active_workers.pop(worker)\n\n        # remove workers from tasks\n        for task in self.get_active_tasks():\n            task.stakeholders.difference_update(delete_workers)\n            task.workers.difference_update(delete_workers)\n\n    def get_necessary_tasks(self):\n        necessary_tasks = set()\n        for task in self.get_active_tasks():\n            if task.status not in (DONE, DISABLED) or \\\n                    getattr(task, 'scheduler_disable_time', None) is not None:\n                necessary_tasks.update(task.deps)\n                necessary_tasks.add(task.id)\n        return necessary_tasks\n\n\nclass CentralPlannerScheduler(Scheduler):\n    \"\"\"\n    Async scheduler that can handle multiple workers, etc.\n\n    Can be run locally or on a server (using RemoteScheduler + server.Server).\n    \"\"\"\n\n    def __init__(self, config=None, resources=None, task_history_impl=None, **kwargs):\n        \"\"\"\n        Keyword Arguments:\n        :param config: an object of class \"scheduler\" or None (in which the global instance will be used)\n        :param resources: a dict of str->int constraints\n        :param task_history_override: ignore config and use this object as the task history\n        \"\"\"\n        self._config = config or scheduler(**kwargs)\n        self._state = SimpleTaskState(self._config.state_path)\n\n        if task_history_impl:\n            self._task_history = task_history_impl\n        elif self._config.record_task_history:\n            from luigi import db_task_history  # Needs sqlalchemy, thus imported here\n            self._task_history = db_task_history.DbTaskHistory()\n        else:\n            self._task_history = history.NopHistory()\n        self._resources = resources or configuration.get_config().getintdict('resources')  # TODO: Can we make this a Parameter?\n        self._make_task = functools.partial(\n            Task, disable_failures=self._config.disable_failures,\n            disable_hard_timeout=self._config.disable_hard_timeout,\n            disable_window=self._config.disable_window)\n\n    def load(self):\n        self._state.load()\n\n    def dump(self):\n        self._state.dump()\n\n    def prune(self):\n        logger.info(\"Starting pruning of task graph\")\n        remove_workers = []\n        for worker in self._state.get_active_workers():\n            if worker.prune(self._config):\n                logger.info(\"Worker %s timed out (no contact for >=%ss)\", worker, self._config.worker_disconnect_delay)\n                remove_workers.append(worker.id)\n\n        self._state.inactivate_workers(remove_workers)\n\n        assistant_ids = set(w.id for w in self._state.get_assistants())\n        remove_tasks = []\n\n        if assistant_ids:\n            necessary_tasks = self._state.get_necessary_tasks()\n        else:\n            necessary_tasks = ()\n\n        for task in self._state.get_active_tasks():\n            if task.id not in necessary_tasks and self._state.prune(task, self._config, assistant_ids):\n                remove_tasks.append(task.id)\n\n        self._state.inactivate_tasks(remove_tasks)\n\n        logger.info(\"Done pruning task graph\")\n\n    def update(self, worker_id, worker_reference=None):\n        \"\"\"\n        Keep track of whenever the worker was last active.\n        \"\"\"\n        worker = self._state.get_worker(worker_id)\n        worker.update(worker_reference)\n\n    def _update_priority(self, task, prio, worker):\n        \"\"\"\n        Update priority of the given task.\n\n        Priority can only be increased.\n        If the task doesn't exist, a placeholder task is created to preserve priority when the task is later scheduled.\n        \"\"\"\n        task.priority = prio = max(prio, task.priority)\n        for dep in task.deps or []:\n            t = self._state.get_task(dep)\n            if t is not None and prio > t.priority:\n                self._update_priority(t, prio, worker)\n\n    def add_task(self, task_id=None, status=PENDING, runnable=True,\n                 deps=None, new_deps=None, expl=None, resources=None,\n                 priority=0, family='', module=None, params=None,\n                 assistant=False, **kwargs):\n        \"\"\"\n        * add task identified by task_id if it doesn't exist\n        * if deps is not None, update dependency list\n        * update status of task\n        * add additional workers/stakeholders\n        * update priority when needed\n        \"\"\"\n        worker_id = kwargs['worker']\n        self.update(worker_id)\n\n        task = self._state.get_task(task_id, setdefault=self._make_task(\n            task_id=task_id, status=PENDING, deps=deps, resources=resources,\n            priority=priority, family=family, module=module, params=params))\n\n        # for setting priority, we'll sometimes create tasks with unset family and params\n        if not task.family:\n            task.family = family\n        if not getattr(task, 'module', None):\n            task.module = module\n        if not task.params:\n            task.params = _get_default(params, {})\n\n        if task.remove is not None:\n            task.remove = None  # unmark task for removal so it isn't removed after being added\n\n        if not (task.status == RUNNING and status == PENDING):\n            # don't allow re-scheduling of task while it is running, it must either fail or succeed first\n            if status == PENDING or status != task.status:\n                # Update the DB only if there was a acctual change, to prevent noise.\n                # We also check for status == PENDING b/c that's the default value\n                # (so checking for status != task.status woule lie)\n                self._update_task_history(task_id, status)\n            self._state.set_status(task, PENDING if status == SUSPENDED else status, self._config)\n            if status == FAILED:\n                task.retry = time.time() + self._config.retry_delay\n\n        if deps is not None:\n            task.deps = set(deps)\n\n        if new_deps is not None:\n            task.deps.update(new_deps)\n\n        if resources is not None:\n            task.resources = resources\n\n        if not assistant:\n            task.stakeholders.add(worker_id)\n\n            # Task dependencies might not exist yet. Let's create dummy tasks for them for now.\n            # Otherwise the task dependencies might end up being pruned if scheduling takes a long time\n            for dep in task.deps or []:\n                t = self._state.get_task(dep, setdefault=self._make_task(task_id=dep, status=UNKNOWN, deps=None, priority=priority))\n                t.stakeholders.add(worker_id)\n\n        self._update_priority(task, priority, worker_id)\n\n        if runnable:\n            task.workers.add(worker_id)\n            self._state.get_worker(worker_id).tasks.add(task)\n\n        if expl is not None:\n            task.expl = expl\n\n    def add_worker(self, worker, info, **kwargs):\n        self._state.get_worker(worker).add_info(info)\n\n    def update_resources(self, **resources):\n        if self._resources is None:\n            self._resources = {}\n        self._resources.update(resources)\n\n    def _has_resources(self, needed_resources, used_resources):\n        if needed_resources is None:\n            return True\n\n        available_resources = self._resources or {}\n        for resource, amount in six.iteritems(needed_resources):\n            if amount + used_resources[resource] > available_resources.get(resource, 1):\n                return False\n        return True\n\n    def _used_resources(self):\n        used_resources = collections.defaultdict(int)\n        if self._resources is not None:\n            for task in self._state.get_active_tasks():\n                if task.status == RUNNING and task.resources:\n                    for resource, amount in six.iteritems(task.resources):\n                        used_resources[resource] += amount\n        return used_resources\n\n    def _rank(self, among_tasks):\n        \"\"\"\n        Return worker's rank function for task scheduling.\n\n        :return:\n        \"\"\"\n        dependents = collections.defaultdict(int)\n\n        def not_done(t):\n            task = self._state.get_task(t, default=None)\n            return task is None or task.status != DONE\n        for task in among_tasks:\n            if task.status != DONE:\n                deps = list(filter(not_done, task.deps))\n                inverse_num_deps = 1.0 / max(len(deps), 1)\n                for dep in deps:\n                    dependents[dep] += inverse_num_deps\n\n        return lambda task: (task.priority, dependents[task.id], -task.time)\n\n    def _schedulable(self, task):\n        if task.status != PENDING:\n            return False\n        for dep in task.deps:\n            dep_task = self._state.get_task(dep, default=None)\n            if dep_task is None or dep_task.status != DONE:\n                return False\n        return True\n\n    def get_work(self, host=None, assistant=False, **kwargs):\n        # TODO: remove any expired nodes\n\n        # Algo: iterate over all nodes, find the highest priority node no dependencies and available\n        # resources.\n\n        # Resource checking looks both at currently available resources and at which resources would\n        # be available if all running tasks died and we rescheduled all workers greedily. We do both\n        # checks in order to prevent a worker with many low-priority tasks from starving other\n        # workers with higher priority tasks that share the same resources.\n\n        # TODO: remove tasks that can't be done, figure out if the worker has absolutely\n        # nothing it can wait for\n\n        worker_id = kwargs['worker']\n        # Return remaining tasks that have no FAILED descendents\n        self.update(worker_id, {'host': host})\n        if assistant:\n            self.add_worker(worker_id, [('assistant', assistant)])\n        best_task = None\n        locally_pending_tasks = 0\n        running_tasks = []\n        upstream_table = {}\n\n        greedy_resources = collections.defaultdict(int)\n        n_unique_pending = 0\n\n        worker = self._state.get_worker(worker_id)\n        if worker.is_trivial_worker():\n            relevant_tasks = worker.get_pending_tasks()\n            used_resources = collections.defaultdict(int)\n            greedy_workers = dict()  # If there's no resources, then they can grab any task\n        else:\n            relevant_tasks = self._state.get_pending_tasks()\n            used_resources = self._used_resources()\n            greedy_workers = dict((worker.id, worker.info.get('workers', 1))\n                                  for worker in self._state.get_active_workers())\n        tasks = list(relevant_tasks)\n        tasks.sort(key=self._rank(among_tasks=tasks), reverse=True)\n\n        for task in tasks:\n            upstream_status = self._upstream_status(task.id, upstream_table)\n            in_workers = (assistant and task.workers) or worker_id in task.workers\n            if task.status == RUNNING and in_workers:\n                # Return a list of currently running tasks to the client,\n                # makes it easier to troubleshoot\n                other_worker = self._state.get_worker(task.worker_running)\n                more_info = {'task_id': task.id, 'worker': str(other_worker)}\n                if other_worker is not None:\n                    more_info.update(other_worker.info)\n                    running_tasks.append(more_info)\n\n            if task.status == PENDING and in_workers and upstream_status != UPSTREAM_DISABLED:\n                locally_pending_tasks += 1\n                if len(task.workers) == 1 and not assistant:\n                    n_unique_pending += 1\n\n            if task.status == RUNNING and (task.worker_running in greedy_workers):\n                greedy_workers[task.worker_running] -= 1\n                for resource, amount in six.iteritems((task.resources or {})):\n                    greedy_resources[resource] += amount\n\n            if not best_task and self._schedulable(task) and self._has_resources(task.resources, greedy_resources):\n                if in_workers and self._has_resources(task.resources, used_resources):\n                    best_task = task\n                else:\n                    workers = itertools.chain(task.workers, [worker_id]) if assistant else task.workers\n                    for task_worker in workers:\n                        if greedy_workers.get(task_worker, 0) > 0:\n                            # use up a worker\n                            greedy_workers[task_worker] -= 1\n\n                            # keep track of the resources used in greedy scheduling\n                            for resource, amount in six.iteritems((task.resources or {})):\n                                greedy_resources[resource] += amount\n\n                            break\n\n        reply = {'n_pending_tasks': locally_pending_tasks,\n                 'running_tasks': running_tasks,\n                 'task_id': None,\n                 'n_unique_pending': n_unique_pending}\n\n        if best_task:\n            self._state.set_status(best_task, RUNNING, self._config)\n            best_task.worker_running = worker_id\n            best_task.time_running = time.time()\n            self._update_task_history(best_task.id, RUNNING, host=host)\n\n            reply['task_id'] = best_task.id\n            reply['task_family'] = best_task.family\n            reply['task_module'] = getattr(best_task, 'module', None)\n            reply['task_params'] = best_task.params\n\n        return reply\n\n    def ping(self, **kwargs):\n        worker_id = kwargs['worker']\n        self.update(worker_id)\n\n    def _upstream_status(self, task_id, upstream_status_table):\n        if task_id in upstream_status_table:\n            return upstream_status_table[task_id]\n        elif self._state.has_task(task_id):\n            task_stack = [task_id]\n\n            while task_stack:\n                dep_id = task_stack.pop()\n                if self._state.has_task(dep_id):\n                    dep = self._state.get_task(dep_id)\n                    if dep_id not in upstream_status_table:\n                        if dep.status == PENDING and dep.deps:\n                            task_stack = task_stack + [dep_id] + list(dep.deps)\n                            upstream_status_table[dep_id] = ''  # will be updated postorder\n                        else:\n                            dep_status = STATUS_TO_UPSTREAM_MAP.get(dep.status, '')\n                            upstream_status_table[dep_id] = dep_status\n                    elif upstream_status_table[dep_id] == '' and dep.deps:\n                        # This is the postorder update step when we set the\n                        # status based on the previously calculated child elements\n                        upstream_status = [upstream_status_table.get(task_id, '') for task_id in dep.deps]\n                        upstream_status.append('')  # to handle empty list\n                        status = max(upstream_status, key=UPSTREAM_SEVERITY_KEY)\n                        upstream_status_table[dep_id] = status\n            return upstream_status_table[dep_id]\n\n    def _serialize_task(self, task_id, include_deps=True):\n        task = self._state.get_task(task_id)\n        ret = {\n            'status': task.status,\n            'workers': list(task.workers),\n            'worker_running': task.worker_running,\n            'time_running': getattr(task, \"time_running\", None),\n            'start_time': task.time,\n            'params': task.params,\n            'name': task.family,\n            'priority': task.priority,\n            'resources': task.resources,\n        }\n        if task.status == DISABLED:\n            ret['re_enable_able'] = task.scheduler_disable_time is not None\n        if include_deps:\n            ret['deps'] = list(task.deps)\n        return ret\n\n    def graph(self, **kwargs):\n        self.prune()\n        serialized = {}\n        for task in self._state.get_active_tasks():\n            serialized[task.id] = self._serialize_task(task.id)\n        return serialized\n\n    def _recurse_deps(self, task_id, serialized):\n        if task_id not in serialized:\n            task = self._state.get_task(task_id)\n            if task is None or not task.family:\n                logger.warn('Missing task for id [%s]', task_id)\n\n                # try to infer family and params from task_id\n                try:\n                    family, _, param_str = task_id.rstrip(')').partition('(')\n                    params = dict(param.split('=') for param in param_str.split(', '))\n                except BaseException:\n                    family, params = '', {}\n                serialized[task_id] = {\n                    'deps': [],\n                    'status': UNKNOWN,\n                    'workers': [],\n                    'start_time': UNKNOWN,\n                    'params': params,\n                    'name': family,\n                    'priority': 0,\n                }\n            else:\n                serialized[task_id] = self._serialize_task(task_id)\n                for dep in task.deps:\n                    self._recurse_deps(dep, serialized)\n\n    def dep_graph(self, task_id, **kwargs):\n        self.prune()\n        serialized = {}\n        if self._state.has_task(task_id):\n            self._recurse_deps(task_id, serialized)\n        return serialized\n\n    def task_list(self, status, upstream_status, limit=True, search=None, **kwargs):\n        \"\"\"\n        Query for a subset of tasks by status.\n        \"\"\"\n        self.prune()\n        result = {}\n        upstream_status_table = {}  # used to memoize upstream status\n        if search is None:\n            filter_func = lambda _: True\n        else:\n            terms = search.split()\n            filter_func = lambda t: all(term in t.id for term in terms)\n        for task in filter(filter_func, self._state.get_active_tasks(status)):\n            if (task.status != PENDING or not upstream_status or\n                    upstream_status == self._upstream_status(task.id, upstream_status_table)):\n                serialized = self._serialize_task(task.id, False)\n                result[task.id] = serialized\n        if limit and len(result) > self._config.max_shown_tasks:\n            return {'num_tasks': len(result)}\n        return result\n\n    def worker_list(self, include_running=True, **kwargs):\n        self.prune()\n        workers = [\n            dict(\n                name=worker.id,\n                last_active=worker.last_active,\n                started=getattr(worker, 'started', None),\n                **worker.info\n            ) for worker in self._state.get_active_workers()]\n        workers.sort(key=lambda worker: worker['started'], reverse=True)\n        if include_running:\n            running = collections.defaultdict(dict)\n            num_pending = collections.defaultdict(int)\n            num_uniques = collections.defaultdict(int)\n            for task in self._state.get_pending_tasks():\n                if task.status == RUNNING and task.worker_running:\n                    running[task.worker_running][task.id] = self._serialize_task(task.id, False)\n                elif task.status == PENDING:\n                    for worker in task.workers:\n                        num_pending[worker] += 1\n                    if len(task.workers) == 1:\n                        num_uniques[list(task.workers)[0]] += 1\n            for worker in workers:\n                tasks = running[worker['name']]\n                worker['num_running'] = len(tasks)\n                worker['num_pending'] = num_pending[worker['name']]\n                worker['num_uniques'] = num_uniques[worker['name']]\n                worker['running'] = tasks\n        return workers\n\n    def inverse_dep_graph(self, task_id, **kwargs):\n        self.prune()\n        serialized = {}\n        if self._state.has_task(task_id):\n            self._traverse_inverse_deps(task_id, serialized)\n        return serialized\n\n    def _traverse_inverse_deps(self, task_id, serialized):\n        stack = [task_id]\n        serialized[task_id] = self._serialize_task(task_id)\n        while len(stack) > 0:\n            curr_id = stack.pop()\n            for task in self._state.get_active_tasks():\n                if curr_id in task.deps:\n                    serialized[curr_id][\"deps\"].append(task.id)\n                    if task.id not in serialized:\n                        serialized[task.id] = self._serialize_task(task.id)\n                        serialized[task.id][\"deps\"] = []\n                        stack.append(task.id)\n\n    def task_search(self, task_str, **kwargs):\n        \"\"\"\n        Query for a subset of tasks by task_id.\n\n        :param task_str:\n        :return:\n        \"\"\"\n        self.prune()\n        result = collections.defaultdict(dict)\n        for task in self._state.get_active_tasks():\n            if task.id.find(task_str) != -1:\n                serialized = self._serialize_task(task.id, False)\n                result[task.status][task.id] = serialized\n        return result\n\n    def re_enable_task(self, task_id):\n        serialized = {}\n        task = self._state.get_task(task_id)\n        if task and task.status == DISABLED and task.scheduler_disable_time:\n            self._state.re_enable(task, self._config)\n            serialized = self._serialize_task(task_id)\n        return serialized\n\n    def fetch_error(self, task_id, **kwargs):\n        if self._state.has_task(task_id):\n            return {\"taskId\": task_id, \"error\": self._state.get_task(task_id).expl}\n        else:\n            return {\"taskId\": task_id, \"error\": \"\"}\n\n    def _update_task_history(self, task_id, status, host=None):\n        try:\n            if status == DONE or status == FAILED:\n                successful = (status == DONE)\n                self._task_history.task_finished(task_id, successful)\n            elif status == PENDING:\n                self._task_history.task_scheduled(task_id)\n            elif status == RUNNING:\n                self._task_history.task_started(task_id, host)\n        except BaseException:\n            logger.warning(\"Error saving Task history\", exc_info=True)\n\n    @property\n    def task_history(self):\n        # Used by server.py to expose the calls\n        return self._task_history\n",
          "file_patch": "@@ -229,6 +229,7 @@ class Worker(object):\n         self.reference = None  # reference to the worker in the real world. (Currently a dict containing just the host)\n         self.last_active = last_active  # seconds since epoch\n         self.started = time.time()  # seconds since epoch\n+        self.tasks = set()  # task objects\n         self.info = {}\n \n     def add_info(self, info):\n@@ -244,6 +245,19 @@ class Worker(object):\n         if self.last_active + config.worker_disconnect_delay < time.time():\n             return True\n \n+    def get_pending_tasks(self):\n+        return six.moves.filter(lambda task: task.status in [PENDING, RUNNING],\n+                                self.tasks)\n+\n+    def is_trivial_worker(self):\n+        \"\"\"\n+        If it's not an assistant having only tasks that are without\n+        requirements\n+        \"\"\"\n+        if self.assistant:\n+            return False\n+        return all(not task.resources for task in self.get_pending_tasks())\n+\n     @property\n     def assistant(self):\n         return self.info.get('assistant', False)\n@@ -299,6 +313,14 @@ class SimpleTaskState(object):\n             for k, v in six.iteritems(self._active_workers):\n                 if isinstance(v, float):\n                     self._active_workers[k] = Worker(worker_id=k, last_active=v)\n+\n+            if any(not hasattr(w, 'tasks') for k, w in six.iteritems(self._active_workers)):\n+                # If you load from an old format where Workers don't contain tasks.\n+                for k, worker in six.iteritems(self._active_workers):\n+                    worker.tasks = set()\n+                for task in six.itervalues(self._tasks):\n+                    for worker_id in task.workers:\n+                        self._active_workers[worker_id].tasks.add(task)\n         else:\n             logger.info(\"No prior state file exists at %s. Starting with clean slate\", self._state_path)\n \n@@ -597,6 +619,7 @@ class CentralPlannerScheduler(Scheduler):\n \n         if runnable:\n             task.workers.add(worker_id)\n+            self._state.get_worker(worker_id).tasks.add(task)\n \n         if expl is not None:\n             task.expl = expl\n@@ -628,7 +651,7 @@ class CentralPlannerScheduler(Scheduler):\n                         used_resources[resource] += amount\n         return used_resources\n \n-    def _rank(self):\n+    def _rank(self, among_tasks):\n         \"\"\"\n         Return worker's rank function for task scheduling.\n \n@@ -639,7 +662,7 @@ class CentralPlannerScheduler(Scheduler):\n         def not_done(t):\n             task = self._state.get_task(t, default=None)\n             return task is None or task.status != DONE\n-        for task in self._state.get_pending_tasks():\n+        for task in among_tasks:\n             if task.status != DONE:\n                 deps = list(filter(not_done, task.deps))\n                 inverse_num_deps = 1.0 / max(len(deps), 1)\n@@ -681,14 +704,21 @@ class CentralPlannerScheduler(Scheduler):\n         running_tasks = []\n         upstream_table = {}\n \n-        used_resources = self._used_resources()\n         greedy_resources = collections.defaultdict(int)\n         n_unique_pending = 0\n-        greedy_workers = dict((worker.id, worker.info.get('workers', 1))\n-                              for worker in self._state.get_active_workers())\n \n-        tasks = list(self._state.get_pending_tasks())\n-        tasks.sort(key=self._rank(), reverse=True)\n+        worker = self._state.get_worker(worker_id)\n+        if worker.is_trivial_worker():\n+            relevant_tasks = worker.get_pending_tasks()\n+            used_resources = collections.defaultdict(int)\n+            greedy_workers = dict()  # If there's no resources, then they can grab any task\n+        else:\n+            relevant_tasks = self._state.get_pending_tasks()\n+            used_resources = self._used_resources()\n+            greedy_workers = dict((worker.id, worker.info.get('workers', 1))\n+                                  for worker in self._state.get_active_workers())\n+        tasks = list(relevant_tasks)\n+        tasks.sort(key=self._rank(among_tasks=tasks), reverse=True)\n \n         for task in tasks:\n             upstream_status = self._upstream_status(task.id, upstream_table)\n",
          "files_name_in_blame_commit": [
            "scheduler.py",
            "central_planner_test.py",
            "rpc_test.py",
            "scheduler_test.py"
          ]
        }
      }
    }
  }
}